{"ast":null,"code":"import _classCallCheck from \"C:/Users/Nayyu/Desktop/skibidai-public-build/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Nayyu/Desktop/skibidai-public-build/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { Matrix4, Vector3, Box3, DirectionalLight, MathUtils, ShaderChunk, Vector2 } from \"three\";\nimport { CSMFrustum } from \"./CSMFrustum.js\";\nimport { CSMShader } from \"./CSMShader.js\";\nvar _cameraToLightMatrix = new Matrix4();\nvar _lightSpaceFrustum = new CSMFrustum();\nvar _center = new Vector3();\nvar _bbox = new Box3();\nvar _uniformArray = [];\nvar _logArray = [];\nvar CSM = /*#__PURE__*/function () {\n  function CSM(data) {\n    _classCallCheck(this, CSM);\n    data = data || {};\n    this.camera = data.camera;\n    this.parent = data.parent;\n    this.cascades = data.cascades || 3;\n    this.maxFar = data.maxFar || 1e5;\n    this.mode = data.mode || \"practical\";\n    this.shadowMapSize = data.shadowMapSize || 2048;\n    this.shadowBias = data.shadowBias || 1e-6;\n    this.lightDirection = data.lightDirection || new Vector3(1, -1, 1).normalize();\n    this.lightIntensity = data.lightIntensity || 1;\n    this.lightNear = data.lightNear || 1;\n    this.lightFar = data.lightFar || 2e3;\n    this.lightMargin = data.lightMargin || 200;\n    this.customSplitsCallback = data.customSplitsCallback;\n    this.fade = false;\n    this.mainFrustum = new CSMFrustum();\n    this.frustums = [];\n    this.breaks = [];\n    this.lights = [];\n    this.shaders = /* @__PURE__ */new Map();\n    this.createLights();\n    this.updateFrustums();\n    this.injectInclude();\n  }\n  _createClass(CSM, [{\n    key: \"createLights\",\n    value: function createLights() {\n      for (var i = 0; i < this.cascades; i++) {\n        var light = new DirectionalLight(16777215, this.lightIntensity);\n        light.castShadow = true;\n        light.shadow.mapSize.width = this.shadowMapSize;\n        light.shadow.mapSize.height = this.shadowMapSize;\n        light.shadow.camera.near = this.lightNear;\n        light.shadow.camera.far = this.lightFar;\n        light.shadow.bias = this.shadowBias;\n        this.parent.add(light);\n        this.parent.add(light.target);\n        this.lights.push(light);\n      }\n    }\n  }, {\n    key: \"initCascades\",\n    value: function initCascades() {\n      var camera = this.camera;\n      camera.updateProjectionMatrix();\n      this.mainFrustum.setFromProjectionMatrix(camera.projectionMatrix, this.maxFar);\n      this.mainFrustum.split(this.breaks, this.frustums);\n    }\n  }, {\n    key: \"updateShadowBounds\",\n    value: function updateShadowBounds() {\n      var frustums = this.frustums;\n      for (var i = 0; i < frustums.length; i++) {\n        var light = this.lights[i];\n        var shadowCam = light.shadow.camera;\n        var frustum = this.frustums[i];\n        var nearVerts = frustum.vertices.near;\n        var farVerts = frustum.vertices.far;\n        var point1 = farVerts[0];\n        var point2 = void 0;\n        if (point1.distanceTo(farVerts[2]) > point1.distanceTo(nearVerts[2])) {\n          point2 = farVerts[2];\n        } else {\n          point2 = nearVerts[2];\n        }\n        var squaredBBWidth = point1.distanceTo(point2);\n        if (this.fade) {\n          var camera = this.camera;\n          var far = Math.max(camera.far, this.maxFar);\n          var linearDepth = frustum.vertices.far[0].z / (far - camera.near);\n          var margin = 0.25 * Math.pow(linearDepth, 2) * (far - camera.near);\n          squaredBBWidth += margin;\n        }\n        shadowCam.left = -squaredBBWidth / 2;\n        shadowCam.right = squaredBBWidth / 2;\n        shadowCam.top = squaredBBWidth / 2;\n        shadowCam.bottom = -squaredBBWidth / 2;\n        shadowCam.updateProjectionMatrix();\n      }\n    }\n  }, {\n    key: \"getBreaks\",\n    value: function getBreaks() {\n      var camera = this.camera;\n      var far = Math.min(camera.far, this.maxFar);\n      this.breaks.length = 0;\n      switch (this.mode) {\n        case \"uniform\":\n          uniformSplit(this.cascades, camera.near, far, this.breaks);\n          break;\n        case \"logarithmic\":\n          logarithmicSplit(this.cascades, camera.near, far, this.breaks);\n          break;\n        case \"practical\":\n          practicalSplit(this.cascades, camera.near, far, 0.5, this.breaks);\n          break;\n        case \"custom\":\n          if (this.customSplitsCallback === void 0) console.error(\"CSM: Custom split scheme callback not defined.\");\n          this.customSplitsCallback(this.cascades, camera.near, far, this.breaks);\n          break;\n      }\n      function uniformSplit(amount, near, far2, target) {\n        for (var i = 1; i < amount; i++) {\n          target.push((near + (far2 - near) * i / amount) / far2);\n        }\n        target.push(1);\n      }\n      function logarithmicSplit(amount, near, far2, target) {\n        for (var i = 1; i < amount; i++) {\n          target.push(near * Math.pow(far2 / near, i / amount) / far2);\n        }\n        target.push(1);\n      }\n      function practicalSplit(amount, near, far2, lambda, target) {\n        _uniformArray.length = 0;\n        _logArray.length = 0;\n        logarithmicSplit(amount, near, far2, _logArray);\n        uniformSplit(amount, near, far2, _uniformArray);\n        for (var i = 1; i < amount; i++) {\n          target.push(MathUtils.lerp(_uniformArray[i - 1], _logArray[i - 1], lambda));\n        }\n        target.push(1);\n      }\n    }\n  }, {\n    key: \"update\",\n    value: function update() {\n      var camera = this.camera;\n      var frustums = this.frustums;\n      for (var i = 0; i < frustums.length; i++) {\n        var light = this.lights[i];\n        var shadowCam = light.shadow.camera;\n        var texelWidth = (shadowCam.right - shadowCam.left) / this.shadowMapSize;\n        var texelHeight = (shadowCam.top - shadowCam.bottom) / this.shadowMapSize;\n        light.shadow.camera.updateMatrixWorld(true);\n        _cameraToLightMatrix.multiplyMatrices(light.shadow.camera.matrixWorldInverse, camera.matrixWorld);\n        frustums[i].toSpace(_cameraToLightMatrix, _lightSpaceFrustum);\n        var nearVerts = _lightSpaceFrustum.vertices.near;\n        var farVerts = _lightSpaceFrustum.vertices.far;\n        _bbox.makeEmpty();\n        for (var j = 0; j < 4; j++) {\n          _bbox.expandByPoint(nearVerts[j]);\n          _bbox.expandByPoint(farVerts[j]);\n        }\n        _bbox.getCenter(_center);\n        _center.z = _bbox.max.z + this.lightMargin;\n        _center.x = Math.floor(_center.x / texelWidth) * texelWidth;\n        _center.y = Math.floor(_center.y / texelHeight) * texelHeight;\n        _center.applyMatrix4(light.shadow.camera.matrixWorld);\n        light.position.copy(_center);\n        light.target.position.copy(_center);\n        light.target.position.x += this.lightDirection.x;\n        light.target.position.y += this.lightDirection.y;\n        light.target.position.z += this.lightDirection.z;\n      }\n    }\n  }, {\n    key: \"injectInclude\",\n    value: function injectInclude() {\n      ShaderChunk.lights_fragment_begin = CSMShader.lights_fragment_begin;\n      ShaderChunk.lights_pars_begin = CSMShader.lights_pars_begin;\n    }\n  }, {\n    key: \"setupMaterial\",\n    value: function setupMaterial(material) {\n      material.defines = material.defines || {};\n      material.defines.USE_CSM = 1;\n      material.defines.CSM_CASCADES = this.cascades;\n      if (this.fade) {\n        material.defines.CSM_FADE = \"\";\n      }\n      var breaksVec2 = [];\n      var scope = this;\n      var shaders = this.shaders;\n      material.onBeforeCompile = function (shader) {\n        var far = Math.min(scope.camera.far, scope.maxFar);\n        scope.getExtendedBreaks(breaksVec2);\n        shader.uniforms.CSM_cascades = {\n          value: breaksVec2\n        };\n        shader.uniforms.cameraNear = {\n          value: scope.camera.near\n        };\n        shader.uniforms.shadowFar = {\n          value: far\n        };\n        shaders.set(material, shader);\n      };\n      shaders.set(material, null);\n    }\n  }, {\n    key: \"updateUniforms\",\n    value: function updateUniforms() {\n      var far = Math.min(this.camera.far, this.maxFar);\n      var shaders = this.shaders;\n      shaders.forEach(function (shader, material) {\n        if (shader !== null) {\n          var uniforms = shader.uniforms;\n          this.getExtendedBreaks(uniforms.CSM_cascades.value);\n          uniforms.cameraNear.value = this.camera.near;\n          uniforms.shadowFar.value = far;\n        }\n        if (!this.fade && \"CSM_FADE\" in material.defines) {\n          delete material.defines.CSM_FADE;\n          material.needsUpdate = true;\n        } else if (this.fade && !(\"CSM_FADE\" in material.defines)) {\n          material.defines.CSM_FADE = \"\";\n          material.needsUpdate = true;\n        }\n      }, this);\n    }\n  }, {\n    key: \"getExtendedBreaks\",\n    value: function getExtendedBreaks(target) {\n      while (target.length < this.breaks.length) {\n        target.push(new Vector2());\n      }\n      target.length = this.breaks.length;\n      for (var i = 0; i < this.cascades; i++) {\n        var amount = this.breaks[i];\n        var prev = this.breaks[i - 1] || 0;\n        target[i].x = prev;\n        target[i].y = amount;\n      }\n    }\n  }, {\n    key: \"updateFrustums\",\n    value: function updateFrustums() {\n      this.getBreaks();\n      this.initCascades();\n      this.updateShadowBounds();\n      this.updateUniforms();\n    }\n  }, {\n    key: \"remove\",\n    value: function remove() {\n      for (var i = 0; i < this.lights.length; i++) {\n        this.parent.remove(this.lights[i]);\n      }\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      var shaders = this.shaders;\n      shaders.forEach(function (shader, material) {\n        delete material.onBeforeCompile;\n        delete material.defines.USE_CSM;\n        delete material.defines.CSM_CASCADES;\n        delete material.defines.CSM_FADE;\n        if (shader !== null) {\n          delete shader.uniforms.CSM_cascades;\n          delete shader.uniforms.cameraNear;\n          delete shader.uniforms.shadowFar;\n        }\n        material.needsUpdate = true;\n      });\n      shaders.clear();\n    }\n  }]);\n  return CSM;\n}();\nexport { CSM };","map":{"version":3,"names":["_cameraToLightMatrix","Matrix4","_lightSpaceFrustum","CSMFrustum","_center","Vector3","_bbox","Box3","_uniformArray","_logArray","CSM","data","_classCallCheck","camera","parent","cascades","maxFar","mode","shadowMapSize","shadowBias","lightDirection","normalize","lightIntensity","lightNear","lightFar","lightMargin","customSplitsCallback","fade","mainFrustum","frustums","breaks","lights","shaders","Map","createLights","updateFrustums","injectInclude","_createClass","key","value","i","light","DirectionalLight","castShadow","shadow","mapSize","width","height","near","far","bias","add","target","push","initCascades","updateProjectionMatrix","setFromProjectionMatrix","projectionMatrix","split","updateShadowBounds","length","shadowCam","frustum","nearVerts","vertices","farVerts","point1","point2","distanceTo","squaredBBWidth","Math","max","linearDepth","z","margin","pow","left","right","top","bottom","getBreaks","min","uniformSplit","logarithmicSplit","practicalSplit","console","error","amount","far2","lambda","MathUtils","lerp","update","texelWidth","texelHeight","updateMatrixWorld","multiplyMatrices","matrixWorldInverse","matrixWorld","toSpace","makeEmpty","j","expandByPoint","getCenter","x","floor","y","applyMatrix4","position","copy","ShaderChunk","lights_fragment_begin","CSMShader","lights_pars_begin","setupMaterial","material","defines","USE_CSM","CSM_CASCADES","CSM_FADE","breaksVec2","scope","onBeforeCompile","shader","getExtendedBreaks","uniforms","CSM_cascades","cameraNear","shadowFar","set","updateUniforms","forEach","needsUpdate","Vector2","prev","remove","dispose","clear"],"sources":["C:\\Users\\Nayyu\\Desktop\\skibidai-public-build\\node_modules\\src\\csm\\CSM.js"],"sourcesContent":["import { Vector2, Vector3, DirectionalLight, MathUtils, ShaderChunk, Matrix4, Box3 } from 'three'\nimport { CSMFrustum } from './CSMFrustum'\nimport { CSMShader } from './CSMShader'\n\nconst _cameraToLightMatrix = new Matrix4()\nconst _lightSpaceFrustum = new CSMFrustum()\nconst _center = new Vector3()\nconst _bbox = new Box3()\nconst _uniformArray = []\nconst _logArray = []\n\nexport class CSM {\n  constructor(data) {\n    data = data || {}\n\n    this.camera = data.camera\n    this.parent = data.parent\n    this.cascades = data.cascades || 3\n    this.maxFar = data.maxFar || 100000\n    this.mode = data.mode || 'practical'\n    this.shadowMapSize = data.shadowMapSize || 2048\n    this.shadowBias = data.shadowBias || 0.000001\n    this.lightDirection = data.lightDirection || new Vector3(1, -1, 1).normalize()\n    this.lightIntensity = data.lightIntensity || 1\n    this.lightNear = data.lightNear || 1\n    this.lightFar = data.lightFar || 2000\n    this.lightMargin = data.lightMargin || 200\n    this.customSplitsCallback = data.customSplitsCallback\n    this.fade = false\n    this.mainFrustum = new CSMFrustum()\n    this.frustums = []\n    this.breaks = []\n\n    this.lights = []\n    this.shaders = new Map()\n\n    this.createLights()\n    this.updateFrustums()\n    this.injectInclude()\n  }\n\n  createLights() {\n    for (let i = 0; i < this.cascades; i++) {\n      const light = new DirectionalLight(0xffffff, this.lightIntensity)\n      light.castShadow = true\n      light.shadow.mapSize.width = this.shadowMapSize\n      light.shadow.mapSize.height = this.shadowMapSize\n\n      light.shadow.camera.near = this.lightNear\n      light.shadow.camera.far = this.lightFar\n      light.shadow.bias = this.shadowBias\n\n      this.parent.add(light)\n      this.parent.add(light.target)\n      this.lights.push(light)\n    }\n  }\n\n  initCascades() {\n    const camera = this.camera\n    camera.updateProjectionMatrix()\n    this.mainFrustum.setFromProjectionMatrix(camera.projectionMatrix, this.maxFar)\n    this.mainFrustum.split(this.breaks, this.frustums)\n  }\n\n  updateShadowBounds() {\n    const frustums = this.frustums\n    for (let i = 0; i < frustums.length; i++) {\n      const light = this.lights[i]\n      const shadowCam = light.shadow.camera\n      const frustum = this.frustums[i]\n\n      // Get the two points that represent that furthest points on the frustum assuming\n      // that's either the diagonal across the far plane or the diagonal across the whole\n      // frustum itself.\n      const nearVerts = frustum.vertices.near\n      const farVerts = frustum.vertices.far\n      const point1 = farVerts[0]\n      let point2\n      if (point1.distanceTo(farVerts[2]) > point1.distanceTo(nearVerts[2])) {\n        point2 = farVerts[2]\n      } else {\n        point2 = nearVerts[2]\n      }\n\n      let squaredBBWidth = point1.distanceTo(point2)\n      if (this.fade) {\n        // expand the shadow extents by the fade margin if fade is enabled.\n        const camera = this.camera\n        const far = Math.max(camera.far, this.maxFar)\n        const linearDepth = frustum.vertices.far[0].z / (far - camera.near)\n        const margin = 0.25 * Math.pow(linearDepth, 2.0) * (far - camera.near)\n\n        squaredBBWidth += margin\n      }\n\n      shadowCam.left = -squaredBBWidth / 2\n      shadowCam.right = squaredBBWidth / 2\n      shadowCam.top = squaredBBWidth / 2\n      shadowCam.bottom = -squaredBBWidth / 2\n      shadowCam.updateProjectionMatrix()\n    }\n  }\n\n  getBreaks() {\n    const camera = this.camera\n    const far = Math.min(camera.far, this.maxFar)\n    this.breaks.length = 0\n\n    switch (this.mode) {\n      case 'uniform':\n        uniformSplit(this.cascades, camera.near, far, this.breaks)\n        break\n      case 'logarithmic':\n        logarithmicSplit(this.cascades, camera.near, far, this.breaks)\n        break\n      case 'practical':\n        practicalSplit(this.cascades, camera.near, far, 0.5, this.breaks)\n        break\n      case 'custom':\n        if (this.customSplitsCallback === undefined) console.error('CSM: Custom split scheme callback not defined.')\n        this.customSplitsCallback(this.cascades, camera.near, far, this.breaks)\n        break\n    }\n\n    function uniformSplit(amount, near, far, target) {\n      for (let i = 1; i < amount; i++) {\n        target.push((near + ((far - near) * i) / amount) / far)\n      }\n\n      target.push(1)\n    }\n\n    function logarithmicSplit(amount, near, far, target) {\n      for (let i = 1; i < amount; i++) {\n        target.push((near * (far / near) ** (i / amount)) / far)\n      }\n\n      target.push(1)\n    }\n\n    function practicalSplit(amount, near, far, lambda, target) {\n      _uniformArray.length = 0\n      _logArray.length = 0\n      logarithmicSplit(amount, near, far, _logArray)\n      uniformSplit(amount, near, far, _uniformArray)\n\n      for (let i = 1; i < amount; i++) {\n        target.push(MathUtils.lerp(_uniformArray[i - 1], _logArray[i - 1], lambda))\n      }\n\n      target.push(1)\n    }\n  }\n\n  update() {\n    const camera = this.camera\n    const frustums = this.frustums\n    for (let i = 0; i < frustums.length; i++) {\n      const light = this.lights[i]\n      const shadowCam = light.shadow.camera\n      const texelWidth = (shadowCam.right - shadowCam.left) / this.shadowMapSize\n      const texelHeight = (shadowCam.top - shadowCam.bottom) / this.shadowMapSize\n      light.shadow.camera.updateMatrixWorld(true)\n      _cameraToLightMatrix.multiplyMatrices(light.shadow.camera.matrixWorldInverse, camera.matrixWorld)\n      frustums[i].toSpace(_cameraToLightMatrix, _lightSpaceFrustum)\n\n      const nearVerts = _lightSpaceFrustum.vertices.near\n      const farVerts = _lightSpaceFrustum.vertices.far\n      _bbox.makeEmpty()\n      for (let j = 0; j < 4; j++) {\n        _bbox.expandByPoint(nearVerts[j])\n        _bbox.expandByPoint(farVerts[j])\n      }\n\n      _bbox.getCenter(_center)\n      _center.z = _bbox.max.z + this.lightMargin\n      _center.x = Math.floor(_center.x / texelWidth) * texelWidth\n      _center.y = Math.floor(_center.y / texelHeight) * texelHeight\n      _center.applyMatrix4(light.shadow.camera.matrixWorld)\n\n      light.position.copy(_center)\n      light.target.position.copy(_center)\n\n      light.target.position.x += this.lightDirection.x\n      light.target.position.y += this.lightDirection.y\n      light.target.position.z += this.lightDirection.z\n    }\n  }\n\n  injectInclude() {\n    ShaderChunk.lights_fragment_begin = CSMShader.lights_fragment_begin\n    ShaderChunk.lights_pars_begin = CSMShader.lights_pars_begin\n  }\n\n  setupMaterial(material) {\n    material.defines = material.defines || {}\n    material.defines.USE_CSM = 1\n    material.defines.CSM_CASCADES = this.cascades\n\n    if (this.fade) {\n      material.defines.CSM_FADE = ''\n    }\n\n    const breaksVec2 = []\n    const scope = this\n    const shaders = this.shaders\n\n    material.onBeforeCompile = function (shader) {\n      const far = Math.min(scope.camera.far, scope.maxFar)\n      scope.getExtendedBreaks(breaksVec2)\n\n      shader.uniforms.CSM_cascades = { value: breaksVec2 }\n      shader.uniforms.cameraNear = { value: scope.camera.near }\n      shader.uniforms.shadowFar = { value: far }\n\n      shaders.set(material, shader)\n    }\n\n    shaders.set(material, null)\n  }\n\n  updateUniforms() {\n    const far = Math.min(this.camera.far, this.maxFar)\n    const shaders = this.shaders\n\n    shaders.forEach(function (shader, material) {\n      if (shader !== null) {\n        const uniforms = shader.uniforms\n        this.getExtendedBreaks(uniforms.CSM_cascades.value)\n        uniforms.cameraNear.value = this.camera.near\n        uniforms.shadowFar.value = far\n      }\n\n      if (!this.fade && 'CSM_FADE' in material.defines) {\n        delete material.defines.CSM_FADE\n        material.needsUpdate = true\n      } else if (this.fade && !('CSM_FADE' in material.defines)) {\n        material.defines.CSM_FADE = ''\n        material.needsUpdate = true\n      }\n    }, this)\n  }\n\n  getExtendedBreaks(target) {\n    while (target.length < this.breaks.length) {\n      target.push(new Vector2())\n    }\n\n    target.length = this.breaks.length\n\n    for (let i = 0; i < this.cascades; i++) {\n      const amount = this.breaks[i]\n      const prev = this.breaks[i - 1] || 0\n      target[i].x = prev\n      target[i].y = amount\n    }\n  }\n\n  updateFrustums() {\n    this.getBreaks()\n    this.initCascades()\n    this.updateShadowBounds()\n    this.updateUniforms()\n  }\n\n  remove() {\n    for (let i = 0; i < this.lights.length; i++) {\n      this.parent.remove(this.lights[i])\n    }\n  }\n\n  dispose() {\n    const shaders = this.shaders\n    shaders.forEach(function (shader, material) {\n      delete material.onBeforeCompile\n      delete material.defines.USE_CSM\n      delete material.defines.CSM_CASCADES\n      delete material.defines.CSM_FADE\n\n      if (shader !== null) {\n        delete shader.uniforms.CSM_cascades\n        delete shader.uniforms.cameraNear\n        delete shader.uniforms.shadowFar\n      }\n\n      material.needsUpdate = true\n    })\n    shaders.clear()\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}