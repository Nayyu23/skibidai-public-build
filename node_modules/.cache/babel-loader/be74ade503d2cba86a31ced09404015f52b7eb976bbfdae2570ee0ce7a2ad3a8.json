{"ast":null,"code":"import _classCallCheck from \"C:/Users/Nayyu/Desktop/skibidai-public-build/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Nayyu/Desktop/skibidai-public-build/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { Object3D, Box3, MathUtils, MeshLambertMaterial, TextureLoader, UVMapping } from \"three\";\nimport { MD2Loader } from \"../loaders/MD2Loader.js\";\nimport { MorphBlendMesh } from \"./MorphBlendMesh.js\";\nvar MD2CharacterComplex = /*#__PURE__*/function () {\n  function MD2CharacterComplex() {\n    _classCallCheck(this, MD2CharacterComplex);\n    this.scale = 1;\n    this.animationFPS = 6;\n    this.transitionFrames = 15;\n    this.maxSpeed = 275;\n    this.maxReverseSpeed = -275;\n    this.frontAcceleration = 600;\n    this.backAcceleration = 600;\n    this.frontDecceleration = 600;\n    this.angularSpeed = 2.5;\n    this.root = new Object3D();\n    this.meshBody = null;\n    this.meshWeapon = null;\n    this.controls = null;\n    this.skinsBody = [];\n    this.skinsWeapon = [];\n    this.weapons = [];\n    this.currentSkin = void 0;\n    this.onLoadComplete = function () {};\n    this.meshes = [];\n    this.animations = {};\n    this.loadCounter = 0;\n    this.speed = 0;\n    this.bodyOrientation = 0;\n    this.walkSpeed = this.maxSpeed;\n    this.crouchSpeed = this.maxSpeed * 0.5;\n    this.activeAnimation = null;\n    this.oldAnimation = null;\n  }\n  _createClass(MD2CharacterComplex, [{\n    key: \"enableShadows\",\n    value: function enableShadows(enable) {\n      for (var i = 0; i < this.meshes.length; i++) {\n        this.meshes[i].castShadow = enable;\n        this.meshes[i].receiveShadow = enable;\n      }\n    }\n  }, {\n    key: \"setVisible\",\n    value: function setVisible(enable) {\n      for (var i = 0; i < this.meshes.length; i++) {\n        this.meshes[i].visible = enable;\n        this.meshes[i].visible = enable;\n      }\n    }\n  }, {\n    key: \"shareParts\",\n    value: function shareParts(original) {\n      this.animations = original.animations;\n      this.walkSpeed = original.walkSpeed;\n      this.crouchSpeed = original.crouchSpeed;\n      this.skinsBody = original.skinsBody;\n      this.skinsWeapon = original.skinsWeapon;\n      var mesh = this._createPart(original.meshBody.geometry, this.skinsBody[0]);\n      mesh.scale.set(this.scale, this.scale, this.scale);\n      this.root.position.y = original.root.position.y;\n      this.root.add(mesh);\n      this.meshBody = mesh;\n      this.meshes.push(mesh);\n      for (var i = 0; i < original.weapons.length; i++) {\n        var meshWeapon = this._createPart(original.weapons[i].geometry, this.skinsWeapon[i]);\n        meshWeapon.scale.set(this.scale, this.scale, this.scale);\n        meshWeapon.visible = false;\n        meshWeapon.name = original.weapons[i].name;\n        this.root.add(meshWeapon);\n        this.weapons[i] = meshWeapon;\n        this.meshWeapon = meshWeapon;\n        this.meshes.push(meshWeapon);\n      }\n    }\n  }, {\n    key: \"loadParts\",\n    value: function loadParts(config) {\n      var scope = this;\n      function loadTextures(baseUrl, textureUrls) {\n        var textureLoader = new TextureLoader();\n        var textures = [];\n        for (var i = 0; i < textureUrls.length; i++) {\n          textures[i] = textureLoader.load(baseUrl + textureUrls[i], checkLoadingComplete);\n          textures[i].mapping = UVMapping;\n          textures[i].name = textureUrls[i];\n          if (\"colorSpace\" in textures[i]) textures[i].colorSpace = \"srgb\";else textures[i].encoding = 3001;\n        }\n        return textures;\n      }\n      function checkLoadingComplete() {\n        scope.loadCounter -= 1;\n        if (scope.loadCounter === 0) scope.onLoadComplete();\n      }\n      this.animations = config.animations;\n      this.walkSpeed = config.walkSpeed;\n      this.crouchSpeed = config.crouchSpeed;\n      this.loadCounter = config.weapons.length * 2 + config.skins.length + 1;\n      var weaponsTextures = [];\n      for (var i = 0; i < config.weapons.length; i++) weaponsTextures[i] = config.weapons[i][1];\n      this.skinsBody = loadTextures(config.baseUrl + \"skins/\", config.skins);\n      this.skinsWeapon = loadTextures(config.baseUrl + \"skins/\", weaponsTextures);\n      var loader = new MD2Loader();\n      loader.load(config.baseUrl + config.body, function (geo) {\n        var boundingBox = new Box3();\n        boundingBox.setFromBufferAttribute(geo.attributes.position);\n        scope.root.position.y = -scope.scale * boundingBox.min.y;\n        var mesh = scope._createPart(geo, scope.skinsBody[0]);\n        mesh.scale.set(scope.scale, scope.scale, scope.scale);\n        scope.root.add(mesh);\n        scope.meshBody = mesh;\n        scope.meshes.push(mesh);\n        checkLoadingComplete();\n      });\n      var generateCallback = function generateCallback(index, name) {\n        return function (geo) {\n          var mesh = scope._createPart(geo, scope.skinsWeapon[index]);\n          mesh.scale.set(scope.scale, scope.scale, scope.scale);\n          mesh.visible = false;\n          mesh.name = name;\n          scope.root.add(mesh);\n          scope.weapons[index] = mesh;\n          scope.meshWeapon = mesh;\n          scope.meshes.push(mesh);\n          checkLoadingComplete();\n        };\n      };\n      for (var _i = 0; _i < config.weapons.length; _i++) {\n        loader.load(config.baseUrl + config.weapons[_i][0], generateCallback(_i, config.weapons[_i][0]));\n      }\n    }\n  }, {\n    key: \"setPlaybackRate\",\n    value: function setPlaybackRate(rate) {\n      if (this.meshBody) this.meshBody.duration = this.meshBody.baseDuration / rate;\n      if (this.meshWeapon) this.meshWeapon.duration = this.meshWeapon.baseDuration / rate;\n    }\n  }, {\n    key: \"setWireframe\",\n    value: function setWireframe(wireframeEnabled) {\n      if (wireframeEnabled) {\n        if (this.meshBody) this.meshBody.material = this.meshBody.materialWireframe;\n        if (this.meshWeapon) this.meshWeapon.material = this.meshWeapon.materialWireframe;\n      } else {\n        if (this.meshBody) this.meshBody.material = this.meshBody.materialTexture;\n        if (this.meshWeapon) this.meshWeapon.material = this.meshWeapon.materialTexture;\n      }\n    }\n  }, {\n    key: \"setSkin\",\n    value: function setSkin(index) {\n      if (this.meshBody && this.meshBody.material.wireframe === false) {\n        this.meshBody.material.map = this.skinsBody[index];\n        this.currentSkin = index;\n      }\n    }\n  }, {\n    key: \"setWeapon\",\n    value: function setWeapon(index) {\n      for (var i = 0; i < this.weapons.length; i++) this.weapons[i].visible = false;\n      var activeWeapon = this.weapons[index];\n      if (activeWeapon) {\n        activeWeapon.visible = true;\n        this.meshWeapon = activeWeapon;\n        if (this.activeAnimation) {\n          activeWeapon.playAnimation(this.activeAnimation);\n          this.meshWeapon.setAnimationTime(this.activeAnimation, this.meshBody.getAnimationTime(this.activeAnimation));\n        }\n      }\n    }\n  }, {\n    key: \"setAnimation\",\n    value: function setAnimation(animationName) {\n      if (animationName === this.activeAnimation || !animationName) return;\n      if (this.meshBody) {\n        this.meshBody.setAnimationWeight(animationName, 0);\n        this.meshBody.playAnimation(animationName);\n        this.oldAnimation = this.activeAnimation;\n        this.activeAnimation = animationName;\n        this.blendCounter = this.transitionFrames;\n      }\n      if (this.meshWeapon) {\n        this.meshWeapon.setAnimationWeight(animationName, 0);\n        this.meshWeapon.playAnimation(animationName);\n      }\n    }\n  }, {\n    key: \"update\",\n    value: function update(delta) {\n      if (this.controls) this.updateMovementModel(delta);\n      if (this.animations) {\n        this.updateBehaviors();\n        this.updateAnimations(delta);\n      }\n    }\n  }, {\n    key: \"updateAnimations\",\n    value: function updateAnimations(delta) {\n      var mix = 1;\n      if (this.blendCounter > 0) {\n        mix = (this.transitionFrames - this.blendCounter) / this.transitionFrames;\n        this.blendCounter -= 1;\n      }\n      if (this.meshBody) {\n        this.meshBody.update(delta);\n        this.meshBody.setAnimationWeight(this.activeAnimation, mix);\n        this.meshBody.setAnimationWeight(this.oldAnimation, 1 - mix);\n      }\n      if (this.meshWeapon) {\n        this.meshWeapon.update(delta);\n        this.meshWeapon.setAnimationWeight(this.activeAnimation, mix);\n        this.meshWeapon.setAnimationWeight(this.oldAnimation, 1 - mix);\n      }\n    }\n  }, {\n    key: \"updateBehaviors\",\n    value: function updateBehaviors() {\n      var controls = this.controls;\n      var animations = this.animations;\n      var moveAnimation, idleAnimation;\n      if (controls.crouch) {\n        moveAnimation = animations[\"crouchMove\"];\n        idleAnimation = animations[\"crouchIdle\"];\n      } else {\n        moveAnimation = animations[\"move\"];\n        idleAnimation = animations[\"idle\"];\n      }\n      if (controls.jump) {\n        moveAnimation = animations[\"jump\"];\n        idleAnimation = animations[\"jump\"];\n      }\n      if (controls.attack) {\n        if (controls.crouch) {\n          moveAnimation = animations[\"crouchAttack\"];\n          idleAnimation = animations[\"crouchAttack\"];\n        } else {\n          moveAnimation = animations[\"attack\"];\n          idleAnimation = animations[\"attack\"];\n        }\n      }\n      if (controls.moveForward || controls.moveBackward || controls.moveLeft || controls.moveRight) {\n        if (this.activeAnimation !== moveAnimation) {\n          this.setAnimation(moveAnimation);\n        }\n      }\n      if (Math.abs(this.speed) < 0.2 * this.maxSpeed && !(controls.moveLeft || controls.moveRight || controls.moveForward || controls.moveBackward)) {\n        if (this.activeAnimation !== idleAnimation) {\n          this.setAnimation(idleAnimation);\n        }\n      }\n      if (controls.moveForward) {\n        if (this.meshBody) {\n          this.meshBody.setAnimationDirectionForward(this.activeAnimation);\n          this.meshBody.setAnimationDirectionForward(this.oldAnimation);\n        }\n        if (this.meshWeapon) {\n          this.meshWeapon.setAnimationDirectionForward(this.activeAnimation);\n          this.meshWeapon.setAnimationDirectionForward(this.oldAnimation);\n        }\n      }\n      if (controls.moveBackward) {\n        if (this.meshBody) {\n          this.meshBody.setAnimationDirectionBackward(this.activeAnimation);\n          this.meshBody.setAnimationDirectionBackward(this.oldAnimation);\n        }\n        if (this.meshWeapon) {\n          this.meshWeapon.setAnimationDirectionBackward(this.activeAnimation);\n          this.meshWeapon.setAnimationDirectionBackward(this.oldAnimation);\n        }\n      }\n    }\n  }, {\n    key: \"updateMovementModel\",\n    value: function updateMovementModel(delta) {\n      function exponentialEaseOut(k) {\n        return k === 1 ? 1 : -Math.pow(2, -10 * k) + 1;\n      }\n      var controls = this.controls;\n      if (controls.crouch) this.maxSpeed = this.crouchSpeed;else this.maxSpeed = this.walkSpeed;\n      this.maxReverseSpeed = -this.maxSpeed;\n      if (controls.moveForward) this.speed = MathUtils.clamp(this.speed + delta * this.frontAcceleration, this.maxReverseSpeed, this.maxSpeed);\n      if (controls.moveBackward) this.speed = MathUtils.clamp(this.speed - delta * this.backAcceleration, this.maxReverseSpeed, this.maxSpeed);\n      var dir = 1;\n      if (controls.moveLeft) {\n        this.bodyOrientation += delta * this.angularSpeed;\n        this.speed = MathUtils.clamp(this.speed + dir * delta * this.frontAcceleration, this.maxReverseSpeed, this.maxSpeed);\n      }\n      if (controls.moveRight) {\n        this.bodyOrientation -= delta * this.angularSpeed;\n        this.speed = MathUtils.clamp(this.speed + dir * delta * this.frontAcceleration, this.maxReverseSpeed, this.maxSpeed);\n      }\n      if (!(controls.moveForward || controls.moveBackward)) {\n        if (this.speed > 0) {\n          var k = exponentialEaseOut(this.speed / this.maxSpeed);\n          this.speed = MathUtils.clamp(this.speed - k * delta * this.frontDecceleration, 0, this.maxSpeed);\n        } else {\n          var _k = exponentialEaseOut(this.speed / this.maxReverseSpeed);\n          this.speed = MathUtils.clamp(this.speed + _k * delta * this.backAcceleration, this.maxReverseSpeed, 0);\n        }\n      }\n      var forwardDelta = this.speed * delta;\n      this.root.position.x += Math.sin(this.bodyOrientation) * forwardDelta;\n      this.root.position.z += Math.cos(this.bodyOrientation) * forwardDelta;\n      this.root.rotation.y = this.bodyOrientation;\n    }\n    // internal\n  }, {\n    key: \"_createPart\",\n    value: function _createPart(geometry, skinMap) {\n      var materialWireframe = new MeshLambertMaterial({\n        color: 16755200,\n        wireframe: true,\n        morphTargets: true,\n        morphNormals: true\n      });\n      var materialTexture = new MeshLambertMaterial({\n        color: 16777215,\n        wireframe: false,\n        map: skinMap,\n        morphTargets: true,\n        morphNormals: true\n      });\n      var mesh = new MorphBlendMesh(geometry, materialTexture);\n      mesh.rotation.y = -Math.PI / 2;\n      mesh.materialTexture = materialTexture;\n      mesh.materialWireframe = materialWireframe;\n      mesh.autoCreateAnimations(this.animationFPS);\n      return mesh;\n    }\n  }]);\n  return MD2CharacterComplex;\n}();\nexport { MD2CharacterComplex };","map":{"version":3,"names":["MD2CharacterComplex","_classCallCheck","scale","animationFPS","transitionFrames","maxSpeed","maxReverseSpeed","frontAcceleration","backAcceleration","frontDecceleration","angularSpeed","root","Object3D","meshBody","meshWeapon","controls","skinsBody","skinsWeapon","weapons","currentSkin","onLoadComplete","meshes","animations","loadCounter","speed","bodyOrientation","walkSpeed","crouchSpeed","activeAnimation","oldAnimation","_createClass","key","value","enableShadows","enable","i","length","castShadow","receiveShadow","setVisible","visible","shareParts","original","mesh","_createPart","geometry","set","position","y","add","push","name","loadParts","config","scope","loadTextures","baseUrl","textureUrls","textureLoader","TextureLoader","textures","load","checkLoadingComplete","mapping","UVMapping","colorSpace","encoding","skins","weaponsTextures","loader","MD2Loader","body","geo","boundingBox","Box3","setFromBufferAttribute","attributes","min","generateCallback","index","setPlaybackRate","rate","duration","baseDuration","setWireframe","wireframeEnabled","material","materialWireframe","materialTexture","setSkin","wireframe","map","setWeapon","activeWeapon","playAnimation","setAnimationTime","getAnimationTime","setAnimation","animationName","setAnimationWeight","blendCounter","update","delta","updateMovementModel","updateBehaviors","updateAnimations","mix","moveAnimation","idleAnimation","crouch","jump","attack","moveForward","moveBackward","moveLeft","moveRight","Math","abs","setAnimationDirectionForward","setAnimationDirectionBackward","exponentialEaseOut","k","pow","MathUtils","clamp","dir","forwardDelta","x","sin","z","cos","rotation","skinMap","MeshLambertMaterial","color","morphTargets","morphNormals","MorphBlendMesh","PI","autoCreateAnimations"],"sources":["C:\\Users\\Nayyu\\Desktop\\skibidai-public-build\\node_modules\\src\\misc\\MD2CharacterComplex.js"],"sourcesContent":["import { Box3, MathUtils, MeshLambertMaterial, Object3D, TextureLoader, UVMapping } from 'three'\nimport { MD2Loader } from '../loaders/MD2Loader'\nimport { MorphBlendMesh } from '../misc/MorphBlendMesh'\n\nclass MD2CharacterComplex {\n  constructor() {\n    this.scale = 1\n\n    // animation parameters\n\n    this.animationFPS = 6\n    this.transitionFrames = 15\n\n    // movement model parameters\n\n    this.maxSpeed = 275\n    this.maxReverseSpeed = -275\n\n    this.frontAcceleration = 600\n    this.backAcceleration = 600\n\n    this.frontDecceleration = 600\n\n    this.angularSpeed = 2.5\n\n    // rig\n\n    this.root = new Object3D()\n\n    this.meshBody = null\n    this.meshWeapon = null\n\n    this.controls = null\n\n    // skins\n\n    this.skinsBody = []\n    this.skinsWeapon = []\n\n    this.weapons = []\n\n    this.currentSkin = undefined\n\n    //\n\n    this.onLoadComplete = function () {}\n\n    // internals\n\n    this.meshes = []\n    this.animations = {}\n\n    this.loadCounter = 0\n\n    // internal movement control variables\n\n    this.speed = 0\n    this.bodyOrientation = 0\n\n    this.walkSpeed = this.maxSpeed\n    this.crouchSpeed = this.maxSpeed * 0.5\n\n    // internal animation parameters\n\n    this.activeAnimation = null\n    this.oldAnimation = null\n\n    // API\n  }\n\n  enableShadows(enable) {\n    for (let i = 0; i < this.meshes.length; i++) {\n      this.meshes[i].castShadow = enable\n      this.meshes[i].receiveShadow = enable\n    }\n  }\n\n  setVisible(enable) {\n    for (let i = 0; i < this.meshes.length; i++) {\n      this.meshes[i].visible = enable\n      this.meshes[i].visible = enable\n    }\n  }\n\n  shareParts(original) {\n    this.animations = original.animations\n    this.walkSpeed = original.walkSpeed\n    this.crouchSpeed = original.crouchSpeed\n\n    this.skinsBody = original.skinsBody\n    this.skinsWeapon = original.skinsWeapon\n\n    // BODY\n\n    const mesh = this._createPart(original.meshBody.geometry, this.skinsBody[0])\n    mesh.scale.set(this.scale, this.scale, this.scale)\n\n    this.root.position.y = original.root.position.y\n    this.root.add(mesh)\n\n    this.meshBody = mesh\n\n    this.meshes.push(mesh)\n\n    // WEAPONS\n\n    for (let i = 0; i < original.weapons.length; i++) {\n      const meshWeapon = this._createPart(original.weapons[i].geometry, this.skinsWeapon[i])\n      meshWeapon.scale.set(this.scale, this.scale, this.scale)\n      meshWeapon.visible = false\n\n      meshWeapon.name = original.weapons[i].name\n\n      this.root.add(meshWeapon)\n\n      this.weapons[i] = meshWeapon\n      this.meshWeapon = meshWeapon\n\n      this.meshes.push(meshWeapon)\n    }\n  }\n\n  loadParts(config) {\n    const scope = this\n\n    function loadTextures(baseUrl, textureUrls) {\n      const textureLoader = new TextureLoader()\n      const textures = []\n\n      for (let i = 0; i < textureUrls.length; i++) {\n        textures[i] = textureLoader.load(baseUrl + textureUrls[i], checkLoadingComplete)\n        textures[i].mapping = UVMapping\n        textures[i].name = textureUrls[i]\n        if ('colorSpace' in textures[i]) textures[i].colorSpace = 'srgb'\n        else textures[i].encoding = 3001 // sRGBEncoding\n      }\n\n      return textures\n    }\n\n    function checkLoadingComplete() {\n      scope.loadCounter -= 1\n      if (scope.loadCounter === 0) scope.onLoadComplete()\n    }\n\n    this.animations = config.animations\n    this.walkSpeed = config.walkSpeed\n    this.crouchSpeed = config.crouchSpeed\n\n    this.loadCounter = config.weapons.length * 2 + config.skins.length + 1\n\n    const weaponsTextures = []\n    for (let i = 0; i < config.weapons.length; i++) weaponsTextures[i] = config.weapons[i][1]\n\n    // SKINS\n\n    this.skinsBody = loadTextures(config.baseUrl + 'skins/', config.skins)\n    this.skinsWeapon = loadTextures(config.baseUrl + 'skins/', weaponsTextures)\n\n    // BODY\n\n    const loader = new MD2Loader()\n\n    loader.load(config.baseUrl + config.body, function (geo) {\n      const boundingBox = new Box3()\n      boundingBox.setFromBufferAttribute(geo.attributes.position)\n\n      scope.root.position.y = -scope.scale * boundingBox.min.y\n\n      const mesh = scope._createPart(geo, scope.skinsBody[0])\n      mesh.scale.set(scope.scale, scope.scale, scope.scale)\n\n      scope.root.add(mesh)\n\n      scope.meshBody = mesh\n      scope.meshes.push(mesh)\n\n      checkLoadingComplete()\n    })\n\n    // WEAPONS\n\n    const generateCallback = function (index, name) {\n      return function (geo) {\n        const mesh = scope._createPart(geo, scope.skinsWeapon[index])\n        mesh.scale.set(scope.scale, scope.scale, scope.scale)\n        mesh.visible = false\n\n        mesh.name = name\n\n        scope.root.add(mesh)\n\n        scope.weapons[index] = mesh\n        scope.meshWeapon = mesh\n        scope.meshes.push(mesh)\n\n        checkLoadingComplete()\n      }\n    }\n\n    for (let i = 0; i < config.weapons.length; i++) {\n      loader.load(config.baseUrl + config.weapons[i][0], generateCallback(i, config.weapons[i][0]))\n    }\n  }\n\n  setPlaybackRate(rate) {\n    if (this.meshBody) this.meshBody.duration = this.meshBody.baseDuration / rate\n    if (this.meshWeapon) this.meshWeapon.duration = this.meshWeapon.baseDuration / rate\n  }\n\n  setWireframe(wireframeEnabled) {\n    if (wireframeEnabled) {\n      if (this.meshBody) this.meshBody.material = this.meshBody.materialWireframe\n      if (this.meshWeapon) this.meshWeapon.material = this.meshWeapon.materialWireframe\n    } else {\n      if (this.meshBody) this.meshBody.material = this.meshBody.materialTexture\n      if (this.meshWeapon) this.meshWeapon.material = this.meshWeapon.materialTexture\n    }\n  }\n\n  setSkin(index) {\n    if (this.meshBody && this.meshBody.material.wireframe === false) {\n      this.meshBody.material.map = this.skinsBody[index]\n      this.currentSkin = index\n    }\n  }\n\n  setWeapon(index) {\n    for (let i = 0; i < this.weapons.length; i++) this.weapons[i].visible = false\n\n    const activeWeapon = this.weapons[index]\n\n    if (activeWeapon) {\n      activeWeapon.visible = true\n      this.meshWeapon = activeWeapon\n\n      if (this.activeAnimation) {\n        activeWeapon.playAnimation(this.activeAnimation)\n        this.meshWeapon.setAnimationTime(this.activeAnimation, this.meshBody.getAnimationTime(this.activeAnimation))\n      }\n    }\n  }\n\n  setAnimation(animationName) {\n    if (animationName === this.activeAnimation || !animationName) return\n\n    if (this.meshBody) {\n      this.meshBody.setAnimationWeight(animationName, 0)\n      this.meshBody.playAnimation(animationName)\n\n      this.oldAnimation = this.activeAnimation\n      this.activeAnimation = animationName\n\n      this.blendCounter = this.transitionFrames\n    }\n\n    if (this.meshWeapon) {\n      this.meshWeapon.setAnimationWeight(animationName, 0)\n      this.meshWeapon.playAnimation(animationName)\n    }\n  }\n\n  update(delta) {\n    if (this.controls) this.updateMovementModel(delta)\n\n    if (this.animations) {\n      this.updateBehaviors()\n      this.updateAnimations(delta)\n    }\n  }\n\n  updateAnimations(delta) {\n    let mix = 1\n\n    if (this.blendCounter > 0) {\n      mix = (this.transitionFrames - this.blendCounter) / this.transitionFrames\n      this.blendCounter -= 1\n    }\n\n    if (this.meshBody) {\n      this.meshBody.update(delta)\n\n      this.meshBody.setAnimationWeight(this.activeAnimation, mix)\n      this.meshBody.setAnimationWeight(this.oldAnimation, 1 - mix)\n    }\n\n    if (this.meshWeapon) {\n      this.meshWeapon.update(delta)\n\n      this.meshWeapon.setAnimationWeight(this.activeAnimation, mix)\n      this.meshWeapon.setAnimationWeight(this.oldAnimation, 1 - mix)\n    }\n  }\n\n  updateBehaviors() {\n    const controls = this.controls\n    const animations = this.animations\n\n    let moveAnimation, idleAnimation\n\n    // crouch vs stand\n\n    if (controls.crouch) {\n      moveAnimation = animations['crouchMove']\n      idleAnimation = animations['crouchIdle']\n    } else {\n      moveAnimation = animations['move']\n      idleAnimation = animations['idle']\n    }\n\n    // actions\n\n    if (controls.jump) {\n      moveAnimation = animations['jump']\n      idleAnimation = animations['jump']\n    }\n\n    if (controls.attack) {\n      if (controls.crouch) {\n        moveAnimation = animations['crouchAttack']\n        idleAnimation = animations['crouchAttack']\n      } else {\n        moveAnimation = animations['attack']\n        idleAnimation = animations['attack']\n      }\n    }\n\n    // set animations\n\n    if (controls.moveForward || controls.moveBackward || controls.moveLeft || controls.moveRight) {\n      if (this.activeAnimation !== moveAnimation) {\n        this.setAnimation(moveAnimation)\n      }\n    }\n\n    if (\n      Math.abs(this.speed) < 0.2 * this.maxSpeed &&\n      !(controls.moveLeft || controls.moveRight || controls.moveForward || controls.moveBackward)\n    ) {\n      if (this.activeAnimation !== idleAnimation) {\n        this.setAnimation(idleAnimation)\n      }\n    }\n\n    // set animation direction\n\n    if (controls.moveForward) {\n      if (this.meshBody) {\n        this.meshBody.setAnimationDirectionForward(this.activeAnimation)\n        this.meshBody.setAnimationDirectionForward(this.oldAnimation)\n      }\n\n      if (this.meshWeapon) {\n        this.meshWeapon.setAnimationDirectionForward(this.activeAnimation)\n        this.meshWeapon.setAnimationDirectionForward(this.oldAnimation)\n      }\n    }\n\n    if (controls.moveBackward) {\n      if (this.meshBody) {\n        this.meshBody.setAnimationDirectionBackward(this.activeAnimation)\n        this.meshBody.setAnimationDirectionBackward(this.oldAnimation)\n      }\n\n      if (this.meshWeapon) {\n        this.meshWeapon.setAnimationDirectionBackward(this.activeAnimation)\n        this.meshWeapon.setAnimationDirectionBackward(this.oldAnimation)\n      }\n    }\n  }\n\n  updateMovementModel(delta) {\n    function exponentialEaseOut(k) {\n      return k === 1 ? 1 : -Math.pow(2, -10 * k) + 1\n    }\n\n    const controls = this.controls\n\n    // speed based on controls\n\n    if (controls.crouch) this.maxSpeed = this.crouchSpeed\n    else this.maxSpeed = this.walkSpeed\n\n    this.maxReverseSpeed = -this.maxSpeed\n\n    if (controls.moveForward)\n      this.speed = MathUtils.clamp(this.speed + delta * this.frontAcceleration, this.maxReverseSpeed, this.maxSpeed)\n    if (controls.moveBackward)\n      this.speed = MathUtils.clamp(this.speed - delta * this.backAcceleration, this.maxReverseSpeed, this.maxSpeed)\n\n    // orientation based on controls\n    // (don't just stand while turning)\n\n    const dir = 1\n\n    if (controls.moveLeft) {\n      this.bodyOrientation += delta * this.angularSpeed\n      this.speed = MathUtils.clamp(\n        this.speed + dir * delta * this.frontAcceleration,\n        this.maxReverseSpeed,\n        this.maxSpeed,\n      )\n    }\n\n    if (controls.moveRight) {\n      this.bodyOrientation -= delta * this.angularSpeed\n      this.speed = MathUtils.clamp(\n        this.speed + dir * delta * this.frontAcceleration,\n        this.maxReverseSpeed,\n        this.maxSpeed,\n      )\n    }\n\n    // speed decay\n\n    if (!(controls.moveForward || controls.moveBackward)) {\n      if (this.speed > 0) {\n        const k = exponentialEaseOut(this.speed / this.maxSpeed)\n        this.speed = MathUtils.clamp(this.speed - k * delta * this.frontDecceleration, 0, this.maxSpeed)\n      } else {\n        const k = exponentialEaseOut(this.speed / this.maxReverseSpeed)\n        this.speed = MathUtils.clamp(this.speed + k * delta * this.backAcceleration, this.maxReverseSpeed, 0)\n      }\n    }\n\n    // displacement\n\n    const forwardDelta = this.speed * delta\n\n    this.root.position.x += Math.sin(this.bodyOrientation) * forwardDelta\n    this.root.position.z += Math.cos(this.bodyOrientation) * forwardDelta\n\n    // steering\n\n    this.root.rotation.y = this.bodyOrientation\n  }\n\n  // internal\n\n  _createPart(geometry, skinMap) {\n    const materialWireframe = new MeshLambertMaterial({\n      color: 0xffaa00,\n      wireframe: true,\n      morphTargets: true,\n      morphNormals: true,\n    })\n    const materialTexture = new MeshLambertMaterial({\n      color: 0xffffff,\n      wireframe: false,\n      map: skinMap,\n      morphTargets: true,\n      morphNormals: true,\n    })\n\n    //\n\n    const mesh = new MorphBlendMesh(geometry, materialTexture)\n    mesh.rotation.y = -Math.PI / 2\n\n    //\n\n    mesh.materialTexture = materialTexture\n    mesh.materialWireframe = materialWireframe\n\n    //\n\n    mesh.autoCreateAnimations(this.animationFPS)\n\n    return mesh\n  }\n}\n\nexport { MD2CharacterComplex }\n"],"mappings":";;;;;IAIMA,mBAAA;EACJ,SAAAA,oBAAA,EAAc;IAAAC,eAAA,OAAAD,mBAAA;IACZ,KAAKE,KAAA,GAAQ;IAIb,KAAKC,YAAA,GAAe;IACpB,KAAKC,gBAAA,GAAmB;IAIxB,KAAKC,QAAA,GAAW;IAChB,KAAKC,eAAA,GAAkB;IAEvB,KAAKC,iBAAA,GAAoB;IACzB,KAAKC,gBAAA,GAAmB;IAExB,KAAKC,kBAAA,GAAqB;IAE1B,KAAKC,YAAA,GAAe;IAIpB,KAAKC,IAAA,GAAO,IAAIC,QAAA,CAAU;IAE1B,KAAKC,QAAA,GAAW;IAChB,KAAKC,UAAA,GAAa;IAElB,KAAKC,QAAA,GAAW;IAIhB,KAAKC,SAAA,GAAY,EAAE;IACnB,KAAKC,WAAA,GAAc,EAAE;IAErB,KAAKC,OAAA,GAAU,EAAE;IAEjB,KAAKC,WAAA,GAAc;IAInB,KAAKC,cAAA,GAAiB,YAAY,CAAE;IAIpC,KAAKC,MAAA,GAAS,EAAE;IAChB,KAAKC,UAAA,GAAa,CAAE;IAEpB,KAAKC,WAAA,GAAc;IAInB,KAAKC,KAAA,GAAQ;IACb,KAAKC,eAAA,GAAkB;IAEvB,KAAKC,SAAA,GAAY,KAAKrB,QAAA;IACtB,KAAKsB,WAAA,GAAc,KAAKtB,QAAA,GAAW;IAInC,KAAKuB,eAAA,GAAkB;IACvB,KAAKC,YAAA,GAAe;EAGrB;EAAAC,YAAA,CAAA9B,mBAAA;IAAA+B,GAAA;IAAAC,KAAA,EAED,SAAAC,cAAcC,MAAA,EAAQ;MACpB,SAASC,CAAA,GAAI,GAAGA,CAAA,GAAI,KAAKd,MAAA,CAAOe,MAAA,EAAQD,CAAA,IAAK;QAC3C,KAAKd,MAAA,CAAOc,CAAC,EAAEE,UAAA,GAAaH,MAAA;QAC5B,KAAKb,MAAA,CAAOc,CAAC,EAAEG,aAAA,GAAgBJ,MAAA;MAChC;IACF;EAAA;IAAAH,GAAA;IAAAC,KAAA,EAED,SAAAO,WAAWL,MAAA,EAAQ;MACjB,SAASC,CAAA,GAAI,GAAGA,CAAA,GAAI,KAAKd,MAAA,CAAOe,MAAA,EAAQD,CAAA,IAAK;QAC3C,KAAKd,MAAA,CAAOc,CAAC,EAAEK,OAAA,GAAUN,MAAA;QACzB,KAAKb,MAAA,CAAOc,CAAC,EAAEK,OAAA,GAAUN,MAAA;MAC1B;IACF;EAAA;IAAAH,GAAA;IAAAC,KAAA,EAED,SAAAS,WAAWC,QAAA,EAAU;MACnB,KAAKpB,UAAA,GAAaoB,QAAA,CAASpB,UAAA;MAC3B,KAAKI,SAAA,GAAYgB,QAAA,CAAShB,SAAA;MAC1B,KAAKC,WAAA,GAAce,QAAA,CAASf,WAAA;MAE5B,KAAKX,SAAA,GAAY0B,QAAA,CAAS1B,SAAA;MAC1B,KAAKC,WAAA,GAAcyB,QAAA,CAASzB,WAAA;MAI5B,IAAM0B,IAAA,GAAO,KAAKC,WAAA,CAAYF,QAAA,CAAS7B,QAAA,CAASgC,QAAA,EAAU,KAAK7B,SAAA,CAAU,CAAC,CAAC;MAC3E2B,IAAA,CAAKzC,KAAA,CAAM4C,GAAA,CAAI,KAAK5C,KAAA,EAAO,KAAKA,KAAA,EAAO,KAAKA,KAAK;MAEjD,KAAKS,IAAA,CAAKoC,QAAA,CAASC,CAAA,GAAIN,QAAA,CAAS/B,IAAA,CAAKoC,QAAA,CAASC,CAAA;MAC9C,KAAKrC,IAAA,CAAKsC,GAAA,CAAIN,IAAI;MAElB,KAAK9B,QAAA,GAAW8B,IAAA;MAEhB,KAAKtB,MAAA,CAAO6B,IAAA,CAAKP,IAAI;MAIrB,SAASR,CAAA,GAAI,GAAGA,CAAA,GAAIO,QAAA,CAASxB,OAAA,CAAQkB,MAAA,EAAQD,CAAA,IAAK;QAChD,IAAMrB,UAAA,GAAa,KAAK8B,WAAA,CAAYF,QAAA,CAASxB,OAAA,CAAQiB,CAAC,EAAEU,QAAA,EAAU,KAAK5B,WAAA,CAAYkB,CAAC,CAAC;QACrFrB,UAAA,CAAWZ,KAAA,CAAM4C,GAAA,CAAI,KAAK5C,KAAA,EAAO,KAAKA,KAAA,EAAO,KAAKA,KAAK;QACvDY,UAAA,CAAW0B,OAAA,GAAU;QAErB1B,UAAA,CAAWqC,IAAA,GAAOT,QAAA,CAASxB,OAAA,CAAQiB,CAAC,EAAEgB,IAAA;QAEtC,KAAKxC,IAAA,CAAKsC,GAAA,CAAInC,UAAU;QAExB,KAAKI,OAAA,CAAQiB,CAAC,IAAIrB,UAAA;QAClB,KAAKA,UAAA,GAAaA,UAAA;QAElB,KAAKO,MAAA,CAAO6B,IAAA,CAAKpC,UAAU;MAC5B;IACF;EAAA;IAAAiB,GAAA;IAAAC,KAAA,EAED,SAAAoB,UAAUC,MAAA,EAAQ;MAChB,IAAMC,KAAA,GAAQ;MAEd,SAASC,aAAaC,OAAA,EAASC,WAAA,EAAa;QAC1C,IAAMC,aAAA,GAAgB,IAAIC,aAAA,CAAe;QACzC,IAAMC,QAAA,GAAW,EAAE;QAEnB,SAASzB,CAAA,GAAI,GAAGA,CAAA,GAAIsB,WAAA,CAAYrB,MAAA,EAAQD,CAAA,IAAK;UAC3CyB,QAAA,CAASzB,CAAC,IAAIuB,aAAA,CAAcG,IAAA,CAAKL,OAAA,GAAUC,WAAA,CAAYtB,CAAC,GAAG2B,oBAAoB;UAC/EF,QAAA,CAASzB,CAAC,EAAE4B,OAAA,GAAUC,SAAA;UACtBJ,QAAA,CAASzB,CAAC,EAAEgB,IAAA,GAAOM,WAAA,CAAYtB,CAAC;UAChC,IAAI,gBAAgByB,QAAA,CAASzB,CAAC,GAAGyB,QAAA,CAASzB,CAAC,EAAE8B,UAAA,GAAa,YACrDL,QAAA,CAASzB,CAAC,EAAE+B,QAAA,GAAW;QAC7B;QAED,OAAON,QAAA;MACR;MAED,SAASE,qBAAA,EAAuB;QAC9BR,KAAA,CAAM/B,WAAA,IAAe;QACrB,IAAI+B,KAAA,CAAM/B,WAAA,KAAgB,GAAG+B,KAAA,CAAMlC,cAAA,CAAgB;MACpD;MAED,KAAKE,UAAA,GAAa+B,MAAA,CAAO/B,UAAA;MACzB,KAAKI,SAAA,GAAY2B,MAAA,CAAO3B,SAAA;MACxB,KAAKC,WAAA,GAAc0B,MAAA,CAAO1B,WAAA;MAE1B,KAAKJ,WAAA,GAAc8B,MAAA,CAAOnC,OAAA,CAAQkB,MAAA,GAAS,IAAIiB,MAAA,CAAOc,KAAA,CAAM/B,MAAA,GAAS;MAErE,IAAMgC,eAAA,GAAkB,EAAE;MAC1B,SAASjC,CAAA,GAAI,GAAGA,CAAA,GAAIkB,MAAA,CAAOnC,OAAA,CAAQkB,MAAA,EAAQD,CAAA,IAAKiC,eAAA,CAAgBjC,CAAC,IAAIkB,MAAA,CAAOnC,OAAA,CAAQiB,CAAC,EAAE,CAAC;MAIxF,KAAKnB,SAAA,GAAYuC,YAAA,CAAaF,MAAA,CAAOG,OAAA,GAAU,UAAUH,MAAA,CAAOc,KAAK;MACrE,KAAKlD,WAAA,GAAcsC,YAAA,CAAaF,MAAA,CAAOG,OAAA,GAAU,UAAUY,eAAe;MAI1E,IAAMC,MAAA,GAAS,IAAIC,SAAA,CAAW;MAE9BD,MAAA,CAAOR,IAAA,CAAKR,MAAA,CAAOG,OAAA,GAAUH,MAAA,CAAOkB,IAAA,EAAM,UAAUC,GAAA,EAAK;QACvD,IAAMC,WAAA,GAAc,IAAIC,IAAA,CAAM;QAC9BD,WAAA,CAAYE,sBAAA,CAAuBH,GAAA,CAAII,UAAA,CAAW7B,QAAQ;QAE1DO,KAAA,CAAM3C,IAAA,CAAKoC,QAAA,CAASC,CAAA,GAAI,CAACM,KAAA,CAAMpD,KAAA,GAAQuE,WAAA,CAAYI,GAAA,CAAI7B,CAAA;QAEvD,IAAML,IAAA,GAAOW,KAAA,CAAMV,WAAA,CAAY4B,GAAA,EAAKlB,KAAA,CAAMtC,SAAA,CAAU,CAAC,CAAC;QACtD2B,IAAA,CAAKzC,KAAA,CAAM4C,GAAA,CAAIQ,KAAA,CAAMpD,KAAA,EAAOoD,KAAA,CAAMpD,KAAA,EAAOoD,KAAA,CAAMpD,KAAK;QAEpDoD,KAAA,CAAM3C,IAAA,CAAKsC,GAAA,CAAIN,IAAI;QAEnBW,KAAA,CAAMzC,QAAA,GAAW8B,IAAA;QACjBW,KAAA,CAAMjC,MAAA,CAAO6B,IAAA,CAAKP,IAAI;QAEtBmB,oBAAA,CAAsB;MAC5B,CAAK;MAID,IAAMgB,gBAAA,GAAmB,SAAnBA,iBAA6BC,KAAA,EAAO5B,IAAA,EAAM;QAC9C,OAAO,UAAUqB,GAAA,EAAK;UACpB,IAAM7B,IAAA,GAAOW,KAAA,CAAMV,WAAA,CAAY4B,GAAA,EAAKlB,KAAA,CAAMrC,WAAA,CAAY8D,KAAK,CAAC;UAC5DpC,IAAA,CAAKzC,KAAA,CAAM4C,GAAA,CAAIQ,KAAA,CAAMpD,KAAA,EAAOoD,KAAA,CAAMpD,KAAA,EAAOoD,KAAA,CAAMpD,KAAK;UACpDyC,IAAA,CAAKH,OAAA,GAAU;UAEfG,IAAA,CAAKQ,IAAA,GAAOA,IAAA;UAEZG,KAAA,CAAM3C,IAAA,CAAKsC,GAAA,CAAIN,IAAI;UAEnBW,KAAA,CAAMpC,OAAA,CAAQ6D,KAAK,IAAIpC,IAAA;UACvBW,KAAA,CAAMxC,UAAA,GAAa6B,IAAA;UACnBW,KAAA,CAAMjC,MAAA,CAAO6B,IAAA,CAAKP,IAAI;UAEtBmB,oBAAA,CAAsB;QACvB;MACF;MAED,SAAS3B,EAAA,GAAI,GAAGA,EAAA,GAAIkB,MAAA,CAAOnC,OAAA,CAAQkB,MAAA,EAAQD,EAAA,IAAK;QAC9CkC,MAAA,CAAOR,IAAA,CAAKR,MAAA,CAAOG,OAAA,GAAUH,MAAA,CAAOnC,OAAA,CAAQiB,EAAC,EAAE,CAAC,GAAG2C,gBAAA,CAAiB3C,EAAA,EAAGkB,MAAA,CAAOnC,OAAA,CAAQiB,EAAC,EAAE,CAAC,CAAC,CAAC;MAC7F;IACF;EAAA;IAAAJ,GAAA;IAAAC,KAAA,EAED,SAAAgD,gBAAgBC,IAAA,EAAM;MACpB,IAAI,KAAKpE,QAAA,EAAU,KAAKA,QAAA,CAASqE,QAAA,GAAW,KAAKrE,QAAA,CAASsE,YAAA,GAAeF,IAAA;MACzE,IAAI,KAAKnE,UAAA,EAAY,KAAKA,UAAA,CAAWoE,QAAA,GAAW,KAAKpE,UAAA,CAAWqE,YAAA,GAAeF,IAAA;IAChF;EAAA;IAAAlD,GAAA;IAAAC,KAAA,EAED,SAAAoD,aAAaC,gBAAA,EAAkB;MAC7B,IAAIA,gBAAA,EAAkB;QACpB,IAAI,KAAKxE,QAAA,EAAU,KAAKA,QAAA,CAASyE,QAAA,GAAW,KAAKzE,QAAA,CAAS0E,iBAAA;QAC1D,IAAI,KAAKzE,UAAA,EAAY,KAAKA,UAAA,CAAWwE,QAAA,GAAW,KAAKxE,UAAA,CAAWyE,iBAAA;MACtE,OAAW;QACL,IAAI,KAAK1E,QAAA,EAAU,KAAKA,QAAA,CAASyE,QAAA,GAAW,KAAKzE,QAAA,CAAS2E,eAAA;QAC1D,IAAI,KAAK1E,UAAA,EAAY,KAAKA,UAAA,CAAWwE,QAAA,GAAW,KAAKxE,UAAA,CAAW0E,eAAA;MACjE;IACF;EAAA;IAAAzD,GAAA;IAAAC,KAAA,EAED,SAAAyD,QAAQV,KAAA,EAAO;MACb,IAAI,KAAKlE,QAAA,IAAY,KAAKA,QAAA,CAASyE,QAAA,CAASI,SAAA,KAAc,OAAO;QAC/D,KAAK7E,QAAA,CAASyE,QAAA,CAASK,GAAA,GAAM,KAAK3E,SAAA,CAAU+D,KAAK;QACjD,KAAK5D,WAAA,GAAc4D,KAAA;MACpB;IACF;EAAA;IAAAhD,GAAA;IAAAC,KAAA,EAED,SAAA4D,UAAUb,KAAA,EAAO;MACf,SAAS5C,CAAA,GAAI,GAAGA,CAAA,GAAI,KAAKjB,OAAA,CAAQkB,MAAA,EAAQD,CAAA,IAAK,KAAKjB,OAAA,CAAQiB,CAAC,EAAEK,OAAA,GAAU;MAExE,IAAMqD,YAAA,GAAe,KAAK3E,OAAA,CAAQ6D,KAAK;MAEvC,IAAIc,YAAA,EAAc;QAChBA,YAAA,CAAarD,OAAA,GAAU;QACvB,KAAK1B,UAAA,GAAa+E,YAAA;QAElB,IAAI,KAAKjE,eAAA,EAAiB;UACxBiE,YAAA,CAAaC,aAAA,CAAc,KAAKlE,eAAe;UAC/C,KAAKd,UAAA,CAAWiF,gBAAA,CAAiB,KAAKnE,eAAA,EAAiB,KAAKf,QAAA,CAASmF,gBAAA,CAAiB,KAAKpE,eAAe,CAAC;QAC5G;MACF;IACF;EAAA;IAAAG,GAAA;IAAAC,KAAA,EAED,SAAAiE,aAAaC,aAAA,EAAe;MAC1B,IAAIA,aAAA,KAAkB,KAAKtE,eAAA,IAAmB,CAACsE,aAAA,EAAe;MAE9D,IAAI,KAAKrF,QAAA,EAAU;QACjB,KAAKA,QAAA,CAASsF,kBAAA,CAAmBD,aAAA,EAAe,CAAC;QACjD,KAAKrF,QAAA,CAASiF,aAAA,CAAcI,aAAa;QAEzC,KAAKrE,YAAA,GAAe,KAAKD,eAAA;QACzB,KAAKA,eAAA,GAAkBsE,aAAA;QAEvB,KAAKE,YAAA,GAAe,KAAKhG,gBAAA;MAC1B;MAED,IAAI,KAAKU,UAAA,EAAY;QACnB,KAAKA,UAAA,CAAWqF,kBAAA,CAAmBD,aAAA,EAAe,CAAC;QACnD,KAAKpF,UAAA,CAAWgF,aAAA,CAAcI,aAAa;MAC5C;IACF;EAAA;IAAAnE,GAAA;IAAAC,KAAA,EAED,SAAAqE,OAAOC,KAAA,EAAO;MACZ,IAAI,KAAKvF,QAAA,EAAU,KAAKwF,mBAAA,CAAoBD,KAAK;MAEjD,IAAI,KAAKhF,UAAA,EAAY;QACnB,KAAKkF,eAAA,CAAiB;QACtB,KAAKC,gBAAA,CAAiBH,KAAK;MAC5B;IACF;EAAA;IAAAvE,GAAA;IAAAC,KAAA,EAED,SAAAyE,iBAAiBH,KAAA,EAAO;MACtB,IAAII,GAAA,GAAM;MAEV,IAAI,KAAKN,YAAA,GAAe,GAAG;QACzBM,GAAA,IAAO,KAAKtG,gBAAA,GAAmB,KAAKgG,YAAA,IAAgB,KAAKhG,gBAAA;QACzD,KAAKgG,YAAA,IAAgB;MACtB;MAED,IAAI,KAAKvF,QAAA,EAAU;QACjB,KAAKA,QAAA,CAASwF,MAAA,CAAOC,KAAK;QAE1B,KAAKzF,QAAA,CAASsF,kBAAA,CAAmB,KAAKvE,eAAA,EAAiB8E,GAAG;QAC1D,KAAK7F,QAAA,CAASsF,kBAAA,CAAmB,KAAKtE,YAAA,EAAc,IAAI6E,GAAG;MAC5D;MAED,IAAI,KAAK5F,UAAA,EAAY;QACnB,KAAKA,UAAA,CAAWuF,MAAA,CAAOC,KAAK;QAE5B,KAAKxF,UAAA,CAAWqF,kBAAA,CAAmB,KAAKvE,eAAA,EAAiB8E,GAAG;QAC5D,KAAK5F,UAAA,CAAWqF,kBAAA,CAAmB,KAAKtE,YAAA,EAAc,IAAI6E,GAAG;MAC9D;IACF;EAAA;IAAA3E,GAAA;IAAAC,KAAA,EAED,SAAAwE,gBAAA,EAAkB;MAChB,IAAMzF,QAAA,GAAW,KAAKA,QAAA;MACtB,IAAMO,UAAA,GAAa,KAAKA,UAAA;MAExB,IAAIqF,aAAA,EAAeC,aAAA;MAInB,IAAI7F,QAAA,CAAS8F,MAAA,EAAQ;QACnBF,aAAA,GAAgBrF,UAAA,CAAW,YAAY;QACvCsF,aAAA,GAAgBtF,UAAA,CAAW,YAAY;MAC7C,OAAW;QACLqF,aAAA,GAAgBrF,UAAA,CAAW,MAAM;QACjCsF,aAAA,GAAgBtF,UAAA,CAAW,MAAM;MAClC;MAID,IAAIP,QAAA,CAAS+F,IAAA,EAAM;QACjBH,aAAA,GAAgBrF,UAAA,CAAW,MAAM;QACjCsF,aAAA,GAAgBtF,UAAA,CAAW,MAAM;MAClC;MAED,IAAIP,QAAA,CAASgG,MAAA,EAAQ;QACnB,IAAIhG,QAAA,CAAS8F,MAAA,EAAQ;UACnBF,aAAA,GAAgBrF,UAAA,CAAW,cAAc;UACzCsF,aAAA,GAAgBtF,UAAA,CAAW,cAAc;QACjD,OAAa;UACLqF,aAAA,GAAgBrF,UAAA,CAAW,QAAQ;UACnCsF,aAAA,GAAgBtF,UAAA,CAAW,QAAQ;QACpC;MACF;MAID,IAAIP,QAAA,CAASiG,WAAA,IAAejG,QAAA,CAASkG,YAAA,IAAgBlG,QAAA,CAASmG,QAAA,IAAYnG,QAAA,CAASoG,SAAA,EAAW;QAC5F,IAAI,KAAKvF,eAAA,KAAoB+E,aAAA,EAAe;UAC1C,KAAKV,YAAA,CAAaU,aAAa;QAChC;MACF;MAED,IACES,IAAA,CAAKC,GAAA,CAAI,KAAK7F,KAAK,IAAI,MAAM,KAAKnB,QAAA,IAClC,EAAEU,QAAA,CAASmG,QAAA,IAAYnG,QAAA,CAASoG,SAAA,IAAapG,QAAA,CAASiG,WAAA,IAAejG,QAAA,CAASkG,YAAA,GAC9E;QACA,IAAI,KAAKrF,eAAA,KAAoBgF,aAAA,EAAe;UAC1C,KAAKX,YAAA,CAAaW,aAAa;QAChC;MACF;MAID,IAAI7F,QAAA,CAASiG,WAAA,EAAa;QACxB,IAAI,KAAKnG,QAAA,EAAU;UACjB,KAAKA,QAAA,CAASyG,4BAAA,CAA6B,KAAK1F,eAAe;UAC/D,KAAKf,QAAA,CAASyG,4BAAA,CAA6B,KAAKzF,YAAY;QAC7D;QAED,IAAI,KAAKf,UAAA,EAAY;UACnB,KAAKA,UAAA,CAAWwG,4BAAA,CAA6B,KAAK1F,eAAe;UACjE,KAAKd,UAAA,CAAWwG,4BAAA,CAA6B,KAAKzF,YAAY;QAC/D;MACF;MAED,IAAId,QAAA,CAASkG,YAAA,EAAc;QACzB,IAAI,KAAKpG,QAAA,EAAU;UACjB,KAAKA,QAAA,CAAS0G,6BAAA,CAA8B,KAAK3F,eAAe;UAChE,KAAKf,QAAA,CAAS0G,6BAAA,CAA8B,KAAK1F,YAAY;QAC9D;QAED,IAAI,KAAKf,UAAA,EAAY;UACnB,KAAKA,UAAA,CAAWyG,6BAAA,CAA8B,KAAK3F,eAAe;UAClE,KAAKd,UAAA,CAAWyG,6BAAA,CAA8B,KAAK1F,YAAY;QAChE;MACF;IACF;EAAA;IAAAE,GAAA;IAAAC,KAAA,EAED,SAAAuE,oBAAoBD,KAAA,EAAO;MACzB,SAASkB,mBAAmBC,CAAA,EAAG;QAC7B,OAAOA,CAAA,KAAM,IAAI,IAAI,CAACL,IAAA,CAAKM,GAAA,CAAI,GAAG,MAAMD,CAAC,IAAI;MAC9C;MAED,IAAM1G,QAAA,GAAW,KAAKA,QAAA;MAItB,IAAIA,QAAA,CAAS8F,MAAA,EAAQ,KAAKxG,QAAA,GAAW,KAAKsB,WAAA,MACrC,KAAKtB,QAAA,GAAW,KAAKqB,SAAA;MAE1B,KAAKpB,eAAA,GAAkB,CAAC,KAAKD,QAAA;MAE7B,IAAIU,QAAA,CAASiG,WAAA,EACX,KAAKxF,KAAA,GAAQmG,SAAA,CAAUC,KAAA,CAAM,KAAKpG,KAAA,GAAQ8E,KAAA,GAAQ,KAAK/F,iBAAA,EAAmB,KAAKD,eAAA,EAAiB,KAAKD,QAAQ;MAC/G,IAAIU,QAAA,CAASkG,YAAA,EACX,KAAKzF,KAAA,GAAQmG,SAAA,CAAUC,KAAA,CAAM,KAAKpG,KAAA,GAAQ8E,KAAA,GAAQ,KAAK9F,gBAAA,EAAkB,KAAKF,eAAA,EAAiB,KAAKD,QAAQ;MAK9G,IAAMwH,GAAA,GAAM;MAEZ,IAAI9G,QAAA,CAASmG,QAAA,EAAU;QACrB,KAAKzF,eAAA,IAAmB6E,KAAA,GAAQ,KAAK5F,YAAA;QACrC,KAAKc,KAAA,GAAQmG,SAAA,CAAUC,KAAA,CACrB,KAAKpG,KAAA,GAAQqG,GAAA,GAAMvB,KAAA,GAAQ,KAAK/F,iBAAA,EAChC,KAAKD,eAAA,EACL,KAAKD,QACN;MACF;MAED,IAAIU,QAAA,CAASoG,SAAA,EAAW;QACtB,KAAK1F,eAAA,IAAmB6E,KAAA,GAAQ,KAAK5F,YAAA;QACrC,KAAKc,KAAA,GAAQmG,SAAA,CAAUC,KAAA,CACrB,KAAKpG,KAAA,GAAQqG,GAAA,GAAMvB,KAAA,GAAQ,KAAK/F,iBAAA,EAChC,KAAKD,eAAA,EACL,KAAKD,QACN;MACF;MAID,IAAI,EAAEU,QAAA,CAASiG,WAAA,IAAejG,QAAA,CAASkG,YAAA,GAAe;QACpD,IAAI,KAAKzF,KAAA,GAAQ,GAAG;UAClB,IAAMiG,CAAA,GAAID,kBAAA,CAAmB,KAAKhG,KAAA,GAAQ,KAAKnB,QAAQ;UACvD,KAAKmB,KAAA,GAAQmG,SAAA,CAAUC,KAAA,CAAM,KAAKpG,KAAA,GAAQiG,CAAA,GAAInB,KAAA,GAAQ,KAAK7F,kBAAA,EAAoB,GAAG,KAAKJ,QAAQ;QACvG,OAAa;UACL,IAAMoH,EAAA,GAAID,kBAAA,CAAmB,KAAKhG,KAAA,GAAQ,KAAKlB,eAAe;UAC9D,KAAKkB,KAAA,GAAQmG,SAAA,CAAUC,KAAA,CAAM,KAAKpG,KAAA,GAAQiG,EAAA,GAAInB,KAAA,GAAQ,KAAK9F,gBAAA,EAAkB,KAAKF,eAAA,EAAiB,CAAC;QACrG;MACF;MAID,IAAMwH,YAAA,GAAe,KAAKtG,KAAA,GAAQ8E,KAAA;MAElC,KAAK3F,IAAA,CAAKoC,QAAA,CAASgF,CAAA,IAAKX,IAAA,CAAKY,GAAA,CAAI,KAAKvG,eAAe,IAAIqG,YAAA;MACzD,KAAKnH,IAAA,CAAKoC,QAAA,CAASkF,CAAA,IAAKb,IAAA,CAAKc,GAAA,CAAI,KAAKzG,eAAe,IAAIqG,YAAA;MAIzD,KAAKnH,IAAA,CAAKwH,QAAA,CAASnF,CAAA,GAAI,KAAKvB,eAAA;IAC7B;IAAA;EAAA;IAAAM,GAAA;IAAAC,KAAA,EAID,SAAAY,YAAYC,QAAA,EAAUuF,OAAA,EAAS;MAC7B,IAAM7C,iBAAA,GAAoB,IAAI8C,mBAAA,CAAoB;QAChDC,KAAA,EAAO;QACP5C,SAAA,EAAW;QACX6C,YAAA,EAAc;QACdC,YAAA,EAAc;MACpB,CAAK;MACD,IAAMhD,eAAA,GAAkB,IAAI6C,mBAAA,CAAoB;QAC9CC,KAAA,EAAO;QACP5C,SAAA,EAAW;QACXC,GAAA,EAAKyC,OAAA;QACLG,YAAA,EAAc;QACdC,YAAA,EAAc;MACpB,CAAK;MAID,IAAM7F,IAAA,GAAO,IAAI8F,cAAA,CAAe5F,QAAA,EAAU2C,eAAe;MACzD7C,IAAA,CAAKwF,QAAA,CAASnF,CAAA,GAAI,CAACoE,IAAA,CAAKsB,EAAA,GAAK;MAI7B/F,IAAA,CAAK6C,eAAA,GAAkBA,eAAA;MACvB7C,IAAA,CAAK4C,iBAAA,GAAoBA,iBAAA;MAIzB5C,IAAA,CAAKgG,oBAAA,CAAqB,KAAKxI,YAAY;MAE3C,OAAOwC,IAAA;IACR;EAAA;EAAA,OAAA3C,mBAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}