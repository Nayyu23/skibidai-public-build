{"ast":null,"code":"import _defineProperty from \"C:/Users/Nayyu/Desktop/skibidai-public-build/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _regeneratorRuntime from \"C:/Users/Nayyu/Desktop/skibidai-public-build/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"C:/Users/Nayyu/Desktop/skibidai-public-build/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _slicedToArray from \"C:/Users/Nayyu/Desktop/skibidai-public-build/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _classCallCheck from \"C:/Users/Nayyu/Desktop/skibidai-public-build/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Nayyu/Desktop/skibidai-public-build/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"C:/Users/Nayyu/Desktop/skibidai-public-build/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/Nayyu/Desktop/skibidai-public-build/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nvar _FORMAT_MAP, _TYPE_MAP;\nvar __defProp = Object.defineProperty;\nvar __defNormalProp = function __defNormalProp(obj, key, value) {\n  return key in obj ? __defProp(obj, key, {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: value\n  }) : obj[key] = value;\n};\nvar __publicField = function __publicField(obj, key, value) {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nimport { Loader, RGBAFormat, RGBA_ASTC_4x4_Format, RGBA_BPTC_Format, RGBA_ETC2_EAC_Format, RGBA_PVRTC_4BPPV1_Format, RGBA_S3TC_DXT5_Format, RGB_ETC1_Format, RGB_ETC2_Format, RGB_PVRTC_4BPPV1_Format, RGB_S3TC_DXT1_Format, FileLoader, UnsignedByteType, CompressedTexture, LinearFilter, LinearMipmapLinearFilter, FloatType, HalfFloatType, DataTexture, RGFormat, RedFormat, RGBA_ASTC_6x6_Format } from \"three\";\nimport { WorkerPool } from \"../utils/WorkerPool.js\";\nimport { KHR_DF_FLAG_ALPHA_PREMULTIPLIED, read, VK_FORMAT_UNDEFINED, KHR_SUPERCOMPRESSION_ZSTD, KHR_SUPERCOMPRESSION_NONE, KHR_DF_PRIMARIES_BT709, KHR_DF_TRANSFER_SRGB, KHR_DF_PRIMARIES_DISPLAYP3, KHR_DF_PRIMARIES_UNSPECIFIED, VK_FORMAT_R32G32B32A32_SFLOAT, VK_FORMAT_R16G16B16A16_SFLOAT, VK_FORMAT_R8G8B8A8_UNORM, VK_FORMAT_R8G8B8A8_SRGB, VK_FORMAT_R32G32_SFLOAT, VK_FORMAT_R16G16_SFLOAT, VK_FORMAT_R8G8_UNORM, VK_FORMAT_R8G8_SRGB, VK_FORMAT_R32_SFLOAT, VK_FORMAT_R16_SFLOAT, VK_FORMAT_R8_SRGB, VK_FORMAT_R8_UNORM, VK_FORMAT_ASTC_6x6_SRGB_BLOCK, VK_FORMAT_ASTC_6x6_UNORM_BLOCK } from \"../libs/ktx-parse.js\";\nimport { ZSTDDecoder } from \"../libs/zstddec.js\";\nimport { CompressedCubeTexture } from \"../_polyfill/CompressedCubeTexture.js\";\nimport { CompressedArrayTexture } from \"../_polyfill/CompressedArrayTexture.js\";\nimport { Data3DTexture } from \"../_polyfill/Data3DTexture.js\";\nvar LinearEncoding = 3e3;\nvar sRGBEncoding = 3001;\nvar NoColorSpace = \"\";\nvar DisplayP3ColorSpace = \"display-p3\";\nvar LinearDisplayP3ColorSpace = \"display-p3-linear\";\nvar LinearSRGBColorSpace = \"srgb-linear\";\nvar SRGBColorSpace = \"srgb\";\nvar _taskCache = /* @__PURE__ */new WeakMap();\nvar _activeLoaders = 0;\nvar _zstd;\nvar _KTX2Loader = /*#__PURE__*/function (_Loader) {\n  _inherits(_KTX2Loader, _Loader);\n  var _super = _createSuper(_KTX2Loader);\n  function _KTX2Loader(manager) {\n    var _this;\n    _classCallCheck(this, _KTX2Loader);\n    _this = _super.call(this, manager);\n    _this.transcoderPath = \"\";\n    _this.transcoderBinary = null;\n    _this.transcoderPending = null;\n    _this.workerPool = new WorkerPool();\n    _this.workerSourceURL = \"\";\n    _this.workerConfig = null;\n    if (typeof MSC_TRANSCODER !== \"undefined\") {\n      console.warn('THREE.KTX2Loader: Please update to latest \"basis_transcoder\". \"msc_basis_transcoder\" is no longer supported in three.js r125+.');\n    }\n    return _this;\n  }\n  _createClass(_KTX2Loader, [{\n    key: \"setTranscoderPath\",\n    value: function setTranscoderPath(path) {\n      this.transcoderPath = path;\n      return this;\n    }\n  }, {\n    key: \"setWorkerLimit\",\n    value: function setWorkerLimit(num) {\n      this.workerPool.setWorkerLimit(num);\n      return this;\n    }\n  }, {\n    key: \"detectSupport\",\n    value: function detectSupport(renderer) {\n      this.workerConfig = {\n        astcSupported: renderer.extensions.has(\"WEBGL_compressed_texture_astc\"),\n        etc1Supported: renderer.extensions.has(\"WEBGL_compressed_texture_etc1\"),\n        etc2Supported: renderer.extensions.has(\"WEBGL_compressed_texture_etc\"),\n        dxtSupported: renderer.extensions.has(\"WEBGL_compressed_texture_s3tc\"),\n        bptcSupported: renderer.extensions.has(\"EXT_texture_compression_bptc\"),\n        pvrtcSupported: renderer.extensions.has(\"WEBGL_compressed_texture_pvrtc\") || renderer.extensions.has(\"WEBKIT_WEBGL_compressed_texture_pvrtc\")\n      };\n      if (renderer.capabilities.isWebGL2) {\n        this.workerConfig.etc1Supported = false;\n      }\n      return this;\n    }\n  }, {\n    key: \"init\",\n    value: function init() {\n      var _this2 = this;\n      if (!this.transcoderPending) {\n        var jsLoader = new FileLoader(this.manager);\n        jsLoader.setPath(this.transcoderPath);\n        jsLoader.setWithCredentials(this.withCredentials);\n        var jsContent = jsLoader.loadAsync(\"basis_transcoder.js\");\n        var binaryLoader = new FileLoader(this.manager);\n        binaryLoader.setPath(this.transcoderPath);\n        binaryLoader.setResponseType(\"arraybuffer\");\n        binaryLoader.setWithCredentials(this.withCredentials);\n        var binaryContent = binaryLoader.loadAsync(\"basis_transcoder.wasm\");\n        this.transcoderPending = Promise.all([jsContent, binaryContent]).then(function (_ref) {\n          var _ref2 = _slicedToArray(_ref, 2),\n            jsContent2 = _ref2[0],\n            binaryContent2 = _ref2[1];\n          var fn = _KTX2Loader.BasisWorker.toString();\n          var body = [\"/* constants */\", \"let _EngineFormat = \" + JSON.stringify(_KTX2Loader.EngineFormat), \"let _TranscoderFormat = \" + JSON.stringify(_KTX2Loader.TranscoderFormat), \"let _BasisFormat = \" + JSON.stringify(_KTX2Loader.BasisFormat), \"/* basis_transcoder.js */\", jsContent2, \"/* worker */\", fn.substring(fn.indexOf(\"{\") + 1, fn.lastIndexOf(\"}\"))].join(\"\\n\");\n          _this2.workerSourceURL = URL.createObjectURL(new Blob([body]));\n          _this2.transcoderBinary = binaryContent2;\n          _this2.workerPool.setWorkerCreator(function () {\n            var worker = new Worker(_this2.workerSourceURL);\n            var transcoderBinary = _this2.transcoderBinary.slice(0);\n            worker.postMessage({\n              type: \"init\",\n              config: _this2.workerConfig,\n              transcoderBinary: transcoderBinary\n            }, [transcoderBinary]);\n            return worker;\n          });\n        });\n        if (_activeLoaders > 0) {\n          console.warn(\"THREE.KTX2Loader: Multiple active KTX2 loaders may cause performance issues. Use a single KTX2Loader instance, or call .dispose() on old instances.\");\n        }\n        _activeLoaders++;\n      }\n      return this.transcoderPending;\n    }\n  }, {\n    key: \"load\",\n    value: function load(url, onLoad, onProgress, onError) {\n      var _this3 = this;\n      if (this.workerConfig === null) {\n        throw new Error(\"THREE.KTX2Loader: Missing initialization with `.detectSupport( renderer )`.\");\n      }\n      var loader = new FileLoader(this.manager);\n      loader.setResponseType(\"arraybuffer\");\n      loader.setWithCredentials(this.withCredentials);\n      loader.load(url, function (buffer) {\n        if (_taskCache.has(buffer)) {\n          var cachedTask = _taskCache.get(buffer);\n          return cachedTask.promise.then(onLoad).catch(onError);\n        }\n        _this3._createTexture(buffer).then(function (texture) {\n          return onLoad ? onLoad(texture) : null;\n        }).catch(onError);\n      }, onProgress, onError);\n    }\n  }, {\n    key: \"_createTextureFrom\",\n    value: function _createTextureFrom(transcodeResult, container) {\n      var faces = transcodeResult.faces,\n        width = transcodeResult.width,\n        height = transcodeResult.height,\n        format = transcodeResult.format,\n        type = transcodeResult.type,\n        error = transcodeResult.error,\n        dfdFlags = transcodeResult.dfdFlags;\n      if (type === \"error\") return Promise.reject(error);\n      var texture;\n      if (container.faceCount === 6) {\n        texture = new CompressedCubeTexture(faces, format, UnsignedByteType);\n      } else {\n        var mipmaps = faces[0].mipmaps;\n        texture = container.layerCount > 1 ? new CompressedArrayTexture(mipmaps, width, height, container.layerCount, format, UnsignedByteType) : new CompressedTexture(mipmaps, width, height, format, UnsignedByteType);\n      }\n      texture.minFilter = faces[0].mipmaps.length === 1 ? LinearFilter : LinearMipmapLinearFilter;\n      texture.magFilter = LinearFilter;\n      texture.generateMipmaps = false;\n      texture.needsUpdate = true;\n      var colorSpace = parseColorSpace(container);\n      if (\"colorSpace\" in texture) texture.colorSpace = colorSpace;else texture.encoding = colorSpace === SRGBColorSpace ? sRGBEncoding : LinearEncoding;\n      texture.premultiplyAlpha = !!(dfdFlags & KHR_DF_FLAG_ALPHA_PREMULTIPLIED);\n      return texture;\n    }\n    /**\n     * @param {ArrayBuffer} buffer\n     * @param {object?} config\n     * @return {Promise<CompressedTexture|CompressedArrayTexture|DataTexture|Data3DTexture>}\n     */\n  }, {\n    key: \"_createTexture\",\n    value: function () {\n      var _createTexture2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(buffer) {\n        var _this4 = this;\n        var config,\n          container,\n          taskConfig,\n          texturePending,\n          _args = arguments;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              config = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n              container = read(new Uint8Array(buffer));\n              if (!(container.vkFormat !== VK_FORMAT_UNDEFINED)) {\n                _context.next = 4;\n                break;\n              }\n              return _context.abrupt(\"return\", createRawTexture(container));\n            case 4:\n              taskConfig = config;\n              texturePending = this.init().then(function () {\n                return _this4.workerPool.postMessage({\n                  type: \"transcode\",\n                  buffer: buffer,\n                  taskConfig: taskConfig\n                }, [buffer]);\n              }).then(function (e) {\n                return _this4._createTextureFrom(e.data, container);\n              });\n              _taskCache.set(buffer, {\n                promise: texturePending\n              });\n              return _context.abrupt(\"return\", texturePending);\n            case 8:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }));\n      function _createTexture(_x) {\n        return _createTexture2.apply(this, arguments);\n      }\n      return _createTexture;\n    }()\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      this.workerPool.dispose();\n      if (this.workerSourceURL) URL.revokeObjectURL(this.workerSourceURL);\n      _activeLoaders--;\n      return this;\n    }\n  }]);\n  return _KTX2Loader;\n}(Loader);\nvar KTX2Loader = _KTX2Loader;\n/* CONSTANTS */\n__publicField(KTX2Loader, \"BasisFormat\", {\n  ETC1S: 0,\n  UASTC_4x4: 1\n});\n__publicField(KTX2Loader, \"TranscoderFormat\", {\n  ETC1: 0,\n  ETC2: 1,\n  BC1: 2,\n  BC3: 3,\n  BC4: 4,\n  BC5: 5,\n  BC7_M6_OPAQUE_ONLY: 6,\n  BC7_M5: 7,\n  PVRTC1_4_RGB: 8,\n  PVRTC1_4_RGBA: 9,\n  ASTC_4x4: 10,\n  ATC_RGB: 11,\n  ATC_RGBA_INTERPOLATED_ALPHA: 12,\n  RGBA32: 13,\n  RGB565: 14,\n  BGR565: 15,\n  RGBA4444: 16\n});\n__publicField(KTX2Loader, \"EngineFormat\", {\n  RGBAFormat: RGBAFormat,\n  RGBA_ASTC_4x4_Format: RGBA_ASTC_4x4_Format,\n  RGBA_BPTC_Format: RGBA_BPTC_Format,\n  RGBA_ETC2_EAC_Format: RGBA_ETC2_EAC_Format,\n  RGBA_PVRTC_4BPPV1_Format: RGBA_PVRTC_4BPPV1_Format,\n  RGBA_S3TC_DXT5_Format: RGBA_S3TC_DXT5_Format,\n  RGB_ETC1_Format: RGB_ETC1_Format,\n  RGB_ETC2_Format: RGB_ETC2_Format,\n  RGB_PVRTC_4BPPV1_Format: RGB_PVRTC_4BPPV1_Format,\n  RGB_S3TC_DXT1_Format: RGB_S3TC_DXT1_Format\n});\n/* WEB WORKER */\n__publicField(KTX2Loader, \"BasisWorker\", function () {\n  var config;\n  var transcoderPending;\n  var BasisModule;\n  var EngineFormat = _EngineFormat;\n  var TranscoderFormat = _TranscoderFormat;\n  var BasisFormat = _BasisFormat;\n  self.addEventListener(\"message\", function (e) {\n    var message = e.data;\n    switch (message.type) {\n      case \"init\":\n        config = message.config;\n        init(message.transcoderBinary);\n        break;\n      case \"transcode\":\n        transcoderPending.then(function () {\n          try {\n            var _transcode = transcode(message.buffer),\n              faces = _transcode.faces,\n              buffers = _transcode.buffers,\n              width = _transcode.width,\n              height = _transcode.height,\n              hasAlpha = _transcode.hasAlpha,\n              format = _transcode.format,\n              dfdFlags = _transcode.dfdFlags;\n            self.postMessage({\n              type: \"transcode\",\n              id: message.id,\n              faces: faces,\n              width: width,\n              height: height,\n              hasAlpha: hasAlpha,\n              format: format,\n              dfdFlags: dfdFlags\n            }, buffers);\n          } catch (error) {\n            console.error(error);\n            self.postMessage({\n              type: \"error\",\n              id: message.id,\n              error: error.message\n            });\n          }\n        });\n        break;\n    }\n  });\n  function init(wasmBinary) {\n    transcoderPending = new Promise(function (resolve) {\n      BasisModule = {\n        wasmBinary: wasmBinary,\n        onRuntimeInitialized: resolve\n      };\n      BASIS(BasisModule);\n    }).then(function () {\n      BasisModule.initializeBasis();\n      if (BasisModule.KTX2File === void 0) {\n        console.warn(\"THREE.KTX2Loader: Please update Basis Universal transcoder.\");\n      }\n    });\n  }\n  function transcode(buffer) {\n    var ktx2File = new BasisModule.KTX2File(new Uint8Array(buffer));\n    function cleanup() {\n      ktx2File.close();\n      ktx2File.delete();\n    }\n    if (!ktx2File.isValid()) {\n      cleanup();\n      throw new Error(\"THREE.KTX2Loader:\tInvalid or unsupported .ktx2 file\");\n    }\n    var basisFormat = ktx2File.isUASTC() ? BasisFormat.UASTC_4x4 : BasisFormat.ETC1S;\n    var width = ktx2File.getWidth();\n    var height = ktx2File.getHeight();\n    var layerCount = ktx2File.getLayers() || 1;\n    var levelCount = ktx2File.getLevels();\n    var faceCount = ktx2File.getFaces();\n    var hasAlpha = ktx2File.getHasAlpha();\n    var dfdFlags = ktx2File.getDFDFlags();\n    var _getTranscoderFormat = getTranscoderFormat(basisFormat, width, height, hasAlpha),\n      transcoderFormat = _getTranscoderFormat.transcoderFormat,\n      engineFormat = _getTranscoderFormat.engineFormat;\n    if (!width || !height || !levelCount) {\n      cleanup();\n      throw new Error(\"THREE.KTX2Loader:\tInvalid texture\");\n    }\n    if (!ktx2File.startTranscoding()) {\n      cleanup();\n      throw new Error(\"THREE.KTX2Loader: .startTranscoding failed\");\n    }\n    var faces = [];\n    var buffers = [];\n    for (var face = 0; face < faceCount; face++) {\n      var mipmaps = [];\n      for (var mip = 0; mip < levelCount; mip++) {\n        var layerMips = [];\n        var mipWidth = void 0,\n          mipHeight = void 0;\n        for (var layer = 0; layer < layerCount; layer++) {\n          var levelInfo = ktx2File.getImageLevelInfo(mip, layer, face);\n          if (face === 0 && mip === 0 && layer === 0 && (levelInfo.origWidth % 4 !== 0 || levelInfo.origHeight % 4 !== 0)) {\n            console.warn(\"THREE.KTX2Loader: ETC1S and UASTC textures should use multiple-of-four dimensions.\");\n          }\n          if (levelCount > 1) {\n            mipWidth = levelInfo.origWidth;\n            mipHeight = levelInfo.origHeight;\n          } else {\n            mipWidth = levelInfo.width;\n            mipHeight = levelInfo.height;\n          }\n          var dst = new Uint8Array(ktx2File.getImageTranscodedSizeInBytes(mip, layer, 0, transcoderFormat));\n          var status = ktx2File.transcodeImage(dst, mip, layer, face, transcoderFormat, 0, -1, -1);\n          if (!status) {\n            cleanup();\n            throw new Error(\"THREE.KTX2Loader: .transcodeImage failed.\");\n          }\n          layerMips.push(dst);\n        }\n        var mipData = concat(layerMips);\n        mipmaps.push({\n          data: mipData,\n          width: mipWidth,\n          height: mipHeight\n        });\n        buffers.push(mipData.buffer);\n      }\n      faces.push({\n        mipmaps: mipmaps,\n        width: width,\n        height: height,\n        format: engineFormat\n      });\n    }\n    cleanup();\n    return {\n      faces: faces,\n      buffers: buffers,\n      width: width,\n      height: height,\n      hasAlpha: hasAlpha,\n      format: engineFormat,\n      dfdFlags: dfdFlags\n    };\n  }\n  var FORMAT_OPTIONS = [{\n    if: \"astcSupported\",\n    basisFormat: [BasisFormat.UASTC_4x4],\n    transcoderFormat: [TranscoderFormat.ASTC_4x4, TranscoderFormat.ASTC_4x4],\n    engineFormat: [EngineFormat.RGBA_ASTC_4x4_Format, EngineFormat.RGBA_ASTC_4x4_Format],\n    priorityETC1S: Infinity,\n    priorityUASTC: 1,\n    needsPowerOfTwo: false\n  }, {\n    if: \"bptcSupported\",\n    basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n    transcoderFormat: [TranscoderFormat.BC7_M5, TranscoderFormat.BC7_M5],\n    engineFormat: [EngineFormat.RGBA_BPTC_Format, EngineFormat.RGBA_BPTC_Format],\n    priorityETC1S: 3,\n    priorityUASTC: 2,\n    needsPowerOfTwo: false\n  }, {\n    if: \"dxtSupported\",\n    basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n    transcoderFormat: [TranscoderFormat.BC1, TranscoderFormat.BC3],\n    engineFormat: [EngineFormat.RGB_S3TC_DXT1_Format, EngineFormat.RGBA_S3TC_DXT5_Format],\n    priorityETC1S: 4,\n    priorityUASTC: 5,\n    needsPowerOfTwo: false\n  }, {\n    if: \"etc2Supported\",\n    basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n    transcoderFormat: [TranscoderFormat.ETC1, TranscoderFormat.ETC2],\n    engineFormat: [EngineFormat.RGB_ETC2_Format, EngineFormat.RGBA_ETC2_EAC_Format],\n    priorityETC1S: 1,\n    priorityUASTC: 3,\n    needsPowerOfTwo: false\n  }, {\n    if: \"etc1Supported\",\n    basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n    transcoderFormat: [TranscoderFormat.ETC1],\n    engineFormat: [EngineFormat.RGB_ETC1_Format],\n    priorityETC1S: 2,\n    priorityUASTC: 4,\n    needsPowerOfTwo: false\n  }, {\n    if: \"pvrtcSupported\",\n    basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n    transcoderFormat: [TranscoderFormat.PVRTC1_4_RGB, TranscoderFormat.PVRTC1_4_RGBA],\n    engineFormat: [EngineFormat.RGB_PVRTC_4BPPV1_Format, EngineFormat.RGBA_PVRTC_4BPPV1_Format],\n    priorityETC1S: 5,\n    priorityUASTC: 6,\n    needsPowerOfTwo: true\n  }];\n  var ETC1S_OPTIONS = FORMAT_OPTIONS.sort(function (a, b) {\n    return a.priorityETC1S - b.priorityETC1S;\n  });\n  var UASTC_OPTIONS = FORMAT_OPTIONS.sort(function (a, b) {\n    return a.priorityUASTC - b.priorityUASTC;\n  });\n  function getTranscoderFormat(basisFormat, width, height, hasAlpha) {\n    var transcoderFormat;\n    var engineFormat;\n    var options = basisFormat === BasisFormat.ETC1S ? ETC1S_OPTIONS : UASTC_OPTIONS;\n    for (var i = 0; i < options.length; i++) {\n      var opt = options[i];\n      if (!config[opt.if]) continue;\n      if (!opt.basisFormat.includes(basisFormat)) continue;\n      if (hasAlpha && opt.transcoderFormat.length < 2) continue;\n      if (opt.needsPowerOfTwo && !(isPowerOfTwo(width) && isPowerOfTwo(height))) continue;\n      transcoderFormat = opt.transcoderFormat[hasAlpha ? 1 : 0];\n      engineFormat = opt.engineFormat[hasAlpha ? 1 : 0];\n      return {\n        transcoderFormat: transcoderFormat,\n        engineFormat: engineFormat\n      };\n    }\n    console.warn(\"THREE.KTX2Loader: No suitable compressed texture format found. Decoding to RGBA32.\");\n    transcoderFormat = TranscoderFormat.RGBA32;\n    engineFormat = EngineFormat.RGBAFormat;\n    return {\n      transcoderFormat: transcoderFormat,\n      engineFormat: engineFormat\n    };\n  }\n  function isPowerOfTwo(value) {\n    if (value <= 2) return true;\n    return (value & value - 1) === 0 && value !== 0;\n  }\n  function concat(arrays) {\n    if (arrays.length === 1) return arrays[0];\n    var totalByteLength = 0;\n    for (var i = 0; i < arrays.length; i++) {\n      var array = arrays[i];\n      totalByteLength += array.byteLength;\n    }\n    var result = new Uint8Array(totalByteLength);\n    var byteOffset = 0;\n    for (var _i = 0; _i < arrays.length; _i++) {\n      var _array = arrays[_i];\n      result.set(_array, byteOffset);\n      byteOffset += _array.byteLength;\n    }\n    return result;\n  }\n});\nvar UNCOMPRESSED_FORMATS = /* @__PURE__ */new Set([RGBAFormat, RGFormat, RedFormat]);\nvar FORMAT_MAP = (_FORMAT_MAP = {}, _defineProperty(_FORMAT_MAP, VK_FORMAT_R32G32B32A32_SFLOAT, RGBAFormat), _defineProperty(_FORMAT_MAP, VK_FORMAT_R16G16B16A16_SFLOAT, RGBAFormat), _defineProperty(_FORMAT_MAP, VK_FORMAT_R8G8B8A8_UNORM, RGBAFormat), _defineProperty(_FORMAT_MAP, VK_FORMAT_R8G8B8A8_SRGB, RGBAFormat), _defineProperty(_FORMAT_MAP, VK_FORMAT_R32G32_SFLOAT, RGFormat), _defineProperty(_FORMAT_MAP, VK_FORMAT_R16G16_SFLOAT, RGFormat), _defineProperty(_FORMAT_MAP, VK_FORMAT_R8G8_UNORM, RGFormat), _defineProperty(_FORMAT_MAP, VK_FORMAT_R8G8_SRGB, RGFormat), _defineProperty(_FORMAT_MAP, VK_FORMAT_R32_SFLOAT, RedFormat), _defineProperty(_FORMAT_MAP, VK_FORMAT_R16_SFLOAT, RedFormat), _defineProperty(_FORMAT_MAP, VK_FORMAT_R8_SRGB, RedFormat), _defineProperty(_FORMAT_MAP, VK_FORMAT_R8_UNORM, RedFormat), _defineProperty(_FORMAT_MAP, VK_FORMAT_ASTC_6x6_SRGB_BLOCK, RGBA_ASTC_6x6_Format), _defineProperty(_FORMAT_MAP, VK_FORMAT_ASTC_6x6_UNORM_BLOCK, RGBA_ASTC_6x6_Format), _FORMAT_MAP);\nvar TYPE_MAP = (_TYPE_MAP = {}, _defineProperty(_TYPE_MAP, VK_FORMAT_R32G32B32A32_SFLOAT, FloatType), _defineProperty(_TYPE_MAP, VK_FORMAT_R16G16B16A16_SFLOAT, HalfFloatType), _defineProperty(_TYPE_MAP, VK_FORMAT_R8G8B8A8_UNORM, UnsignedByteType), _defineProperty(_TYPE_MAP, VK_FORMAT_R8G8B8A8_SRGB, UnsignedByteType), _defineProperty(_TYPE_MAP, VK_FORMAT_R32G32_SFLOAT, FloatType), _defineProperty(_TYPE_MAP, VK_FORMAT_R16G16_SFLOAT, HalfFloatType), _defineProperty(_TYPE_MAP, VK_FORMAT_R8G8_UNORM, UnsignedByteType), _defineProperty(_TYPE_MAP, VK_FORMAT_R8G8_SRGB, UnsignedByteType), _defineProperty(_TYPE_MAP, VK_FORMAT_R32_SFLOAT, FloatType), _defineProperty(_TYPE_MAP, VK_FORMAT_R16_SFLOAT, HalfFloatType), _defineProperty(_TYPE_MAP, VK_FORMAT_R8_SRGB, UnsignedByteType), _defineProperty(_TYPE_MAP, VK_FORMAT_R8_UNORM, UnsignedByteType), _defineProperty(_TYPE_MAP, VK_FORMAT_ASTC_6x6_SRGB_BLOCK, UnsignedByteType), _defineProperty(_TYPE_MAP, VK_FORMAT_ASTC_6x6_UNORM_BLOCK, UnsignedByteType), _TYPE_MAP);\nfunction createRawTexture(_x2) {\n  return _createRawTexture.apply(this, arguments);\n}\nfunction _createRawTexture() {\n  _createRawTexture = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(container) {\n    var vkFormat, zstd, mipmaps, levelIndex, levelWidth, levelHeight, levelDepth, level, levelData, data, texture, colorSpace;\n    return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n      while (1) switch (_context3.prev = _context3.next) {\n        case 0:\n          vkFormat = container.vkFormat;\n          if (!(FORMAT_MAP[vkFormat] === void 0)) {\n            _context3.next = 3;\n            break;\n          }\n          throw new Error(\"THREE.KTX2Loader: Unsupported vkFormat.\");\n        case 3:\n          if (!(container.supercompressionScheme === KHR_SUPERCOMPRESSION_ZSTD)) {\n            _context3.next = 8;\n            break;\n          }\n          if (!_zstd) {\n            _zstd = new Promise( /*#__PURE__*/function () {\n              var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(resolve) {\n                var zstd2;\n                return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n                  while (1) switch (_context2.prev = _context2.next) {\n                    case 0:\n                      zstd2 = new ZSTDDecoder();\n                      _context2.next = 3;\n                      return zstd2.init();\n                    case 3:\n                      resolve(zstd2);\n                    case 4:\n                    case \"end\":\n                      return _context2.stop();\n                  }\n                }, _callee2);\n              }));\n              return function (_x3) {\n                return _ref3.apply(this, arguments);\n              };\n            }());\n          }\n          _context3.next = 7;\n          return _zstd;\n        case 7:\n          zstd = _context3.sent;\n        case 8:\n          mipmaps = [];\n          levelIndex = 0;\n        case 10:\n          if (!(levelIndex < container.levels.length)) {\n            _context3.next = 31;\n            break;\n          }\n          levelWidth = Math.max(1, container.pixelWidth >> levelIndex);\n          levelHeight = Math.max(1, container.pixelHeight >> levelIndex);\n          levelDepth = container.pixelDepth ? Math.max(1, container.pixelDepth >> levelIndex) : 0;\n          level = container.levels[levelIndex];\n          levelData = void 0;\n          if (!(container.supercompressionScheme === KHR_SUPERCOMPRESSION_NONE)) {\n            _context3.next = 20;\n            break;\n          }\n          levelData = level.levelData;\n          _context3.next = 25;\n          break;\n        case 20:\n          if (!(container.supercompressionScheme === KHR_SUPERCOMPRESSION_ZSTD)) {\n            _context3.next = 24;\n            break;\n          }\n          levelData = zstd.decode(level.levelData, level.uncompressedByteLength);\n          _context3.next = 25;\n          break;\n        case 24:\n          throw new Error(\"THREE.KTX2Loader: Unsupported supercompressionScheme.\");\n        case 25:\n          data = void 0;\n          if (TYPE_MAP[vkFormat] === FloatType) {\n            data = new Float32Array(levelData.buffer, levelData.byteOffset, levelData.byteLength / Float32Array.BYTES_PER_ELEMENT);\n          } else if (TYPE_MAP[vkFormat] === HalfFloatType) {\n            data = new Uint16Array(levelData.buffer, levelData.byteOffset, levelData.byteLength / Uint16Array.BYTES_PER_ELEMENT);\n          } else {\n            data = levelData;\n          }\n          mipmaps.push({\n            data: data,\n            width: levelWidth,\n            height: levelHeight,\n            depth: levelDepth\n          });\n        case 28:\n          levelIndex++;\n          _context3.next = 10;\n          break;\n        case 31:\n          if (!UNCOMPRESSED_FORMATS.has(FORMAT_MAP[vkFormat])) {\n            _context3.next = 35;\n            break;\n          }\n          texture = container.pixelDepth === 0 ? new DataTexture(mipmaps[0].data, container.pixelWidth, container.pixelHeight) : new Data3DTexture(mipmaps[0].data, container.pixelWidth, container.pixelHeight, container.pixelDepth);\n          _context3.next = 38;\n          break;\n        case 35:\n          if (!(container.pixelDepth > 0)) {\n            _context3.next = 37;\n            break;\n          }\n          throw new Error(\"THREE.KTX2Loader: Unsupported pixelDepth.\");\n        case 37:\n          texture = new CompressedTexture(mipmaps, container.pixelWidth, container.pixelHeight);\n        case 38:\n          texture.mipmaps = mipmaps;\n          texture.type = TYPE_MAP[vkFormat];\n          texture.format = FORMAT_MAP[vkFormat];\n          texture.needsUpdate = true;\n          colorSpace = parseColorSpace(container);\n          if (\"colorSpace\" in texture) texture.colorSpace = colorSpace;else texture.encoding = colorSpace === SRGBColorSpace ? sRGBEncoding : LinearEncoding;\n          return _context3.abrupt(\"return\", Promise.resolve(texture));\n        case 45:\n        case \"end\":\n          return _context3.stop();\n      }\n    }, _callee3);\n  }));\n  return _createRawTexture.apply(this, arguments);\n}\nfunction parseColorSpace(container) {\n  var dfd = container.dataFormatDescriptor[0];\n  if (dfd.colorPrimaries === KHR_DF_PRIMARIES_BT709) {\n    return dfd.transferFunction === KHR_DF_TRANSFER_SRGB ? SRGBColorSpace : LinearSRGBColorSpace;\n  } else if (dfd.colorPrimaries === KHR_DF_PRIMARIES_DISPLAYP3) {\n    return dfd.transferFunction === KHR_DF_TRANSFER_SRGB ? DisplayP3ColorSpace : LinearDisplayP3ColorSpace;\n  } else if (dfd.colorPrimaries === KHR_DF_PRIMARIES_UNSPECIFIED) {\n    return NoColorSpace;\n  } else {\n    console.warn(\"THREE.KTX2Loader: Unsupported color primaries, \\\"\".concat(dfd.colorPrimaries, \"\\\"\"));\n    return NoColorSpace;\n  }\n}\nexport { KTX2Loader };","map":{"version":3,"names":["LinearEncoding","sRGBEncoding","NoColorSpace","DisplayP3ColorSpace","LinearDisplayP3ColorSpace","LinearSRGBColorSpace","SRGBColorSpace","_taskCache","WeakMap","_activeLoaders","_zstd","_KTX2Loader","_Loader","_inherits","_super","_createSuper","manager","_this","_classCallCheck","call","transcoderPath","transcoderBinary","transcoderPending","workerPool","WorkerPool","workerSourceURL","workerConfig","MSC_TRANSCODER","console","warn","_createClass","key","value","setTranscoderPath","path","setWorkerLimit","num","detectSupport","renderer","astcSupported","extensions","has","etc1Supported","etc2Supported","dxtSupported","bptcSupported","pvrtcSupported","capabilities","isWebGL2","init","_this2","jsLoader","FileLoader","setPath","setWithCredentials","withCredentials","jsContent","loadAsync","binaryLoader","setResponseType","binaryContent","Promise","all","then","_ref","_ref2","_slicedToArray","jsContent2","binaryContent2","fn","BasisWorker","toString","body","JSON","stringify","EngineFormat","TranscoderFormat","BasisFormat","substring","indexOf","lastIndexOf","join","URL","createObjectURL","Blob","setWorkerCreator","worker","Worker","slice","postMessage","type","config","load","url","onLoad","onProgress","onError","_this3","Error","loader","buffer","cachedTask","get","promise","catch","_createTexture","texture","_createTextureFrom","transcodeResult","container","faces","width","height","format","error","dfdFlags","reject","faceCount","CompressedCubeTexture","UnsignedByteType","mipmaps","layerCount","CompressedArrayTexture","CompressedTexture","minFilter","length","LinearFilter","LinearMipmapLinearFilter","magFilter","generateMipmaps","needsUpdate","colorSpace","parseColorSpace","encoding","premultiplyAlpha","KHR_DF_FLAG_ALPHA_PREMULTIPLIED","_createTexture2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","_this4","taskConfig","texturePending","_args","arguments","wrap","_callee$","_context","prev","next","undefined","read","Uint8Array","vkFormat","VK_FORMAT_UNDEFINED","abrupt","createRawTexture","e","data","set","stop","_x","apply","dispose","revokeObjectURL","Loader","KTX2Loader","__publicField","ETC1S","UASTC_4x4","ETC1","ETC2","BC1","BC3","BC4","BC5","BC7_M6_OPAQUE_ONLY","BC7_M5","PVRTC1_4_RGB","PVRTC1_4_RGBA","ASTC_4x4","ATC_RGB","ATC_RGBA_INTERPOLATED_ALPHA","RGBA32","RGB565","BGR565","RGBA4444","RGBAFormat","RGBA_ASTC_4x4_Format","RGBA_BPTC_Format","RGBA_ETC2_EAC_Format","RGBA_PVRTC_4BPPV1_Format","RGBA_S3TC_DXT5_Format","RGB_ETC1_Format","RGB_ETC2_Format","RGB_PVRTC_4BPPV1_Format","RGB_S3TC_DXT1_Format","BasisModule","_EngineFormat","_TranscoderFormat","_BasisFormat","self","addEventListener","message","_transcode","transcode","buffers","hasAlpha","id","wasmBinary","resolve","onRuntimeInitialized","BASIS","initializeBasis","KTX2File","ktx2File","cleanup","close","delete","isValid","basisFormat","isUASTC","getWidth","getHeight","getLayers","levelCount","getLevels","getFaces","getHasAlpha","getDFDFlags","_getTranscoderFormat","getTranscoderFormat","transcoderFormat","engineFormat","startTranscoding","face","mip","layerMips","mipWidth","mipHeight","layer","levelInfo","getImageLevelInfo","origWidth","origHeight","dst","getImageTranscodedSizeInBytes","status","transcodeImage","push","mipData","concat","FORMAT_OPTIONS","if","priorityETC1S","Infinity","priorityUASTC","needsPowerOfTwo","ETC1S_OPTIONS","sort","a","b","UASTC_OPTIONS","options","i","opt","includes","isPowerOfTwo","arrays","totalByteLength","array","byteLength","result","byteOffset","UNCOMPRESSED_FORMATS","Set","RGFormat","RedFormat","FORMAT_MAP","_FORMAT_MAP","_defineProperty","VK_FORMAT_R32G32B32A32_SFLOAT","VK_FORMAT_R16G16B16A16_SFLOAT","VK_FORMAT_R8G8B8A8_UNORM","VK_FORMAT_R8G8B8A8_SRGB","VK_FORMAT_R32G32_SFLOAT","VK_FORMAT_R16G16_SFLOAT","VK_FORMAT_R8G8_UNORM","VK_FORMAT_R8G8_SRGB","VK_FORMAT_R32_SFLOAT","VK_FORMAT_R16_SFLOAT","VK_FORMAT_R8_SRGB","VK_FORMAT_R8_UNORM","VK_FORMAT_ASTC_6x6_SRGB_BLOCK","RGBA_ASTC_6x6_Format","VK_FORMAT_ASTC_6x6_UNORM_BLOCK","TYPE_MAP","_TYPE_MAP","FloatType","HalfFloatType","_x2","_createRawTexture","_callee3","zstd","levelIndex","levelWidth","levelHeight","levelDepth","level","levelData","_callee3$","_context3","supercompressionScheme","KHR_SUPERCOMPRESSION_ZSTD","_ref3","_callee2","zstd2","_callee2$","_context2","ZSTDDecoder","_x3","sent","levels","Math","max","pixelWidth","pixelHeight","pixelDepth","KHR_SUPERCOMPRESSION_NONE","decode","uncompressedByteLength","Float32Array","BYTES_PER_ELEMENT","Uint16Array","depth","DataTexture","Data3DTexture","dfd","dataFormatDescriptor","colorPrimaries","KHR_DF_PRIMARIES_BT709","transferFunction","KHR_DF_TRANSFER_SRGB","KHR_DF_PRIMARIES_DISPLAYP3","KHR_DF_PRIMARIES_UNSPECIFIED"],"sources":["C:\\Users\\Nayyu\\Desktop\\skibidai-public-build\\node_modules\\src\\loaders\\KTX2Loader.js"],"sourcesContent":["/**\n * Loader for KTX 2.0 GPU Texture containers.\n *\n * KTX 2.0 is a container format for various GPU texture formats. The loader\n * supports Basis Universal GPU textures, which can be quickly transcoded to\n * a wide variety of GPU texture compression formats, as well as some\n * uncompressed DataTexture and Data3DTexture formats.\n *\n * References:\n * - KTX: http://github.khronos.org/KTX-Specification/\n * - DFD: https://www.khronos.org/registry/DataFormat/specs/1.3/dataformat.1.3.html#basicdescriptor\n */\n\nimport {\n  CompressedTexture,\n  DataTexture,\n  FileLoader,\n  FloatType,\n  HalfFloatType,\n  LinearFilter,\n  LinearMipmapLinearFilter,\n  Loader,\n  RedFormat,\n  RGB_ETC1_Format,\n  RGB_ETC2_Format,\n  RGB_PVRTC_4BPPV1_Format,\n  RGB_S3TC_DXT1_Format,\n  RGBA_ASTC_4x4_Format,\n  RGBA_ASTC_6x6_Format,\n  RGBA_BPTC_Format,\n  RGBA_ETC2_EAC_Format,\n  RGBA_PVRTC_4BPPV1_Format,\n  RGBA_S3TC_DXT5_Format,\n  RGBAFormat,\n  RGFormat,\n  UnsignedByteType,\n} from 'three'\nimport { WorkerPool } from '../utils/WorkerPool'\nimport {\n  read,\n  KHR_DF_FLAG_ALPHA_PREMULTIPLIED,\n  KHR_DF_TRANSFER_SRGB,\n  KHR_SUPERCOMPRESSION_NONE,\n  KHR_SUPERCOMPRESSION_ZSTD,\n  VK_FORMAT_UNDEFINED,\n  VK_FORMAT_R16_SFLOAT,\n  VK_FORMAT_R16G16_SFLOAT,\n  VK_FORMAT_R16G16B16A16_SFLOAT,\n  VK_FORMAT_R32_SFLOAT,\n  VK_FORMAT_R32G32_SFLOAT,\n  VK_FORMAT_R32G32B32A32_SFLOAT,\n  VK_FORMAT_R8_SRGB,\n  VK_FORMAT_R8_UNORM,\n  VK_FORMAT_R8G8_SRGB,\n  VK_FORMAT_R8G8_UNORM,\n  VK_FORMAT_R8G8B8A8_SRGB,\n  VK_FORMAT_R8G8B8A8_UNORM,\n  VK_FORMAT_ASTC_6x6_SRGB_BLOCK,\n  VK_FORMAT_ASTC_6x6_UNORM_BLOCK,\n  KHR_DF_PRIMARIES_UNSPECIFIED,\n  KHR_DF_PRIMARIES_BT709,\n  KHR_DF_PRIMARIES_DISPLAYP3,\n} from '../libs/ktx-parse'\nimport { ZSTDDecoder } from '../libs/zstddec'\nimport { CompressedCubeTexture } from '../_polyfill/CompressedCubeTexture'\nimport { CompressedArrayTexture } from '../_polyfill/CompressedArrayTexture'\nimport { Data3DTexture } from '../_polyfill/Data3DTexture'\n\nconst LinearEncoding = 3000\nconst sRGBEncoding = 3001\n\nconst NoColorSpace = ''\nconst DisplayP3ColorSpace = 'display-p3'\nconst LinearDisplayP3ColorSpace = 'display-p3-linear'\nconst LinearSRGBColorSpace = 'srgb-linear'\nconst SRGBColorSpace = 'srgb'\n\nconst _taskCache = new WeakMap()\n\nlet _activeLoaders = 0\n\nlet _zstd\n\nclass KTX2Loader extends Loader {\n  /* CONSTANTS */\n\n  static BasisFormat = {\n    ETC1S: 0,\n    UASTC_4x4: 1,\n  }\n\n  static TranscoderFormat = {\n    ETC1: 0,\n    ETC2: 1,\n    BC1: 2,\n    BC3: 3,\n    BC4: 4,\n    BC5: 5,\n    BC7_M6_OPAQUE_ONLY: 6,\n    BC7_M5: 7,\n    PVRTC1_4_RGB: 8,\n    PVRTC1_4_RGBA: 9,\n    ASTC_4x4: 10,\n    ATC_RGB: 11,\n    ATC_RGBA_INTERPOLATED_ALPHA: 12,\n    RGBA32: 13,\n    RGB565: 14,\n    BGR565: 15,\n    RGBA4444: 16,\n  }\n\n  static EngineFormat = {\n    RGBAFormat: RGBAFormat,\n    RGBA_ASTC_4x4_Format: RGBA_ASTC_4x4_Format,\n    RGBA_BPTC_Format: RGBA_BPTC_Format,\n    RGBA_ETC2_EAC_Format: RGBA_ETC2_EAC_Format,\n    RGBA_PVRTC_4BPPV1_Format: RGBA_PVRTC_4BPPV1_Format,\n    RGBA_S3TC_DXT5_Format: RGBA_S3TC_DXT5_Format,\n    RGB_ETC1_Format: RGB_ETC1_Format,\n    RGB_ETC2_Format: RGB_ETC2_Format,\n    RGB_PVRTC_4BPPV1_Format: RGB_PVRTC_4BPPV1_Format,\n    RGB_S3TC_DXT1_Format: RGB_S3TC_DXT1_Format,\n  }\n\n  /* WEB WORKER */\n\n  static BasisWorker = function () {\n    let config\n    let transcoderPending\n    let BasisModule\n\n    /** @type KTX2Loader.EngineFormat */\n    const EngineFormat = _EngineFormat\n    /** @type KTX2Loader.TranscoderFormat */\n    const TranscoderFormat = _TranscoderFormat\n    /** @type KTX2Loader.BasisFormat */\n    const BasisFormat = _BasisFormat\n\n    self.addEventListener('message', function (e) {\n      const message = e.data\n\n      switch (message.type) {\n        case 'init':\n          config = message.config\n          init(message.transcoderBinary)\n          break\n\n        case 'transcode':\n          transcoderPending.then(() => {\n            try {\n              const { faces, buffers, width, height, hasAlpha, format, dfdFlags } = transcode(message.buffer)\n\n              self.postMessage(\n                { type: 'transcode', id: message.id, faces, width, height, hasAlpha, format, dfdFlags },\n                buffers,\n              )\n            } catch (error) {\n              console.error(error)\n\n              self.postMessage({ type: 'error', id: message.id, error: error.message })\n            }\n          })\n          break\n      }\n    })\n\n    function init(wasmBinary) {\n      transcoderPending = new Promise((resolve) => {\n        BasisModule = { wasmBinary, onRuntimeInitialized: resolve }\n        BASIS(BasisModule)\n      }).then(() => {\n        BasisModule.initializeBasis()\n\n        if (BasisModule.KTX2File === undefined) {\n          console.warn('THREE.KTX2Loader: Please update Basis Universal transcoder.')\n        }\n      })\n    }\n\n    function transcode(buffer) {\n      const ktx2File = new BasisModule.KTX2File(new Uint8Array(buffer))\n\n      function cleanup() {\n        ktx2File.close()\n        ktx2File.delete()\n      }\n\n      if (!ktx2File.isValid()) {\n        cleanup()\n        throw new Error('THREE.KTX2Loader:\tInvalid or unsupported .ktx2 file')\n      }\n\n      const basisFormat = ktx2File.isUASTC() ? BasisFormat.UASTC_4x4 : BasisFormat.ETC1S\n      const width = ktx2File.getWidth()\n      const height = ktx2File.getHeight()\n      const layerCount = ktx2File.getLayers() || 1\n      const levelCount = ktx2File.getLevels()\n      const faceCount = ktx2File.getFaces()\n      const hasAlpha = ktx2File.getHasAlpha()\n      const dfdFlags = ktx2File.getDFDFlags()\n\n      const { transcoderFormat, engineFormat } = getTranscoderFormat(basisFormat, width, height, hasAlpha)\n\n      if (!width || !height || !levelCount) {\n        cleanup()\n        throw new Error('THREE.KTX2Loader:\tInvalid texture')\n      }\n\n      if (!ktx2File.startTranscoding()) {\n        cleanup()\n        throw new Error('THREE.KTX2Loader: .startTranscoding failed')\n      }\n\n      const faces = []\n      const buffers = []\n\n      for (let face = 0; face < faceCount; face++) {\n        const mipmaps = []\n\n        for (let mip = 0; mip < levelCount; mip++) {\n          const layerMips = []\n\n          let mipWidth, mipHeight\n\n          for (let layer = 0; layer < layerCount; layer++) {\n            const levelInfo = ktx2File.getImageLevelInfo(mip, layer, face)\n\n            if (\n              face === 0 &&\n              mip === 0 &&\n              layer === 0 &&\n              (levelInfo.origWidth % 4 !== 0 || levelInfo.origHeight % 4 !== 0)\n            ) {\n              console.warn('THREE.KTX2Loader: ETC1S and UASTC textures should use multiple-of-four dimensions.')\n            }\n\n            if (levelCount > 1) {\n              mipWidth = levelInfo.origWidth\n              mipHeight = levelInfo.origHeight\n            } else {\n              // Handles non-multiple-of-four dimensions in textures without mipmaps. Textures with\n              // mipmaps must use multiple-of-four dimensions, for some texture formats and APIs.\n              // See mrdoob/three.js#25908.\n              mipWidth = levelInfo.width\n              mipHeight = levelInfo.height\n            }\n\n            const dst = new Uint8Array(ktx2File.getImageTranscodedSizeInBytes(mip, layer, 0, transcoderFormat))\n            const status = ktx2File.transcodeImage(dst, mip, layer, face, transcoderFormat, 0, -1, -1)\n\n            if (!status) {\n              cleanup()\n              throw new Error('THREE.KTX2Loader: .transcodeImage failed.')\n            }\n\n            layerMips.push(dst)\n          }\n\n          const mipData = concat(layerMips)\n\n          mipmaps.push({ data: mipData, width: mipWidth, height: mipHeight })\n          buffers.push(mipData.buffer)\n        }\n\n        faces.push({ mipmaps, width, height, format: engineFormat })\n      }\n\n      cleanup()\n\n      return { faces, buffers, width, height, hasAlpha, format: engineFormat, dfdFlags }\n    }\n\n    //\n\n    // Optimal choice of a transcoder target format depends on the Basis format (ETC1S or UASTC),\n    // device capabilities, and texture dimensions. The list below ranks the formats separately\n    // for ETC1S and UASTC.\n    //\n    // In some cases, transcoding UASTC to RGBA32 might be preferred for higher quality (at\n    // significant memory cost) compared to ETC1/2, BC1/3, and PVRTC. The transcoder currently\n    // chooses RGBA32 only as a last resort and does not expose that option to the caller.\n    const FORMAT_OPTIONS = [\n      {\n        if: 'astcSupported',\n        basisFormat: [BasisFormat.UASTC_4x4],\n        transcoderFormat: [TranscoderFormat.ASTC_4x4, TranscoderFormat.ASTC_4x4],\n        engineFormat: [EngineFormat.RGBA_ASTC_4x4_Format, EngineFormat.RGBA_ASTC_4x4_Format],\n        priorityETC1S: Infinity,\n        priorityUASTC: 1,\n        needsPowerOfTwo: false,\n      },\n      {\n        if: 'bptcSupported',\n        basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n        transcoderFormat: [TranscoderFormat.BC7_M5, TranscoderFormat.BC7_M5],\n        engineFormat: [EngineFormat.RGBA_BPTC_Format, EngineFormat.RGBA_BPTC_Format],\n        priorityETC1S: 3,\n        priorityUASTC: 2,\n        needsPowerOfTwo: false,\n      },\n      {\n        if: 'dxtSupported',\n        basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n        transcoderFormat: [TranscoderFormat.BC1, TranscoderFormat.BC3],\n        engineFormat: [EngineFormat.RGB_S3TC_DXT1_Format, EngineFormat.RGBA_S3TC_DXT5_Format],\n        priorityETC1S: 4,\n        priorityUASTC: 5,\n        needsPowerOfTwo: false,\n      },\n      {\n        if: 'etc2Supported',\n        basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n        transcoderFormat: [TranscoderFormat.ETC1, TranscoderFormat.ETC2],\n        engineFormat: [EngineFormat.RGB_ETC2_Format, EngineFormat.RGBA_ETC2_EAC_Format],\n        priorityETC1S: 1,\n        priorityUASTC: 3,\n        needsPowerOfTwo: false,\n      },\n      {\n        if: 'etc1Supported',\n        basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n        transcoderFormat: [TranscoderFormat.ETC1],\n        engineFormat: [EngineFormat.RGB_ETC1_Format],\n        priorityETC1S: 2,\n        priorityUASTC: 4,\n        needsPowerOfTwo: false,\n      },\n      {\n        if: 'pvrtcSupported',\n        basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n        transcoderFormat: [TranscoderFormat.PVRTC1_4_RGB, TranscoderFormat.PVRTC1_4_RGBA],\n        engineFormat: [EngineFormat.RGB_PVRTC_4BPPV1_Format, EngineFormat.RGBA_PVRTC_4BPPV1_Format],\n        priorityETC1S: 5,\n        priorityUASTC: 6,\n        needsPowerOfTwo: true,\n      },\n    ]\n\n    const ETC1S_OPTIONS = FORMAT_OPTIONS.sort(function (a, b) {\n      return a.priorityETC1S - b.priorityETC1S\n    })\n    const UASTC_OPTIONS = FORMAT_OPTIONS.sort(function (a, b) {\n      return a.priorityUASTC - b.priorityUASTC\n    })\n\n    function getTranscoderFormat(basisFormat, width, height, hasAlpha) {\n      let transcoderFormat\n      let engineFormat\n\n      const options = basisFormat === BasisFormat.ETC1S ? ETC1S_OPTIONS : UASTC_OPTIONS\n\n      for (let i = 0; i < options.length; i++) {\n        const opt = options[i]\n\n        if (!config[opt.if]) continue\n        if (!opt.basisFormat.includes(basisFormat)) continue\n        if (hasAlpha && opt.transcoderFormat.length < 2) continue\n        if (opt.needsPowerOfTwo && !(isPowerOfTwo(width) && isPowerOfTwo(height))) continue\n\n        transcoderFormat = opt.transcoderFormat[hasAlpha ? 1 : 0]\n        engineFormat = opt.engineFormat[hasAlpha ? 1 : 0]\n\n        return { transcoderFormat, engineFormat }\n      }\n\n      console.warn('THREE.KTX2Loader: No suitable compressed texture format found. Decoding to RGBA32.')\n\n      transcoderFormat = TranscoderFormat.RGBA32\n      engineFormat = EngineFormat.RGBAFormat\n\n      return { transcoderFormat, engineFormat }\n    }\n\n    function isPowerOfTwo(value) {\n      if (value <= 2) return true\n\n      return (value & (value - 1)) === 0 && value !== 0\n    }\n\n    /** Concatenates N byte arrays. */\n    function concat(arrays) {\n      if (arrays.length === 1) return arrays[0]\n\n      let totalByteLength = 0\n\n      for (let i = 0; i < arrays.length; i++) {\n        const array = arrays[i]\n        totalByteLength += array.byteLength\n      }\n\n      const result = new Uint8Array(totalByteLength)\n\n      let byteOffset = 0\n\n      for (let i = 0; i < arrays.length; i++) {\n        const array = arrays[i]\n        result.set(array, byteOffset)\n\n        byteOffset += array.byteLength\n      }\n\n      return result\n    }\n  }\n\n  constructor(manager) {\n    super(manager)\n\n    this.transcoderPath = ''\n    this.transcoderBinary = null\n    this.transcoderPending = null\n\n    this.workerPool = new WorkerPool()\n    this.workerSourceURL = ''\n    this.workerConfig = null\n\n    if (typeof MSC_TRANSCODER !== 'undefined') {\n      console.warn(\n        'THREE.KTX2Loader: Please update to latest \"basis_transcoder\".' +\n          ' \"msc_basis_transcoder\" is no longer supported in three.js r125+.',\n      )\n    }\n  }\n\n  setTranscoderPath(path) {\n    this.transcoderPath = path\n\n    return this\n  }\n\n  setWorkerLimit(num) {\n    this.workerPool.setWorkerLimit(num)\n\n    return this\n  }\n\n  detectSupport(renderer) {\n    this.workerConfig = {\n      astcSupported: renderer.extensions.has('WEBGL_compressed_texture_astc'),\n      etc1Supported: renderer.extensions.has('WEBGL_compressed_texture_etc1'),\n      etc2Supported: renderer.extensions.has('WEBGL_compressed_texture_etc'),\n      dxtSupported: renderer.extensions.has('WEBGL_compressed_texture_s3tc'),\n      bptcSupported: renderer.extensions.has('EXT_texture_compression_bptc'),\n      pvrtcSupported:\n        renderer.extensions.has('WEBGL_compressed_texture_pvrtc') ||\n        renderer.extensions.has('WEBKIT_WEBGL_compressed_texture_pvrtc'),\n    }\n\n    if (renderer.capabilities.isWebGL2) {\n      // https://github.com/mrdoob/three.js/pull/22928\n      this.workerConfig.etc1Supported = false\n    }\n\n    return this\n  }\n\n  init() {\n    if (!this.transcoderPending) {\n      // Load transcoder wrapper.\n      const jsLoader = new FileLoader(this.manager)\n      jsLoader.setPath(this.transcoderPath)\n      jsLoader.setWithCredentials(this.withCredentials)\n      const jsContent = jsLoader.loadAsync('basis_transcoder.js')\n\n      // Load transcoder WASM binary.\n      const binaryLoader = new FileLoader(this.manager)\n      binaryLoader.setPath(this.transcoderPath)\n      binaryLoader.setResponseType('arraybuffer')\n      binaryLoader.setWithCredentials(this.withCredentials)\n      const binaryContent = binaryLoader.loadAsync('basis_transcoder.wasm')\n\n      this.transcoderPending = Promise.all([jsContent, binaryContent]).then(([jsContent, binaryContent]) => {\n        const fn = KTX2Loader.BasisWorker.toString()\n\n        const body = [\n          '/* constants */',\n          'let _EngineFormat = ' + JSON.stringify(KTX2Loader.EngineFormat),\n          'let _TranscoderFormat = ' + JSON.stringify(KTX2Loader.TranscoderFormat),\n          'let _BasisFormat = ' + JSON.stringify(KTX2Loader.BasisFormat),\n          '/* basis_transcoder.js */',\n          jsContent,\n          '/* worker */',\n          fn.substring(fn.indexOf('{') + 1, fn.lastIndexOf('}')),\n        ].join('\\n')\n\n        this.workerSourceURL = URL.createObjectURL(new Blob([body]))\n        this.transcoderBinary = binaryContent\n\n        this.workerPool.setWorkerCreator(() => {\n          const worker = new Worker(this.workerSourceURL)\n          const transcoderBinary = this.transcoderBinary.slice(0)\n\n          worker.postMessage({ type: 'init', config: this.workerConfig, transcoderBinary }, [transcoderBinary])\n\n          return worker\n        })\n      })\n\n      if (_activeLoaders > 0) {\n        // Each instance loads a transcoder and allocates workers, increasing network and memory cost.\n\n        console.warn(\n          'THREE.KTX2Loader: Multiple active KTX2 loaders may cause performance issues.' +\n            ' Use a single KTX2Loader instance, or call .dispose() on old instances.',\n        )\n      }\n\n      _activeLoaders++\n    }\n\n    return this.transcoderPending\n  }\n\n  load(url, onLoad, onProgress, onError) {\n    if (this.workerConfig === null) {\n      throw new Error('THREE.KTX2Loader: Missing initialization with `.detectSupport( renderer )`.')\n    }\n\n    const loader = new FileLoader(this.manager)\n\n    loader.setResponseType('arraybuffer')\n    loader.setWithCredentials(this.withCredentials)\n\n    loader.load(\n      url,\n      (buffer) => {\n        // Check for an existing task using this buffer. A transferred buffer cannot be transferred\n        // again from this thread.\n        if (_taskCache.has(buffer)) {\n          const cachedTask = _taskCache.get(buffer)\n\n          return cachedTask.promise.then(onLoad).catch(onError)\n        }\n\n        this._createTexture(buffer)\n          .then((texture) => (onLoad ? onLoad(texture) : null))\n          .catch(onError)\n      },\n      onProgress,\n      onError,\n    )\n  }\n\n  _createTextureFrom(transcodeResult, container) {\n    const { faces, width, height, format, type, error, dfdFlags } = transcodeResult\n\n    if (type === 'error') return Promise.reject(error)\n\n    let texture\n\n    if (container.faceCount === 6) {\n      texture = new CompressedCubeTexture(faces, format, UnsignedByteType)\n    } else {\n      const mipmaps = faces[0].mipmaps\n\n      texture =\n        container.layerCount > 1\n          ? new CompressedArrayTexture(mipmaps, width, height, container.layerCount, format, UnsignedByteType)\n          : new CompressedTexture(mipmaps, width, height, format, UnsignedByteType)\n    }\n\n    texture.minFilter = faces[0].mipmaps.length === 1 ? LinearFilter : LinearMipmapLinearFilter\n    texture.magFilter = LinearFilter\n    texture.generateMipmaps = false\n    texture.needsUpdate = true\n\n    const colorSpace = parseColorSpace(container)\n    if ('colorSpace' in texture) texture.colorSpace = colorSpace\n    else texture.encoding = colorSpace === SRGBColorSpace ? sRGBEncoding : LinearEncoding\n\n    texture.premultiplyAlpha = !!(dfdFlags & KHR_DF_FLAG_ALPHA_PREMULTIPLIED)\n\n    return texture\n  }\n\n  /**\n   * @param {ArrayBuffer} buffer\n   * @param {object?} config\n   * @return {Promise<CompressedTexture|CompressedArrayTexture|DataTexture|Data3DTexture>}\n   */\n  async _createTexture(buffer, config = {}) {\n    const container = read(new Uint8Array(buffer))\n\n    if (container.vkFormat !== VK_FORMAT_UNDEFINED) {\n      return createRawTexture(container)\n    }\n\n    //\n\n    const taskConfig = config\n    const texturePending = this.init()\n      .then(() => {\n        return this.workerPool.postMessage({ type: 'transcode', buffer, taskConfig: taskConfig }, [buffer])\n      })\n      .then((e) => this._createTextureFrom(e.data, container))\n\n    // Cache the task result.\n    _taskCache.set(buffer, { promise: texturePending })\n\n    return texturePending\n  }\n\n  dispose() {\n    this.workerPool.dispose()\n    if (this.workerSourceURL) URL.revokeObjectURL(this.workerSourceURL)\n\n    _activeLoaders--\n\n    return this\n  }\n}\n\n//\n// Parsing for non-Basis textures. These textures are may have supercompression\n// like Zstd, but they do not require transcoding.\n\nconst UNCOMPRESSED_FORMATS = new Set([RGBAFormat, RGFormat, RedFormat])\n\nconst FORMAT_MAP = {\n  [VK_FORMAT_R32G32B32A32_SFLOAT]: RGBAFormat,\n  [VK_FORMAT_R16G16B16A16_SFLOAT]: RGBAFormat,\n  [VK_FORMAT_R8G8B8A8_UNORM]: RGBAFormat,\n  [VK_FORMAT_R8G8B8A8_SRGB]: RGBAFormat,\n\n  [VK_FORMAT_R32G32_SFLOAT]: RGFormat,\n  [VK_FORMAT_R16G16_SFLOAT]: RGFormat,\n  [VK_FORMAT_R8G8_UNORM]: RGFormat,\n  [VK_FORMAT_R8G8_SRGB]: RGFormat,\n\n  [VK_FORMAT_R32_SFLOAT]: RedFormat,\n  [VK_FORMAT_R16_SFLOAT]: RedFormat,\n  [VK_FORMAT_R8_SRGB]: RedFormat,\n  [VK_FORMAT_R8_UNORM]: RedFormat,\n\n  [VK_FORMAT_ASTC_6x6_SRGB_BLOCK]: RGBA_ASTC_6x6_Format,\n  [VK_FORMAT_ASTC_6x6_UNORM_BLOCK]: RGBA_ASTC_6x6_Format,\n}\n\nconst TYPE_MAP = {\n  [VK_FORMAT_R32G32B32A32_SFLOAT]: FloatType,\n  [VK_FORMAT_R16G16B16A16_SFLOAT]: HalfFloatType,\n  [VK_FORMAT_R8G8B8A8_UNORM]: UnsignedByteType,\n  [VK_FORMAT_R8G8B8A8_SRGB]: UnsignedByteType,\n\n  [VK_FORMAT_R32G32_SFLOAT]: FloatType,\n  [VK_FORMAT_R16G16_SFLOAT]: HalfFloatType,\n  [VK_FORMAT_R8G8_UNORM]: UnsignedByteType,\n  [VK_FORMAT_R8G8_SRGB]: UnsignedByteType,\n\n  [VK_FORMAT_R32_SFLOAT]: FloatType,\n  [VK_FORMAT_R16_SFLOAT]: HalfFloatType,\n  [VK_FORMAT_R8_SRGB]: UnsignedByteType,\n  [VK_FORMAT_R8_UNORM]: UnsignedByteType,\n\n  [VK_FORMAT_ASTC_6x6_SRGB_BLOCK]: UnsignedByteType,\n  [VK_FORMAT_ASTC_6x6_UNORM_BLOCK]: UnsignedByteType,\n}\n\nasync function createRawTexture(container) {\n  const { vkFormat } = container\n\n  if (FORMAT_MAP[vkFormat] === undefined) {\n    throw new Error('THREE.KTX2Loader: Unsupported vkFormat.')\n  }\n\n  //\n\n  let zstd\n\n  if (container.supercompressionScheme === KHR_SUPERCOMPRESSION_ZSTD) {\n    if (!_zstd) {\n      _zstd = new Promise(async (resolve) => {\n        const zstd = new ZSTDDecoder()\n        await zstd.init()\n        resolve(zstd)\n      })\n    }\n\n    zstd = await _zstd\n  }\n\n  //\n\n  const mipmaps = []\n\n  for (let levelIndex = 0; levelIndex < container.levels.length; levelIndex++) {\n    const levelWidth = Math.max(1, container.pixelWidth >> levelIndex)\n    const levelHeight = Math.max(1, container.pixelHeight >> levelIndex)\n    const levelDepth = container.pixelDepth ? Math.max(1, container.pixelDepth >> levelIndex) : 0\n\n    const level = container.levels[levelIndex]\n\n    let levelData\n\n    if (container.supercompressionScheme === KHR_SUPERCOMPRESSION_NONE) {\n      levelData = level.levelData\n    } else if (container.supercompressionScheme === KHR_SUPERCOMPRESSION_ZSTD) {\n      levelData = zstd.decode(level.levelData, level.uncompressedByteLength)\n    } else {\n      throw new Error('THREE.KTX2Loader: Unsupported supercompressionScheme.')\n    }\n\n    let data\n\n    if (TYPE_MAP[vkFormat] === FloatType) {\n      data = new Float32Array(\n        levelData.buffer,\n        levelData.byteOffset,\n        levelData.byteLength / Float32Array.BYTES_PER_ELEMENT,\n      )\n    } else if (TYPE_MAP[vkFormat] === HalfFloatType) {\n      data = new Uint16Array(\n        levelData.buffer,\n        levelData.byteOffset,\n        levelData.byteLength / Uint16Array.BYTES_PER_ELEMENT,\n      )\n    } else {\n      data = levelData\n    }\n\n    mipmaps.push({\n      data: data,\n      width: levelWidth,\n      height: levelHeight,\n      depth: levelDepth,\n    })\n  }\n\n  let texture\n\n  if (UNCOMPRESSED_FORMATS.has(FORMAT_MAP[vkFormat])) {\n    texture =\n      container.pixelDepth === 0\n        ? new DataTexture(mipmaps[0].data, container.pixelWidth, container.pixelHeight)\n        : new Data3DTexture(mipmaps[0].data, container.pixelWidth, container.pixelHeight, container.pixelDepth)\n  } else {\n    if (container.pixelDepth > 0) throw new Error('THREE.KTX2Loader: Unsupported pixelDepth.')\n\n    texture = new CompressedTexture(mipmaps, container.pixelWidth, container.pixelHeight)\n  }\n\n  texture.mipmaps = mipmaps\n\n  texture.type = TYPE_MAP[vkFormat]\n  texture.format = FORMAT_MAP[vkFormat]\n  texture.needsUpdate = true\n\n  const colorSpace = parseColorSpace(container)\n  if ('colorSpace' in texture) texture.colorSpace = colorSpace\n  else texture.encoding = colorSpace === SRGBColorSpace ? sRGBEncoding : LinearEncoding\n\n  //\n\n  return Promise.resolve(texture)\n}\n\nfunction parseColorSpace(container) {\n  const dfd = container.dataFormatDescriptor[0]\n\n  if (dfd.colorPrimaries === KHR_DF_PRIMARIES_BT709) {\n    return dfd.transferFunction === KHR_DF_TRANSFER_SRGB ? SRGBColorSpace : LinearSRGBColorSpace\n  } else if (dfd.colorPrimaries === KHR_DF_PRIMARIES_DISPLAYP3) {\n    return dfd.transferFunction === KHR_DF_TRANSFER_SRGB ? DisplayP3ColorSpace : LinearDisplayP3ColorSpace\n  } else if (dfd.colorPrimaries === KHR_DF_PRIMARIES_UNSPECIFIED) {\n    return NoColorSpace\n  } else {\n    console.warn(`THREE.KTX2Loader: Unsupported color primaries, \"${dfd.colorPrimaries}\"`)\n    return NoColorSpace\n  }\n}\n\nexport { KTX2Loader }\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}