{"ast":null,"code":"import _classCallCheck from \"C:/Users/Nayyu/Desktop/skibidai-public-build/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Nayyu/Desktop/skibidai-public-build/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"C:/Users/Nayyu/Desktop/skibidai-public-build/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"C:/Users/Nayyu/Desktop/skibidai-public-build/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/Nayyu/Desktop/skibidai-public-build/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nvar __defProp = Object.defineProperty;\nvar __defNormalProp = function __defNormalProp(obj, key, value) {\n  return key in obj ? __defProp(obj, key, {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: value\n  }) : obj[key] = value;\n};\nvar __publicField = function __publicField(obj, key, value) {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nimport { Color, DepthTexture, UnsignedShortType, NearestFilter, WebGLRenderTarget, HalfFloatType, ShaderMaterial, UniformsUtils, NoBlending, MeshNormalMaterial, MeshBasicMaterial, SrcAlphaFactor, OneMinusSrcAlphaFactor, AddEquation, NormalBlending } from \"three\";\nimport { Pass, FullScreenQuad } from \"./Pass.js\";\nimport { SSRShader, SSRBlurShader, SSRDepthShader } from \"../shaders/SSRShader.js\";\nimport { CopyShader } from \"../shaders/CopyShader.js\";\nvar _SSRPass = /*#__PURE__*/function (_Pass) {\n  _inherits(_SSRPass, _Pass);\n  var _super = _createSuper(_SSRPass);\n  function _SSRPass(_ref) {\n    var _this;\n    var renderer = _ref.renderer,\n      scene = _ref.scene,\n      camera = _ref.camera,\n      width = _ref.width,\n      height = _ref.height,\n      selects = _ref.selects,\n      _ref$bouncing = _ref.bouncing,\n      bouncing = _ref$bouncing === void 0 ? false : _ref$bouncing,\n      groundReflector = _ref.groundReflector;\n    _classCallCheck(this, _SSRPass);\n    _this = _super.call(this);\n    _this.width = width !== void 0 ? width : 512;\n    _this.height = height !== void 0 ? height : 512;\n    _this.clear = true;\n    _this.renderer = renderer;\n    _this.scene = scene;\n    _this.camera = camera;\n    _this.groundReflector = groundReflector;\n    _this.opacity = SSRShader.uniforms.opacity.value;\n    _this.output = 0;\n    _this.maxDistance = SSRShader.uniforms.maxDistance.value;\n    _this.thickness = SSRShader.uniforms.thickness.value;\n    _this.tempColor = new Color();\n    _this._selects = selects;\n    _this.selective = Array.isArray(_this._selects);\n    Object.defineProperty(_assertThisInitialized(_this), \"selects\", {\n      get: function get() {\n        return this._selects;\n      },\n      set: function set(val) {\n        if (this._selects === val) return;\n        this._selects = val;\n        if (Array.isArray(val)) {\n          this.selective = true;\n          this.ssrMaterial.defines.SELECTIVE = true;\n          this.ssrMaterial.needsUpdate = true;\n        } else {\n          this.selective = false;\n          this.ssrMaterial.defines.SELECTIVE = false;\n          this.ssrMaterial.needsUpdate = true;\n        }\n      }\n    });\n    _this._bouncing = bouncing;\n    Object.defineProperty(_assertThisInitialized(_this), \"bouncing\", {\n      get: function get() {\n        return this._bouncing;\n      },\n      set: function set(val) {\n        if (this._bouncing === val) return;\n        this._bouncing = val;\n        if (val) {\n          this.ssrMaterial.uniforms[\"tDiffuse\"].value = this.prevRenderTarget.texture;\n        } else {\n          this.ssrMaterial.uniforms[\"tDiffuse\"].value = this.beautyRenderTarget.texture;\n        }\n      }\n    });\n    _this.blur = true;\n    _this._distanceAttenuation = SSRShader.defines.DISTANCE_ATTENUATION;\n    Object.defineProperty(_assertThisInitialized(_this), \"distanceAttenuation\", {\n      get: function get() {\n        return this._distanceAttenuation;\n      },\n      set: function set(val) {\n        if (this._distanceAttenuation === val) return;\n        this._distanceAttenuation = val;\n        this.ssrMaterial.defines.DISTANCE_ATTENUATION = val;\n        this.ssrMaterial.needsUpdate = true;\n      }\n    });\n    _this._fresnel = SSRShader.defines.FRESNEL;\n    Object.defineProperty(_assertThisInitialized(_this), \"fresnel\", {\n      get: function get() {\n        return this._fresnel;\n      },\n      set: function set(val) {\n        if (this._fresnel === val) return;\n        this._fresnel = val;\n        this.ssrMaterial.defines.FRESNEL = val;\n        this.ssrMaterial.needsUpdate = true;\n      }\n    });\n    _this._infiniteThick = SSRShader.defines.INFINITE_THICK;\n    Object.defineProperty(_assertThisInitialized(_this), \"infiniteThick\", {\n      get: function get() {\n        return this._infiniteThick;\n      },\n      set: function set(val) {\n        if (this._infiniteThick === val) return;\n        this._infiniteThick = val;\n        this.ssrMaterial.defines.INFINITE_THICK = val;\n        this.ssrMaterial.needsUpdate = true;\n      }\n    });\n    var depthTexture = new DepthTexture();\n    depthTexture.type = UnsignedShortType;\n    depthTexture.minFilter = NearestFilter;\n    depthTexture.magFilter = NearestFilter;\n    _this.beautyRenderTarget = new WebGLRenderTarget(_this.width, _this.height, {\n      minFilter: NearestFilter,\n      magFilter: NearestFilter,\n      type: HalfFloatType,\n      depthTexture: depthTexture,\n      depthBuffer: true\n    });\n    _this.prevRenderTarget = new WebGLRenderTarget(_this.width, _this.height, {\n      minFilter: NearestFilter,\n      magFilter: NearestFilter\n    });\n    _this.normalRenderTarget = new WebGLRenderTarget(_this.width, _this.height, {\n      minFilter: NearestFilter,\n      magFilter: NearestFilter,\n      type: HalfFloatType\n    });\n    _this.metalnessRenderTarget = new WebGLRenderTarget(_this.width, _this.height, {\n      minFilter: NearestFilter,\n      magFilter: NearestFilter,\n      type: HalfFloatType\n    });\n    _this.ssrRenderTarget = new WebGLRenderTarget(_this.width, _this.height, {\n      minFilter: NearestFilter,\n      magFilter: NearestFilter\n    });\n    _this.blurRenderTarget = _this.ssrRenderTarget.clone();\n    _this.blurRenderTarget2 = _this.ssrRenderTarget.clone();\n    _this.ssrMaterial = new ShaderMaterial({\n      defines: Object.assign({}, SSRShader.defines, {\n        MAX_STEP: Math.sqrt(_this.width * _this.width + _this.height * _this.height)\n      }),\n      uniforms: UniformsUtils.clone(SSRShader.uniforms),\n      vertexShader: SSRShader.vertexShader,\n      fragmentShader: SSRShader.fragmentShader,\n      blending: NoBlending\n    });\n    _this.ssrMaterial.uniforms[\"tDiffuse\"].value = _this.beautyRenderTarget.texture;\n    _this.ssrMaterial.uniforms[\"tNormal\"].value = _this.normalRenderTarget.texture;\n    _this.ssrMaterial.defines.SELECTIVE = _this.selective;\n    _this.ssrMaterial.needsUpdate = true;\n    _this.ssrMaterial.uniforms[\"tMetalness\"].value = _this.metalnessRenderTarget.texture;\n    _this.ssrMaterial.uniforms[\"tDepth\"].value = _this.beautyRenderTarget.depthTexture;\n    _this.ssrMaterial.uniforms[\"cameraNear\"].value = _this.camera.near;\n    _this.ssrMaterial.uniforms[\"cameraFar\"].value = _this.camera.far;\n    _this.ssrMaterial.uniforms[\"thickness\"].value = _this.thickness;\n    _this.ssrMaterial.uniforms[\"resolution\"].value.set(_this.width, _this.height);\n    _this.ssrMaterial.uniforms[\"cameraProjectionMatrix\"].value.copy(_this.camera.projectionMatrix);\n    _this.ssrMaterial.uniforms[\"cameraInverseProjectionMatrix\"].value.copy(_this.camera.projectionMatrixInverse);\n    _this.normalMaterial = new MeshNormalMaterial();\n    _this.normalMaterial.blending = NoBlending;\n    _this.metalnessOnMaterial = new MeshBasicMaterial({\n      color: \"white\"\n    });\n    _this.metalnessOffMaterial = new MeshBasicMaterial({\n      color: \"black\"\n    });\n    _this.blurMaterial = new ShaderMaterial({\n      defines: Object.assign({}, SSRBlurShader.defines),\n      uniforms: UniformsUtils.clone(SSRBlurShader.uniforms),\n      vertexShader: SSRBlurShader.vertexShader,\n      fragmentShader: SSRBlurShader.fragmentShader\n    });\n    _this.blurMaterial.uniforms[\"tDiffuse\"].value = _this.ssrRenderTarget.texture;\n    _this.blurMaterial.uniforms[\"resolution\"].value.set(_this.width, _this.height);\n    _this.blurMaterial2 = new ShaderMaterial({\n      defines: Object.assign({}, SSRBlurShader.defines),\n      uniforms: UniformsUtils.clone(SSRBlurShader.uniforms),\n      vertexShader: SSRBlurShader.vertexShader,\n      fragmentShader: SSRBlurShader.fragmentShader\n    });\n    _this.blurMaterial2.uniforms[\"tDiffuse\"].value = _this.blurRenderTarget.texture;\n    _this.blurMaterial2.uniforms[\"resolution\"].value.set(_this.width, _this.height);\n    _this.depthRenderMaterial = new ShaderMaterial({\n      defines: Object.assign({}, SSRDepthShader.defines),\n      uniforms: UniformsUtils.clone(SSRDepthShader.uniforms),\n      vertexShader: SSRDepthShader.vertexShader,\n      fragmentShader: SSRDepthShader.fragmentShader,\n      blending: NoBlending\n    });\n    _this.depthRenderMaterial.uniforms[\"tDepth\"].value = _this.beautyRenderTarget.depthTexture;\n    _this.depthRenderMaterial.uniforms[\"cameraNear\"].value = _this.camera.near;\n    _this.depthRenderMaterial.uniforms[\"cameraFar\"].value = _this.camera.far;\n    _this.copyMaterial = new ShaderMaterial({\n      uniforms: UniformsUtils.clone(CopyShader.uniforms),\n      vertexShader: CopyShader.vertexShader,\n      fragmentShader: CopyShader.fragmentShader,\n      transparent: true,\n      depthTest: false,\n      depthWrite: false,\n      blendSrc: SrcAlphaFactor,\n      blendDst: OneMinusSrcAlphaFactor,\n      blendEquation: AddEquation,\n      blendSrcAlpha: SrcAlphaFactor,\n      blendDstAlpha: OneMinusSrcAlphaFactor,\n      blendEquationAlpha: AddEquation\n      // premultipliedAlpha:true,\n    });\n\n    _this.fsQuad = new FullScreenQuad(null);\n    _this.originalClearColor = new Color();\n    return _this;\n  }\n  _createClass(_SSRPass, [{\n    key: \"dispose\",\n    value: function dispose() {\n      this.beautyRenderTarget.dispose();\n      this.prevRenderTarget.dispose();\n      this.normalRenderTarget.dispose();\n      this.metalnessRenderTarget.dispose();\n      this.ssrRenderTarget.dispose();\n      this.blurRenderTarget.dispose();\n      this.blurRenderTarget2.dispose();\n      this.normalMaterial.dispose();\n      this.metalnessOnMaterial.dispose();\n      this.metalnessOffMaterial.dispose();\n      this.blurMaterial.dispose();\n      this.blurMaterial2.dispose();\n      this.copyMaterial.dispose();\n      this.depthRenderMaterial.dispose();\n      this.fsQuad.dispose();\n    }\n  }, {\n    key: \"render\",\n    value: function render(renderer, writeBuffer) {\n      renderer.setRenderTarget(this.beautyRenderTarget);\n      renderer.clear();\n      if (this.groundReflector) {\n        this.groundReflector.visible = false;\n        this.groundReflector.doRender(this.renderer, this.scene, this.camera);\n        this.groundReflector.visible = true;\n      }\n      renderer.render(this.scene, this.camera);\n      if (this.groundReflector) this.groundReflector.visible = false;\n      this.renderOverride(renderer, this.normalMaterial, this.normalRenderTarget, 0, 0);\n      if (this.selective) {\n        this.renderMetalness(renderer, this.metalnessOnMaterial, this.metalnessRenderTarget, 0, 0);\n      }\n      this.ssrMaterial.uniforms[\"opacity\"].value = this.opacity;\n      this.ssrMaterial.uniforms[\"maxDistance\"].value = this.maxDistance;\n      this.ssrMaterial.uniforms[\"thickness\"].value = this.thickness;\n      this.renderPass(renderer, this.ssrMaterial, this.ssrRenderTarget);\n      if (this.blur) {\n        this.renderPass(renderer, this.blurMaterial, this.blurRenderTarget);\n        this.renderPass(renderer, this.blurMaterial2, this.blurRenderTarget2);\n      }\n      switch (this.output) {\n        case _SSRPass.OUTPUT.Default:\n          if (this.bouncing) {\n            this.copyMaterial.uniforms[\"tDiffuse\"].value = this.beautyRenderTarget.texture;\n            this.copyMaterial.blending = NoBlending;\n            this.renderPass(renderer, this.copyMaterial, this.prevRenderTarget);\n            if (this.blur) this.copyMaterial.uniforms[\"tDiffuse\"].value = this.blurRenderTarget2.texture;else this.copyMaterial.uniforms[\"tDiffuse\"].value = this.ssrRenderTarget.texture;\n            this.copyMaterial.blending = NormalBlending;\n            this.renderPass(renderer, this.copyMaterial, this.prevRenderTarget);\n            this.copyMaterial.uniforms[\"tDiffuse\"].value = this.prevRenderTarget.texture;\n            this.copyMaterial.blending = NoBlending;\n            this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n          } else {\n            this.copyMaterial.uniforms[\"tDiffuse\"].value = this.beautyRenderTarget.texture;\n            this.copyMaterial.blending = NoBlending;\n            this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n            if (this.blur) this.copyMaterial.uniforms[\"tDiffuse\"].value = this.blurRenderTarget2.texture;else this.copyMaterial.uniforms[\"tDiffuse\"].value = this.ssrRenderTarget.texture;\n            this.copyMaterial.blending = NormalBlending;\n            this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n          }\n          break;\n        case _SSRPass.OUTPUT.SSR:\n          if (this.blur) this.copyMaterial.uniforms[\"tDiffuse\"].value = this.blurRenderTarget2.texture;else this.copyMaterial.uniforms[\"tDiffuse\"].value = this.ssrRenderTarget.texture;\n          this.copyMaterial.blending = NoBlending;\n          this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n          if (this.bouncing) {\n            if (this.blur) this.copyMaterial.uniforms[\"tDiffuse\"].value = this.blurRenderTarget2.texture;else this.copyMaterial.uniforms[\"tDiffuse\"].value = this.beautyRenderTarget.texture;\n            this.copyMaterial.blending = NoBlending;\n            this.renderPass(renderer, this.copyMaterial, this.prevRenderTarget);\n            this.copyMaterial.uniforms[\"tDiffuse\"].value = this.ssrRenderTarget.texture;\n            this.copyMaterial.blending = NormalBlending;\n            this.renderPass(renderer, this.copyMaterial, this.prevRenderTarget);\n          }\n          break;\n        case _SSRPass.OUTPUT.Beauty:\n          this.copyMaterial.uniforms[\"tDiffuse\"].value = this.beautyRenderTarget.texture;\n          this.copyMaterial.blending = NoBlending;\n          this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n          break;\n        case _SSRPass.OUTPUT.Depth:\n          this.renderPass(renderer, this.depthRenderMaterial, this.renderToScreen ? null : writeBuffer);\n          break;\n        case _SSRPass.OUTPUT.Normal:\n          this.copyMaterial.uniforms[\"tDiffuse\"].value = this.normalRenderTarget.texture;\n          this.copyMaterial.blending = NoBlending;\n          this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n          break;\n        case _SSRPass.OUTPUT.Metalness:\n          this.copyMaterial.uniforms[\"tDiffuse\"].value = this.metalnessRenderTarget.texture;\n          this.copyMaterial.blending = NoBlending;\n          this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n          break;\n        default:\n          console.warn(\"THREE.SSRPass: Unknown output type.\");\n      }\n    }\n  }, {\n    key: \"renderPass\",\n    value: function renderPass(renderer, passMaterial, renderTarget, clearColor, clearAlpha) {\n      this.originalClearColor.copy(renderer.getClearColor(this.tempColor));\n      var originalClearAlpha = renderer.getClearAlpha(this.tempColor);\n      var originalAutoClear = renderer.autoClear;\n      renderer.setRenderTarget(renderTarget);\n      renderer.autoClear = false;\n      if (clearColor !== void 0 && clearColor !== null) {\n        renderer.setClearColor(clearColor);\n        renderer.setClearAlpha(clearAlpha || 0);\n        renderer.clear();\n      }\n      this.fsQuad.material = passMaterial;\n      this.fsQuad.render(renderer);\n      renderer.autoClear = originalAutoClear;\n      renderer.setClearColor(this.originalClearColor);\n      renderer.setClearAlpha(originalClearAlpha);\n    }\n  }, {\n    key: \"renderOverride\",\n    value: function renderOverride(renderer, overrideMaterial, renderTarget, clearColor, clearAlpha) {\n      this.originalClearColor.copy(renderer.getClearColor(this.tempColor));\n      var originalClearAlpha = renderer.getClearAlpha(this.tempColor);\n      var originalAutoClear = renderer.autoClear;\n      renderer.setRenderTarget(renderTarget);\n      renderer.autoClear = false;\n      clearColor = overrideMaterial.clearColor || clearColor;\n      clearAlpha = overrideMaterial.clearAlpha || clearAlpha;\n      if (clearColor !== void 0 && clearColor !== null) {\n        renderer.setClearColor(clearColor);\n        renderer.setClearAlpha(clearAlpha || 0);\n        renderer.clear();\n      }\n      this.scene.overrideMaterial = overrideMaterial;\n      renderer.render(this.scene, this.camera);\n      this.scene.overrideMaterial = null;\n      renderer.autoClear = originalAutoClear;\n      renderer.setClearColor(this.originalClearColor);\n      renderer.setClearAlpha(originalClearAlpha);\n    }\n  }, {\n    key: \"renderMetalness\",\n    value: function renderMetalness(renderer, overrideMaterial, renderTarget, clearColor, clearAlpha) {\n      var _this2 = this;\n      this.originalClearColor.copy(renderer.getClearColor(this.tempColor));\n      var originalClearAlpha = renderer.getClearAlpha(this.tempColor);\n      var originalAutoClear = renderer.autoClear;\n      renderer.setRenderTarget(renderTarget);\n      renderer.autoClear = false;\n      clearColor = overrideMaterial.clearColor || clearColor;\n      clearAlpha = overrideMaterial.clearAlpha || clearAlpha;\n      if (clearColor !== void 0 && clearColor !== null) {\n        renderer.setClearColor(clearColor);\n        renderer.setClearAlpha(clearAlpha || 0);\n        renderer.clear();\n      }\n      this.scene.traverseVisible(function (child) {\n        child._SSRPassBackupMaterial = child.material;\n        if (_this2._selects.includes(child)) {\n          child.material = _this2.metalnessOnMaterial;\n        } else {\n          child.material = _this2.metalnessOffMaterial;\n        }\n      });\n      renderer.render(this.scene, this.camera);\n      this.scene.traverseVisible(function (child) {\n        child.material = child._SSRPassBackupMaterial;\n      });\n      renderer.autoClear = originalAutoClear;\n      renderer.setClearColor(this.originalClearColor);\n      renderer.setClearAlpha(originalClearAlpha);\n    }\n  }, {\n    key: \"setSize\",\n    value: function setSize(width, height) {\n      this.width = width;\n      this.height = height;\n      this.ssrMaterial.defines.MAX_STEP = Math.sqrt(width * width + height * height);\n      this.ssrMaterial.needsUpdate = true;\n      this.beautyRenderTarget.setSize(width, height);\n      this.prevRenderTarget.setSize(width, height);\n      this.ssrRenderTarget.setSize(width, height);\n      this.normalRenderTarget.setSize(width, height);\n      this.metalnessRenderTarget.setSize(width, height);\n      this.blurRenderTarget.setSize(width, height);\n      this.blurRenderTarget2.setSize(width, height);\n      this.ssrMaterial.uniforms[\"resolution\"].value.set(width, height);\n      this.ssrMaterial.uniforms[\"cameraProjectionMatrix\"].value.copy(this.camera.projectionMatrix);\n      this.ssrMaterial.uniforms[\"cameraInverseProjectionMatrix\"].value.copy(this.camera.projectionMatrixInverse);\n      this.blurMaterial.uniforms[\"resolution\"].value.set(width, height);\n      this.blurMaterial2.uniforms[\"resolution\"].value.set(width, height);\n    }\n  }]);\n  return _SSRPass;\n}(Pass);\nvar SSRPass = _SSRPass;\n__publicField(SSRPass, \"OUTPUT\", {\n  Default: 0,\n  SSR: 1,\n  Beauty: 3,\n  Depth: 4,\n  Normal: 5,\n  Metalness: 7\n});\nexport { SSRPass };","map":{"version":3,"names":["_SSRPass","_Pass","_inherits","_super","_createSuper","_ref","_this","renderer","scene","camera","width","height","selects","_ref$bouncing","bouncing","groundReflector","_classCallCheck","call","clear","opacity","SSRShader","uniforms","value","output","maxDistance","thickness","tempColor","Color","_selects","selective","Array","isArray","Object","defineProperty","_assertThisInitialized","get","set","val","ssrMaterial","defines","SELECTIVE","needsUpdate","_bouncing","prevRenderTarget","texture","beautyRenderTarget","blur","_distanceAttenuation","DISTANCE_ATTENUATION","_fresnel","FRESNEL","_infiniteThick","INFINITE_THICK","depthTexture","DepthTexture","type","UnsignedShortType","minFilter","NearestFilter","magFilter","WebGLRenderTarget","HalfFloatType","depthBuffer","normalRenderTarget","metalnessRenderTarget","ssrRenderTarget","blurRenderTarget","clone","blurRenderTarget2","ShaderMaterial","assign","MAX_STEP","Math","sqrt","UniformsUtils","vertexShader","fragmentShader","blending","NoBlending","near","far","copy","projectionMatrix","projectionMatrixInverse","normalMaterial","MeshNormalMaterial","metalnessOnMaterial","MeshBasicMaterial","color","metalnessOffMaterial","blurMaterial","SSRBlurShader","blurMaterial2","depthRenderMaterial","SSRDepthShader","copyMaterial","CopyShader","transparent","depthTest","depthWrite","blendSrc","SrcAlphaFactor","blendDst","OneMinusSrcAlphaFactor","blendEquation","AddEquation","blendSrcAlpha","blendDstAlpha","blendEquationAlpha","fsQuad","FullScreenQuad","originalClearColor","_createClass","key","dispose","render","writeBuffer","setRenderTarget","visible","doRender","renderOverride","renderMetalness","renderPass","OUTPUT","Default","NormalBlending","renderToScreen","SSR","Beauty","Depth","Normal","Metalness","console","warn","passMaterial","renderTarget","clearColor","clearAlpha","getClearColor","originalClearAlpha","getClearAlpha","originalAutoClear","autoClear","setClearColor","setClearAlpha","material","overrideMaterial","_this2","traverseVisible","child","_SSRPassBackupMaterial","includes","setSize","Pass","SSRPass","__publicField"],"sources":["C:\\Users\\Nayyu\\Desktop\\skibidai-public-build\\node_modules\\src\\postprocessing\\SSRPass.js"],"sourcesContent":["import {\n  AddEquation,\n  Color,\n  NormalBlending,\n  DepthTexture,\n  SrcAlphaFactor,\n  OneMinusSrcAlphaFactor,\n  MeshNormalMaterial,\n  MeshBasicMaterial,\n  NearestFilter,\n  NoBlending,\n  ShaderMaterial,\n  UniformsUtils,\n  UnsignedShortType,\n  WebGLRenderTarget,\n  HalfFloatType,\n} from 'three'\nimport { Pass, FullScreenQuad } from './Pass'\nimport { SSRShader } from '../shaders/SSRShader'\nimport { SSRBlurShader } from '../shaders/SSRShader'\nimport { SSRDepthShader } from '../shaders/SSRShader'\nimport { CopyShader } from '../shaders/CopyShader'\n\nclass SSRPass extends Pass {\n  static OUTPUT = {\n    Default: 0,\n    SSR: 1,\n    Beauty: 3,\n    Depth: 4,\n    Normal: 5,\n    Metalness: 7,\n  }\n  constructor({ renderer, scene, camera, width, height, selects, bouncing = false, groundReflector }) {\n    super()\n\n    this.width = width !== undefined ? width : 512\n    this.height = height !== undefined ? height : 512\n\n    this.clear = true\n\n    this.renderer = renderer\n    this.scene = scene\n    this.camera = camera\n    this.groundReflector = groundReflector\n\n    this.opacity = SSRShader.uniforms.opacity.value\n    this.output = 0\n\n    this.maxDistance = SSRShader.uniforms.maxDistance.value\n    this.thickness = SSRShader.uniforms.thickness.value\n\n    this.tempColor = new Color()\n\n    this._selects = selects\n    this.selective = Array.isArray(this._selects)\n    Object.defineProperty(this, 'selects', {\n      get() {\n        return this._selects\n      },\n      set(val) {\n        if (this._selects === val) return\n        this._selects = val\n        if (Array.isArray(val)) {\n          this.selective = true\n          this.ssrMaterial.defines.SELECTIVE = true\n          this.ssrMaterial.needsUpdate = true\n        } else {\n          this.selective = false\n          this.ssrMaterial.defines.SELECTIVE = false\n          this.ssrMaterial.needsUpdate = true\n        }\n      },\n    })\n\n    this._bouncing = bouncing\n    Object.defineProperty(this, 'bouncing', {\n      get() {\n        return this._bouncing\n      },\n      set(val) {\n        if (this._bouncing === val) return\n        this._bouncing = val\n        if (val) {\n          this.ssrMaterial.uniforms['tDiffuse'].value = this.prevRenderTarget.texture\n        } else {\n          this.ssrMaterial.uniforms['tDiffuse'].value = this.beautyRenderTarget.texture\n        }\n      },\n    })\n\n    this.blur = true\n\n    this._distanceAttenuation = SSRShader.defines.DISTANCE_ATTENUATION\n    Object.defineProperty(this, 'distanceAttenuation', {\n      get() {\n        return this._distanceAttenuation\n      },\n      set(val) {\n        if (this._distanceAttenuation === val) return\n        this._distanceAttenuation = val\n        this.ssrMaterial.defines.DISTANCE_ATTENUATION = val\n        this.ssrMaterial.needsUpdate = true\n      },\n    })\n\n    this._fresnel = SSRShader.defines.FRESNEL\n    Object.defineProperty(this, 'fresnel', {\n      get() {\n        return this._fresnel\n      },\n      set(val) {\n        if (this._fresnel === val) return\n        this._fresnel = val\n        this.ssrMaterial.defines.FRESNEL = val\n        this.ssrMaterial.needsUpdate = true\n      },\n    })\n\n    this._infiniteThick = SSRShader.defines.INFINITE_THICK\n    Object.defineProperty(this, 'infiniteThick', {\n      get() {\n        return this._infiniteThick\n      },\n      set(val) {\n        if (this._infiniteThick === val) return\n        this._infiniteThick = val\n        this.ssrMaterial.defines.INFINITE_THICK = val\n        this.ssrMaterial.needsUpdate = true\n      },\n    })\n\n    // beauty render target with depth buffer\n\n    const depthTexture = new DepthTexture()\n    depthTexture.type = UnsignedShortType\n    depthTexture.minFilter = NearestFilter\n    depthTexture.magFilter = NearestFilter\n\n    this.beautyRenderTarget = new WebGLRenderTarget(this.width, this.height, {\n      minFilter: NearestFilter,\n      magFilter: NearestFilter,\n      type: HalfFloatType,\n      depthTexture: depthTexture,\n      depthBuffer: true,\n    })\n\n    //for bouncing\n    this.prevRenderTarget = new WebGLRenderTarget(this.width, this.height, {\n      minFilter: NearestFilter,\n      magFilter: NearestFilter,\n    })\n\n    // normal render target\n\n    this.normalRenderTarget = new WebGLRenderTarget(this.width, this.height, {\n      minFilter: NearestFilter,\n      magFilter: NearestFilter,\n      type: HalfFloatType,\n    })\n\n    // metalness render target\n\n    this.metalnessRenderTarget = new WebGLRenderTarget(this.width, this.height, {\n      minFilter: NearestFilter,\n      magFilter: NearestFilter,\n      type: HalfFloatType,\n    })\n\n    // ssr render target\n\n    this.ssrRenderTarget = new WebGLRenderTarget(this.width, this.height, {\n      minFilter: NearestFilter,\n      magFilter: NearestFilter,\n    })\n\n    this.blurRenderTarget = this.ssrRenderTarget.clone()\n    this.blurRenderTarget2 = this.ssrRenderTarget.clone()\n    // this.blurRenderTarget3 = this.ssrRenderTarget.clone();\n\n    // ssr material\n\n    this.ssrMaterial = new ShaderMaterial({\n      defines: Object.assign({}, SSRShader.defines, {\n        MAX_STEP: Math.sqrt(this.width * this.width + this.height * this.height),\n      }),\n      uniforms: UniformsUtils.clone(SSRShader.uniforms),\n      vertexShader: SSRShader.vertexShader,\n      fragmentShader: SSRShader.fragmentShader,\n      blending: NoBlending,\n    })\n\n    this.ssrMaterial.uniforms['tDiffuse'].value = this.beautyRenderTarget.texture\n    this.ssrMaterial.uniforms['tNormal'].value = this.normalRenderTarget.texture\n    this.ssrMaterial.defines.SELECTIVE = this.selective\n    this.ssrMaterial.needsUpdate = true\n    this.ssrMaterial.uniforms['tMetalness'].value = this.metalnessRenderTarget.texture\n    this.ssrMaterial.uniforms['tDepth'].value = this.beautyRenderTarget.depthTexture\n    this.ssrMaterial.uniforms['cameraNear'].value = this.camera.near\n    this.ssrMaterial.uniforms['cameraFar'].value = this.camera.far\n    this.ssrMaterial.uniforms['thickness'].value = this.thickness\n    this.ssrMaterial.uniforms['resolution'].value.set(this.width, this.height)\n    this.ssrMaterial.uniforms['cameraProjectionMatrix'].value.copy(this.camera.projectionMatrix)\n    this.ssrMaterial.uniforms['cameraInverseProjectionMatrix'].value.copy(this.camera.projectionMatrixInverse)\n\n    // normal material\n\n    this.normalMaterial = new MeshNormalMaterial()\n    this.normalMaterial.blending = NoBlending\n\n    // metalnessOn material\n\n    this.metalnessOnMaterial = new MeshBasicMaterial({\n      color: 'white',\n    })\n\n    // metalnessOff material\n\n    this.metalnessOffMaterial = new MeshBasicMaterial({\n      color: 'black',\n    })\n\n    // blur material\n\n    this.blurMaterial = new ShaderMaterial({\n      defines: Object.assign({}, SSRBlurShader.defines),\n      uniforms: UniformsUtils.clone(SSRBlurShader.uniforms),\n      vertexShader: SSRBlurShader.vertexShader,\n      fragmentShader: SSRBlurShader.fragmentShader,\n    })\n    this.blurMaterial.uniforms['tDiffuse'].value = this.ssrRenderTarget.texture\n    this.blurMaterial.uniforms['resolution'].value.set(this.width, this.height)\n\n    // blur material 2\n\n    this.blurMaterial2 = new ShaderMaterial({\n      defines: Object.assign({}, SSRBlurShader.defines),\n      uniforms: UniformsUtils.clone(SSRBlurShader.uniforms),\n      vertexShader: SSRBlurShader.vertexShader,\n      fragmentShader: SSRBlurShader.fragmentShader,\n    })\n    this.blurMaterial2.uniforms['tDiffuse'].value = this.blurRenderTarget.texture\n    this.blurMaterial2.uniforms['resolution'].value.set(this.width, this.height)\n\n    // // blur material 3\n\n    // this.blurMaterial3 = new ShaderMaterial({\n    //   defines: Object.assign({}, SSRBlurShader.defines),\n    //   uniforms: UniformsUtils.clone(SSRBlurShader.uniforms),\n    //   vertexShader: SSRBlurShader.vertexShader,\n    //   fragmentShader: SSRBlurShader.fragmentShader\n    // });\n    // this.blurMaterial3.uniforms['tDiffuse'].value = this.blurRenderTarget2.texture;\n    // this.blurMaterial3.uniforms['resolution'].value.set(this.width, this.height);\n\n    // material for rendering the depth\n\n    this.depthRenderMaterial = new ShaderMaterial({\n      defines: Object.assign({}, SSRDepthShader.defines),\n      uniforms: UniformsUtils.clone(SSRDepthShader.uniforms),\n      vertexShader: SSRDepthShader.vertexShader,\n      fragmentShader: SSRDepthShader.fragmentShader,\n      blending: NoBlending,\n    })\n    this.depthRenderMaterial.uniforms['tDepth'].value = this.beautyRenderTarget.depthTexture\n    this.depthRenderMaterial.uniforms['cameraNear'].value = this.camera.near\n    this.depthRenderMaterial.uniforms['cameraFar'].value = this.camera.far\n\n    // material for rendering the content of a render target\n\n    this.copyMaterial = new ShaderMaterial({\n      uniforms: UniformsUtils.clone(CopyShader.uniforms),\n      vertexShader: CopyShader.vertexShader,\n      fragmentShader: CopyShader.fragmentShader,\n      transparent: true,\n      depthTest: false,\n      depthWrite: false,\n      blendSrc: SrcAlphaFactor,\n      blendDst: OneMinusSrcAlphaFactor,\n      blendEquation: AddEquation,\n      blendSrcAlpha: SrcAlphaFactor,\n      blendDstAlpha: OneMinusSrcAlphaFactor,\n      blendEquationAlpha: AddEquation,\n      // premultipliedAlpha:true,\n    })\n\n    this.fsQuad = new FullScreenQuad(null)\n\n    this.originalClearColor = new Color()\n  }\n\n  dispose() {\n    // dispose render targets\n\n    this.beautyRenderTarget.dispose()\n    this.prevRenderTarget.dispose()\n    this.normalRenderTarget.dispose()\n    this.metalnessRenderTarget.dispose()\n    this.ssrRenderTarget.dispose()\n    this.blurRenderTarget.dispose()\n    this.blurRenderTarget2.dispose()\n    // this.blurRenderTarget3.dispose();\n\n    // dispose materials\n\n    this.normalMaterial.dispose()\n    this.metalnessOnMaterial.dispose()\n    this.metalnessOffMaterial.dispose()\n    this.blurMaterial.dispose()\n    this.blurMaterial2.dispose()\n    this.copyMaterial.dispose()\n    this.depthRenderMaterial.dispose()\n\n    // dipsose full screen quad\n\n    this.fsQuad.dispose()\n  }\n\n  render(renderer, writeBuffer /*, readBuffer, deltaTime, maskActive */) {\n    // render beauty and depth\n\n    renderer.setRenderTarget(this.beautyRenderTarget)\n    renderer.clear()\n    if (this.groundReflector) {\n      this.groundReflector.visible = false\n      this.groundReflector.doRender(this.renderer, this.scene, this.camera)\n      this.groundReflector.visible = true\n    }\n\n    renderer.render(this.scene, this.camera)\n    if (this.groundReflector) this.groundReflector.visible = false\n\n    // render normals\n\n    this.renderOverride(renderer, this.normalMaterial, this.normalRenderTarget, 0, 0)\n\n    // render metalnesses\n\n    if (this.selective) {\n      this.renderMetalness(renderer, this.metalnessOnMaterial, this.metalnessRenderTarget, 0, 0)\n    }\n\n    // render SSR\n\n    this.ssrMaterial.uniforms['opacity'].value = this.opacity\n    this.ssrMaterial.uniforms['maxDistance'].value = this.maxDistance\n    this.ssrMaterial.uniforms['thickness'].value = this.thickness\n    this.renderPass(renderer, this.ssrMaterial, this.ssrRenderTarget)\n\n    // render blur\n\n    if (this.blur) {\n      this.renderPass(renderer, this.blurMaterial, this.blurRenderTarget)\n      this.renderPass(renderer, this.blurMaterial2, this.blurRenderTarget2)\n      // this.renderPass(renderer, this.blurMaterial3, this.blurRenderTarget3);\n    }\n\n    // output result to screen\n\n    switch (this.output) {\n      case SSRPass.OUTPUT.Default:\n        if (this.bouncing) {\n          this.copyMaterial.uniforms['tDiffuse'].value = this.beautyRenderTarget.texture\n          this.copyMaterial.blending = NoBlending\n          this.renderPass(renderer, this.copyMaterial, this.prevRenderTarget)\n\n          if (this.blur) this.copyMaterial.uniforms['tDiffuse'].value = this.blurRenderTarget2.texture\n          else this.copyMaterial.uniforms['tDiffuse'].value = this.ssrRenderTarget.texture\n          this.copyMaterial.blending = NormalBlending\n          this.renderPass(renderer, this.copyMaterial, this.prevRenderTarget)\n\n          this.copyMaterial.uniforms['tDiffuse'].value = this.prevRenderTarget.texture\n          this.copyMaterial.blending = NoBlending\n          this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer)\n        } else {\n          this.copyMaterial.uniforms['tDiffuse'].value = this.beautyRenderTarget.texture\n          this.copyMaterial.blending = NoBlending\n          this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer)\n\n          if (this.blur) this.copyMaterial.uniforms['tDiffuse'].value = this.blurRenderTarget2.texture\n          else this.copyMaterial.uniforms['tDiffuse'].value = this.ssrRenderTarget.texture\n          this.copyMaterial.blending = NormalBlending\n          this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer)\n        }\n\n        break\n      case SSRPass.OUTPUT.SSR:\n        if (this.blur) this.copyMaterial.uniforms['tDiffuse'].value = this.blurRenderTarget2.texture\n        else this.copyMaterial.uniforms['tDiffuse'].value = this.ssrRenderTarget.texture\n        this.copyMaterial.blending = NoBlending\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer)\n\n        if (this.bouncing) {\n          if (this.blur) this.copyMaterial.uniforms['tDiffuse'].value = this.blurRenderTarget2.texture\n          else this.copyMaterial.uniforms['tDiffuse'].value = this.beautyRenderTarget.texture\n          this.copyMaterial.blending = NoBlending\n          this.renderPass(renderer, this.copyMaterial, this.prevRenderTarget)\n\n          this.copyMaterial.uniforms['tDiffuse'].value = this.ssrRenderTarget.texture\n          this.copyMaterial.blending = NormalBlending\n          this.renderPass(renderer, this.copyMaterial, this.prevRenderTarget)\n        }\n\n        break\n\n      case SSRPass.OUTPUT.Beauty:\n        this.copyMaterial.uniforms['tDiffuse'].value = this.beautyRenderTarget.texture\n        this.copyMaterial.blending = NoBlending\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer)\n\n        break\n\n      case SSRPass.OUTPUT.Depth:\n        this.renderPass(renderer, this.depthRenderMaterial, this.renderToScreen ? null : writeBuffer)\n\n        break\n\n      case SSRPass.OUTPUT.Normal:\n        this.copyMaterial.uniforms['tDiffuse'].value = this.normalRenderTarget.texture\n        this.copyMaterial.blending = NoBlending\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer)\n\n        break\n\n      case SSRPass.OUTPUT.Metalness:\n        this.copyMaterial.uniforms['tDiffuse'].value = this.metalnessRenderTarget.texture\n        this.copyMaterial.blending = NoBlending\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer)\n\n        break\n\n      default:\n        console.warn('THREE.SSRPass: Unknown output type.')\n    }\n  }\n\n  renderPass(renderer, passMaterial, renderTarget, clearColor, clearAlpha) {\n    // save original state\n    this.originalClearColor.copy(renderer.getClearColor(this.tempColor))\n    const originalClearAlpha = renderer.getClearAlpha(this.tempColor)\n    const originalAutoClear = renderer.autoClear\n\n    renderer.setRenderTarget(renderTarget)\n\n    // setup pass state\n    renderer.autoClear = false\n    if (clearColor !== undefined && clearColor !== null) {\n      renderer.setClearColor(clearColor)\n      renderer.setClearAlpha(clearAlpha || 0.0)\n      renderer.clear()\n    }\n\n    this.fsQuad.material = passMaterial\n    this.fsQuad.render(renderer)\n\n    // restore original state\n    renderer.autoClear = originalAutoClear\n    renderer.setClearColor(this.originalClearColor)\n    renderer.setClearAlpha(originalClearAlpha)\n  }\n\n  renderOverride(renderer, overrideMaterial, renderTarget, clearColor, clearAlpha) {\n    this.originalClearColor.copy(renderer.getClearColor(this.tempColor))\n    const originalClearAlpha = renderer.getClearAlpha(this.tempColor)\n    const originalAutoClear = renderer.autoClear\n\n    renderer.setRenderTarget(renderTarget)\n    renderer.autoClear = false\n\n    clearColor = overrideMaterial.clearColor || clearColor\n    clearAlpha = overrideMaterial.clearAlpha || clearAlpha\n\n    if (clearColor !== undefined && clearColor !== null) {\n      renderer.setClearColor(clearColor)\n      renderer.setClearAlpha(clearAlpha || 0.0)\n      renderer.clear()\n    }\n\n    this.scene.overrideMaterial = overrideMaterial\n    renderer.render(this.scene, this.camera)\n    this.scene.overrideMaterial = null\n\n    // restore original state\n\n    renderer.autoClear = originalAutoClear\n    renderer.setClearColor(this.originalClearColor)\n    renderer.setClearAlpha(originalClearAlpha)\n  }\n\n  renderMetalness(renderer, overrideMaterial, renderTarget, clearColor, clearAlpha) {\n    this.originalClearColor.copy(renderer.getClearColor(this.tempColor))\n    const originalClearAlpha = renderer.getClearAlpha(this.tempColor)\n    const originalAutoClear = renderer.autoClear\n\n    renderer.setRenderTarget(renderTarget)\n    renderer.autoClear = false\n\n    clearColor = overrideMaterial.clearColor || clearColor\n    clearAlpha = overrideMaterial.clearAlpha || clearAlpha\n\n    if (clearColor !== undefined && clearColor !== null) {\n      renderer.setClearColor(clearColor)\n      renderer.setClearAlpha(clearAlpha || 0.0)\n      renderer.clear()\n    }\n\n    this.scene.traverseVisible((child) => {\n      child._SSRPassBackupMaterial = child.material\n      if (this._selects.includes(child)) {\n        child.material = this.metalnessOnMaterial\n      } else {\n        child.material = this.metalnessOffMaterial\n      }\n    })\n    renderer.render(this.scene, this.camera)\n    this.scene.traverseVisible((child) => {\n      child.material = child._SSRPassBackupMaterial\n    })\n\n    // restore original state\n\n    renderer.autoClear = originalAutoClear\n    renderer.setClearColor(this.originalClearColor)\n    renderer.setClearAlpha(originalClearAlpha)\n  }\n\n  setSize(width, height) {\n    this.width = width\n    this.height = height\n\n    this.ssrMaterial.defines.MAX_STEP = Math.sqrt(width * width + height * height)\n    this.ssrMaterial.needsUpdate = true\n    this.beautyRenderTarget.setSize(width, height)\n    this.prevRenderTarget.setSize(width, height)\n    this.ssrRenderTarget.setSize(width, height)\n    this.normalRenderTarget.setSize(width, height)\n    this.metalnessRenderTarget.setSize(width, height)\n    this.blurRenderTarget.setSize(width, height)\n    this.blurRenderTarget2.setSize(width, height)\n    // this.blurRenderTarget3.setSize(width, height);\n\n    this.ssrMaterial.uniforms['resolution'].value.set(width, height)\n    this.ssrMaterial.uniforms['cameraProjectionMatrix'].value.copy(this.camera.projectionMatrix)\n    this.ssrMaterial.uniforms['cameraInverseProjectionMatrix'].value.copy(this.camera.projectionMatrixInverse)\n\n    this.blurMaterial.uniforms['resolution'].value.set(width, height)\n    this.blurMaterial2.uniforms['resolution'].value.set(width, height)\n  }\n}\n\nexport { SSRPass }\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}