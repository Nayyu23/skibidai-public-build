{"ast":null,"code":"import _classCallCheck from \"C:/Users/Nayyu/Desktop/skibidai-public-build/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Nayyu/Desktop/skibidai-public-build/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"C:/Users/Nayyu/Desktop/skibidai-public-build/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/Nayyu/Desktop/skibidai-public-build/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { Mesh, REVISION, IcosahedronGeometry, ShaderMaterial, DoubleSide } from \"three\";\nvar isCubeTexture = function isCubeTexture(def) {\n  return def && def.isCubeTexture;\n};\nvar GroundProjectedEnv = /*#__PURE__*/function (_Mesh) {\n  _inherits(GroundProjectedEnv, _Mesh);\n  var _super = _createSuper(GroundProjectedEnv);\n  function GroundProjectedEnv(texture, options) {\n    _classCallCheck(this, GroundProjectedEnv);\n    var _a, _b;\n    var isCubeMap = isCubeTexture(texture);\n    var w = (_b = isCubeMap ? (_a = texture.image[0]) == null ? void 0 : _a.width : texture.image.width) != null ? _b : 1024;\n    var cubeSize = w / 4;\n    var _lodMax = Math.floor(Math.log2(cubeSize));\n    var _cubeSize = Math.pow(2, _lodMax);\n    var width = 3 * Math.max(_cubeSize, 16 * 7);\n    var height = 4 * _cubeSize;\n    var defines = [isCubeMap ? \"#define ENVMAP_TYPE_CUBE\" : \"\", \"#define CUBEUV_TEXEL_WIDTH \".concat(1 / width), \"#define CUBEUV_TEXEL_HEIGHT \".concat(1 / height), \"#define CUBEUV_MAX_MIP \".concat(_lodMax, \".0\")];\n    var vertexShader = /* glsl */\"\\n        varying vec3 vWorldPosition;\\n        void main() \\n        {\\n            vec4 worldPosition = ( modelMatrix * vec4( position, 1.0 ) );\\n            vWorldPosition = worldPosition.xyz;\\n            \\n            gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n        }\\n        \";\n    var fragmentShader = defines.join(\"\\n\") + /* glsl */\"\\n        #define ENVMAP_TYPE_CUBE_UV\\n        varying vec3 vWorldPosition;\\n        uniform float radius;\\n        uniform float height;\\n        uniform float angle;\\n        #ifdef ENVMAP_TYPE_CUBE\\n            uniform samplerCube map;\\n        #else\\n            uniform sampler2D map;\\n        #endif\\n        // From: https://www.shadertoy.com/view/4tsBD7\\n        float diskIntersectWithBackFaceCulling( vec3 ro, vec3 rd, vec3 c, vec3 n, float r ) \\n        {\\n            float d = dot ( rd, n );\\n            \\n            if( d > 0.0 ) { return 1e6; }\\n            \\n            vec3  o = ro - c;\\n            float t = - dot( n, o ) / d;\\n            vec3  q = o + rd * t;\\n            \\n            return ( dot( q, q ) < r * r ) ? t : 1e6;\\n        }\\n        // From: https://www.iquilezles.org/www/articles/intersectors/intersectors.htm\\n        float sphereIntersect( vec3 ro, vec3 rd, vec3 ce, float ra ) \\n        {\\n            vec3 oc = ro - ce;\\n            float b = dot( oc, rd );\\n            float c = dot( oc, oc ) - ra * ra;\\n            float h = b * b - c;\\n            \\n            if( h < 0.0 ) { return -1.0; }\\n            \\n            h = sqrt( h );\\n            \\n            return - b + h;\\n        }\\n        vec3 project() \\n        {\\n            vec3 p = normalize( vWorldPosition );\\n            vec3 camPos = cameraPosition;\\n            camPos.y -= height;\\n            float intersection = sphereIntersect( camPos, p, vec3( 0.0 ), radius );\\n            if( intersection > 0.0 ) {\\n                \\n                vec3 h = vec3( 0.0, - height, 0.0 );\\n                float intersection2 = diskIntersectWithBackFaceCulling( camPos, p, h, vec3( 0.0, 1.0, 0.0 ), radius );\\n                p = ( camPos + min( intersection, intersection2 ) * p ) / radius;\\n            } else {\\n                p = vec3( 0.0, 1.0, 0.0 );\\n            }\\n            return p;\\n        }\\n        #include <common>\\n        #include <cube_uv_reflection_fragment>\\n        void main() \\n        {\\n            vec3 projectedWorldPosition = project();\\n            \\n            #ifdef ENVMAP_TYPE_CUBE\\n                vec3 outcolor = textureCube( map, projectedWorldPosition ).rgb;\\n            #else\\n                vec3 direction = normalize( projectedWorldPosition );\\n                vec2 uv = equirectUv( direction );\\n                vec3 outcolor = texture2D( map, uv ).rgb;\\n            #endif\\n            gl_FragColor = vec4( outcolor, 1.0 );\\n            #include <tonemapping_fragment>\\n            #include <\".concat(parseInt(REVISION.replace(/\\D+/g, \"\")) >= 154 ? \"colorspace_fragment\" : \"encodings_fragment\", \">\\n        }\\n        \");\n    var uniforms = {\n      map: {\n        value: texture\n      },\n      height: {\n        value: (options == null ? void 0 : options.height) || 15\n      },\n      radius: {\n        value: (options == null ? void 0 : options.radius) || 100\n      }\n    };\n    var geometry = new IcosahedronGeometry(1, 16);\n    var material = new ShaderMaterial({\n      uniforms: uniforms,\n      fragmentShader: fragmentShader,\n      vertexShader: vertexShader,\n      side: DoubleSide\n    });\n    return _super.call(this, geometry, material);\n  }\n  _createClass(GroundProjectedEnv, [{\n    key: \"radius\",\n    get: function get() {\n      return this.material.uniforms.radius.value;\n    },\n    set: function set(radius) {\n      this.material.uniforms.radius.value = radius;\n    }\n  }, {\n    key: \"height\",\n    get: function get() {\n      return this.material.uniforms.height.value;\n    },\n    set: function set(height) {\n      this.material.uniforms.height.value = height;\n    }\n  }]);\n  return GroundProjectedEnv;\n}(Mesh);\nexport { GroundProjectedEnv };","map":{"version":3,"names":["isCubeTexture","def","GroundProjectedEnv","_Mesh","_inherits","_super","_createSuper","texture","options","_classCallCheck","isCubeMap","w","_b","_a","image","width","cubeSize","_lodMax","Math","floor","log2","_cubeSize","pow","max","height","defines","concat","vertexShader","fragmentShader","join","parseInt","REVISION","replace","uniforms","map","value","radius","geometry","IcosahedronGeometry","material","ShaderMaterial","side","DoubleSide","call","_createClass","key","get","set","Mesh"],"sources":["C:\\Users\\Nayyu\\Desktop\\skibidai-public-build\\node_modules\\src\\objects\\GroundProjectedEnv.ts"],"sourcesContent":["import {\n  Mesh,\n  IcosahedronGeometry,\n  ShaderMaterial,\n  DoubleSide,\n  Texture,\n  CubeTexture,\n  BufferGeometry,\n  REVISION,\n} from 'three'\n\nexport interface GroundProjectedEnvParameters {\n  height?: number\n  radius?: number\n}\n\nconst isCubeTexture = (def: CubeTexture | Texture): def is CubeTexture => def && (def as CubeTexture).isCubeTexture\n\nexport class GroundProjectedEnv extends Mesh<BufferGeometry, ShaderMaterial> {\n  constructor(texture: CubeTexture | Texture, options?: GroundProjectedEnvParameters) {\n    const isCubeMap = isCubeTexture(texture)\n    const w = (isCubeMap ? texture.image[0]?.width : texture.image.width) ?? 1024\n    const cubeSize = w / 4\n    const _lodMax = Math.floor(Math.log2(cubeSize))\n    const _cubeSize = Math.pow(2, _lodMax)\n    const width = 3 * Math.max(_cubeSize, 16 * 7)\n    const height = 4 * _cubeSize\n\n    const defines = [\n      isCubeMap ? '#define ENVMAP_TYPE_CUBE' : '',\n      `#define CUBEUV_TEXEL_WIDTH ${1.0 / width}`,\n      `#define CUBEUV_TEXEL_HEIGHT ${1.0 / height}`,\n      `#define CUBEUV_MAX_MIP ${_lodMax}.0`,\n    ]\n\n    const vertexShader = /* glsl */ `\n        varying vec3 vWorldPosition;\n        void main() \n        {\n            vec4 worldPosition = ( modelMatrix * vec4( position, 1.0 ) );\n            vWorldPosition = worldPosition.xyz;\n            \n            gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n        }\n        `\n    const fragmentShader =\n      defines.join('\\n') +\n      /* glsl */ `\n        #define ENVMAP_TYPE_CUBE_UV\n        varying vec3 vWorldPosition;\n        uniform float radius;\n        uniform float height;\n        uniform float angle;\n        #ifdef ENVMAP_TYPE_CUBE\n            uniform samplerCube map;\n        #else\n            uniform sampler2D map;\n        #endif\n        // From: https://www.shadertoy.com/view/4tsBD7\n        float diskIntersectWithBackFaceCulling( vec3 ro, vec3 rd, vec3 c, vec3 n, float r ) \n        {\n            float d = dot ( rd, n );\n            \n            if( d > 0.0 ) { return 1e6; }\n            \n            vec3  o = ro - c;\n            float t = - dot( n, o ) / d;\n            vec3  q = o + rd * t;\n            \n            return ( dot( q, q ) < r * r ) ? t : 1e6;\n        }\n        // From: https://www.iquilezles.org/www/articles/intersectors/intersectors.htm\n        float sphereIntersect( vec3 ro, vec3 rd, vec3 ce, float ra ) \n        {\n            vec3 oc = ro - ce;\n            float b = dot( oc, rd );\n            float c = dot( oc, oc ) - ra * ra;\n            float h = b * b - c;\n            \n            if( h < 0.0 ) { return -1.0; }\n            \n            h = sqrt( h );\n            \n            return - b + h;\n        }\n        vec3 project() \n        {\n            vec3 p = normalize( vWorldPosition );\n            vec3 camPos = cameraPosition;\n            camPos.y -= height;\n            float intersection = sphereIntersect( camPos, p, vec3( 0.0 ), radius );\n            if( intersection > 0.0 ) {\n                \n                vec3 h = vec3( 0.0, - height, 0.0 );\n                float intersection2 = diskIntersectWithBackFaceCulling( camPos, p, h, vec3( 0.0, 1.0, 0.0 ), radius );\n                p = ( camPos + min( intersection, intersection2 ) * p ) / radius;\n            } else {\n                p = vec3( 0.0, 1.0, 0.0 );\n            }\n            return p;\n        }\n        #include <common>\n        #include <cube_uv_reflection_fragment>\n        void main() \n        {\n            vec3 projectedWorldPosition = project();\n            \n            #ifdef ENVMAP_TYPE_CUBE\n                vec3 outcolor = textureCube( map, projectedWorldPosition ).rgb;\n            #else\n                vec3 direction = normalize( projectedWorldPosition );\n                vec2 uv = equirectUv( direction );\n                vec3 outcolor = texture2D( map, uv ).rgb;\n            #endif\n            gl_FragColor = vec4( outcolor, 1.0 );\n            #include <tonemapping_fragment>\n            #include <${parseInt(REVISION.replace(/\\D+/g, '')) >= 154 ? 'colorspace_fragment' : 'encodings_fragment'}>\n        }\n        `\n\n    const uniforms = {\n      map: { value: texture },\n      height: { value: options?.height || 15 },\n      radius: { value: options?.radius || 100 },\n    }\n\n    const geometry = new IcosahedronGeometry(1, 16)\n    const material = new ShaderMaterial({\n      uniforms,\n      fragmentShader,\n      vertexShader,\n      side: DoubleSide,\n    })\n\n    super(geometry, material)\n  }\n\n  set radius(radius: number) {\n    this.material.uniforms.radius.value = radius\n  }\n\n  get radius(): number {\n    return this.material.uniforms.radius.value\n  }\n\n  set height(height: number) {\n    this.material.uniforms.height.value = height\n  }\n\n  get height(): number {\n    return this.material.uniforms.height.value\n  }\n}\n"],"mappings":";;;;;AAgBA,IAAMA,aAAA,GAAgB,SAAhBA,cAAiBC,GAAA;EAAA,OAAmDA,GAAA,IAAQA,GAAA,CAAoBD,aAAA;AAAA;AAAA,IAEzFE,kBAAA,0BAAAC,KAAA;EAAAC,SAAA,CAAAF,kBAAA,EAAAC,KAAA;EAAA,IAAAE,MAAA,GAAAC,YAAA,CAAAJ,kBAAA;EACX,SAAAA,mBAAYK,OAAA,EAAgCC,OAAA,EAAwC;IAAAC,eAAA,OAAAP,kBAAA;;IAC5E,IAAAQ,SAAA,GAAYV,aAAA,CAAcO,OAAO;IACjC,IAAAI,CAAA,IAAKC,EAAA,GAAAF,SAAA,IAAYG,EAAA,GAAAN,OAAA,CAAQO,KAAA,CAAM,CAAC,MAAf,gBAAAD,EAAA,CAAkBE,KAAA,GAAQR,OAAA,CAAQO,KAAA,CAAMC,KAAA,KAApD,OAAAH,EAAA,GAA8D;IACzE,IAAMI,QAAA,GAAWL,CAAA,GAAI;IACrB,IAAMM,OAAA,GAAUC,IAAA,CAAKC,KAAA,CAAMD,IAAA,CAAKE,IAAA,CAAKJ,QAAQ,CAAC;IAC9C,IAAMK,SAAA,GAAYH,IAAA,CAAKI,GAAA,CAAI,GAAGL,OAAO;IACrC,IAAMF,KAAA,GAAQ,IAAIG,IAAA,CAAKK,GAAA,CAAIF,SAAA,EAAW,KAAK,CAAC;IAC5C,IAAMG,MAAA,GAAS,IAAIH,SAAA;IAEnB,IAAMI,OAAA,GAAU,CACdf,SAAA,GAAY,6BAA6B,kCAAAgB,MAAA,CACX,IAAMX,KAAA,kCAAAW,MAAA,CACL,IAAMF,MAAA,6BAAAE,MAAA,CACXT,OAAA;IAGtB,IAAAU,YAAA,4UAA0B;IAU1B,IAAAC,cAAA,GACJH,OAAA,CAAQI,IAAA,CAAK,IAAI,ygFAAAH,MAAA,CAsECI,QAAA,CAASC,QAAA,CAASC,OAAA,CAAQ,QAAQ,EAAE,CAAC,KAAK,MAAM,wBAAwB;IAI5F,IAAMC,QAAA,GAAW;MACfC,GAAA,EAAK;QAAEC,KAAA,EAAO5B;MAAQ;MACtBiB,MAAA,EAAQ;QAAEW,KAAA,GAAO3B,OAAA,oBAAAA,OAAA,CAASgB,MAAA,KAAU;MAAG;MACvCY,MAAA,EAAQ;QAAED,KAAA,GAAO3B,OAAA,oBAAAA,OAAA,CAAS4B,MAAA,KAAU;MAAI;IAAA;IAG1C,IAAMC,QAAA,GAAW,IAAIC,mBAAA,CAAoB,GAAG,EAAE;IACxC,IAAAC,QAAA,GAAW,IAAIC,cAAA,CAAe;MAClCP,QAAA,EAAAA,QAAA;MACAL,cAAA,EAAAA,cAAA;MACAD,YAAA,EAAAA,YAAA;MACAc,IAAA,EAAMC;IAAA,CACP;IAAA,OAAArC,MAAA,CAAAsC,IAAA,OAEKN,QAAA,EAAUE,QAAQ;EAC1B;EAAAK,YAAA,CAAA1C,kBAAA;IAAA2C,GAAA;IAAAC,GAAA,EAMA,SAAAA,IAAA,EAAqB;MACZ,YAAKP,QAAA,CAASN,QAAA,CAASG,MAAA,CAAOD,KAAA;IACvC;IAAAY,GAAA,EANA,SAAAA,IAAWX,MAAA,EAAgB;MACpB,KAAAG,QAAA,CAASN,QAAA,CAASG,MAAA,CAAOD,KAAA,GAAQC,MAAA;IACxC;EAAA;IAAAS,GAAA;IAAAC,GAAA,EAUA,SAAAA,IAAA,EAAqB;MACZ,YAAKP,QAAA,CAASN,QAAA,CAAST,MAAA,CAAOW,KAAA;IACvC;IAAAY,GAAA,EANA,SAAAA,IAAWvB,MAAA,EAAgB;MACpB,KAAAe,QAAA,CAASN,QAAA,CAAST,MAAA,CAAOW,KAAA,GAAQX,MAAA;IACxC;EAAA;EAAA,OAAAtB,kBAAA;AAAA,EAjIsC8C,IAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}