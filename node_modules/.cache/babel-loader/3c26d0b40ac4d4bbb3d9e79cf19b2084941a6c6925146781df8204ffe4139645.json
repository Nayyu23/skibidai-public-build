{"ast":null,"code":"import _classCallCheck from \"C:/Users/Nayyu/Desktop/skibidai-public-build/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Nayyu/Desktop/skibidai-public-build/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"C:/Users/Nayyu/Desktop/skibidai-public-build/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"C:/Users/Nayyu/Desktop/skibidai-public-build/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/Nayyu/Desktop/skibidai-public-build/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nvar __defProp = Object.defineProperty;\nvar __defNormalProp = function __defNormalProp(obj, key, value) {\n  return key in obj ? __defProp(obj, key, {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: value\n  }) : obj[key] = value;\n};\nvar __publicField = function __publicField(obj, key, value) {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nimport { Pass, FullScreenQuad } from \"./Pass.js\";\nimport { Vector2, WebGLRenderTarget, UniformsUtils, ShaderMaterial, AdditiveBlending } from \"three\";\nimport { ConvolutionShader } from \"../shaders/ConvolutionShader.js\";\nvar BloomPass = /*#__PURE__*/function (_Pass) {\n  _inherits(BloomPass, _Pass);\n  var _super = _createSuper(BloomPass);\n  function BloomPass() {\n    var _this;\n    var strength = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    var kernelSize = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 25;\n    var sigma = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 4;\n    var resolution = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 256;\n    _classCallCheck(this, BloomPass);\n    _this = _super.call(this);\n    __publicField(_assertThisInitialized(_this), \"renderTargetX\");\n    __publicField(_assertThisInitialized(_this), \"renderTargetY\");\n    __publicField(_assertThisInitialized(_this), \"materialCombine\");\n    __publicField(_assertThisInitialized(_this), \"materialConvolution\");\n    __publicField(_assertThisInitialized(_this), \"fsQuad\");\n    __publicField(_assertThisInitialized(_this), \"combineUniforms\");\n    __publicField(_assertThisInitialized(_this), \"convolutionUniforms\");\n    __publicField(_assertThisInitialized(_this), \"blurX\", new Vector2(1953125e-9, 0));\n    __publicField(_assertThisInitialized(_this), \"blurY\", new Vector2(0, 1953125e-9));\n    _this.renderTargetX = new WebGLRenderTarget(resolution, resolution);\n    _this.renderTargetX.texture.name = \"BloomPass.x\";\n    _this.renderTargetY = new WebGLRenderTarget(resolution, resolution);\n    _this.renderTargetY.texture.name = \"BloomPass.y\";\n    _this.combineUniforms = UniformsUtils.clone(CombineShader.uniforms);\n    _this.combineUniforms[\"strength\"].value = strength;\n    _this.materialCombine = new ShaderMaterial({\n      uniforms: _this.combineUniforms,\n      vertexShader: CombineShader.vertexShader,\n      fragmentShader: CombineShader.fragmentShader,\n      blending: AdditiveBlending,\n      transparent: true\n    });\n    if (ConvolutionShader === void 0) console.error(\"BloomPass relies on ConvolutionShader\");\n    var convolutionShader = ConvolutionShader;\n    _this.convolutionUniforms = UniformsUtils.clone(convolutionShader.uniforms);\n    _this.convolutionUniforms[\"uImageIncrement\"].value = _this.blurX;\n    _this.convolutionUniforms[\"cKernel\"].value = ConvolutionShader.buildKernel(sigma);\n    _this.materialConvolution = new ShaderMaterial({\n      uniforms: _this.convolutionUniforms,\n      vertexShader: convolutionShader.vertexShader,\n      fragmentShader: convolutionShader.fragmentShader,\n      defines: {\n        KERNEL_SIZE_FLOAT: kernelSize.toFixed(1),\n        KERNEL_SIZE_INT: kernelSize.toFixed(0)\n      }\n    });\n    _this.needsSwap = false;\n    _this.fsQuad = new FullScreenQuad(_this.materialConvolution);\n    return _this;\n  }\n  _createClass(BloomPass, [{\n    key: \"render\",\n    value: function render(renderer, writeBuffer, readBuffer, deltaTime, maskActive) {\n      if (maskActive) renderer.state.buffers.stencil.setTest(false);\n      this.fsQuad.material = this.materialConvolution;\n      this.convolutionUniforms[\"tDiffuse\"].value = readBuffer.texture;\n      this.convolutionUniforms[\"uImageIncrement\"].value = this.blurX;\n      renderer.setRenderTarget(this.renderTargetX);\n      renderer.clear();\n      this.fsQuad.render(renderer);\n      this.convolutionUniforms[\"tDiffuse\"].value = this.renderTargetX.texture;\n      this.convolutionUniforms[\"uImageIncrement\"].value = this.blurY;\n      renderer.setRenderTarget(this.renderTargetY);\n      renderer.clear();\n      this.fsQuad.render(renderer);\n      this.fsQuad.material = this.materialCombine;\n      this.combineUniforms[\"tDiffuse\"].value = this.renderTargetY.texture;\n      if (maskActive) renderer.state.buffers.stencil.setTest(true);\n      renderer.setRenderTarget(readBuffer);\n      if (this.clear) renderer.clear();\n      this.fsQuad.render(renderer);\n    }\n  }]);\n  return BloomPass;\n}(Pass);\nvar CombineShader = {\n  uniforms: {\n    tDiffuse: {\n      value: null\n    },\n    strength: {\n      value: 1\n    }\n  },\n  vertexShader: /* glsl */\"\\n  varying vec2 vUv;\\n  void main() {\\n    vUv = uv;\\n    gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n  }\",\n  fragmentShader: /* glsl */\"\\n  uniform float strength;\\n  uniform sampler2D tDiffuse;\\n  varying vec2 vUv;\\n  void main() {\\n    vec4 texel = texture2D( tDiffuse, vUv );\\n    gl_FragColor = strength * texel;\\n  }\"\n};\nexport { BloomPass };","map":{"version":3,"names":["BloomPass","_Pass","_inherits","_super","_createSuper","_this","strength","arguments","length","undefined","kernelSize","sigma","resolution","_classCallCheck","call","__publicField","_assertThisInitialized","Vector2","renderTargetX","WebGLRenderTarget","texture","name","renderTargetY","combineUniforms","UniformsUtils","clone","CombineShader","uniforms","value","materialCombine","ShaderMaterial","vertexShader","fragmentShader","blending","AdditiveBlending","transparent","ConvolutionShader","console","error","convolutionShader","convolutionUniforms","blurX","buildKernel","materialConvolution","defines","KERNEL_SIZE_FLOAT","toFixed","KERNEL_SIZE_INT","needsSwap","fsQuad","FullScreenQuad","_createClass","key","render","renderer","writeBuffer","readBuffer","deltaTime","maskActive","state","buffers","stencil","setTest","material","setRenderTarget","clear","blurY","Pass","tDiffuse"],"sources":["C:\\Users\\Nayyu\\Desktop\\skibidai-public-build\\node_modules\\src\\postprocessing\\BloomPass.ts"],"sourcesContent":["import { Pass, FullScreenQuad } from './Pass'\nimport {\n  AdditiveBlending,\n  IUniform,\n  ShaderMaterial,\n  UniformsUtils,\n  Vector2,\n  WebGLRenderer,\n  WebGLRenderTarget,\n} from 'three'\nimport { ConvolutionShader } from '../shaders/ConvolutionShader'\n\nclass BloomPass extends Pass {\n  public renderTargetX: WebGLRenderTarget\n  public renderTargetY: WebGLRenderTarget\n  public materialCombine: ShaderMaterial\n  public materialConvolution: ShaderMaterial\n  public fsQuad: FullScreenQuad\n  public combineUniforms: Record<keyof typeof CombineShader['uniforms'], IUniform<any>>\n  public convolutionUniforms: Record<keyof typeof ConvolutionShader['uniforms'], IUniform<any>>\n\n  public blurX = new Vector2(0.001953125, 0.0)\n  public blurY = new Vector2(0.0, 0.001953125)\n\n  constructor(strength = 1, kernelSize = 25, sigma = 4, resolution = 256) {\n    super() // render targets\n\n    this.renderTargetX = new WebGLRenderTarget(resolution, resolution)\n    this.renderTargetX.texture.name = 'BloomPass.x'\n    this.renderTargetY = new WebGLRenderTarget(resolution, resolution)\n    this.renderTargetY.texture.name = 'BloomPass.y' // combine material\n\n    this.combineUniforms = UniformsUtils.clone(CombineShader.uniforms)\n    this.combineUniforms['strength'].value = strength\n    this.materialCombine = new ShaderMaterial({\n      uniforms: this.combineUniforms,\n      vertexShader: CombineShader.vertexShader,\n      fragmentShader: CombineShader.fragmentShader,\n      blending: AdditiveBlending,\n      transparent: true,\n    }) // convolution material\n\n    if (ConvolutionShader === undefined) console.error('BloomPass relies on ConvolutionShader')\n    const convolutionShader = ConvolutionShader\n    this.convolutionUniforms = UniformsUtils.clone(convolutionShader.uniforms)\n    this.convolutionUniforms['uImageIncrement'].value = this.blurX\n    this.convolutionUniforms['cKernel'].value = ConvolutionShader.buildKernel(sigma)\n    this.materialConvolution = new ShaderMaterial({\n      uniforms: this.convolutionUniforms,\n      vertexShader: convolutionShader.vertexShader,\n      fragmentShader: convolutionShader.fragmentShader,\n      defines: {\n        KERNEL_SIZE_FLOAT: kernelSize.toFixed(1),\n        KERNEL_SIZE_INT: kernelSize.toFixed(0),\n      },\n    })\n    this.needsSwap = false\n    this.fsQuad = new FullScreenQuad(this.materialConvolution)\n  }\n\n  public render(\n    renderer: WebGLRenderer,\n    writeBuffer: WebGLRenderTarget,\n    readBuffer: WebGLRenderTarget,\n    deltaTime: number,\n    maskActive: boolean,\n  ): void {\n    if (maskActive) renderer.state.buffers.stencil.setTest(false) // Render quad with blured scene into texture (convolution pass 1)\n\n    this.fsQuad.material = this.materialConvolution\n    this.convolutionUniforms['tDiffuse'].value = readBuffer.texture\n    this.convolutionUniforms['uImageIncrement'].value = this.blurX\n    renderer.setRenderTarget(this.renderTargetX)\n    renderer.clear()\n    this.fsQuad.render(renderer) // Render quad with blured scene into texture (convolution pass 2)\n\n    this.convolutionUniforms['tDiffuse'].value = this.renderTargetX.texture\n    this.convolutionUniforms['uImageIncrement'].value = this.blurY\n    renderer.setRenderTarget(this.renderTargetY)\n    renderer.clear()\n    this.fsQuad.render(renderer) // Render original scene with superimposed blur to texture\n\n    this.fsQuad.material = this.materialCombine\n    this.combineUniforms['tDiffuse'].value = this.renderTargetY.texture\n    if (maskActive) renderer.state.buffers.stencil.setTest(true)\n    renderer.setRenderTarget(readBuffer)\n    if (this.clear) renderer.clear()\n    this.fsQuad.render(renderer)\n  }\n}\n\nconst CombineShader = {\n  uniforms: {\n    tDiffuse: {\n      value: null,\n    },\n    strength: {\n      value: 1.0,\n    },\n  },\n  vertexShader:\n    /* glsl */\n    `\n  varying vec2 vUv;\n  void main() {\n    vUv = uv;\n    gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n  }`,\n  fragmentShader:\n    /* glsl */\n    `\n  uniform float strength;\n  uniform sampler2D tDiffuse;\n  varying vec2 vUv;\n  void main() {\n    vec4 texel = texture2D( tDiffuse, vUv );\n    gl_FragColor = strength * texel;\n  }`,\n}\n\nexport { BloomPass }\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}