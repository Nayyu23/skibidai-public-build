{"ast":null,"code":"import _classCallCheck from \"C:/Users/Nayyu/Desktop/skibidai-public-build/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Nayyu/Desktop/skibidai-public-build/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"C:/Users/Nayyu/Desktop/skibidai-public-build/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/Nayyu/Desktop/skibidai-public-build/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { Loader, LoaderUtils, FileLoader, TextureLoader, RepeatWrapping, ClampToEdgeWrapping, Texture, MeshPhongMaterial, MeshLambertMaterial, Color, EquirectangularReflectionMapping, Matrix4, Group, Bone, PropertyBinding, Object3D, OrthographicCamera, PerspectiveCamera, PointLight, MathUtils, SpotLight, DirectionalLight, SkinnedMesh, Mesh, LineBasicMaterial, Line, Vector3, Skeleton, AmbientLight, BufferGeometry, Float32BufferAttribute, Uint16BufferAttribute, Matrix3, Vector4, AnimationClip, Quaternion, Euler, VectorKeyframeTrack, QuaternionKeyframeTrack, NumberKeyframeTrack } from \"three\";\nimport { unzlibSync } from \"fflate\";\nimport { NURBSCurve } from \"../curves/NURBSCurve.js\";\nimport { decodeText } from \"../_polyfill/LoaderUtils.js\";\nimport { UV1 } from \"../_polyfill/uv1.js\";\nvar fbxTree;\nvar connections;\nvar sceneGraph;\nvar FBXLoader = /*#__PURE__*/function (_Loader) {\n  _inherits(FBXLoader, _Loader);\n  var _super = _createSuper(FBXLoader);\n  function FBXLoader(manager) {\n    _classCallCheck(this, FBXLoader);\n    return _super.call(this, manager);\n  }\n  _createClass(FBXLoader, [{\n    key: \"load\",\n    value: function load(url, onLoad, onProgress, onError) {\n      var scope = this;\n      var path = scope.path === \"\" ? LoaderUtils.extractUrlBase(url) : scope.path;\n      var loader = new FileLoader(this.manager);\n      loader.setPath(scope.path);\n      loader.setResponseType(\"arraybuffer\");\n      loader.setRequestHeader(scope.requestHeader);\n      loader.setWithCredentials(scope.withCredentials);\n      loader.load(url, function (buffer) {\n        try {\n          onLoad(scope.parse(buffer, path));\n        } catch (e) {\n          if (onError) {\n            onError(e);\n          } else {\n            console.error(e);\n          }\n          scope.manager.itemError(url);\n        }\n      }, onProgress, onError);\n    }\n  }, {\n    key: \"parse\",\n    value: function parse(FBXBuffer, path) {\n      if (isFbxFormatBinary(FBXBuffer)) {\n        fbxTree = new BinaryParser().parse(FBXBuffer);\n      } else {\n        var FBXText = convertArrayBufferToString(FBXBuffer);\n        if (!isFbxFormatASCII(FBXText)) {\n          throw new Error(\"THREE.FBXLoader: Unknown format.\");\n        }\n        if (getFbxVersion(FBXText) < 7e3) {\n          throw new Error(\"THREE.FBXLoader: FBX version not supported, FileVersion: \" + getFbxVersion(FBXText));\n        }\n        fbxTree = new TextParser().parse(FBXText);\n      }\n      var textureLoader = new TextureLoader(this.manager).setPath(this.resourcePath || path).setCrossOrigin(this.crossOrigin);\n      return new FBXTreeParser(textureLoader, this.manager).parse(fbxTree);\n    }\n  }]);\n  return FBXLoader;\n}(Loader);\nvar FBXTreeParser = /*#__PURE__*/function () {\n  function FBXTreeParser(textureLoader, manager) {\n    _classCallCheck(this, FBXTreeParser);\n    this.textureLoader = textureLoader;\n    this.manager = manager;\n  }\n  _createClass(FBXTreeParser, [{\n    key: \"parse\",\n    value: function parse() {\n      connections = this.parseConnections();\n      var images = this.parseImages();\n      var textures = this.parseTextures(images);\n      var materials = this.parseMaterials(textures);\n      var deformers = this.parseDeformers();\n      var geometryMap = new GeometryParser().parse(deformers);\n      this.parseScene(deformers, geometryMap, materials);\n      return sceneGraph;\n    }\n    // Parses FBXTree.Connections which holds parent-child connections between objects (e.g. material -> texture, model->geometry )\n    // and details the connection type\n  }, {\n    key: \"parseConnections\",\n    value: function parseConnections() {\n      var connectionMap = /* @__PURE__ */new Map();\n      if (\"Connections\" in fbxTree) {\n        var rawConnections = fbxTree.Connections.connections;\n        rawConnections.forEach(function (rawConnection) {\n          var fromID = rawConnection[0];\n          var toID = rawConnection[1];\n          var relationship = rawConnection[2];\n          if (!connectionMap.has(fromID)) {\n            connectionMap.set(fromID, {\n              parents: [],\n              children: []\n            });\n          }\n          var parentRelationship = {\n            ID: toID,\n            relationship: relationship\n          };\n          connectionMap.get(fromID).parents.push(parentRelationship);\n          if (!connectionMap.has(toID)) {\n            connectionMap.set(toID, {\n              parents: [],\n              children: []\n            });\n          }\n          var childRelationship = {\n            ID: fromID,\n            relationship: relationship\n          };\n          connectionMap.get(toID).children.push(childRelationship);\n        });\n      }\n      return connectionMap;\n    }\n    // Parse FBXTree.Objects.Video for embedded image data\n    // These images are connected to textures in FBXTree.Objects.Textures\n    // via FBXTree.Connections.\n  }, {\n    key: \"parseImages\",\n    value: function parseImages() {\n      var images = {};\n      var blobs = {};\n      if (\"Video\" in fbxTree.Objects) {\n        var videoNodes = fbxTree.Objects.Video;\n        for (var nodeID in videoNodes) {\n          var videoNode = videoNodes[nodeID];\n          var id = parseInt(nodeID);\n          images[id] = videoNode.RelativeFilename || videoNode.Filename;\n          if (\"Content\" in videoNode) {\n            var arrayBufferContent = videoNode.Content instanceof ArrayBuffer && videoNode.Content.byteLength > 0;\n            var base64Content = typeof videoNode.Content === \"string\" && videoNode.Content !== \"\";\n            if (arrayBufferContent || base64Content) {\n              var image = this.parseImage(videoNodes[nodeID]);\n              blobs[videoNode.RelativeFilename || videoNode.Filename] = image;\n            }\n          }\n        }\n      }\n      for (var _id in images) {\n        var filename = images[_id];\n        if (blobs[filename] !== void 0) images[_id] = blobs[filename];else images[_id] = images[_id].split(\"\\\\\").pop();\n      }\n      return images;\n    }\n    // Parse embedded image data in FBXTree.Video.Content\n  }, {\n    key: \"parseImage\",\n    value: function parseImage(videoNode) {\n      var content = videoNode.Content;\n      var fileName = videoNode.RelativeFilename || videoNode.Filename;\n      var extension = fileName.slice(fileName.lastIndexOf(\".\") + 1).toLowerCase();\n      var type;\n      switch (extension) {\n        case \"bmp\":\n          type = \"image/bmp\";\n          break;\n        case \"jpg\":\n        case \"jpeg\":\n          type = \"image/jpeg\";\n          break;\n        case \"png\":\n          type = \"image/png\";\n          break;\n        case \"tif\":\n          type = \"image/tiff\";\n          break;\n        case \"tga\":\n          if (this.manager.getHandler(\".tga\") === null) {\n            console.warn(\"FBXLoader: TGA loader not found, skipping \", fileName);\n          }\n          type = \"image/tga\";\n          break;\n        default:\n          console.warn('FBXLoader: Image type \"' + extension + '\" is not supported.');\n          return;\n      }\n      if (typeof content === \"string\") {\n        return \"data:\" + type + \";base64,\" + content;\n      } else {\n        var array = new Uint8Array(content);\n        return window.URL.createObjectURL(new Blob([array], {\n          type: type\n        }));\n      }\n    }\n    // Parse nodes in FBXTree.Objects.Texture\n    // These contain details such as UV scaling, cropping, rotation etc and are connected\n    // to images in FBXTree.Objects.Video\n  }, {\n    key: \"parseTextures\",\n    value: function parseTextures(images) {\n      var textureMap = /* @__PURE__ */new Map();\n      if (\"Texture\" in fbxTree.Objects) {\n        var textureNodes = fbxTree.Objects.Texture;\n        for (var nodeID in textureNodes) {\n          var texture = this.parseTexture(textureNodes[nodeID], images);\n          textureMap.set(parseInt(nodeID), texture);\n        }\n      }\n      return textureMap;\n    }\n    // Parse individual node in FBXTree.Objects.Texture\n  }, {\n    key: \"parseTexture\",\n    value: function parseTexture(textureNode, images) {\n      var texture = this.loadTexture(textureNode, images);\n      texture.ID = textureNode.id;\n      texture.name = textureNode.attrName;\n      var wrapModeU = textureNode.WrapModeU;\n      var wrapModeV = textureNode.WrapModeV;\n      var valueU = wrapModeU !== void 0 ? wrapModeU.value : 0;\n      var valueV = wrapModeV !== void 0 ? wrapModeV.value : 0;\n      texture.wrapS = valueU === 0 ? RepeatWrapping : ClampToEdgeWrapping;\n      texture.wrapT = valueV === 0 ? RepeatWrapping : ClampToEdgeWrapping;\n      if (\"Scaling\" in textureNode) {\n        var values = textureNode.Scaling.value;\n        texture.repeat.x = values[0];\n        texture.repeat.y = values[1];\n      }\n      return texture;\n    }\n    // load a texture specified as a blob or data URI, or via an external URL using TextureLoader\n  }, {\n    key: \"loadTexture\",\n    value: function loadTexture(textureNode, images) {\n      var fileName;\n      var currentPath = this.textureLoader.path;\n      var children = connections.get(textureNode.id).children;\n      if (children !== void 0 && children.length > 0 && images[children[0].ID] !== void 0) {\n        fileName = images[children[0].ID];\n        if (fileName.indexOf(\"blob:\") === 0 || fileName.indexOf(\"data:\") === 0) {\n          this.textureLoader.setPath(void 0);\n        }\n      }\n      var texture;\n      var extension = textureNode.FileName.slice(-3).toLowerCase();\n      if (extension === \"tga\") {\n        var loader = this.manager.getHandler(\".tga\");\n        if (loader === null) {\n          console.warn(\"FBXLoader: TGA loader not found, creating placeholder texture for\", textureNode.RelativeFilename);\n          texture = new Texture();\n        } else {\n          loader.setPath(this.textureLoader.path);\n          texture = loader.load(fileName);\n        }\n      } else if (extension === \"psd\") {\n        console.warn(\"FBXLoader: PSD textures are not supported, creating placeholder texture for\", textureNode.RelativeFilename);\n        texture = new Texture();\n      } else {\n        texture = this.textureLoader.load(fileName);\n      }\n      this.textureLoader.setPath(currentPath);\n      return texture;\n    }\n    // Parse nodes in FBXTree.Objects.Material\n  }, {\n    key: \"parseMaterials\",\n    value: function parseMaterials(textureMap) {\n      var materialMap = /* @__PURE__ */new Map();\n      if (\"Material\" in fbxTree.Objects) {\n        var materialNodes = fbxTree.Objects.Material;\n        for (var nodeID in materialNodes) {\n          var material = this.parseMaterial(materialNodes[nodeID], textureMap);\n          if (material !== null) materialMap.set(parseInt(nodeID), material);\n        }\n      }\n      return materialMap;\n    }\n    // Parse single node in FBXTree.Objects.Material\n    // Materials are connected to texture maps in FBXTree.Objects.Textures\n    // FBX format currently only supports Lambert and Phong shading models\n  }, {\n    key: \"parseMaterial\",\n    value: function parseMaterial(materialNode, textureMap) {\n      var ID = materialNode.id;\n      var name = materialNode.attrName;\n      var type = materialNode.ShadingModel;\n      if (typeof type === \"object\") {\n        type = type.value;\n      }\n      if (!connections.has(ID)) return null;\n      var parameters = this.parseParameters(materialNode, textureMap, ID);\n      var material;\n      switch (type.toLowerCase()) {\n        case \"phong\":\n          material = new MeshPhongMaterial();\n          break;\n        case \"lambert\":\n          material = new MeshLambertMaterial();\n          break;\n        default:\n          console.warn('THREE.FBXLoader: unknown material type \"%s\". Defaulting to MeshPhongMaterial.', type);\n          material = new MeshPhongMaterial();\n          break;\n      }\n      material.setValues(parameters);\n      material.name = name;\n      return material;\n    }\n    // Parse FBX material and return parameters suitable for a three.js material\n    // Also parse the texture map and return any textures associated with the material\n  }, {\n    key: \"parseParameters\",\n    value: function parseParameters(materialNode, textureMap, ID) {\n      var parameters = {};\n      if (materialNode.BumpFactor) {\n        parameters.bumpScale = materialNode.BumpFactor.value;\n      }\n      if (materialNode.Diffuse) {\n        parameters.color = new Color().fromArray(materialNode.Diffuse.value);\n      } else if (materialNode.DiffuseColor && (materialNode.DiffuseColor.type === \"Color\" || materialNode.DiffuseColor.type === \"ColorRGB\")) {\n        parameters.color = new Color().fromArray(materialNode.DiffuseColor.value);\n      }\n      if (materialNode.DisplacementFactor) {\n        parameters.displacementScale = materialNode.DisplacementFactor.value;\n      }\n      if (materialNode.Emissive) {\n        parameters.emissive = new Color().fromArray(materialNode.Emissive.value);\n      } else if (materialNode.EmissiveColor && (materialNode.EmissiveColor.type === \"Color\" || materialNode.EmissiveColor.type === \"ColorRGB\")) {\n        parameters.emissive = new Color().fromArray(materialNode.EmissiveColor.value);\n      }\n      if (materialNode.EmissiveFactor) {\n        parameters.emissiveIntensity = parseFloat(materialNode.EmissiveFactor.value);\n      }\n      if (materialNode.Opacity) {\n        parameters.opacity = parseFloat(materialNode.Opacity.value);\n      }\n      if (parameters.opacity < 1) {\n        parameters.transparent = true;\n      }\n      if (materialNode.ReflectionFactor) {\n        parameters.reflectivity = materialNode.ReflectionFactor.value;\n      }\n      if (materialNode.Shininess) {\n        parameters.shininess = materialNode.Shininess.value;\n      }\n      if (materialNode.Specular) {\n        parameters.specular = new Color().fromArray(materialNode.Specular.value);\n      } else if (materialNode.SpecularColor && materialNode.SpecularColor.type === \"Color\") {\n        parameters.specular = new Color().fromArray(materialNode.SpecularColor.value);\n      }\n      var scope = this;\n      connections.get(ID).children.forEach(function (child) {\n        var type = child.relationship;\n        switch (type) {\n          case \"Bump\":\n            parameters.bumpMap = scope.getTexture(textureMap, child.ID);\n            break;\n          case \"Maya|TEX_ao_map\":\n            parameters.aoMap = scope.getTexture(textureMap, child.ID);\n            break;\n          case \"DiffuseColor\":\n          case \"Maya|TEX_color_map\":\n            parameters.map = scope.getTexture(textureMap, child.ID);\n            if (parameters.map !== void 0) {\n              if (\"colorSpace\" in parameters.map) parameters.map.colorSpace = \"srgb\";else parameters.map.encoding = 3001;\n            }\n            break;\n          case \"DisplacementColor\":\n            parameters.displacementMap = scope.getTexture(textureMap, child.ID);\n            break;\n          case \"EmissiveColor\":\n            parameters.emissiveMap = scope.getTexture(textureMap, child.ID);\n            if (parameters.emissiveMap !== void 0) {\n              if (\"colorSpace\" in parameters.emissiveMap) parameters.emissiveMap.colorSpace = \"srgb\";else parameters.emissiveMap.encoding = 3001;\n            }\n            break;\n          case \"NormalMap\":\n          case \"Maya|TEX_normal_map\":\n            parameters.normalMap = scope.getTexture(textureMap, child.ID);\n            break;\n          case \"ReflectionColor\":\n            parameters.envMap = scope.getTexture(textureMap, child.ID);\n            if (parameters.envMap !== void 0) {\n              parameters.envMap.mapping = EquirectangularReflectionMapping;\n              if (\"colorSpace\" in parameters.envMap) parameters.envMap.colorSpace = \"srgb\";else parameters.envMap.encoding = 3001;\n            }\n            break;\n          case \"SpecularColor\":\n            parameters.specularMap = scope.getTexture(textureMap, child.ID);\n            if (parameters.specularMap !== void 0) {\n              if (\"colorSpace\" in parameters.specularMap) parameters.specularMap.colorSpace = \"srgb\";else parameters.specularMap.encoding = 3001;\n            }\n            break;\n          case \"TransparentColor\":\n          case \"TransparencyFactor\":\n            parameters.alphaMap = scope.getTexture(textureMap, child.ID);\n            parameters.transparent = true;\n            break;\n          case \"AmbientColor\":\n          case \"ShininessExponent\":\n          case \"SpecularFactor\":\n          case \"VectorDisplacementColor\":\n          default:\n            console.warn(\"THREE.FBXLoader: %s map is not supported in three.js, skipping texture.\", type);\n            break;\n        }\n      });\n      return parameters;\n    }\n    // get a texture from the textureMap for use by a material.\n  }, {\n    key: \"getTexture\",\n    value: function getTexture(textureMap, id) {\n      if (\"LayeredTexture\" in fbxTree.Objects && id in fbxTree.Objects.LayeredTexture) {\n        console.warn(\"THREE.FBXLoader: layered textures are not supported in three.js. Discarding all but first layer.\");\n        id = connections.get(id).children[0].ID;\n      }\n      return textureMap.get(id);\n    }\n    // Parse nodes in FBXTree.Objects.Deformer\n    // Deformer node can contain skinning or Vertex Cache animation data, however only skinning is supported here\n    // Generates map of Skeleton-like objects for use later when generating and binding skeletons.\n  }, {\n    key: \"parseDeformers\",\n    value: function parseDeformers() {\n      var skeletons = {};\n      var morphTargets = {};\n      if (\"Deformer\" in fbxTree.Objects) {\n        var DeformerNodes = fbxTree.Objects.Deformer;\n        for (var nodeID in DeformerNodes) {\n          var deformerNode = DeformerNodes[nodeID];\n          var relationships = connections.get(parseInt(nodeID));\n          if (deformerNode.attrType === \"Skin\") {\n            var skeleton = this.parseSkeleton(relationships, DeformerNodes);\n            skeleton.ID = nodeID;\n            if (relationships.parents.length > 1) {\n              console.warn(\"THREE.FBXLoader: skeleton attached to more than one geometry is not supported.\");\n            }\n            skeleton.geometryID = relationships.parents[0].ID;\n            skeletons[nodeID] = skeleton;\n          } else if (deformerNode.attrType === \"BlendShape\") {\n            var morphTarget = {\n              id: nodeID\n            };\n            morphTarget.rawTargets = this.parseMorphTargets(relationships, DeformerNodes);\n            morphTarget.id = nodeID;\n            if (relationships.parents.length > 1) {\n              console.warn(\"THREE.FBXLoader: morph target attached to more than one geometry is not supported.\");\n            }\n            morphTargets[nodeID] = morphTarget;\n          }\n        }\n      }\n      return {\n        skeletons: skeletons,\n        morphTargets: morphTargets\n      };\n    }\n    // Parse single nodes in FBXTree.Objects.Deformer\n    // The top level skeleton node has type 'Skin' and sub nodes have type 'Cluster'\n    // Each skin node represents a skeleton and each cluster node represents a bone\n  }, {\n    key: \"parseSkeleton\",\n    value: function parseSkeleton(relationships, deformerNodes) {\n      var rawBones = [];\n      relationships.children.forEach(function (child) {\n        var boneNode = deformerNodes[child.ID];\n        if (boneNode.attrType !== \"Cluster\") return;\n        var rawBone = {\n          ID: child.ID,\n          indices: [],\n          weights: [],\n          transformLink: new Matrix4().fromArray(boneNode.TransformLink.a)\n          // transform: new Matrix4().fromArray( boneNode.Transform.a ),\n          // linkMode: boneNode.Mode,\n        };\n\n        if (\"Indexes\" in boneNode) {\n          rawBone.indices = boneNode.Indexes.a;\n          rawBone.weights = boneNode.Weights.a;\n        }\n        rawBones.push(rawBone);\n      });\n      return {\n        rawBones: rawBones,\n        bones: []\n      };\n    }\n    // The top level morph deformer node has type \"BlendShape\" and sub nodes have type \"BlendShapeChannel\"\n  }, {\n    key: \"parseMorphTargets\",\n    value: function parseMorphTargets(relationships, deformerNodes) {\n      var rawMorphTargets = [];\n      for (var i = 0; i < relationships.children.length; i++) {\n        var child = relationships.children[i];\n        var morphTargetNode = deformerNodes[child.ID];\n        var rawMorphTarget = {\n          name: morphTargetNode.attrName,\n          initialWeight: morphTargetNode.DeformPercent,\n          id: morphTargetNode.id,\n          fullWeights: morphTargetNode.FullWeights.a\n        };\n        if (morphTargetNode.attrType !== \"BlendShapeChannel\") return;\n        rawMorphTarget.geoID = connections.get(parseInt(child.ID)).children.filter(function (child2) {\n          return child2.relationship === void 0;\n        })[0].ID;\n        rawMorphTargets.push(rawMorphTarget);\n      }\n      return rawMorphTargets;\n    }\n    // create the main Group() to be returned by the loader\n  }, {\n    key: \"parseScene\",\n    value: function parseScene(deformers, geometryMap, materialMap) {\n      sceneGraph = new Group();\n      var modelMap = this.parseModels(deformers.skeletons, geometryMap, materialMap);\n      var modelNodes = fbxTree.Objects.Model;\n      var scope = this;\n      modelMap.forEach(function (model) {\n        var modelNode = modelNodes[model.ID];\n        scope.setLookAtProperties(model, modelNode);\n        var parentConnections = connections.get(model.ID).parents;\n        parentConnections.forEach(function (connection) {\n          var parent = modelMap.get(connection.ID);\n          if (parent !== void 0) parent.add(model);\n        });\n        if (model.parent === null) {\n          sceneGraph.add(model);\n        }\n      });\n      this.bindSkeleton(deformers.skeletons, geometryMap, modelMap);\n      this.createAmbientLight();\n      sceneGraph.traverse(function (node) {\n        if (node.userData.transformData) {\n          if (node.parent) {\n            node.userData.transformData.parentMatrix = node.parent.matrix;\n            node.userData.transformData.parentMatrixWorld = node.parent.matrixWorld;\n          }\n          var transform = generateTransform(node.userData.transformData);\n          node.applyMatrix4(transform);\n          node.updateWorldMatrix();\n        }\n      });\n      var animations = new AnimationParser().parse();\n      if (sceneGraph.children.length === 1 && sceneGraph.children[0].isGroup) {\n        sceneGraph.children[0].animations = animations;\n        sceneGraph = sceneGraph.children[0];\n      }\n      sceneGraph.animations = animations;\n    }\n    // parse nodes in FBXTree.Objects.Model\n  }, {\n    key: \"parseModels\",\n    value: function parseModels(skeletons, geometryMap, materialMap) {\n      var modelMap = /* @__PURE__ */new Map();\n      var modelNodes = fbxTree.Objects.Model;\n      for (var nodeID in modelNodes) {\n        var id = parseInt(nodeID);\n        var node = modelNodes[nodeID];\n        var relationships = connections.get(id);\n        var model = this.buildSkeleton(relationships, skeletons, id, node.attrName);\n        if (!model) {\n          switch (node.attrType) {\n            case \"Camera\":\n              model = this.createCamera(relationships);\n              break;\n            case \"Light\":\n              model = this.createLight(relationships);\n              break;\n            case \"Mesh\":\n              model = this.createMesh(relationships, geometryMap, materialMap);\n              break;\n            case \"NurbsCurve\":\n              model = this.createCurve(relationships, geometryMap);\n              break;\n            case \"LimbNode\":\n            case \"Root\":\n              model = new Bone();\n              break;\n            case \"Null\":\n            default:\n              model = new Group();\n              break;\n          }\n          model.name = node.attrName ? PropertyBinding.sanitizeNodeName(node.attrName) : \"\";\n          model.ID = id;\n        }\n        this.getTransformData(model, node);\n        modelMap.set(id, model);\n      }\n      return modelMap;\n    }\n  }, {\n    key: \"buildSkeleton\",\n    value: function buildSkeleton(relationships, skeletons, id, name) {\n      var bone = null;\n      relationships.parents.forEach(function (parent) {\n        var _loop = function _loop() {\n          var skeleton = skeletons[ID];\n          skeleton.rawBones.forEach(function (rawBone, i) {\n            if (rawBone.ID === parent.ID) {\n              var subBone = bone;\n              bone = new Bone();\n              bone.matrixWorld.copy(rawBone.transformLink);\n              bone.name = name ? PropertyBinding.sanitizeNodeName(name) : \"\";\n              bone.ID = id;\n              skeleton.bones[i] = bone;\n              if (subBone !== null) {\n                bone.add(subBone);\n              }\n            }\n          });\n        };\n        for (var ID in skeletons) {\n          _loop();\n        }\n      });\n      return bone;\n    }\n    // create a PerspectiveCamera or OrthographicCamera\n  }, {\n    key: \"createCamera\",\n    value: function createCamera(relationships) {\n      var model;\n      var cameraAttribute;\n      relationships.children.forEach(function (child) {\n        var attr = fbxTree.Objects.NodeAttribute[child.ID];\n        if (attr !== void 0) {\n          cameraAttribute = attr;\n        }\n      });\n      if (cameraAttribute === void 0) {\n        model = new Object3D();\n      } else {\n        var type = 0;\n        if (cameraAttribute.CameraProjectionType !== void 0 && cameraAttribute.CameraProjectionType.value === 1) {\n          type = 1;\n        }\n        var nearClippingPlane = 1;\n        if (cameraAttribute.NearPlane !== void 0) {\n          nearClippingPlane = cameraAttribute.NearPlane.value / 1e3;\n        }\n        var farClippingPlane = 1e3;\n        if (cameraAttribute.FarPlane !== void 0) {\n          farClippingPlane = cameraAttribute.FarPlane.value / 1e3;\n        }\n        var width = window.innerWidth;\n        var height = window.innerHeight;\n        if (cameraAttribute.AspectWidth !== void 0 && cameraAttribute.AspectHeight !== void 0) {\n          width = cameraAttribute.AspectWidth.value;\n          height = cameraAttribute.AspectHeight.value;\n        }\n        var aspect = width / height;\n        var fov = 45;\n        if (cameraAttribute.FieldOfView !== void 0) {\n          fov = cameraAttribute.FieldOfView.value;\n        }\n        var focalLength = cameraAttribute.FocalLength ? cameraAttribute.FocalLength.value : null;\n        switch (type) {\n          case 0:\n            model = new PerspectiveCamera(fov, aspect, nearClippingPlane, farClippingPlane);\n            if (focalLength !== null) model.setFocalLength(focalLength);\n            break;\n          case 1:\n            model = new OrthographicCamera(-width / 2, width / 2, height / 2, -height / 2, nearClippingPlane, farClippingPlane);\n            break;\n          default:\n            console.warn(\"THREE.FBXLoader: Unknown camera type \" + type + \".\");\n            model = new Object3D();\n            break;\n        }\n      }\n      return model;\n    }\n    // Create a DirectionalLight, PointLight or SpotLight\n  }, {\n    key: \"createLight\",\n    value: function createLight(relationships) {\n      var model;\n      var lightAttribute;\n      relationships.children.forEach(function (child) {\n        var attr = fbxTree.Objects.NodeAttribute[child.ID];\n        if (attr !== void 0) {\n          lightAttribute = attr;\n        }\n      });\n      if (lightAttribute === void 0) {\n        model = new Object3D();\n      } else {\n        var type;\n        if (lightAttribute.LightType === void 0) {\n          type = 0;\n        } else {\n          type = lightAttribute.LightType.value;\n        }\n        var color = 16777215;\n        if (lightAttribute.Color !== void 0) {\n          color = new Color().fromArray(lightAttribute.Color.value);\n        }\n        var intensity = lightAttribute.Intensity === void 0 ? 1 : lightAttribute.Intensity.value / 100;\n        if (lightAttribute.CastLightOnObject !== void 0 && lightAttribute.CastLightOnObject.value === 0) {\n          intensity = 0;\n        }\n        var distance = 0;\n        if (lightAttribute.FarAttenuationEnd !== void 0) {\n          if (lightAttribute.EnableFarAttenuation !== void 0 && lightAttribute.EnableFarAttenuation.value === 0) {\n            distance = 0;\n          } else {\n            distance = lightAttribute.FarAttenuationEnd.value;\n          }\n        }\n        var decay = 1;\n        switch (type) {\n          case 0:\n            model = new PointLight(color, intensity, distance, decay);\n            break;\n          case 1:\n            model = new DirectionalLight(color, intensity);\n            break;\n          case 2:\n            var angle = Math.PI / 3;\n            if (lightAttribute.InnerAngle !== void 0) {\n              angle = MathUtils.degToRad(lightAttribute.InnerAngle.value);\n            }\n            var penumbra = 0;\n            if (lightAttribute.OuterAngle !== void 0) {\n              penumbra = MathUtils.degToRad(lightAttribute.OuterAngle.value);\n              penumbra = Math.max(penumbra, 1);\n            }\n            model = new SpotLight(color, intensity, distance, angle, penumbra, decay);\n            break;\n          default:\n            console.warn(\"THREE.FBXLoader: Unknown light type \" + lightAttribute.LightType.value + \", defaulting to a PointLight.\");\n            model = new PointLight(color, intensity);\n            break;\n        }\n        if (lightAttribute.CastShadows !== void 0 && lightAttribute.CastShadows.value === 1) {\n          model.castShadow = true;\n        }\n      }\n      return model;\n    }\n  }, {\n    key: \"createMesh\",\n    value: function createMesh(relationships, geometryMap, materialMap) {\n      var model;\n      var geometry = null;\n      var material = null;\n      var materials = [];\n      relationships.children.forEach(function (child) {\n        if (geometryMap.has(child.ID)) {\n          geometry = geometryMap.get(child.ID);\n        }\n        if (materialMap.has(child.ID)) {\n          materials.push(materialMap.get(child.ID));\n        }\n      });\n      if (materials.length > 1) {\n        material = materials;\n      } else if (materials.length > 0) {\n        material = materials[0];\n      } else {\n        material = new MeshPhongMaterial({\n          color: 13421772\n        });\n        materials.push(material);\n      }\n      if (\"color\" in geometry.attributes) {\n        materials.forEach(function (material2) {\n          material2.vertexColors = true;\n        });\n      }\n      if (geometry.FBX_Deformer) {\n        model = new SkinnedMesh(geometry, material);\n        model.normalizeSkinWeights();\n      } else {\n        model = new Mesh(geometry, material);\n      }\n      return model;\n    }\n  }, {\n    key: \"createCurve\",\n    value: function createCurve(relationships, geometryMap) {\n      var geometry = relationships.children.reduce(function (geo, child) {\n        if (geometryMap.has(child.ID)) geo = geometryMap.get(child.ID);\n        return geo;\n      }, null);\n      var material = new LineBasicMaterial({\n        color: 3342591,\n        linewidth: 1\n      });\n      return new Line(geometry, material);\n    }\n    // parse the model node for transform data\n  }, {\n    key: \"getTransformData\",\n    value: function getTransformData(model, modelNode) {\n      var transformData = {};\n      if (\"InheritType\" in modelNode) transformData.inheritType = parseInt(modelNode.InheritType.value);\n      if (\"RotationOrder\" in modelNode) transformData.eulerOrder = getEulerOrder(modelNode.RotationOrder.value);else transformData.eulerOrder = \"ZYX\";\n      if (\"Lcl_Translation\" in modelNode) transformData.translation = modelNode.Lcl_Translation.value;\n      if (\"PreRotation\" in modelNode) transformData.preRotation = modelNode.PreRotation.value;\n      if (\"Lcl_Rotation\" in modelNode) transformData.rotation = modelNode.Lcl_Rotation.value;\n      if (\"PostRotation\" in modelNode) transformData.postRotation = modelNode.PostRotation.value;\n      if (\"Lcl_Scaling\" in modelNode) transformData.scale = modelNode.Lcl_Scaling.value;\n      if (\"ScalingOffset\" in modelNode) transformData.scalingOffset = modelNode.ScalingOffset.value;\n      if (\"ScalingPivot\" in modelNode) transformData.scalingPivot = modelNode.ScalingPivot.value;\n      if (\"RotationOffset\" in modelNode) transformData.rotationOffset = modelNode.RotationOffset.value;\n      if (\"RotationPivot\" in modelNode) transformData.rotationPivot = modelNode.RotationPivot.value;\n      model.userData.transformData = transformData;\n    }\n  }, {\n    key: \"setLookAtProperties\",\n    value: function setLookAtProperties(model, modelNode) {\n      if (\"LookAtProperty\" in modelNode) {\n        var children = connections.get(model.ID).children;\n        children.forEach(function (child) {\n          if (child.relationship === \"LookAtProperty\") {\n            var lookAtTarget = fbxTree.Objects.Model[child.ID];\n            if (\"Lcl_Translation\" in lookAtTarget) {\n              var pos = lookAtTarget.Lcl_Translation.value;\n              if (model.target !== void 0) {\n                model.target.position.fromArray(pos);\n                sceneGraph.add(model.target);\n              } else {\n                model.lookAt(new Vector3().fromArray(pos));\n              }\n            }\n          }\n        });\n      }\n    }\n  }, {\n    key: \"bindSkeleton\",\n    value: function bindSkeleton(skeletons, geometryMap, modelMap) {\n      var bindMatrices = this.parsePoseNodes();\n      var _loop2 = function _loop2() {\n        var skeleton = skeletons[ID];\n        var parents = connections.get(parseInt(skeleton.ID)).parents;\n        parents.forEach(function (parent) {\n          if (geometryMap.has(parent.ID)) {\n            var geoID = parent.ID;\n            var geoRelationships = connections.get(geoID);\n            geoRelationships.parents.forEach(function (geoConnParent) {\n              if (modelMap.has(geoConnParent.ID)) {\n                var model = modelMap.get(geoConnParent.ID);\n                model.bind(new Skeleton(skeleton.bones), bindMatrices[geoConnParent.ID]);\n              }\n            });\n          }\n        });\n      };\n      for (var ID in skeletons) {\n        _loop2();\n      }\n    }\n  }, {\n    key: \"parsePoseNodes\",\n    value: function parsePoseNodes() {\n      var bindMatrices = {};\n      if (\"Pose\" in fbxTree.Objects) {\n        var BindPoseNode = fbxTree.Objects.Pose;\n        for (var nodeID in BindPoseNode) {\n          if (BindPoseNode[nodeID].attrType === \"BindPose\" && BindPoseNode[nodeID].NbPoseNodes > 0) {\n            var poseNodes = BindPoseNode[nodeID].PoseNode;\n            if (Array.isArray(poseNodes)) {\n              poseNodes.forEach(function (poseNode) {\n                bindMatrices[poseNode.Node] = new Matrix4().fromArray(poseNode.Matrix.a);\n              });\n            } else {\n              bindMatrices[poseNodes.Node] = new Matrix4().fromArray(poseNodes.Matrix.a);\n            }\n          }\n        }\n      }\n      return bindMatrices;\n    }\n    // Parse ambient color in FBXTree.GlobalSettings - if it's not set to black (default), create an ambient light\n  }, {\n    key: \"createAmbientLight\",\n    value: function createAmbientLight() {\n      if (\"GlobalSettings\" in fbxTree && \"AmbientColor\" in fbxTree.GlobalSettings) {\n        var ambientColor = fbxTree.GlobalSettings.AmbientColor.value;\n        var r = ambientColor[0];\n        var g = ambientColor[1];\n        var b = ambientColor[2];\n        if (r !== 0 || g !== 0 || b !== 0) {\n          var color = new Color(r, g, b);\n          sceneGraph.add(new AmbientLight(color, 1));\n        }\n      }\n    }\n  }]);\n  return FBXTreeParser;\n}();\nvar GeometryParser = /*#__PURE__*/function () {\n  function GeometryParser() {\n    _classCallCheck(this, GeometryParser);\n  }\n  _createClass(GeometryParser, [{\n    key: \"parse\",\n    value:\n    // Parse nodes in FBXTree.Objects.Geometry\n    function parse(deformers) {\n      var geometryMap = /* @__PURE__ */new Map();\n      if (\"Geometry\" in fbxTree.Objects) {\n        var geoNodes = fbxTree.Objects.Geometry;\n        for (var nodeID in geoNodes) {\n          var relationships = connections.get(parseInt(nodeID));\n          var geo = this.parseGeometry(relationships, geoNodes[nodeID], deformers);\n          geometryMap.set(parseInt(nodeID), geo);\n        }\n      }\n      return geometryMap;\n    }\n    // Parse single node in FBXTree.Objects.Geometry\n  }, {\n    key: \"parseGeometry\",\n    value: function parseGeometry(relationships, geoNode, deformers) {\n      switch (geoNode.attrType) {\n        case \"Mesh\":\n          return this.parseMeshGeometry(relationships, geoNode, deformers);\n        case \"NurbsCurve\":\n          return this.parseNurbsGeometry(geoNode);\n      }\n    }\n    // Parse single node mesh geometry in FBXTree.Objects.Geometry\n  }, {\n    key: \"parseMeshGeometry\",\n    value: function parseMeshGeometry(relationships, geoNode, deformers) {\n      var skeletons = deformers.skeletons;\n      var morphTargets = [];\n      var modelNodes = relationships.parents.map(function (parent) {\n        return fbxTree.Objects.Model[parent.ID];\n      });\n      if (modelNodes.length === 0) return;\n      var skeleton = relationships.children.reduce(function (skeleton2, child) {\n        if (skeletons[child.ID] !== void 0) skeleton2 = skeletons[child.ID];\n        return skeleton2;\n      }, null);\n      relationships.children.forEach(function (child) {\n        if (deformers.morphTargets[child.ID] !== void 0) {\n          morphTargets.push(deformers.morphTargets[child.ID]);\n        }\n      });\n      var modelNode = modelNodes[0];\n      var transformData = {};\n      if (\"RotationOrder\" in modelNode) transformData.eulerOrder = getEulerOrder(modelNode.RotationOrder.value);\n      if (\"InheritType\" in modelNode) transformData.inheritType = parseInt(modelNode.InheritType.value);\n      if (\"GeometricTranslation\" in modelNode) transformData.translation = modelNode.GeometricTranslation.value;\n      if (\"GeometricRotation\" in modelNode) transformData.rotation = modelNode.GeometricRotation.value;\n      if (\"GeometricScaling\" in modelNode) transformData.scale = modelNode.GeometricScaling.value;\n      var transform = generateTransform(transformData);\n      return this.genGeometry(geoNode, skeleton, morphTargets, transform);\n    }\n    // Generate a BufferGeometry from a node in FBXTree.Objects.Geometry\n  }, {\n    key: \"genGeometry\",\n    value: function genGeometry(geoNode, skeleton, morphTargets, preTransform) {\n      var geo = new BufferGeometry();\n      if (geoNode.attrName) geo.name = geoNode.attrName;\n      var geoInfo = this.parseGeoNode(geoNode, skeleton);\n      var buffers = this.genBuffers(geoInfo);\n      var positionAttribute = new Float32BufferAttribute(buffers.vertex, 3);\n      positionAttribute.applyMatrix4(preTransform);\n      geo.setAttribute(\"position\", positionAttribute);\n      if (buffers.colors.length > 0) {\n        geo.setAttribute(\"color\", new Float32BufferAttribute(buffers.colors, 3));\n      }\n      if (skeleton) {\n        geo.setAttribute(\"skinIndex\", new Uint16BufferAttribute(buffers.weightsIndices, 4));\n        geo.setAttribute(\"skinWeight\", new Float32BufferAttribute(buffers.vertexWeights, 4));\n        geo.FBX_Deformer = skeleton;\n      }\n      if (buffers.normal.length > 0) {\n        var normalMatrix = new Matrix3().getNormalMatrix(preTransform);\n        var normalAttribute = new Float32BufferAttribute(buffers.normal, 3);\n        normalAttribute.applyNormalMatrix(normalMatrix);\n        geo.setAttribute(\"normal\", normalAttribute);\n      }\n      buffers.uvs.forEach(function (uvBuffer, i) {\n        if (UV1 === \"uv2\") i++;\n        var name = i === 0 ? \"uv\" : \"uv\".concat(i);\n        geo.setAttribute(name, new Float32BufferAttribute(buffers.uvs[i], 2));\n      });\n      if (geoInfo.material && geoInfo.material.mappingType !== \"AllSame\") {\n        var prevMaterialIndex = buffers.materialIndex[0];\n        var startIndex = 0;\n        buffers.materialIndex.forEach(function (currentIndex, i) {\n          if (currentIndex !== prevMaterialIndex) {\n            geo.addGroup(startIndex, i - startIndex, prevMaterialIndex);\n            prevMaterialIndex = currentIndex;\n            startIndex = i;\n          }\n        });\n        if (geo.groups.length > 0) {\n          var lastGroup = geo.groups[geo.groups.length - 1];\n          var lastIndex = lastGroup.start + lastGroup.count;\n          if (lastIndex !== buffers.materialIndex.length) {\n            geo.addGroup(lastIndex, buffers.materialIndex.length - lastIndex, prevMaterialIndex);\n          }\n        }\n        if (geo.groups.length === 0) {\n          geo.addGroup(0, buffers.materialIndex.length, buffers.materialIndex[0]);\n        }\n      }\n      this.addMorphTargets(geo, geoNode, morphTargets, preTransform);\n      return geo;\n    }\n  }, {\n    key: \"parseGeoNode\",\n    value: function parseGeoNode(geoNode, skeleton) {\n      var geoInfo = {};\n      geoInfo.vertexPositions = geoNode.Vertices !== void 0 ? geoNode.Vertices.a : [];\n      geoInfo.vertexIndices = geoNode.PolygonVertexIndex !== void 0 ? geoNode.PolygonVertexIndex.a : [];\n      if (geoNode.LayerElementColor) {\n        geoInfo.color = this.parseVertexColors(geoNode.LayerElementColor[0]);\n      }\n      if (geoNode.LayerElementMaterial) {\n        geoInfo.material = this.parseMaterialIndices(geoNode.LayerElementMaterial[0]);\n      }\n      if (geoNode.LayerElementNormal) {\n        geoInfo.normal = this.parseNormals(geoNode.LayerElementNormal[0]);\n      }\n      if (geoNode.LayerElementUV) {\n        geoInfo.uv = [];\n        var i = 0;\n        while (geoNode.LayerElementUV[i]) {\n          if (geoNode.LayerElementUV[i].UV) {\n            geoInfo.uv.push(this.parseUVs(geoNode.LayerElementUV[i]));\n          }\n          i++;\n        }\n      }\n      geoInfo.weightTable = {};\n      if (skeleton !== null) {\n        geoInfo.skeleton = skeleton;\n        skeleton.rawBones.forEach(function (rawBone, i) {\n          rawBone.indices.forEach(function (index, j) {\n            if (geoInfo.weightTable[index] === void 0) geoInfo.weightTable[index] = [];\n            geoInfo.weightTable[index].push({\n              id: i,\n              weight: rawBone.weights[j]\n            });\n          });\n        });\n      }\n      return geoInfo;\n    }\n  }, {\n    key: \"genBuffers\",\n    value: function genBuffers(geoInfo) {\n      var buffers = {\n        vertex: [],\n        normal: [],\n        colors: [],\n        uvs: [],\n        materialIndex: [],\n        vertexWeights: [],\n        weightsIndices: []\n      };\n      var polygonIndex = 0;\n      var faceLength = 0;\n      var displayedWeightsWarning = false;\n      var facePositionIndexes = [];\n      var faceNormals = [];\n      var faceColors = [];\n      var faceUVs = [];\n      var faceWeights = [];\n      var faceWeightIndices = [];\n      var scope = this;\n      geoInfo.vertexIndices.forEach(function (vertexIndex, polygonVertexIndex) {\n        var materialIndex;\n        var endOfFace = false;\n        if (vertexIndex < 0) {\n          vertexIndex = vertexIndex ^ -1;\n          endOfFace = true;\n        }\n        var weightIndices = [];\n        var weights = [];\n        facePositionIndexes.push(vertexIndex * 3, vertexIndex * 3 + 1, vertexIndex * 3 + 2);\n        if (geoInfo.color) {\n          var data = getData(polygonVertexIndex, polygonIndex, vertexIndex, geoInfo.color);\n          faceColors.push(data[0], data[1], data[2]);\n        }\n        if (geoInfo.skeleton) {\n          if (geoInfo.weightTable[vertexIndex] !== void 0) {\n            geoInfo.weightTable[vertexIndex].forEach(function (wt) {\n              weights.push(wt.weight);\n              weightIndices.push(wt.id);\n            });\n          }\n          if (weights.length > 4) {\n            if (!displayedWeightsWarning) {\n              console.warn(\"THREE.FBXLoader: Vertex has more than 4 skinning weights assigned to vertex. Deleting additional weights.\");\n              displayedWeightsWarning = true;\n            }\n            var wIndex = [0, 0, 0, 0];\n            var Weight = [0, 0, 0, 0];\n            weights.forEach(function (weight, weightIndex) {\n              var currentWeight = weight;\n              var currentIndex = weightIndices[weightIndex];\n              Weight.forEach(function (comparedWeight, comparedWeightIndex, comparedWeightArray) {\n                if (currentWeight > comparedWeight) {\n                  comparedWeightArray[comparedWeightIndex] = currentWeight;\n                  currentWeight = comparedWeight;\n                  var tmp = wIndex[comparedWeightIndex];\n                  wIndex[comparedWeightIndex] = currentIndex;\n                  currentIndex = tmp;\n                }\n              });\n            });\n            weightIndices = wIndex;\n            weights = Weight;\n          }\n          while (weights.length < 4) {\n            weights.push(0);\n            weightIndices.push(0);\n          }\n          for (var i = 0; i < 4; ++i) {\n            faceWeights.push(weights[i]);\n            faceWeightIndices.push(weightIndices[i]);\n          }\n        }\n        if (geoInfo.normal) {\n          var _data = getData(polygonVertexIndex, polygonIndex, vertexIndex, geoInfo.normal);\n          faceNormals.push(_data[0], _data[1], _data[2]);\n        }\n        if (geoInfo.material && geoInfo.material.mappingType !== \"AllSame\") {\n          materialIndex = getData(polygonVertexIndex, polygonIndex, vertexIndex, geoInfo.material)[0];\n        }\n        if (geoInfo.uv) {\n          geoInfo.uv.forEach(function (uv, i) {\n            var data = getData(polygonVertexIndex, polygonIndex, vertexIndex, uv);\n            if (faceUVs[i] === void 0) {\n              faceUVs[i] = [];\n            }\n            faceUVs[i].push(data[0]);\n            faceUVs[i].push(data[1]);\n          });\n        }\n        faceLength++;\n        if (endOfFace) {\n          scope.genFace(buffers, geoInfo, facePositionIndexes, materialIndex, faceNormals, faceColors, faceUVs, faceWeights, faceWeightIndices, faceLength);\n          polygonIndex++;\n          faceLength = 0;\n          facePositionIndexes = [];\n          faceNormals = [];\n          faceColors = [];\n          faceUVs = [];\n          faceWeights = [];\n          faceWeightIndices = [];\n        }\n      });\n      return buffers;\n    }\n    // Generate data for a single face in a geometry. If the face is a quad then split it into 2 tris\n  }, {\n    key: \"genFace\",\n    value: function genFace(buffers, geoInfo, facePositionIndexes, materialIndex, faceNormals, faceColors, faceUVs, faceWeights, faceWeightIndices, faceLength) {\n      var _loop3 = function _loop3(i) {\n        buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[0]]);\n        buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[1]]);\n        buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[2]]);\n        buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[(i - 1) * 3]]);\n        buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[(i - 1) * 3 + 1]]);\n        buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[(i - 1) * 3 + 2]]);\n        buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[i * 3]]);\n        buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[i * 3 + 1]]);\n        buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[i * 3 + 2]]);\n        if (geoInfo.skeleton) {\n          buffers.vertexWeights.push(faceWeights[0]);\n          buffers.vertexWeights.push(faceWeights[1]);\n          buffers.vertexWeights.push(faceWeights[2]);\n          buffers.vertexWeights.push(faceWeights[3]);\n          buffers.vertexWeights.push(faceWeights[(i - 1) * 4]);\n          buffers.vertexWeights.push(faceWeights[(i - 1) * 4 + 1]);\n          buffers.vertexWeights.push(faceWeights[(i - 1) * 4 + 2]);\n          buffers.vertexWeights.push(faceWeights[(i - 1) * 4 + 3]);\n          buffers.vertexWeights.push(faceWeights[i * 4]);\n          buffers.vertexWeights.push(faceWeights[i * 4 + 1]);\n          buffers.vertexWeights.push(faceWeights[i * 4 + 2]);\n          buffers.vertexWeights.push(faceWeights[i * 4 + 3]);\n          buffers.weightsIndices.push(faceWeightIndices[0]);\n          buffers.weightsIndices.push(faceWeightIndices[1]);\n          buffers.weightsIndices.push(faceWeightIndices[2]);\n          buffers.weightsIndices.push(faceWeightIndices[3]);\n          buffers.weightsIndices.push(faceWeightIndices[(i - 1) * 4]);\n          buffers.weightsIndices.push(faceWeightIndices[(i - 1) * 4 + 1]);\n          buffers.weightsIndices.push(faceWeightIndices[(i - 1) * 4 + 2]);\n          buffers.weightsIndices.push(faceWeightIndices[(i - 1) * 4 + 3]);\n          buffers.weightsIndices.push(faceWeightIndices[i * 4]);\n          buffers.weightsIndices.push(faceWeightIndices[i * 4 + 1]);\n          buffers.weightsIndices.push(faceWeightIndices[i * 4 + 2]);\n          buffers.weightsIndices.push(faceWeightIndices[i * 4 + 3]);\n        }\n        if (geoInfo.color) {\n          buffers.colors.push(faceColors[0]);\n          buffers.colors.push(faceColors[1]);\n          buffers.colors.push(faceColors[2]);\n          buffers.colors.push(faceColors[(i - 1) * 3]);\n          buffers.colors.push(faceColors[(i - 1) * 3 + 1]);\n          buffers.colors.push(faceColors[(i - 1) * 3 + 2]);\n          buffers.colors.push(faceColors[i * 3]);\n          buffers.colors.push(faceColors[i * 3 + 1]);\n          buffers.colors.push(faceColors[i * 3 + 2]);\n        }\n        if (geoInfo.material && geoInfo.material.mappingType !== \"AllSame\") {\n          buffers.materialIndex.push(materialIndex);\n          buffers.materialIndex.push(materialIndex);\n          buffers.materialIndex.push(materialIndex);\n        }\n        if (geoInfo.normal) {\n          buffers.normal.push(faceNormals[0]);\n          buffers.normal.push(faceNormals[1]);\n          buffers.normal.push(faceNormals[2]);\n          buffers.normal.push(faceNormals[(i - 1) * 3]);\n          buffers.normal.push(faceNormals[(i - 1) * 3 + 1]);\n          buffers.normal.push(faceNormals[(i - 1) * 3 + 2]);\n          buffers.normal.push(faceNormals[i * 3]);\n          buffers.normal.push(faceNormals[i * 3 + 1]);\n          buffers.normal.push(faceNormals[i * 3 + 2]);\n        }\n        if (geoInfo.uv) {\n          geoInfo.uv.forEach(function (uv, j) {\n            if (buffers.uvs[j] === void 0) buffers.uvs[j] = [];\n            buffers.uvs[j].push(faceUVs[j][0]);\n            buffers.uvs[j].push(faceUVs[j][1]);\n            buffers.uvs[j].push(faceUVs[j][(i - 1) * 2]);\n            buffers.uvs[j].push(faceUVs[j][(i - 1) * 2 + 1]);\n            buffers.uvs[j].push(faceUVs[j][i * 2]);\n            buffers.uvs[j].push(faceUVs[j][i * 2 + 1]);\n          });\n        }\n      };\n      for (var i = 2; i < faceLength; i++) {\n        _loop3(i);\n      }\n    }\n  }, {\n    key: \"addMorphTargets\",\n    value: function addMorphTargets(parentGeo, parentGeoNode, morphTargets, preTransform) {\n      if (morphTargets.length === 0) return;\n      parentGeo.morphTargetsRelative = true;\n      parentGeo.morphAttributes.position = [];\n      var scope = this;\n      morphTargets.forEach(function (morphTarget) {\n        morphTarget.rawTargets.forEach(function (rawTarget) {\n          var morphGeoNode = fbxTree.Objects.Geometry[rawTarget.geoID];\n          if (morphGeoNode !== void 0) {\n            scope.genMorphGeometry(parentGeo, parentGeoNode, morphGeoNode, preTransform, rawTarget.name);\n          }\n        });\n      });\n    }\n    // a morph geometry node is similar to a standard  node, and the node is also contained\n    // in FBXTree.Objects.Geometry, however it can only have attributes for position, normal\n    // and a special attribute Index defining which vertices of the original geometry are affected\n    // Normal and position attributes only have data for the vertices that are affected by the morph\n  }, {\n    key: \"genMorphGeometry\",\n    value: function genMorphGeometry(parentGeo, parentGeoNode, morphGeoNode, preTransform, name) {\n      var vertexIndices = parentGeoNode.PolygonVertexIndex !== void 0 ? parentGeoNode.PolygonVertexIndex.a : [];\n      var morphPositionsSparse = morphGeoNode.Vertices !== void 0 ? morphGeoNode.Vertices.a : [];\n      var indices = morphGeoNode.Indexes !== void 0 ? morphGeoNode.Indexes.a : [];\n      var length = parentGeo.attributes.position.count * 3;\n      var morphPositions = new Float32Array(length);\n      for (var i = 0; i < indices.length; i++) {\n        var morphIndex = indices[i] * 3;\n        morphPositions[morphIndex] = morphPositionsSparse[i * 3];\n        morphPositions[morphIndex + 1] = morphPositionsSparse[i * 3 + 1];\n        morphPositions[morphIndex + 2] = morphPositionsSparse[i * 3 + 2];\n      }\n      var morphGeoInfo = {\n        vertexIndices: vertexIndices,\n        vertexPositions: morphPositions\n      };\n      var morphBuffers = this.genBuffers(morphGeoInfo);\n      var positionAttribute = new Float32BufferAttribute(morphBuffers.vertex, 3);\n      positionAttribute.name = name || morphGeoNode.attrName;\n      positionAttribute.applyMatrix4(preTransform);\n      parentGeo.morphAttributes.position.push(positionAttribute);\n    }\n    // Parse normal from FBXTree.Objects.Geometry.LayerElementNormal if it exists\n  }, {\n    key: \"parseNormals\",\n    value: function parseNormals(NormalNode) {\n      var mappingType = NormalNode.MappingInformationType;\n      var referenceType = NormalNode.ReferenceInformationType;\n      var buffer = NormalNode.Normals.a;\n      var indexBuffer = [];\n      if (referenceType === \"IndexToDirect\") {\n        if (\"NormalIndex\" in NormalNode) {\n          indexBuffer = NormalNode.NormalIndex.a;\n        } else if (\"NormalsIndex\" in NormalNode) {\n          indexBuffer = NormalNode.NormalsIndex.a;\n        }\n      }\n      return {\n        dataSize: 3,\n        buffer: buffer,\n        indices: indexBuffer,\n        mappingType: mappingType,\n        referenceType: referenceType\n      };\n    }\n    // Parse UVs from FBXTree.Objects.Geometry.LayerElementUV if it exists\n  }, {\n    key: \"parseUVs\",\n    value: function parseUVs(UVNode) {\n      var mappingType = UVNode.MappingInformationType;\n      var referenceType = UVNode.ReferenceInformationType;\n      var buffer = UVNode.UV.a;\n      var indexBuffer = [];\n      if (referenceType === \"IndexToDirect\") {\n        indexBuffer = UVNode.UVIndex.a;\n      }\n      return {\n        dataSize: 2,\n        buffer: buffer,\n        indices: indexBuffer,\n        mappingType: mappingType,\n        referenceType: referenceType\n      };\n    }\n    // Parse Vertex Colors from FBXTree.Objects.Geometry.LayerElementColor if it exists\n  }, {\n    key: \"parseVertexColors\",\n    value: function parseVertexColors(ColorNode) {\n      var mappingType = ColorNode.MappingInformationType;\n      var referenceType = ColorNode.ReferenceInformationType;\n      var buffer = ColorNode.Colors.a;\n      var indexBuffer = [];\n      if (referenceType === \"IndexToDirect\") {\n        indexBuffer = ColorNode.ColorIndex.a;\n      }\n      return {\n        dataSize: 4,\n        buffer: buffer,\n        indices: indexBuffer,\n        mappingType: mappingType,\n        referenceType: referenceType\n      };\n    }\n    // Parse mapping and material data in FBXTree.Objects.Geometry.LayerElementMaterial if it exists\n  }, {\n    key: \"parseMaterialIndices\",\n    value: function parseMaterialIndices(MaterialNode) {\n      var mappingType = MaterialNode.MappingInformationType;\n      var referenceType = MaterialNode.ReferenceInformationType;\n      if (mappingType === \"NoMappingInformation\") {\n        return {\n          dataSize: 1,\n          buffer: [0],\n          indices: [0],\n          mappingType: \"AllSame\",\n          referenceType: referenceType\n        };\n      }\n      var materialIndexBuffer = MaterialNode.Materials.a;\n      var materialIndices = [];\n      for (var i = 0; i < materialIndexBuffer.length; ++i) {\n        materialIndices.push(i);\n      }\n      return {\n        dataSize: 1,\n        buffer: materialIndexBuffer,\n        indices: materialIndices,\n        mappingType: mappingType,\n        referenceType: referenceType\n      };\n    }\n    // Generate a NurbGeometry from a node in FBXTree.Objects.Geometry\n  }, {\n    key: \"parseNurbsGeometry\",\n    value: function parseNurbsGeometry(geoNode) {\n      if (NURBSCurve === void 0) {\n        console.error(\"THREE.FBXLoader: The loader relies on NURBSCurve for any nurbs present in the model. Nurbs will show up as empty geometry.\");\n        return new BufferGeometry();\n      }\n      var order = parseInt(geoNode.Order);\n      if (isNaN(order)) {\n        console.error(\"THREE.FBXLoader: Invalid Order %s given for geometry ID: %s\", geoNode.Order, geoNode.id);\n        return new BufferGeometry();\n      }\n      var degree = order - 1;\n      var knots = geoNode.KnotVector.a;\n      var controlPoints = [];\n      var pointsValues = geoNode.Points.a;\n      for (var i = 0, l = pointsValues.length; i < l; i += 4) {\n        controlPoints.push(new Vector4().fromArray(pointsValues, i));\n      }\n      var startKnot, endKnot;\n      if (geoNode.Form === \"Closed\") {\n        controlPoints.push(controlPoints[0]);\n      } else if (geoNode.Form === \"Periodic\") {\n        startKnot = degree;\n        endKnot = knots.length - 1 - startKnot;\n        for (var _i = 0; _i < degree; ++_i) {\n          controlPoints.push(controlPoints[_i]);\n        }\n      }\n      var curve = new NURBSCurve(degree, knots, controlPoints, startKnot, endKnot);\n      var points = curve.getPoints(controlPoints.length * 12);\n      return new BufferGeometry().setFromPoints(points);\n    }\n  }]);\n  return GeometryParser;\n}();\nvar AnimationParser = /*#__PURE__*/function () {\n  function AnimationParser() {\n    _classCallCheck(this, AnimationParser);\n  }\n  _createClass(AnimationParser, [{\n    key: \"parse\",\n    value:\n    // take raw animation clips and turn them into three.js animation clips\n    function parse() {\n      var animationClips = [];\n      var rawClips = this.parseClips();\n      if (rawClips !== void 0) {\n        for (var key in rawClips) {\n          var rawClip = rawClips[key];\n          var clip = this.addClip(rawClip);\n          animationClips.push(clip);\n        }\n      }\n      return animationClips;\n    }\n  }, {\n    key: \"parseClips\",\n    value: function parseClips() {\n      if (fbxTree.Objects.AnimationCurve === void 0) return void 0;\n      var curveNodesMap = this.parseAnimationCurveNodes();\n      this.parseAnimationCurves(curveNodesMap);\n      var layersMap = this.parseAnimationLayers(curveNodesMap);\n      var rawClips = this.parseAnimStacks(layersMap);\n      return rawClips;\n    }\n    // parse nodes in FBXTree.Objects.AnimationCurveNode\n    // each AnimationCurveNode holds data for an animation transform for a model (e.g. left arm rotation )\n    // and is referenced by an AnimationLayer\n  }, {\n    key: \"parseAnimationCurveNodes\",\n    value: function parseAnimationCurveNodes() {\n      var rawCurveNodes = fbxTree.Objects.AnimationCurveNode;\n      var curveNodesMap = /* @__PURE__ */new Map();\n      for (var nodeID in rawCurveNodes) {\n        var rawCurveNode = rawCurveNodes[nodeID];\n        if (rawCurveNode.attrName.match(/S|R|T|DeformPercent/) !== null) {\n          var curveNode = {\n            id: rawCurveNode.id,\n            attr: rawCurveNode.attrName,\n            curves: {}\n          };\n          curveNodesMap.set(curveNode.id, curveNode);\n        }\n      }\n      return curveNodesMap;\n    }\n    // parse nodes in FBXTree.Objects.AnimationCurve and connect them up to\n    // previously parsed AnimationCurveNodes. Each AnimationCurve holds data for a single animated\n    // axis ( e.g. times and values of x rotation)\n  }, {\n    key: \"parseAnimationCurves\",\n    value: function parseAnimationCurves(curveNodesMap) {\n      var rawCurves = fbxTree.Objects.AnimationCurve;\n      for (var nodeID in rawCurves) {\n        var animationCurve = {\n          id: rawCurves[nodeID].id,\n          times: rawCurves[nodeID].KeyTime.a.map(convertFBXTimeToSeconds),\n          values: rawCurves[nodeID].KeyValueFloat.a\n        };\n        var relationships = connections.get(animationCurve.id);\n        if (relationships !== void 0) {\n          var animationCurveID = relationships.parents[0].ID;\n          var animationCurveRelationship = relationships.parents[0].relationship;\n          if (animationCurveRelationship.match(/X/)) {\n            curveNodesMap.get(animationCurveID).curves[\"x\"] = animationCurve;\n          } else if (animationCurveRelationship.match(/Y/)) {\n            curveNodesMap.get(animationCurveID).curves[\"y\"] = animationCurve;\n          } else if (animationCurveRelationship.match(/Z/)) {\n            curveNodesMap.get(animationCurveID).curves[\"z\"] = animationCurve;\n          } else if (animationCurveRelationship.match(/d|DeformPercent/) && curveNodesMap.has(animationCurveID)) {\n            curveNodesMap.get(animationCurveID).curves[\"morph\"] = animationCurve;\n          }\n        }\n      }\n    }\n    // parse nodes in FBXTree.Objects.AnimationLayer. Each layers holds references\n    // to various AnimationCurveNodes and is referenced by an AnimationStack node\n    // note: theoretically a stack can have multiple layers, however in practice there always seems to be one per stack\n  }, {\n    key: \"parseAnimationLayers\",\n    value: function parseAnimationLayers(curveNodesMap) {\n      var rawLayers = fbxTree.Objects.AnimationLayer;\n      var layersMap = /* @__PURE__ */new Map();\n      var _loop4 = function _loop4() {\n        var layerCurveNodes = [];\n        var connection = connections.get(parseInt(nodeID));\n        if (connection !== void 0) {\n          var children = connection.children;\n          children.forEach(function (child, i) {\n            if (curveNodesMap.has(child.ID)) {\n              var curveNode = curveNodesMap.get(child.ID);\n              if (curveNode.curves.x !== void 0 || curveNode.curves.y !== void 0 || curveNode.curves.z !== void 0) {\n                if (layerCurveNodes[i] === void 0) {\n                  var modelID = connections.get(child.ID).parents.filter(function (parent) {\n                    return parent.relationship !== void 0;\n                  })[0].ID;\n                  if (modelID !== void 0) {\n                    var rawModel = fbxTree.Objects.Model[modelID.toString()];\n                    if (rawModel === void 0) {\n                      console.warn(\"THREE.FBXLoader: Encountered a unused curve.\", child);\n                      return;\n                    }\n                    var node = {\n                      modelName: rawModel.attrName ? PropertyBinding.sanitizeNodeName(rawModel.attrName) : \"\",\n                      ID: rawModel.id,\n                      initialPosition: [0, 0, 0],\n                      initialRotation: [0, 0, 0],\n                      initialScale: [1, 1, 1]\n                    };\n                    sceneGraph.traverse(function (child2) {\n                      if (child2.ID === rawModel.id) {\n                        node.transform = child2.matrix;\n                        if (child2.userData.transformData) node.eulerOrder = child2.userData.transformData.eulerOrder;\n                      }\n                    });\n                    if (!node.transform) node.transform = new Matrix4();\n                    if (\"PreRotation\" in rawModel) node.preRotation = rawModel.PreRotation.value;\n                    if (\"PostRotation\" in rawModel) node.postRotation = rawModel.PostRotation.value;\n                    layerCurveNodes[i] = node;\n                  }\n                }\n                if (layerCurveNodes[i]) layerCurveNodes[i][curveNode.attr] = curveNode;\n              } else if (curveNode.curves.morph !== void 0) {\n                if (layerCurveNodes[i] === void 0) {\n                  var deformerID = connections.get(child.ID).parents.filter(function (parent) {\n                    return parent.relationship !== void 0;\n                  })[0].ID;\n                  var morpherID = connections.get(deformerID).parents[0].ID;\n                  var geoID = connections.get(morpherID).parents[0].ID;\n                  var _modelID = connections.get(geoID).parents[0].ID;\n                  var _rawModel = fbxTree.Objects.Model[_modelID];\n                  var _node = {\n                    modelName: _rawModel.attrName ? PropertyBinding.sanitizeNodeName(_rawModel.attrName) : \"\",\n                    morphName: fbxTree.Objects.Deformer[deformerID].attrName\n                  };\n                  layerCurveNodes[i] = _node;\n                }\n                layerCurveNodes[i][curveNode.attr] = curveNode;\n              }\n            }\n          });\n          layersMap.set(parseInt(nodeID), layerCurveNodes);\n        }\n      };\n      for (var nodeID in rawLayers) {\n        _loop4();\n      }\n      return layersMap;\n    }\n    // parse nodes in FBXTree.Objects.AnimationStack. These are the top level node in the animation\n    // hierarchy. Each Stack node will be used to create a AnimationClip\n  }, {\n    key: \"parseAnimStacks\",\n    value: function parseAnimStacks(layersMap) {\n      var rawStacks = fbxTree.Objects.AnimationStack;\n      var rawClips = {};\n      for (var nodeID in rawStacks) {\n        var children = connections.get(parseInt(nodeID)).children;\n        if (children.length > 1) {\n          console.warn(\"THREE.FBXLoader: Encountered an animation stack with multiple layers, this is currently not supported. Ignoring subsequent layers.\");\n        }\n        var layer = layersMap.get(children[0].ID);\n        rawClips[nodeID] = {\n          name: rawStacks[nodeID].attrName,\n          layer: layer\n        };\n      }\n      return rawClips;\n    }\n  }, {\n    key: \"addClip\",\n    value: function addClip(rawClip) {\n      var tracks = [];\n      var scope = this;\n      rawClip.layer.forEach(function (rawTracks) {\n        tracks = tracks.concat(scope.generateTracks(rawTracks));\n      });\n      return new AnimationClip(rawClip.name, -1, tracks);\n    }\n  }, {\n    key: \"generateTracks\",\n    value: function generateTracks(rawTracks) {\n      var tracks = [];\n      var initialPosition = new Vector3();\n      var initialRotation = new Quaternion();\n      var initialScale = new Vector3();\n      if (rawTracks.transform) rawTracks.transform.decompose(initialPosition, initialRotation, initialScale);\n      initialPosition = initialPosition.toArray();\n      initialRotation = new Euler().setFromQuaternion(initialRotation, rawTracks.eulerOrder).toArray();\n      initialScale = initialScale.toArray();\n      if (rawTracks.T !== void 0 && Object.keys(rawTracks.T.curves).length > 0) {\n        var positionTrack = this.generateVectorTrack(rawTracks.modelName, rawTracks.T.curves, initialPosition, \"position\");\n        if (positionTrack !== void 0) tracks.push(positionTrack);\n      }\n      if (rawTracks.R !== void 0 && Object.keys(rawTracks.R.curves).length > 0) {\n        var rotationTrack = this.generateRotationTrack(rawTracks.modelName, rawTracks.R.curves, initialRotation, rawTracks.preRotation, rawTracks.postRotation, rawTracks.eulerOrder);\n        if (rotationTrack !== void 0) tracks.push(rotationTrack);\n      }\n      if (rawTracks.S !== void 0 && Object.keys(rawTracks.S.curves).length > 0) {\n        var scaleTrack = this.generateVectorTrack(rawTracks.modelName, rawTracks.S.curves, initialScale, \"scale\");\n        if (scaleTrack !== void 0) tracks.push(scaleTrack);\n      }\n      if (rawTracks.DeformPercent !== void 0) {\n        var morphTrack = this.generateMorphTrack(rawTracks);\n        if (morphTrack !== void 0) tracks.push(morphTrack);\n      }\n      return tracks;\n    }\n  }, {\n    key: \"generateVectorTrack\",\n    value: function generateVectorTrack(modelName, curves, initialValue, type) {\n      var times = this.getTimesForAllAxes(curves);\n      var values = this.getKeyframeTrackValues(times, curves, initialValue);\n      return new VectorKeyframeTrack(modelName + \".\" + type, times, values);\n    }\n  }, {\n    key: \"generateRotationTrack\",\n    value: function generateRotationTrack(modelName, curves, initialValue, preRotation, postRotation, eulerOrder) {\n      if (curves.x !== void 0) {\n        this.interpolateRotations(curves.x);\n        curves.x.values = curves.x.values.map(MathUtils.degToRad);\n      }\n      if (curves.y !== void 0) {\n        this.interpolateRotations(curves.y);\n        curves.y.values = curves.y.values.map(MathUtils.degToRad);\n      }\n      if (curves.z !== void 0) {\n        this.interpolateRotations(curves.z);\n        curves.z.values = curves.z.values.map(MathUtils.degToRad);\n      }\n      var times = this.getTimesForAllAxes(curves);\n      var values = this.getKeyframeTrackValues(times, curves, initialValue);\n      if (preRotation !== void 0) {\n        preRotation = preRotation.map(MathUtils.degToRad);\n        preRotation.push(eulerOrder);\n        preRotation = new Euler().fromArray(preRotation);\n        preRotation = new Quaternion().setFromEuler(preRotation);\n      }\n      if (postRotation !== void 0) {\n        postRotation = postRotation.map(MathUtils.degToRad);\n        postRotation.push(eulerOrder);\n        postRotation = new Euler().fromArray(postRotation);\n        postRotation = new Quaternion().setFromEuler(postRotation).invert();\n      }\n      var quaternion = new Quaternion();\n      var euler = new Euler();\n      var quaternionValues = [];\n      for (var i = 0; i < values.length; i += 3) {\n        euler.set(values[i], values[i + 1], values[i + 2], eulerOrder);\n        quaternion.setFromEuler(euler);\n        if (preRotation !== void 0) quaternion.premultiply(preRotation);\n        if (postRotation !== void 0) quaternion.multiply(postRotation);\n        quaternion.toArray(quaternionValues, i / 3 * 4);\n      }\n      return new QuaternionKeyframeTrack(modelName + \".quaternion\", times, quaternionValues);\n    }\n  }, {\n    key: \"generateMorphTrack\",\n    value: function generateMorphTrack(rawTracks) {\n      var curves = rawTracks.DeformPercent.curves.morph;\n      var values = curves.values.map(function (val) {\n        return val / 100;\n      });\n      var morphNum = sceneGraph.getObjectByName(rawTracks.modelName).morphTargetDictionary[rawTracks.morphName];\n      return new NumberKeyframeTrack(rawTracks.modelName + \".morphTargetInfluences[\" + morphNum + \"]\", curves.times, values);\n    }\n    // For all animated objects, times are defined separately for each axis\n    // Here we'll combine the times into one sorted array without duplicates\n  }, {\n    key: \"getTimesForAllAxes\",\n    value: function getTimesForAllAxes(curves) {\n      var times = [];\n      if (curves.x !== void 0) times = times.concat(curves.x.times);\n      if (curves.y !== void 0) times = times.concat(curves.y.times);\n      if (curves.z !== void 0) times = times.concat(curves.z.times);\n      times = times.sort(function (a, b) {\n        return a - b;\n      });\n      if (times.length > 1) {\n        var targetIndex = 1;\n        var lastValue = times[0];\n        for (var i = 1; i < times.length; i++) {\n          var currentValue = times[i];\n          if (currentValue !== lastValue) {\n            times[targetIndex] = currentValue;\n            lastValue = currentValue;\n            targetIndex++;\n          }\n        }\n        times = times.slice(0, targetIndex);\n      }\n      return times;\n    }\n  }, {\n    key: \"getKeyframeTrackValues\",\n    value: function getKeyframeTrackValues(times, curves, initialValue) {\n      var prevValue = initialValue;\n      var values = [];\n      var xIndex = -1;\n      var yIndex = -1;\n      var zIndex = -1;\n      times.forEach(function (time) {\n        if (curves.x) xIndex = curves.x.times.indexOf(time);\n        if (curves.y) yIndex = curves.y.times.indexOf(time);\n        if (curves.z) zIndex = curves.z.times.indexOf(time);\n        if (xIndex !== -1) {\n          var xValue = curves.x.values[xIndex];\n          values.push(xValue);\n          prevValue[0] = xValue;\n        } else {\n          values.push(prevValue[0]);\n        }\n        if (yIndex !== -1) {\n          var yValue = curves.y.values[yIndex];\n          values.push(yValue);\n          prevValue[1] = yValue;\n        } else {\n          values.push(prevValue[1]);\n        }\n        if (zIndex !== -1) {\n          var zValue = curves.z.values[zIndex];\n          values.push(zValue);\n          prevValue[2] = zValue;\n        } else {\n          values.push(prevValue[2]);\n        }\n      });\n      return values;\n    }\n    // Rotations are defined as Euler angles which can have values  of any size\n    // These will be converted to quaternions which don't support values greater than\n    // PI, so we'll interpolate large rotations\n  }, {\n    key: \"interpolateRotations\",\n    value: function interpolateRotations(curve) {\n      for (var i = 1; i < curve.values.length; i++) {\n        var initialValue = curve.values[i - 1];\n        var valuesSpan = curve.values[i] - initialValue;\n        var absoluteSpan = Math.abs(valuesSpan);\n        if (absoluteSpan >= 180) {\n          var numSubIntervals = absoluteSpan / 180;\n          var step = valuesSpan / numSubIntervals;\n          var nextValue = initialValue + step;\n          var initialTime = curve.times[i - 1];\n          var timeSpan = curve.times[i] - initialTime;\n          var interval = timeSpan / numSubIntervals;\n          var nextTime = initialTime + interval;\n          var interpolatedTimes = [];\n          var interpolatedValues = [];\n          while (nextTime < curve.times[i]) {\n            interpolatedTimes.push(nextTime);\n            nextTime += interval;\n            interpolatedValues.push(nextValue);\n            nextValue += step;\n          }\n          curve.times = inject(curve.times, i, interpolatedTimes);\n          curve.values = inject(curve.values, i, interpolatedValues);\n        }\n      }\n    }\n  }]);\n  return AnimationParser;\n}();\nvar TextParser = /*#__PURE__*/function () {\n  function TextParser() {\n    _classCallCheck(this, TextParser);\n  }\n  _createClass(TextParser, [{\n    key: \"getPrevNode\",\n    value: function getPrevNode() {\n      return this.nodeStack[this.currentIndent - 2];\n    }\n  }, {\n    key: \"getCurrentNode\",\n    value: function getCurrentNode() {\n      return this.nodeStack[this.currentIndent - 1];\n    }\n  }, {\n    key: \"getCurrentProp\",\n    value: function getCurrentProp() {\n      return this.currentProp;\n    }\n  }, {\n    key: \"pushStack\",\n    value: function pushStack(node) {\n      this.nodeStack.push(node);\n      this.currentIndent += 1;\n    }\n  }, {\n    key: \"popStack\",\n    value: function popStack() {\n      this.nodeStack.pop();\n      this.currentIndent -= 1;\n    }\n  }, {\n    key: \"setCurrentProp\",\n    value: function setCurrentProp(val, name) {\n      this.currentProp = val;\n      this.currentPropName = name;\n    }\n  }, {\n    key: \"parse\",\n    value: function parse(text) {\n      this.currentIndent = 0;\n      this.allNodes = new FBXTree();\n      this.nodeStack = [];\n      this.currentProp = [];\n      this.currentPropName = \"\";\n      var scope = this;\n      var split = text.split(/[\\r\\n]+/);\n      split.forEach(function (line, i) {\n        var matchComment = line.match(/^[\\s\\t]*;/);\n        var matchEmpty = line.match(/^[\\s\\t]*$/);\n        if (matchComment || matchEmpty) return;\n        var matchBeginning = line.match(\"^\\\\t{\" + scope.currentIndent + \"}(\\\\w+):(.*){\", \"\");\n        var matchProperty = line.match(\"^\\\\t{\" + scope.currentIndent + \"}(\\\\w+):[\\\\s\\\\t\\\\r\\\\n](.*)\");\n        var matchEnd = line.match(\"^\\\\t{\" + (scope.currentIndent - 1) + \"}}\");\n        if (matchBeginning) {\n          scope.parseNodeBegin(line, matchBeginning);\n        } else if (matchProperty) {\n          scope.parseNodeProperty(line, matchProperty, split[++i]);\n        } else if (matchEnd) {\n          scope.popStack();\n        } else if (line.match(/^[^\\s\\t}]/)) {\n          scope.parseNodePropertyContinued(line);\n        }\n      });\n      return this.allNodes;\n    }\n  }, {\n    key: \"parseNodeBegin\",\n    value: function parseNodeBegin(line, property) {\n      var nodeName = property[1].trim().replace(/^\"/, \"\").replace(/\"$/, \"\");\n      var nodeAttrs = property[2].split(\",\").map(function (attr) {\n        return attr.trim().replace(/^\"/, \"\").replace(/\"$/, \"\");\n      });\n      var node = {\n        name: nodeName\n      };\n      var attrs = this.parseNodeAttr(nodeAttrs);\n      var currentNode = this.getCurrentNode();\n      if (this.currentIndent === 0) {\n        this.allNodes.add(nodeName, node);\n      } else {\n        if (nodeName in currentNode) {\n          if (nodeName === \"PoseNode\") {\n            currentNode.PoseNode.push(node);\n          } else if (currentNode[nodeName].id !== void 0) {\n            currentNode[nodeName] = {};\n            currentNode[nodeName][currentNode[nodeName].id] = currentNode[nodeName];\n          }\n          if (attrs.id !== \"\") currentNode[nodeName][attrs.id] = node;\n        } else if (typeof attrs.id === \"number\") {\n          currentNode[nodeName] = {};\n          currentNode[nodeName][attrs.id] = node;\n        } else if (nodeName !== \"Properties70\") {\n          if (nodeName === \"PoseNode\") currentNode[nodeName] = [node];else currentNode[nodeName] = node;\n        }\n      }\n      if (typeof attrs.id === \"number\") node.id = attrs.id;\n      if (attrs.name !== \"\") node.attrName = attrs.name;\n      if (attrs.type !== \"\") node.attrType = attrs.type;\n      this.pushStack(node);\n    }\n  }, {\n    key: \"parseNodeAttr\",\n    value: function parseNodeAttr(attrs) {\n      var id = attrs[0];\n      if (attrs[0] !== \"\") {\n        id = parseInt(attrs[0]);\n        if (isNaN(id)) {\n          id = attrs[0];\n        }\n      }\n      var name = \"\",\n        type = \"\";\n      if (attrs.length > 1) {\n        name = attrs[1].replace(/^(\\w+)::/, \"\");\n        type = attrs[2];\n      }\n      return {\n        id: id,\n        name: name,\n        type: type\n      };\n    }\n  }, {\n    key: \"parseNodeProperty\",\n    value: function parseNodeProperty(line, property, contentLine) {\n      var propName = property[1].replace(/^\"/, \"\").replace(/\"$/, \"\").trim();\n      var propValue = property[2].replace(/^\"/, \"\").replace(/\"$/, \"\").trim();\n      if (propName === \"Content\" && propValue === \",\") {\n        propValue = contentLine.replace(/\"/g, \"\").replace(/,$/, \"\").trim();\n      }\n      var currentNode = this.getCurrentNode();\n      var parentName = currentNode.name;\n      if (parentName === \"Properties70\") {\n        this.parseNodeSpecialProperty(line, propName, propValue);\n        return;\n      }\n      if (propName === \"C\") {\n        var connProps = propValue.split(\",\").slice(1);\n        var from = parseInt(connProps[0]);\n        var to = parseInt(connProps[1]);\n        var rest = propValue.split(\",\").slice(3);\n        rest = rest.map(function (elem) {\n          return elem.trim().replace(/^\"/, \"\");\n        });\n        propName = \"connections\";\n        propValue = [from, to];\n        append(propValue, rest);\n        if (currentNode[propName] === void 0) {\n          currentNode[propName] = [];\n        }\n      }\n      if (propName === \"Node\") currentNode.id = propValue;\n      if (propName in currentNode && Array.isArray(currentNode[propName])) {\n        currentNode[propName].push(propValue);\n      } else {\n        if (propName !== \"a\") currentNode[propName] = propValue;else currentNode.a = propValue;\n      }\n      this.setCurrentProp(currentNode, propName);\n      if (propName === \"a\" && propValue.slice(-1) !== \",\") {\n        currentNode.a = parseNumberArray(propValue);\n      }\n    }\n  }, {\n    key: \"parseNodePropertyContinued\",\n    value: function parseNodePropertyContinued(line) {\n      var currentNode = this.getCurrentNode();\n      currentNode.a += line;\n      if (line.slice(-1) !== \",\") {\n        currentNode.a = parseNumberArray(currentNode.a);\n      }\n    }\n    // parse \"Property70\"\n  }, {\n    key: \"parseNodeSpecialProperty\",\n    value: function parseNodeSpecialProperty(line, propName, propValue) {\n      var props = propValue.split('\",').map(function (prop) {\n        return prop.trim().replace(/^\\\"/, \"\").replace(/\\s/, \"_\");\n      });\n      var innerPropName = props[0];\n      var innerPropType1 = props[1];\n      var innerPropType2 = props[2];\n      var innerPropFlag = props[3];\n      var innerPropValue = props[4];\n      switch (innerPropType1) {\n        case \"int\":\n        case \"enum\":\n        case \"bool\":\n        case \"ULongLong\":\n        case \"double\":\n        case \"Number\":\n        case \"FieldOfView\":\n          innerPropValue = parseFloat(innerPropValue);\n          break;\n        case \"Color\":\n        case \"ColorRGB\":\n        case \"Vector3D\":\n        case \"Lcl_Translation\":\n        case \"Lcl_Rotation\":\n        case \"Lcl_Scaling\":\n          innerPropValue = parseNumberArray(innerPropValue);\n          break;\n      }\n      this.getPrevNode()[innerPropName] = {\n        type: innerPropType1,\n        type2: innerPropType2,\n        flag: innerPropFlag,\n        value: innerPropValue\n      };\n      this.setCurrentProp(this.getPrevNode(), innerPropName);\n    }\n  }]);\n  return TextParser;\n}();\nvar BinaryParser = /*#__PURE__*/function () {\n  function BinaryParser() {\n    _classCallCheck(this, BinaryParser);\n  }\n  _createClass(BinaryParser, [{\n    key: \"parse\",\n    value: function parse(buffer) {\n      var reader = new BinaryReader(buffer);\n      reader.skip(23);\n      var version = reader.getUint32();\n      if (version < 6400) {\n        throw new Error(\"THREE.FBXLoader: FBX version not supported, FileVersion: \" + version);\n      }\n      var allNodes = new FBXTree();\n      while (!this.endOfContent(reader)) {\n        var node = this.parseNode(reader, version);\n        if (node !== null) allNodes.add(node.name, node);\n      }\n      return allNodes;\n    }\n    // Check if reader has reached the end of content.\n  }, {\n    key: \"endOfContent\",\n    value: function endOfContent(reader) {\n      if (reader.size() % 16 === 0) {\n        return (reader.getOffset() + 160 + 16 & ~15) >= reader.size();\n      } else {\n        return reader.getOffset() + 160 + 16 >= reader.size();\n      }\n    }\n    // recursively parse nodes until the end of the file is reached\n  }, {\n    key: \"parseNode\",\n    value: function parseNode(reader, version) {\n      var node = {};\n      var endOffset = version >= 7500 ? reader.getUint64() : reader.getUint32();\n      var numProperties = version >= 7500 ? reader.getUint64() : reader.getUint32();\n      version >= 7500 ? reader.getUint64() : reader.getUint32();\n      var nameLen = reader.getUint8();\n      var name = reader.getString(nameLen);\n      if (endOffset === 0) return null;\n      var propertyList = [];\n      for (var i = 0; i < numProperties; i++) {\n        propertyList.push(this.parseProperty(reader));\n      }\n      var id = propertyList.length > 0 ? propertyList[0] : \"\";\n      var attrName = propertyList.length > 1 ? propertyList[1] : \"\";\n      var attrType = propertyList.length > 2 ? propertyList[2] : \"\";\n      node.singleProperty = numProperties === 1 && reader.getOffset() === endOffset ? true : false;\n      while (endOffset > reader.getOffset()) {\n        var subNode = this.parseNode(reader, version);\n        if (subNode !== null) this.parseSubNode(name, node, subNode);\n      }\n      node.propertyList = propertyList;\n      if (typeof id === \"number\") node.id = id;\n      if (attrName !== \"\") node.attrName = attrName;\n      if (attrType !== \"\") node.attrType = attrType;\n      if (name !== \"\") node.name = name;\n      return node;\n    }\n  }, {\n    key: \"parseSubNode\",\n    value: function parseSubNode(name, node, subNode) {\n      if (subNode.singleProperty === true) {\n        var value = subNode.propertyList[0];\n        if (Array.isArray(value)) {\n          node[subNode.name] = subNode;\n          subNode.a = value;\n        } else {\n          node[subNode.name] = value;\n        }\n      } else if (name === \"Connections\" && subNode.name === \"C\") {\n        var array = [];\n        subNode.propertyList.forEach(function (property, i) {\n          if (i !== 0) array.push(property);\n        });\n        if (node.connections === void 0) {\n          node.connections = [];\n        }\n        node.connections.push(array);\n      } else if (subNode.name === \"Properties70\") {\n        var keys = Object.keys(subNode);\n        keys.forEach(function (key) {\n          node[key] = subNode[key];\n        });\n      } else if (name === \"Properties70\" && subNode.name === \"P\") {\n        var innerPropName = subNode.propertyList[0];\n        var innerPropType1 = subNode.propertyList[1];\n        var innerPropType2 = subNode.propertyList[2];\n        var innerPropFlag = subNode.propertyList[3];\n        var innerPropValue;\n        if (innerPropName.indexOf(\"Lcl \") === 0) innerPropName = innerPropName.replace(\"Lcl \", \"Lcl_\");\n        if (innerPropType1.indexOf(\"Lcl \") === 0) innerPropType1 = innerPropType1.replace(\"Lcl \", \"Lcl_\");\n        if (innerPropType1 === \"Color\" || innerPropType1 === \"ColorRGB\" || innerPropType1 === \"Vector\" || innerPropType1 === \"Vector3D\" || innerPropType1.indexOf(\"Lcl_\") === 0) {\n          innerPropValue = [subNode.propertyList[4], subNode.propertyList[5], subNode.propertyList[6]];\n        } else {\n          innerPropValue = subNode.propertyList[4];\n        }\n        node[innerPropName] = {\n          type: innerPropType1,\n          type2: innerPropType2,\n          flag: innerPropFlag,\n          value: innerPropValue\n        };\n      } else if (node[subNode.name] === void 0) {\n        if (typeof subNode.id === \"number\") {\n          node[subNode.name] = {};\n          node[subNode.name][subNode.id] = subNode;\n        } else {\n          node[subNode.name] = subNode;\n        }\n      } else {\n        if (subNode.name === \"PoseNode\") {\n          if (!Array.isArray(node[subNode.name])) {\n            node[subNode.name] = [node[subNode.name]];\n          }\n          node[subNode.name].push(subNode);\n        } else if (node[subNode.name][subNode.id] === void 0) {\n          node[subNode.name][subNode.id] = subNode;\n        }\n      }\n    }\n  }, {\n    key: \"parseProperty\",\n    value: function parseProperty(reader) {\n      var type = reader.getString(1);\n      var length;\n      switch (type) {\n        case \"C\":\n          return reader.getBoolean();\n        case \"D\":\n          return reader.getFloat64();\n        case \"F\":\n          return reader.getFloat32();\n        case \"I\":\n          return reader.getInt32();\n        case \"L\":\n          return reader.getInt64();\n        case \"R\":\n          length = reader.getUint32();\n          return reader.getArrayBuffer(length);\n        case \"S\":\n          length = reader.getUint32();\n          return reader.getString(length);\n        case \"Y\":\n          return reader.getInt16();\n        case \"b\":\n        case \"c\":\n        case \"d\":\n        case \"f\":\n        case \"i\":\n        case \"l\":\n          var arrayLength = reader.getUint32();\n          var encoding = reader.getUint32();\n          var compressedLength = reader.getUint32();\n          if (encoding === 0) {\n            switch (type) {\n              case \"b\":\n              case \"c\":\n                return reader.getBooleanArray(arrayLength);\n              case \"d\":\n                return reader.getFloat64Array(arrayLength);\n              case \"f\":\n                return reader.getFloat32Array(arrayLength);\n              case \"i\":\n                return reader.getInt32Array(arrayLength);\n              case \"l\":\n                return reader.getInt64Array(arrayLength);\n            }\n          }\n          var data = unzlibSync(new Uint8Array(reader.getArrayBuffer(compressedLength)));\n          var reader2 = new BinaryReader(data.buffer);\n          switch (type) {\n            case \"b\":\n            case \"c\":\n              return reader2.getBooleanArray(arrayLength);\n            case \"d\":\n              return reader2.getFloat64Array(arrayLength);\n            case \"f\":\n              return reader2.getFloat32Array(arrayLength);\n            case \"i\":\n              return reader2.getInt32Array(arrayLength);\n            case \"l\":\n              return reader2.getInt64Array(arrayLength);\n          }\n        default:\n          throw new Error(\"THREE.FBXLoader: Unknown property type \" + type);\n      }\n    }\n  }]);\n  return BinaryParser;\n}();\nvar BinaryReader = /*#__PURE__*/function () {\n  function BinaryReader(buffer, littleEndian) {\n    _classCallCheck(this, BinaryReader);\n    this.dv = new DataView(buffer);\n    this.offset = 0;\n    this.littleEndian = littleEndian !== void 0 ? littleEndian : true;\n  }\n  _createClass(BinaryReader, [{\n    key: \"getOffset\",\n    value: function getOffset() {\n      return this.offset;\n    }\n  }, {\n    key: \"size\",\n    value: function size() {\n      return this.dv.buffer.byteLength;\n    }\n  }, {\n    key: \"skip\",\n    value: function skip(length) {\n      this.offset += length;\n    }\n    // seems like true/false representation depends on exporter.\n    // true: 1 or 'Y'(=0x59), false: 0 or 'T'(=0x54)\n    // then sees LSB.\n  }, {\n    key: \"getBoolean\",\n    value: function getBoolean() {\n      return (this.getUint8() & 1) === 1;\n    }\n  }, {\n    key: \"getBooleanArray\",\n    value: function getBooleanArray(size) {\n      var a = [];\n      for (var i = 0; i < size; i++) {\n        a.push(this.getBoolean());\n      }\n      return a;\n    }\n  }, {\n    key: \"getUint8\",\n    value: function getUint8() {\n      var value = this.dv.getUint8(this.offset);\n      this.offset += 1;\n      return value;\n    }\n  }, {\n    key: \"getInt16\",\n    value: function getInt16() {\n      var value = this.dv.getInt16(this.offset, this.littleEndian);\n      this.offset += 2;\n      return value;\n    }\n  }, {\n    key: \"getInt32\",\n    value: function getInt32() {\n      var value = this.dv.getInt32(this.offset, this.littleEndian);\n      this.offset += 4;\n      return value;\n    }\n  }, {\n    key: \"getInt32Array\",\n    value: function getInt32Array(size) {\n      var a = [];\n      for (var i = 0; i < size; i++) {\n        a.push(this.getInt32());\n      }\n      return a;\n    }\n  }, {\n    key: \"getUint32\",\n    value: function getUint32() {\n      var value = this.dv.getUint32(this.offset, this.littleEndian);\n      this.offset += 4;\n      return value;\n    }\n    // JavaScript doesn't support 64-bit integer so calculate this here\n    // 1 << 32 will return 1 so using multiply operation instead here.\n    // There's a possibility that this method returns wrong value if the value\n    // is out of the range between Number.MAX_SAFE_INTEGER and Number.MIN_SAFE_INTEGER.\n    // TODO: safely handle 64-bit integer\n  }, {\n    key: \"getInt64\",\n    value: function getInt64() {\n      var low, high;\n      if (this.littleEndian) {\n        low = this.getUint32();\n        high = this.getUint32();\n      } else {\n        high = this.getUint32();\n        low = this.getUint32();\n      }\n      if (high & 2147483648) {\n        high = ~high & 4294967295;\n        low = ~low & 4294967295;\n        if (low === 4294967295) high = high + 1 & 4294967295;\n        low = low + 1 & 4294967295;\n        return -(high * 4294967296 + low);\n      }\n      return high * 4294967296 + low;\n    }\n  }, {\n    key: \"getInt64Array\",\n    value: function getInt64Array(size) {\n      var a = [];\n      for (var i = 0; i < size; i++) {\n        a.push(this.getInt64());\n      }\n      return a;\n    }\n    // Note: see getInt64() comment\n  }, {\n    key: \"getUint64\",\n    value: function getUint64() {\n      var low, high;\n      if (this.littleEndian) {\n        low = this.getUint32();\n        high = this.getUint32();\n      } else {\n        high = this.getUint32();\n        low = this.getUint32();\n      }\n      return high * 4294967296 + low;\n    }\n  }, {\n    key: \"getFloat32\",\n    value: function getFloat32() {\n      var value = this.dv.getFloat32(this.offset, this.littleEndian);\n      this.offset += 4;\n      return value;\n    }\n  }, {\n    key: \"getFloat32Array\",\n    value: function getFloat32Array(size) {\n      var a = [];\n      for (var i = 0; i < size; i++) {\n        a.push(this.getFloat32());\n      }\n      return a;\n    }\n  }, {\n    key: \"getFloat64\",\n    value: function getFloat64() {\n      var value = this.dv.getFloat64(this.offset, this.littleEndian);\n      this.offset += 8;\n      return value;\n    }\n  }, {\n    key: \"getFloat64Array\",\n    value: function getFloat64Array(size) {\n      var a = [];\n      for (var i = 0; i < size; i++) {\n        a.push(this.getFloat64());\n      }\n      return a;\n    }\n  }, {\n    key: \"getArrayBuffer\",\n    value: function getArrayBuffer(size) {\n      var value = this.dv.buffer.slice(this.offset, this.offset + size);\n      this.offset += size;\n      return value;\n    }\n  }, {\n    key: \"getString\",\n    value: function getString(size) {\n      var a = [];\n      for (var i = 0; i < size; i++) {\n        a[i] = this.getUint8();\n      }\n      var nullByte = a.indexOf(0);\n      if (nullByte >= 0) a = a.slice(0, nullByte);\n      return decodeText(new Uint8Array(a));\n    }\n  }]);\n  return BinaryReader;\n}();\nvar FBXTree = /*#__PURE__*/function () {\n  function FBXTree() {\n    _classCallCheck(this, FBXTree);\n  }\n  _createClass(FBXTree, [{\n    key: \"add\",\n    value: function add(key, val) {\n      this[key] = val;\n    }\n  }]);\n  return FBXTree;\n}();\nfunction isFbxFormatBinary(buffer) {\n  var CORRECT = \"Kaydara FBX Binary  \\0\";\n  return buffer.byteLength >= CORRECT.length && CORRECT === convertArrayBufferToString(buffer, 0, CORRECT.length);\n}\nfunction isFbxFormatASCII(text) {\n  var CORRECT = [\"K\", \"a\", \"y\", \"d\", \"a\", \"r\", \"a\", \"\\\\\", \"F\", \"B\", \"X\", \"\\\\\", \"B\", \"i\", \"n\", \"a\", \"r\", \"y\", \"\\\\\", \"\\\\\"];\n  var cursor = 0;\n  function read(offset) {\n    var result = text[offset - 1];\n    text = text.slice(cursor + offset);\n    cursor++;\n    return result;\n  }\n  for (var i = 0; i < CORRECT.length; ++i) {\n    var num = read(1);\n    if (num === CORRECT[i]) {\n      return false;\n    }\n  }\n  return true;\n}\nfunction getFbxVersion(text) {\n  var versionRegExp = /FBXVersion: (\\d+)/;\n  var match = text.match(versionRegExp);\n  if (match) {\n    var version = parseInt(match[1]);\n    return version;\n  }\n  throw new Error(\"THREE.FBXLoader: Cannot find the version number for the file given.\");\n}\nfunction convertFBXTimeToSeconds(time) {\n  return time / 46186158e3;\n}\nvar dataArray = [];\nfunction getData(polygonVertexIndex, polygonIndex, vertexIndex, infoObject) {\n  var index;\n  switch (infoObject.mappingType) {\n    case \"ByPolygonVertex\":\n      index = polygonVertexIndex;\n      break;\n    case \"ByPolygon\":\n      index = polygonIndex;\n      break;\n    case \"ByVertice\":\n      index = vertexIndex;\n      break;\n    case \"AllSame\":\n      index = infoObject.indices[0];\n      break;\n    default:\n      console.warn(\"THREE.FBXLoader: unknown attribute mapping type \" + infoObject.mappingType);\n  }\n  if (infoObject.referenceType === \"IndexToDirect\") index = infoObject.indices[index];\n  var from = index * infoObject.dataSize;\n  var to = from + infoObject.dataSize;\n  return slice(dataArray, infoObject.buffer, from, to);\n}\nvar tempEuler = new Euler();\nvar tempVec = new Vector3();\nfunction generateTransform(transformData) {\n  var lTranslationM = new Matrix4();\n  var lPreRotationM = new Matrix4();\n  var lRotationM = new Matrix4();\n  var lPostRotationM = new Matrix4();\n  var lScalingM = new Matrix4();\n  var lScalingPivotM = new Matrix4();\n  var lScalingOffsetM = new Matrix4();\n  var lRotationOffsetM = new Matrix4();\n  var lRotationPivotM = new Matrix4();\n  var lParentGX = new Matrix4();\n  var lParentLX = new Matrix4();\n  var lGlobalT = new Matrix4();\n  var inheritType = transformData.inheritType ? transformData.inheritType : 0;\n  if (transformData.translation) lTranslationM.setPosition(tempVec.fromArray(transformData.translation));\n  if (transformData.preRotation) {\n    var array = transformData.preRotation.map(MathUtils.degToRad);\n    array.push(transformData.eulerOrder);\n    lPreRotationM.makeRotationFromEuler(tempEuler.fromArray(array));\n  }\n  if (transformData.rotation) {\n    var _array = transformData.rotation.map(MathUtils.degToRad);\n    _array.push(transformData.eulerOrder);\n    lRotationM.makeRotationFromEuler(tempEuler.fromArray(_array));\n  }\n  if (transformData.postRotation) {\n    var _array2 = transformData.postRotation.map(MathUtils.degToRad);\n    _array2.push(transformData.eulerOrder);\n    lPostRotationM.makeRotationFromEuler(tempEuler.fromArray(_array2));\n    lPostRotationM.invert();\n  }\n  if (transformData.scale) lScalingM.scale(tempVec.fromArray(transformData.scale));\n  if (transformData.scalingOffset) lScalingOffsetM.setPosition(tempVec.fromArray(transformData.scalingOffset));\n  if (transformData.scalingPivot) lScalingPivotM.setPosition(tempVec.fromArray(transformData.scalingPivot));\n  if (transformData.rotationOffset) lRotationOffsetM.setPosition(tempVec.fromArray(transformData.rotationOffset));\n  if (transformData.rotationPivot) lRotationPivotM.setPosition(tempVec.fromArray(transformData.rotationPivot));\n  if (transformData.parentMatrixWorld) {\n    lParentLX.copy(transformData.parentMatrix);\n    lParentGX.copy(transformData.parentMatrixWorld);\n  }\n  var lLRM = lPreRotationM.clone().multiply(lRotationM).multiply(lPostRotationM);\n  var lParentGRM = new Matrix4();\n  lParentGRM.extractRotation(lParentGX);\n  var lParentTM = new Matrix4();\n  lParentTM.copyPosition(lParentGX);\n  var lParentGRSM = lParentTM.clone().invert().multiply(lParentGX);\n  var lParentGSM = lParentGRM.clone().invert().multiply(lParentGRSM);\n  var lLSM = lScalingM;\n  var lGlobalRS = new Matrix4();\n  if (inheritType === 0) {\n    lGlobalRS.copy(lParentGRM).multiply(lLRM).multiply(lParentGSM).multiply(lLSM);\n  } else if (inheritType === 1) {\n    lGlobalRS.copy(lParentGRM).multiply(lParentGSM).multiply(lLRM).multiply(lLSM);\n  } else {\n    var lParentLSM = new Matrix4().scale(new Vector3().setFromMatrixScale(lParentLX));\n    var lParentLSM_inv = lParentLSM.clone().invert();\n    var lParentGSM_noLocal = lParentGSM.clone().multiply(lParentLSM_inv);\n    lGlobalRS.copy(lParentGRM).multiply(lLRM).multiply(lParentGSM_noLocal).multiply(lLSM);\n  }\n  var lRotationPivotM_inv = lRotationPivotM.clone().invert();\n  var lScalingPivotM_inv = lScalingPivotM.clone().invert();\n  var lTransform = lTranslationM.clone().multiply(lRotationOffsetM).multiply(lRotationPivotM).multiply(lPreRotationM).multiply(lRotationM).multiply(lPostRotationM).multiply(lRotationPivotM_inv).multiply(lScalingOffsetM).multiply(lScalingPivotM).multiply(lScalingM).multiply(lScalingPivotM_inv);\n  var lLocalTWithAllPivotAndOffsetInfo = new Matrix4().copyPosition(lTransform);\n  var lGlobalTranslation = lParentGX.clone().multiply(lLocalTWithAllPivotAndOffsetInfo);\n  lGlobalT.copyPosition(lGlobalTranslation);\n  lTransform = lGlobalT.clone().multiply(lGlobalRS);\n  lTransform.premultiply(lParentGX.invert());\n  return lTransform;\n}\nfunction getEulerOrder(order) {\n  order = order || 0;\n  var enums = [\"ZYX\",\n  // -> XYZ extrinsic\n  \"YZX\",\n  // -> XZY extrinsic\n  \"XZY\",\n  // -> YZX extrinsic\n  \"ZXY\",\n  // -> YXZ extrinsic\n  \"YXZ\",\n  // -> ZXY extrinsic\n  \"XYZ\"\n  // -> ZYX extrinsic\n  //'SphericXYZ', // not possible to support\n  ];\n\n  if (order === 6) {\n    console.warn(\"THREE.FBXLoader: unsupported Euler Order: Spherical XYZ. Animations and rotations may be incorrect.\");\n    return enums[0];\n  }\n  return enums[order];\n}\nfunction parseNumberArray(value) {\n  var array = value.split(\",\").map(function (val) {\n    return parseFloat(val);\n  });\n  return array;\n}\nfunction convertArrayBufferToString(buffer, from, to) {\n  if (from === void 0) from = 0;\n  if (to === void 0) to = buffer.byteLength;\n  return decodeText(new Uint8Array(buffer, from, to));\n}\nfunction append(a, b) {\n  for (var i = 0, j = a.length, l = b.length; i < l; i++, j++) {\n    a[j] = b[i];\n  }\n}\nfunction slice(a, b, from, to) {\n  for (var i = from, j = 0; i < to; i++, j++) {\n    a[j] = b[i];\n  }\n  return a;\n}\nfunction inject(a1, index, a2) {\n  return a1.slice(0, index).concat(a2).concat(a1.slice(index));\n}\nexport { FBXLoader };","map":{"version":3,"names":["fbxTree","connections","sceneGraph","FBXLoader","_Loader","_inherits","_super","_createSuper","manager","_classCallCheck","call","_createClass","key","value","load","url","onLoad","onProgress","onError","scope","path","LoaderUtils","extractUrlBase","loader","FileLoader","setPath","setResponseType","setRequestHeader","requestHeader","setWithCredentials","withCredentials","buffer","parse","e","console","error","itemError","FBXBuffer","isFbxFormatBinary","BinaryParser","FBXText","convertArrayBufferToString","isFbxFormatASCII","Error","getFbxVersion","TextParser","textureLoader","TextureLoader","resourcePath","setCrossOrigin","crossOrigin","FBXTreeParser","Loader","parseConnections","images","parseImages","textures","parseTextures","materials","parseMaterials","deformers","parseDeformers","geometryMap","GeometryParser","parseScene","connectionMap","Map","rawConnections","Connections","forEach","rawConnection","fromID","toID","relationship","has","set","parents","children","parentRelationship","ID","get","push","childRelationship","blobs","Objects","videoNodes","Video","nodeID","videoNode","id","parseInt","RelativeFilename","Filename","arrayBufferContent","Content","ArrayBuffer","byteLength","base64Content","image","parseImage","filename","split","pop","content","fileName","extension","slice","lastIndexOf","toLowerCase","type","getHandler","warn","array","Uint8Array","window","URL","createObjectURL","Blob","textureMap","textureNodes","Texture","texture","parseTexture","textureNode","loadTexture","name","attrName","wrapModeU","WrapModeU","wrapModeV","WrapModeV","valueU","valueV","wrapS","RepeatWrapping","ClampToEdgeWrapping","wrapT","values","Scaling","repeat","x","y","currentPath","length","indexOf","FileName","materialMap","materialNodes","Material","material","parseMaterial","materialNode","ShadingModel","parameters","parseParameters","MeshPhongMaterial","MeshLambertMaterial","setValues","BumpFactor","bumpScale","Diffuse","color","Color","fromArray","DiffuseColor","DisplacementFactor","displacementScale","Emissive","emissive","EmissiveColor","EmissiveFactor","emissiveIntensity","parseFloat","Opacity","opacity","transparent","ReflectionFactor","reflectivity","Shininess","shininess","Specular","specular","SpecularColor","child","bumpMap","getTexture","aoMap","map","colorSpace","encoding","displacementMap","emissiveMap","normalMap","envMap","mapping","EquirectangularReflectionMapping","specularMap","alphaMap","LayeredTexture","skeletons","morphTargets","DeformerNodes","Deformer","deformerNode","relationships","attrType","skeleton","parseSkeleton","geometryID","morphTarget","rawTargets","parseMorphTargets","deformerNodes","rawBones","boneNode","rawBone","indices","weights","transformLink","Matrix4","TransformLink","a","Indexes","Weights","bones","rawMorphTargets","i","morphTargetNode","rawMorphTarget","initialWeight","DeformPercent","fullWeights","FullWeights","geoID","filter","child2","Group","modelMap","parseModels","modelNodes","Model","model","modelNode","setLookAtProperties","parentConnections","connection","parent","add","bindSkeleton","createAmbientLight","traverse","node","userData","transformData","parentMatrix","matrix","parentMatrixWorld","matrixWorld","transform","generateTransform","applyMatrix4","updateWorldMatrix","animations","AnimationParser","isGroup","buildSkeleton","createCamera","createLight","createMesh","createCurve","Bone","PropertyBinding","sanitizeNodeName","getTransformData","bone","_loop","subBone","copy","cameraAttribute","attr","NodeAttribute","Object3D","CameraProjectionType","nearClippingPlane","NearPlane","farClippingPlane","FarPlane","width","innerWidth","height","innerHeight","AspectWidth","AspectHeight","aspect","fov","FieldOfView","focalLength","FocalLength","PerspectiveCamera","setFocalLength","OrthographicCamera","lightAttribute","LightType","intensity","Intensity","CastLightOnObject","distance","FarAttenuationEnd","EnableFarAttenuation","decay","PointLight","DirectionalLight","angle","Math","PI","InnerAngle","MathUtils","degToRad","penumbra","OuterAngle","max","SpotLight","CastShadows","castShadow","geometry","attributes","material2","vertexColors","FBX_Deformer","SkinnedMesh","normalizeSkinWeights","Mesh","reduce","geo","LineBasicMaterial","linewidth","Line","inheritType","InheritType","eulerOrder","getEulerOrder","RotationOrder","translation","Lcl_Translation","preRotation","PreRotation","rotation","Lcl_Rotation","postRotation","PostRotation","scale","Lcl_Scaling","scalingOffset","ScalingOffset","scalingPivot","ScalingPivot","rotationOffset","RotationOffset","rotationPivot","RotationPivot","lookAtTarget","pos","target","position","lookAt","Vector3","bindMatrices","parsePoseNodes","_loop2","geoRelationships","geoConnParent","bind","Skeleton","BindPoseNode","Pose","NbPoseNodes","poseNodes","PoseNode","Array","isArray","poseNode","Node","Matrix","GlobalSettings","ambientColor","AmbientColor","r","g","b","AmbientLight","geoNodes","Geometry","parseGeometry","geoNode","parseMeshGeometry","parseNurbsGeometry","skeleton2","GeometricTranslation","GeometricRotation","GeometricScaling","genGeometry","preTransform","BufferGeometry","geoInfo","parseGeoNode","buffers","genBuffers","positionAttribute","Float32BufferAttribute","vertex","setAttribute","colors","Uint16BufferAttribute","weightsIndices","vertexWeights","normal","normalMatrix","Matrix3","getNormalMatrix","normalAttribute","applyNormalMatrix","uvs","uvBuffer","UV1","concat","mappingType","prevMaterialIndex","materialIndex","startIndex","currentIndex","addGroup","groups","lastGroup","lastIndex","start","count","addMorphTargets","vertexPositions","Vertices","vertexIndices","PolygonVertexIndex","LayerElementColor","parseVertexColors","LayerElementMaterial","parseMaterialIndices","LayerElementNormal","parseNormals","LayerElementUV","uv","UV","parseUVs","weightTable","index","j","weight","polygonIndex","faceLength","displayedWeightsWarning","facePositionIndexes","faceNormals","faceColors","faceUVs","faceWeights","faceWeightIndices","vertexIndex","polygonVertexIndex","endOfFace","weightIndices","data","getData","wt","wIndex","Weight","weightIndex","currentWeight","comparedWeight","comparedWeightIndex","comparedWeightArray","tmp","genFace","_loop3","parentGeo","parentGeoNode","morphTargetsRelative","morphAttributes","rawTarget","morphGeoNode","genMorphGeometry","morphPositionsSparse","morphPositions","Float32Array","morphIndex","morphGeoInfo","morphBuffers","NormalNode","MappingInformationType","referenceType","ReferenceInformationType","Normals","indexBuffer","NormalIndex","NormalsIndex","dataSize","UVNode","UVIndex","ColorNode","Colors","ColorIndex","MaterialNode","materialIndexBuffer","Materials","materialIndices","NURBSCurve","order","Order","isNaN","degree","knots","KnotVector","controlPoints","pointsValues","Points","l","Vector4","startKnot","endKnot","Form","curve","points","getPoints","setFromPoints","animationClips","rawClips","parseClips","rawClip","clip","addClip","AnimationCurve","curveNodesMap","parseAnimationCurveNodes","parseAnimationCurves","layersMap","parseAnimationLayers","parseAnimStacks","rawCurveNodes","AnimationCurveNode","rawCurveNode","match","curveNode","curves","rawCurves","animationCurve","times","KeyTime","convertFBXTimeToSeconds","KeyValueFloat","animationCurveID","animationCurveRelationship","rawLayers","AnimationLayer","_loop4","layerCurveNodes","z","modelID","rawModel","toString","modelName","initialPosition","initialRotation","initialScale","morph","deformerID","morpherID","morphName","rawStacks","AnimationStack","layer","tracks","rawTracks","generateTracks","AnimationClip","Quaternion","decompose","toArray","Euler","setFromQuaternion","T","Object","keys","positionTrack","generateVectorTrack","R","rotationTrack","generateRotationTrack","S","scaleTrack","morphTrack","generateMorphTrack","initialValue","getTimesForAllAxes","getKeyframeTrackValues","VectorKeyframeTrack","interpolateRotations","setFromEuler","invert","quaternion","euler","quaternionValues","premultiply","multiply","QuaternionKeyframeTrack","val","morphNum","getObjectByName","morphTargetDictionary","NumberKeyframeTrack","sort","targetIndex","lastValue","currentValue","prevValue","xIndex","yIndex","zIndex","time","xValue","yValue","zValue","valuesSpan","absoluteSpan","abs","numSubIntervals","step","nextValue","initialTime","timeSpan","interval","nextTime","interpolatedTimes","interpolatedValues","inject","getPrevNode","nodeStack","currentIndent","getCurrentNode","getCurrentProp","currentProp","pushStack","popStack","setCurrentProp","currentPropName","text","allNodes","FBXTree","line","matchComment","matchEmpty","matchBeginning","matchProperty","matchEnd","parseNodeBegin","parseNodeProperty","parseNodePropertyContinued","property","nodeName","trim","replace","nodeAttrs","attrs","parseNodeAttr","currentNode","contentLine","propName","propValue","parentName","parseNodeSpecialProperty","connProps","from","to","rest","elem","append","parseNumberArray","props","prop","innerPropName","innerPropType1","innerPropType2","innerPropFlag","innerPropValue","type2","flag","reader","BinaryReader","skip","version","getUint32","endOfContent","parseNode","size","getOffset","endOffset","getUint64","numProperties","nameLen","getUint8","getString","propertyList","parseProperty","singleProperty","subNode","parseSubNode","getBoolean","getFloat64","getFloat32","getInt32","getInt64","getArrayBuffer","getInt16","arrayLength","compressedLength","getBooleanArray","getFloat64Array","getFloat32Array","getInt32Array","getInt64Array","unzlibSync","reader2","littleEndian","dv","DataView","offset","low","high","nullByte","decodeText","CORRECT","cursor","read","result","num","versionRegExp","dataArray","infoObject","tempEuler","tempVec","lTranslationM","lPreRotationM","lRotationM","lPostRotationM","lScalingM","lScalingPivotM","lScalingOffsetM","lRotationOffsetM","lRotationPivotM","lParentGX","lParentLX","lGlobalT","setPosition","makeRotationFromEuler","lLRM","clone","lParentGRM","extractRotation","lParentTM","copyPosition","lParentGRSM","lParentGSM","lLSM","lGlobalRS","lParentLSM","setFromMatrixScale","lParentLSM_inv","lParentGSM_noLocal","lRotationPivotM_inv","lScalingPivotM_inv","lTransform","lLocalTWithAllPivotAndOffsetInfo","lGlobalTranslation","enums","a1","a2"],"sources":["C:\\Users\\Nayyu\\Desktop\\skibidai-public-build\\node_modules\\src\\loaders\\FBXLoader.js"],"sourcesContent":["import {\n  AmbientLight,\n  AnimationClip,\n  Bone,\n  BufferGeometry,\n  ClampToEdgeWrapping,\n  Color,\n  DirectionalLight,\n  EquirectangularReflectionMapping,\n  Euler,\n  FileLoader,\n  Float32BufferAttribute,\n  Group,\n  Line,\n  LineBasicMaterial,\n  Loader,\n  LoaderUtils,\n  MathUtils,\n  Matrix3,\n  Matrix4,\n  Mesh,\n  MeshLambertMaterial,\n  MeshPhongMaterial,\n  NumberKeyframeTrack,\n  Object3D,\n  OrthographicCamera,\n  PerspectiveCamera,\n  PointLight,\n  PropertyBinding,\n  Quaternion,\n  QuaternionKeyframeTrack,\n  RepeatWrapping,\n  Skeleton,\n  SkinnedMesh,\n  SpotLight,\n  Texture,\n  TextureLoader,\n  Uint16BufferAttribute,\n  Vector3,\n  Vector4,\n  VectorKeyframeTrack,\n} from 'three'\nimport { unzlibSync } from 'fflate'\nimport { NURBSCurve } from '../curves/NURBSCurve'\nimport { decodeText } from '../_polyfill/LoaderUtils'\nimport { UV1 } from '../_polyfill/uv1'\n\n/**\n * Loader loads FBX file and generates Group representing FBX scene.\n * Requires FBX file to be >= 7.0 and in ASCII or >= 6400 in Binary format\n * Versions lower than this may load but will probably have errors\n *\n * Needs Support:\n *  Morph normals / blend shape normals\n *\n * FBX format references:\n * \thttps://help.autodesk.com/view/FBX/2017/ENU/?guid=__cpp_ref_index_html (C++ SDK reference)\n *\n * Binary format specification:\n *\thttps://code.blender.org/2013/08/fbx-binary-file-format-specification/\n */\n\nlet fbxTree\nlet connections\nlet sceneGraph\n\nclass FBXLoader extends Loader {\n  constructor(manager) {\n    super(manager)\n  }\n\n  load(url, onLoad, onProgress, onError) {\n    const scope = this\n\n    const path = scope.path === '' ? LoaderUtils.extractUrlBase(url) : scope.path\n\n    const loader = new FileLoader(this.manager)\n    loader.setPath(scope.path)\n    loader.setResponseType('arraybuffer')\n    loader.setRequestHeader(scope.requestHeader)\n    loader.setWithCredentials(scope.withCredentials)\n\n    loader.load(\n      url,\n      function (buffer) {\n        try {\n          onLoad(scope.parse(buffer, path))\n        } catch (e) {\n          if (onError) {\n            onError(e)\n          } else {\n            console.error(e)\n          }\n\n          scope.manager.itemError(url)\n        }\n      },\n      onProgress,\n      onError,\n    )\n  }\n\n  parse(FBXBuffer, path) {\n    if (isFbxFormatBinary(FBXBuffer)) {\n      fbxTree = new BinaryParser().parse(FBXBuffer)\n    } else {\n      const FBXText = convertArrayBufferToString(FBXBuffer)\n\n      if (!isFbxFormatASCII(FBXText)) {\n        throw new Error('THREE.FBXLoader: Unknown format.')\n      }\n\n      if (getFbxVersion(FBXText) < 7000) {\n        throw new Error('THREE.FBXLoader: FBX version not supported, FileVersion: ' + getFbxVersion(FBXText))\n      }\n\n      fbxTree = new TextParser().parse(FBXText)\n    }\n\n    // console.log( fbxTree );\n\n    const textureLoader = new TextureLoader(this.manager)\n      .setPath(this.resourcePath || path)\n      .setCrossOrigin(this.crossOrigin)\n\n    return new FBXTreeParser(textureLoader, this.manager).parse(fbxTree)\n  }\n}\n\n// Parse the FBXTree object returned by the BinaryParser or TextParser and return a Group\nclass FBXTreeParser {\n  constructor(textureLoader, manager) {\n    this.textureLoader = textureLoader\n    this.manager = manager\n  }\n\n  parse() {\n    connections = this.parseConnections()\n\n    const images = this.parseImages()\n    const textures = this.parseTextures(images)\n    const materials = this.parseMaterials(textures)\n    const deformers = this.parseDeformers()\n    const geometryMap = new GeometryParser().parse(deformers)\n\n    this.parseScene(deformers, geometryMap, materials)\n\n    return sceneGraph\n  }\n\n  // Parses FBXTree.Connections which holds parent-child connections between objects (e.g. material -> texture, model->geometry )\n  // and details the connection type\n  parseConnections() {\n    const connectionMap = new Map()\n\n    if ('Connections' in fbxTree) {\n      const rawConnections = fbxTree.Connections.connections\n\n      rawConnections.forEach(function (rawConnection) {\n        const fromID = rawConnection[0]\n        const toID = rawConnection[1]\n        const relationship = rawConnection[2]\n\n        if (!connectionMap.has(fromID)) {\n          connectionMap.set(fromID, {\n            parents: [],\n            children: [],\n          })\n        }\n\n        const parentRelationship = { ID: toID, relationship: relationship }\n        connectionMap.get(fromID).parents.push(parentRelationship)\n\n        if (!connectionMap.has(toID)) {\n          connectionMap.set(toID, {\n            parents: [],\n            children: [],\n          })\n        }\n\n        const childRelationship = { ID: fromID, relationship: relationship }\n        connectionMap.get(toID).children.push(childRelationship)\n      })\n    }\n\n    return connectionMap\n  }\n\n  // Parse FBXTree.Objects.Video for embedded image data\n  // These images are connected to textures in FBXTree.Objects.Textures\n  // via FBXTree.Connections.\n  parseImages() {\n    const images = {}\n    const blobs = {}\n\n    if ('Video' in fbxTree.Objects) {\n      const videoNodes = fbxTree.Objects.Video\n\n      for (const nodeID in videoNodes) {\n        const videoNode = videoNodes[nodeID]\n\n        const id = parseInt(nodeID)\n\n        images[id] = videoNode.RelativeFilename || videoNode.Filename\n\n        // raw image data is in videoNode.Content\n        if ('Content' in videoNode) {\n          const arrayBufferContent = videoNode.Content instanceof ArrayBuffer && videoNode.Content.byteLength > 0\n          const base64Content = typeof videoNode.Content === 'string' && videoNode.Content !== ''\n\n          if (arrayBufferContent || base64Content) {\n            const image = this.parseImage(videoNodes[nodeID])\n\n            blobs[videoNode.RelativeFilename || videoNode.Filename] = image\n          }\n        }\n      }\n    }\n\n    for (const id in images) {\n      const filename = images[id]\n\n      if (blobs[filename] !== undefined) images[id] = blobs[filename]\n      else images[id] = images[id].split('\\\\').pop()\n    }\n\n    return images\n  }\n\n  // Parse embedded image data in FBXTree.Video.Content\n  parseImage(videoNode) {\n    const content = videoNode.Content\n    const fileName = videoNode.RelativeFilename || videoNode.Filename\n    const extension = fileName.slice(fileName.lastIndexOf('.') + 1).toLowerCase()\n\n    let type\n\n    switch (extension) {\n      case 'bmp':\n        type = 'image/bmp'\n        break\n\n      case 'jpg':\n      case 'jpeg':\n        type = 'image/jpeg'\n        break\n\n      case 'png':\n        type = 'image/png'\n        break\n\n      case 'tif':\n        type = 'image/tiff'\n        break\n\n      case 'tga':\n        if (this.manager.getHandler('.tga') === null) {\n          console.warn('FBXLoader: TGA loader not found, skipping ', fileName)\n        }\n\n        type = 'image/tga'\n        break\n\n      default:\n        console.warn('FBXLoader: Image type \"' + extension + '\" is not supported.')\n        return\n    }\n\n    if (typeof content === 'string') {\n      // ASCII format\n\n      return 'data:' + type + ';base64,' + content\n    } else {\n      // Binary Format\n\n      const array = new Uint8Array(content)\n      return window.URL.createObjectURL(new Blob([array], { type: type }))\n    }\n  }\n\n  // Parse nodes in FBXTree.Objects.Texture\n  // These contain details such as UV scaling, cropping, rotation etc and are connected\n  // to images in FBXTree.Objects.Video\n  parseTextures(images) {\n    const textureMap = new Map()\n\n    if ('Texture' in fbxTree.Objects) {\n      const textureNodes = fbxTree.Objects.Texture\n      for (const nodeID in textureNodes) {\n        const texture = this.parseTexture(textureNodes[nodeID], images)\n        textureMap.set(parseInt(nodeID), texture)\n      }\n    }\n\n    return textureMap\n  }\n\n  // Parse individual node in FBXTree.Objects.Texture\n  parseTexture(textureNode, images) {\n    const texture = this.loadTexture(textureNode, images)\n\n    texture.ID = textureNode.id\n\n    texture.name = textureNode.attrName\n\n    const wrapModeU = textureNode.WrapModeU\n    const wrapModeV = textureNode.WrapModeV\n\n    const valueU = wrapModeU !== undefined ? wrapModeU.value : 0\n    const valueV = wrapModeV !== undefined ? wrapModeV.value : 0\n\n    // http://download.autodesk.com/us/fbx/SDKdocs/FBX_SDK_Help/files/fbxsdkref/class_k_fbx_texture.html#889640e63e2e681259ea81061b85143a\n    // 0: repeat(default), 1: clamp\n\n    texture.wrapS = valueU === 0 ? RepeatWrapping : ClampToEdgeWrapping\n    texture.wrapT = valueV === 0 ? RepeatWrapping : ClampToEdgeWrapping\n\n    if ('Scaling' in textureNode) {\n      const values = textureNode.Scaling.value\n\n      texture.repeat.x = values[0]\n      texture.repeat.y = values[1]\n    }\n\n    return texture\n  }\n\n  // load a texture specified as a blob or data URI, or via an external URL using TextureLoader\n  loadTexture(textureNode, images) {\n    let fileName\n\n    const currentPath = this.textureLoader.path\n\n    const children = connections.get(textureNode.id).children\n\n    if (children !== undefined && children.length > 0 && images[children[0].ID] !== undefined) {\n      fileName = images[children[0].ID]\n\n      if (fileName.indexOf('blob:') === 0 || fileName.indexOf('data:') === 0) {\n        this.textureLoader.setPath(undefined)\n      }\n    }\n\n    let texture\n\n    const extension = textureNode.FileName.slice(-3).toLowerCase()\n\n    if (extension === 'tga') {\n      const loader = this.manager.getHandler('.tga')\n\n      if (loader === null) {\n        console.warn('FBXLoader: TGA loader not found, creating placeholder texture for', textureNode.RelativeFilename)\n        texture = new Texture()\n      } else {\n        loader.setPath(this.textureLoader.path)\n        texture = loader.load(fileName)\n      }\n    } else if (extension === 'psd') {\n      console.warn(\n        'FBXLoader: PSD textures are not supported, creating placeholder texture for',\n        textureNode.RelativeFilename,\n      )\n      texture = new Texture()\n    } else {\n      texture = this.textureLoader.load(fileName)\n    }\n\n    this.textureLoader.setPath(currentPath)\n\n    return texture\n  }\n\n  // Parse nodes in FBXTree.Objects.Material\n  parseMaterials(textureMap) {\n    const materialMap = new Map()\n\n    if ('Material' in fbxTree.Objects) {\n      const materialNodes = fbxTree.Objects.Material\n\n      for (const nodeID in materialNodes) {\n        const material = this.parseMaterial(materialNodes[nodeID], textureMap)\n\n        if (material !== null) materialMap.set(parseInt(nodeID), material)\n      }\n    }\n\n    return materialMap\n  }\n\n  // Parse single node in FBXTree.Objects.Material\n  // Materials are connected to texture maps in FBXTree.Objects.Textures\n  // FBX format currently only supports Lambert and Phong shading models\n  parseMaterial(materialNode, textureMap) {\n    const ID = materialNode.id\n    const name = materialNode.attrName\n    let type = materialNode.ShadingModel\n\n    // Case where FBX wraps shading model in property object.\n    if (typeof type === 'object') {\n      type = type.value\n    }\n\n    // Ignore unused materials which don't have any connections.\n    if (!connections.has(ID)) return null\n\n    const parameters = this.parseParameters(materialNode, textureMap, ID)\n\n    let material\n\n    switch (type.toLowerCase()) {\n      case 'phong':\n        material = new MeshPhongMaterial()\n        break\n      case 'lambert':\n        material = new MeshLambertMaterial()\n        break\n      default:\n        console.warn('THREE.FBXLoader: unknown material type \"%s\". Defaulting to MeshPhongMaterial.', type)\n        material = new MeshPhongMaterial()\n        break\n    }\n\n    material.setValues(parameters)\n    material.name = name\n\n    return material\n  }\n\n  // Parse FBX material and return parameters suitable for a three.js material\n  // Also parse the texture map and return any textures associated with the material\n  parseParameters(materialNode, textureMap, ID) {\n    const parameters = {}\n\n    if (materialNode.BumpFactor) {\n      parameters.bumpScale = materialNode.BumpFactor.value\n    }\n\n    if (materialNode.Diffuse) {\n      parameters.color = new Color().fromArray(materialNode.Diffuse.value)\n    } else if (\n      materialNode.DiffuseColor &&\n      (materialNode.DiffuseColor.type === 'Color' || materialNode.DiffuseColor.type === 'ColorRGB')\n    ) {\n      // The blender exporter exports diffuse here instead of in materialNode.Diffuse\n      parameters.color = new Color().fromArray(materialNode.DiffuseColor.value)\n    }\n\n    if (materialNode.DisplacementFactor) {\n      parameters.displacementScale = materialNode.DisplacementFactor.value\n    }\n\n    if (materialNode.Emissive) {\n      parameters.emissive = new Color().fromArray(materialNode.Emissive.value)\n    } else if (\n      materialNode.EmissiveColor &&\n      (materialNode.EmissiveColor.type === 'Color' || materialNode.EmissiveColor.type === 'ColorRGB')\n    ) {\n      // The blender exporter exports emissive color here instead of in materialNode.Emissive\n      parameters.emissive = new Color().fromArray(materialNode.EmissiveColor.value)\n    }\n\n    if (materialNode.EmissiveFactor) {\n      parameters.emissiveIntensity = parseFloat(materialNode.EmissiveFactor.value)\n    }\n\n    if (materialNode.Opacity) {\n      parameters.opacity = parseFloat(materialNode.Opacity.value)\n    }\n\n    if (parameters.opacity < 1.0) {\n      parameters.transparent = true\n    }\n\n    if (materialNode.ReflectionFactor) {\n      parameters.reflectivity = materialNode.ReflectionFactor.value\n    }\n\n    if (materialNode.Shininess) {\n      parameters.shininess = materialNode.Shininess.value\n    }\n\n    if (materialNode.Specular) {\n      parameters.specular = new Color().fromArray(materialNode.Specular.value)\n    } else if (materialNode.SpecularColor && materialNode.SpecularColor.type === 'Color') {\n      // The blender exporter exports specular color here instead of in materialNode.Specular\n      parameters.specular = new Color().fromArray(materialNode.SpecularColor.value)\n    }\n\n    const scope = this\n    connections.get(ID).children.forEach(function (child) {\n      const type = child.relationship\n\n      switch (type) {\n        case 'Bump':\n          parameters.bumpMap = scope.getTexture(textureMap, child.ID)\n          break\n\n        case 'Maya|TEX_ao_map':\n          parameters.aoMap = scope.getTexture(textureMap, child.ID)\n          break\n\n        case 'DiffuseColor':\n        case 'Maya|TEX_color_map':\n          parameters.map = scope.getTexture(textureMap, child.ID)\n          if (parameters.map !== undefined) {\n            if ('colorSpace' in parameters.map) parameters.map.colorSpace = 'srgb'\n            else parameters.map.encoding = 3001 // sRGBEncoding\n          }\n\n          break\n\n        case 'DisplacementColor':\n          parameters.displacementMap = scope.getTexture(textureMap, child.ID)\n          break\n\n        case 'EmissiveColor':\n          parameters.emissiveMap = scope.getTexture(textureMap, child.ID)\n          if (parameters.emissiveMap !== undefined) {\n            if ('colorSpace' in parameters.emissiveMap) parameters.emissiveMap.colorSpace = 'srgb'\n            else parameters.emissiveMap.encoding = 3001 // sRGBEncoding\n          }\n\n          break\n\n        case 'NormalMap':\n        case 'Maya|TEX_normal_map':\n          parameters.normalMap = scope.getTexture(textureMap, child.ID)\n          break\n\n        case 'ReflectionColor':\n          parameters.envMap = scope.getTexture(textureMap, child.ID)\n          if (parameters.envMap !== undefined) {\n            parameters.envMap.mapping = EquirectangularReflectionMapping\n\n            if ('colorSpace' in parameters.envMap) parameters.envMap.colorSpace = 'srgb'\n            else parameters.envMap.encoding = 3001 // sRGBEncoding\n          }\n\n          break\n\n        case 'SpecularColor':\n          parameters.specularMap = scope.getTexture(textureMap, child.ID)\n          if (parameters.specularMap !== undefined) {\n            if ('colorSpace' in parameters.specularMap) parameters.specularMap.colorSpace = 'srgb'\n            else parameters.specularMap.encoding = 3001 // sRGBEncoding\n          }\n\n          break\n\n        case 'TransparentColor':\n        case 'TransparencyFactor':\n          parameters.alphaMap = scope.getTexture(textureMap, child.ID)\n          parameters.transparent = true\n          break\n\n        case 'AmbientColor':\n        case 'ShininessExponent': // AKA glossiness map\n        case 'SpecularFactor': // AKA specularLevel\n        case 'VectorDisplacementColor': // NOTE: Seems to be a copy of DisplacementColor\n        default:\n          console.warn('THREE.FBXLoader: %s map is not supported in three.js, skipping texture.', type)\n          break\n      }\n    })\n\n    return parameters\n  }\n\n  // get a texture from the textureMap for use by a material.\n  getTexture(textureMap, id) {\n    // if the texture is a layered texture, just use the first layer and issue a warning\n    if ('LayeredTexture' in fbxTree.Objects && id in fbxTree.Objects.LayeredTexture) {\n      console.warn('THREE.FBXLoader: layered textures are not supported in three.js. Discarding all but first layer.')\n      id = connections.get(id).children[0].ID\n    }\n\n    return textureMap.get(id)\n  }\n\n  // Parse nodes in FBXTree.Objects.Deformer\n  // Deformer node can contain skinning or Vertex Cache animation data, however only skinning is supported here\n  // Generates map of Skeleton-like objects for use later when generating and binding skeletons.\n  parseDeformers() {\n    const skeletons = {}\n    const morphTargets = {}\n\n    if ('Deformer' in fbxTree.Objects) {\n      const DeformerNodes = fbxTree.Objects.Deformer\n\n      for (const nodeID in DeformerNodes) {\n        const deformerNode = DeformerNodes[nodeID]\n\n        const relationships = connections.get(parseInt(nodeID))\n\n        if (deformerNode.attrType === 'Skin') {\n          const skeleton = this.parseSkeleton(relationships, DeformerNodes)\n          skeleton.ID = nodeID\n\n          if (relationships.parents.length > 1) {\n            console.warn('THREE.FBXLoader: skeleton attached to more than one geometry is not supported.')\n          }\n          skeleton.geometryID = relationships.parents[0].ID\n\n          skeletons[nodeID] = skeleton\n        } else if (deformerNode.attrType === 'BlendShape') {\n          const morphTarget = {\n            id: nodeID,\n          }\n\n          morphTarget.rawTargets = this.parseMorphTargets(relationships, DeformerNodes)\n          morphTarget.id = nodeID\n\n          if (relationships.parents.length > 1) {\n            console.warn('THREE.FBXLoader: morph target attached to more than one geometry is not supported.')\n          }\n\n          morphTargets[nodeID] = morphTarget\n        }\n      }\n    }\n\n    return {\n      skeletons: skeletons,\n      morphTargets: morphTargets,\n    }\n  }\n\n  // Parse single nodes in FBXTree.Objects.Deformer\n  // The top level skeleton node has type 'Skin' and sub nodes have type 'Cluster'\n  // Each skin node represents a skeleton and each cluster node represents a bone\n  parseSkeleton(relationships, deformerNodes) {\n    const rawBones = []\n\n    relationships.children.forEach(function (child) {\n      const boneNode = deformerNodes[child.ID]\n\n      if (boneNode.attrType !== 'Cluster') return\n\n      const rawBone = {\n        ID: child.ID,\n        indices: [],\n        weights: [],\n        transformLink: new Matrix4().fromArray(boneNode.TransformLink.a),\n        // transform: new Matrix4().fromArray( boneNode.Transform.a ),\n        // linkMode: boneNode.Mode,\n      }\n\n      if ('Indexes' in boneNode) {\n        rawBone.indices = boneNode.Indexes.a\n        rawBone.weights = boneNode.Weights.a\n      }\n\n      rawBones.push(rawBone)\n    })\n\n    return {\n      rawBones: rawBones,\n      bones: [],\n    }\n  }\n\n  // The top level morph deformer node has type \"BlendShape\" and sub nodes have type \"BlendShapeChannel\"\n  parseMorphTargets(relationships, deformerNodes) {\n    const rawMorphTargets = []\n\n    for (let i = 0; i < relationships.children.length; i++) {\n      const child = relationships.children[i]\n\n      const morphTargetNode = deformerNodes[child.ID]\n\n      const rawMorphTarget = {\n        name: morphTargetNode.attrName,\n        initialWeight: morphTargetNode.DeformPercent,\n        id: morphTargetNode.id,\n        fullWeights: morphTargetNode.FullWeights.a,\n      }\n\n      if (morphTargetNode.attrType !== 'BlendShapeChannel') return\n\n      rawMorphTarget.geoID = connections.get(parseInt(child.ID)).children.filter(function (child) {\n        return child.relationship === undefined\n      })[0].ID\n\n      rawMorphTargets.push(rawMorphTarget)\n    }\n\n    return rawMorphTargets\n  }\n\n  // create the main Group() to be returned by the loader\n  parseScene(deformers, geometryMap, materialMap) {\n    sceneGraph = new Group()\n\n    const modelMap = this.parseModels(deformers.skeletons, geometryMap, materialMap)\n\n    const modelNodes = fbxTree.Objects.Model\n\n    const scope = this\n    modelMap.forEach(function (model) {\n      const modelNode = modelNodes[model.ID]\n      scope.setLookAtProperties(model, modelNode)\n\n      const parentConnections = connections.get(model.ID).parents\n\n      parentConnections.forEach(function (connection) {\n        const parent = modelMap.get(connection.ID)\n        if (parent !== undefined) parent.add(model)\n      })\n\n      if (model.parent === null) {\n        sceneGraph.add(model)\n      }\n    })\n\n    this.bindSkeleton(deformers.skeletons, geometryMap, modelMap)\n\n    this.createAmbientLight()\n\n    sceneGraph.traverse(function (node) {\n      if (node.userData.transformData) {\n        if (node.parent) {\n          node.userData.transformData.parentMatrix = node.parent.matrix\n          node.userData.transformData.parentMatrixWorld = node.parent.matrixWorld\n        }\n\n        const transform = generateTransform(node.userData.transformData)\n\n        node.applyMatrix4(transform)\n        node.updateWorldMatrix()\n      }\n    })\n\n    const animations = new AnimationParser().parse()\n\n    // if all the models where already combined in a single group, just return that\n    if (sceneGraph.children.length === 1 && sceneGraph.children[0].isGroup) {\n      sceneGraph.children[0].animations = animations\n      sceneGraph = sceneGraph.children[0]\n    }\n\n    sceneGraph.animations = animations\n  }\n\n  // parse nodes in FBXTree.Objects.Model\n  parseModels(skeletons, geometryMap, materialMap) {\n    const modelMap = new Map()\n    const modelNodes = fbxTree.Objects.Model\n\n    for (const nodeID in modelNodes) {\n      const id = parseInt(nodeID)\n      const node = modelNodes[nodeID]\n      const relationships = connections.get(id)\n\n      let model = this.buildSkeleton(relationships, skeletons, id, node.attrName)\n\n      if (!model) {\n        switch (node.attrType) {\n          case 'Camera':\n            model = this.createCamera(relationships)\n            break\n          case 'Light':\n            model = this.createLight(relationships)\n            break\n          case 'Mesh':\n            model = this.createMesh(relationships, geometryMap, materialMap)\n            break\n          case 'NurbsCurve':\n            model = this.createCurve(relationships, geometryMap)\n            break\n          case 'LimbNode':\n          case 'Root':\n            model = new Bone()\n            break\n          case 'Null':\n          default:\n            model = new Group()\n            break\n        }\n\n        model.name = node.attrName ? PropertyBinding.sanitizeNodeName(node.attrName) : ''\n\n        model.ID = id\n      }\n\n      this.getTransformData(model, node)\n      modelMap.set(id, model)\n    }\n\n    return modelMap\n  }\n\n  buildSkeleton(relationships, skeletons, id, name) {\n    let bone = null\n\n    relationships.parents.forEach(function (parent) {\n      for (const ID in skeletons) {\n        const skeleton = skeletons[ID]\n\n        skeleton.rawBones.forEach(function (rawBone, i) {\n          if (rawBone.ID === parent.ID) {\n            const subBone = bone\n            bone = new Bone()\n\n            bone.matrixWorld.copy(rawBone.transformLink)\n\n            // set name and id here - otherwise in cases where \"subBone\" is created it will not have a name / id\n\n            bone.name = name ? PropertyBinding.sanitizeNodeName(name) : ''\n            bone.ID = id\n\n            skeleton.bones[i] = bone\n\n            // In cases where a bone is shared between multiple meshes\n            // duplicate the bone here and and it as a child of the first bone\n            if (subBone !== null) {\n              bone.add(subBone)\n            }\n          }\n        })\n      }\n    })\n\n    return bone\n  }\n\n  // create a PerspectiveCamera or OrthographicCamera\n  createCamera(relationships) {\n    let model\n    let cameraAttribute\n\n    relationships.children.forEach(function (child) {\n      const attr = fbxTree.Objects.NodeAttribute[child.ID]\n\n      if (attr !== undefined) {\n        cameraAttribute = attr\n      }\n    })\n\n    if (cameraAttribute === undefined) {\n      model = new Object3D()\n    } else {\n      let type = 0\n      if (cameraAttribute.CameraProjectionType !== undefined && cameraAttribute.CameraProjectionType.value === 1) {\n        type = 1\n      }\n\n      let nearClippingPlane = 1\n      if (cameraAttribute.NearPlane !== undefined) {\n        nearClippingPlane = cameraAttribute.NearPlane.value / 1000\n      }\n\n      let farClippingPlane = 1000\n      if (cameraAttribute.FarPlane !== undefined) {\n        farClippingPlane = cameraAttribute.FarPlane.value / 1000\n      }\n\n      let width = window.innerWidth\n      let height = window.innerHeight\n\n      if (cameraAttribute.AspectWidth !== undefined && cameraAttribute.AspectHeight !== undefined) {\n        width = cameraAttribute.AspectWidth.value\n        height = cameraAttribute.AspectHeight.value\n      }\n\n      const aspect = width / height\n\n      let fov = 45\n      if (cameraAttribute.FieldOfView !== undefined) {\n        fov = cameraAttribute.FieldOfView.value\n      }\n\n      const focalLength = cameraAttribute.FocalLength ? cameraAttribute.FocalLength.value : null\n\n      switch (type) {\n        case 0: // Perspective\n          model = new PerspectiveCamera(fov, aspect, nearClippingPlane, farClippingPlane)\n          if (focalLength !== null) model.setFocalLength(focalLength)\n          break\n\n        case 1: // Orthographic\n          model = new OrthographicCamera(\n            -width / 2,\n            width / 2,\n            height / 2,\n            -height / 2,\n            nearClippingPlane,\n            farClippingPlane,\n          )\n          break\n\n        default:\n          console.warn('THREE.FBXLoader: Unknown camera type ' + type + '.')\n          model = new Object3D()\n          break\n      }\n    }\n\n    return model\n  }\n\n  // Create a DirectionalLight, PointLight or SpotLight\n  createLight(relationships) {\n    let model\n    let lightAttribute\n\n    relationships.children.forEach(function (child) {\n      const attr = fbxTree.Objects.NodeAttribute[child.ID]\n\n      if (attr !== undefined) {\n        lightAttribute = attr\n      }\n    })\n\n    if (lightAttribute === undefined) {\n      model = new Object3D()\n    } else {\n      let type\n\n      // LightType can be undefined for Point lights\n      if (lightAttribute.LightType === undefined) {\n        type = 0\n      } else {\n        type = lightAttribute.LightType.value\n      }\n\n      let color = 0xffffff\n\n      if (lightAttribute.Color !== undefined) {\n        color = new Color().fromArray(lightAttribute.Color.value)\n      }\n\n      let intensity = lightAttribute.Intensity === undefined ? 1 : lightAttribute.Intensity.value / 100\n\n      // light disabled\n      if (lightAttribute.CastLightOnObject !== undefined && lightAttribute.CastLightOnObject.value === 0) {\n        intensity = 0\n      }\n\n      let distance = 0\n      if (lightAttribute.FarAttenuationEnd !== undefined) {\n        if (lightAttribute.EnableFarAttenuation !== undefined && lightAttribute.EnableFarAttenuation.value === 0) {\n          distance = 0\n        } else {\n          distance = lightAttribute.FarAttenuationEnd.value\n        }\n      }\n\n      // TODO: could this be calculated linearly from FarAttenuationStart to FarAttenuationEnd?\n      const decay = 1\n\n      switch (type) {\n        case 0: // Point\n          model = new PointLight(color, intensity, distance, decay)\n          break\n\n        case 1: // Directional\n          model = new DirectionalLight(color, intensity)\n          break\n\n        case 2: // Spot\n          let angle = Math.PI / 3\n\n          if (lightAttribute.InnerAngle !== undefined) {\n            angle = MathUtils.degToRad(lightAttribute.InnerAngle.value)\n          }\n\n          let penumbra = 0\n          if (lightAttribute.OuterAngle !== undefined) {\n            // TODO: this is not correct - FBX calculates outer and inner angle in degrees\n            // with OuterAngle > InnerAngle && OuterAngle <= Math.PI\n            // while three.js uses a penumbra between (0, 1) to attenuate the inner angle\n            penumbra = MathUtils.degToRad(lightAttribute.OuterAngle.value)\n            penumbra = Math.max(penumbra, 1)\n          }\n\n          model = new SpotLight(color, intensity, distance, angle, penumbra, decay)\n          break\n\n        default:\n          console.warn(\n            'THREE.FBXLoader: Unknown light type ' + lightAttribute.LightType.value + ', defaulting to a PointLight.',\n          )\n          model = new PointLight(color, intensity)\n          break\n      }\n\n      if (lightAttribute.CastShadows !== undefined && lightAttribute.CastShadows.value === 1) {\n        model.castShadow = true\n      }\n    }\n\n    return model\n  }\n\n  createMesh(relationships, geometryMap, materialMap) {\n    let model\n    let geometry = null\n    let material = null\n    const materials = []\n\n    // get geometry and materials(s) from connections\n    relationships.children.forEach(function (child) {\n      if (geometryMap.has(child.ID)) {\n        geometry = geometryMap.get(child.ID)\n      }\n\n      if (materialMap.has(child.ID)) {\n        materials.push(materialMap.get(child.ID))\n      }\n    })\n\n    if (materials.length > 1) {\n      material = materials\n    } else if (materials.length > 0) {\n      material = materials[0]\n    } else {\n      material = new MeshPhongMaterial({ color: 0xcccccc })\n      materials.push(material)\n    }\n\n    if ('color' in geometry.attributes) {\n      materials.forEach(function (material) {\n        material.vertexColors = true\n      })\n    }\n\n    if (geometry.FBX_Deformer) {\n      model = new SkinnedMesh(geometry, material)\n      model.normalizeSkinWeights()\n    } else {\n      model = new Mesh(geometry, material)\n    }\n\n    return model\n  }\n\n  createCurve(relationships, geometryMap) {\n    const geometry = relationships.children.reduce(function (geo, child) {\n      if (geometryMap.has(child.ID)) geo = geometryMap.get(child.ID)\n\n      return geo\n    }, null)\n\n    // FBX does not list materials for Nurbs lines, so we'll just put our own in here.\n    const material = new LineBasicMaterial({ color: 0x3300ff, linewidth: 1 })\n    return new Line(geometry, material)\n  }\n\n  // parse the model node for transform data\n  getTransformData(model, modelNode) {\n    const transformData = {}\n\n    if ('InheritType' in modelNode) transformData.inheritType = parseInt(modelNode.InheritType.value)\n\n    if ('RotationOrder' in modelNode) transformData.eulerOrder = getEulerOrder(modelNode.RotationOrder.value)\n    else transformData.eulerOrder = 'ZYX'\n\n    if ('Lcl_Translation' in modelNode) transformData.translation = modelNode.Lcl_Translation.value\n\n    if ('PreRotation' in modelNode) transformData.preRotation = modelNode.PreRotation.value\n    if ('Lcl_Rotation' in modelNode) transformData.rotation = modelNode.Lcl_Rotation.value\n    if ('PostRotation' in modelNode) transformData.postRotation = modelNode.PostRotation.value\n\n    if ('Lcl_Scaling' in modelNode) transformData.scale = modelNode.Lcl_Scaling.value\n\n    if ('ScalingOffset' in modelNode) transformData.scalingOffset = modelNode.ScalingOffset.value\n    if ('ScalingPivot' in modelNode) transformData.scalingPivot = modelNode.ScalingPivot.value\n\n    if ('RotationOffset' in modelNode) transformData.rotationOffset = modelNode.RotationOffset.value\n    if ('RotationPivot' in modelNode) transformData.rotationPivot = modelNode.RotationPivot.value\n\n    model.userData.transformData = transformData\n  }\n\n  setLookAtProperties(model, modelNode) {\n    if ('LookAtProperty' in modelNode) {\n      const children = connections.get(model.ID).children\n\n      children.forEach(function (child) {\n        if (child.relationship === 'LookAtProperty') {\n          const lookAtTarget = fbxTree.Objects.Model[child.ID]\n\n          if ('Lcl_Translation' in lookAtTarget) {\n            const pos = lookAtTarget.Lcl_Translation.value\n\n            // DirectionalLight, SpotLight\n            if (model.target !== undefined) {\n              model.target.position.fromArray(pos)\n              sceneGraph.add(model.target)\n            } else {\n              // Cameras and other Object3Ds\n\n              model.lookAt(new Vector3().fromArray(pos))\n            }\n          }\n        }\n      })\n    }\n  }\n\n  bindSkeleton(skeletons, geometryMap, modelMap) {\n    const bindMatrices = this.parsePoseNodes()\n\n    for (const ID in skeletons) {\n      const skeleton = skeletons[ID]\n\n      const parents = connections.get(parseInt(skeleton.ID)).parents\n\n      parents.forEach(function (parent) {\n        if (geometryMap.has(parent.ID)) {\n          const geoID = parent.ID\n          const geoRelationships = connections.get(geoID)\n\n          geoRelationships.parents.forEach(function (geoConnParent) {\n            if (modelMap.has(geoConnParent.ID)) {\n              const model = modelMap.get(geoConnParent.ID)\n\n              model.bind(new Skeleton(skeleton.bones), bindMatrices[geoConnParent.ID])\n            }\n          })\n        }\n      })\n    }\n  }\n\n  parsePoseNodes() {\n    const bindMatrices = {}\n\n    if ('Pose' in fbxTree.Objects) {\n      const BindPoseNode = fbxTree.Objects.Pose\n\n      for (const nodeID in BindPoseNode) {\n        if (BindPoseNode[nodeID].attrType === 'BindPose' && BindPoseNode[nodeID].NbPoseNodes > 0) {\n          const poseNodes = BindPoseNode[nodeID].PoseNode\n\n          if (Array.isArray(poseNodes)) {\n            poseNodes.forEach(function (poseNode) {\n              bindMatrices[poseNode.Node] = new Matrix4().fromArray(poseNode.Matrix.a)\n            })\n          } else {\n            bindMatrices[poseNodes.Node] = new Matrix4().fromArray(poseNodes.Matrix.a)\n          }\n        }\n      }\n    }\n\n    return bindMatrices\n  }\n\n  // Parse ambient color in FBXTree.GlobalSettings - if it's not set to black (default), create an ambient light\n  createAmbientLight() {\n    if ('GlobalSettings' in fbxTree && 'AmbientColor' in fbxTree.GlobalSettings) {\n      const ambientColor = fbxTree.GlobalSettings.AmbientColor.value\n      const r = ambientColor[0]\n      const g = ambientColor[1]\n      const b = ambientColor[2]\n\n      if (r !== 0 || g !== 0 || b !== 0) {\n        const color = new Color(r, g, b)\n        sceneGraph.add(new AmbientLight(color, 1))\n      }\n    }\n  }\n}\n\n// parse Geometry data from FBXTree and return map of BufferGeometries\nclass GeometryParser {\n  // Parse nodes in FBXTree.Objects.Geometry\n  parse(deformers) {\n    const geometryMap = new Map()\n\n    if ('Geometry' in fbxTree.Objects) {\n      const geoNodes = fbxTree.Objects.Geometry\n\n      for (const nodeID in geoNodes) {\n        const relationships = connections.get(parseInt(nodeID))\n        const geo = this.parseGeometry(relationships, geoNodes[nodeID], deformers)\n\n        geometryMap.set(parseInt(nodeID), geo)\n      }\n    }\n\n    return geometryMap\n  }\n\n  // Parse single node in FBXTree.Objects.Geometry\n  parseGeometry(relationships, geoNode, deformers) {\n    switch (geoNode.attrType) {\n      case 'Mesh':\n        return this.parseMeshGeometry(relationships, geoNode, deformers)\n        break\n\n      case 'NurbsCurve':\n        return this.parseNurbsGeometry(geoNode)\n        break\n    }\n  }\n\n  // Parse single node mesh geometry in FBXTree.Objects.Geometry\n  parseMeshGeometry(relationships, geoNode, deformers) {\n    const skeletons = deformers.skeletons\n    const morphTargets = []\n\n    const modelNodes = relationships.parents.map(function (parent) {\n      return fbxTree.Objects.Model[parent.ID]\n    })\n\n    // don't create geometry if it is not associated with any models\n    if (modelNodes.length === 0) return\n\n    const skeleton = relationships.children.reduce(function (skeleton, child) {\n      if (skeletons[child.ID] !== undefined) skeleton = skeletons[child.ID]\n\n      return skeleton\n    }, null)\n\n    relationships.children.forEach(function (child) {\n      if (deformers.morphTargets[child.ID] !== undefined) {\n        morphTargets.push(deformers.morphTargets[child.ID])\n      }\n    })\n\n    // Assume one model and get the preRotation from that\n    // if there is more than one model associated with the geometry this may cause problems\n    const modelNode = modelNodes[0]\n\n    const transformData = {}\n\n    if ('RotationOrder' in modelNode) transformData.eulerOrder = getEulerOrder(modelNode.RotationOrder.value)\n    if ('InheritType' in modelNode) transformData.inheritType = parseInt(modelNode.InheritType.value)\n\n    if ('GeometricTranslation' in modelNode) transformData.translation = modelNode.GeometricTranslation.value\n    if ('GeometricRotation' in modelNode) transformData.rotation = modelNode.GeometricRotation.value\n    if ('GeometricScaling' in modelNode) transformData.scale = modelNode.GeometricScaling.value\n\n    const transform = generateTransform(transformData)\n\n    return this.genGeometry(geoNode, skeleton, morphTargets, transform)\n  }\n\n  // Generate a BufferGeometry from a node in FBXTree.Objects.Geometry\n  genGeometry(geoNode, skeleton, morphTargets, preTransform) {\n    const geo = new BufferGeometry()\n    if (geoNode.attrName) geo.name = geoNode.attrName\n\n    const geoInfo = this.parseGeoNode(geoNode, skeleton)\n    const buffers = this.genBuffers(geoInfo)\n\n    const positionAttribute = new Float32BufferAttribute(buffers.vertex, 3)\n\n    positionAttribute.applyMatrix4(preTransform)\n\n    geo.setAttribute('position', positionAttribute)\n\n    if (buffers.colors.length > 0) {\n      geo.setAttribute('color', new Float32BufferAttribute(buffers.colors, 3))\n    }\n\n    if (skeleton) {\n      geo.setAttribute('skinIndex', new Uint16BufferAttribute(buffers.weightsIndices, 4))\n\n      geo.setAttribute('skinWeight', new Float32BufferAttribute(buffers.vertexWeights, 4))\n\n      // used later to bind the skeleton to the model\n      geo.FBX_Deformer = skeleton\n    }\n\n    if (buffers.normal.length > 0) {\n      const normalMatrix = new Matrix3().getNormalMatrix(preTransform)\n\n      const normalAttribute = new Float32BufferAttribute(buffers.normal, 3)\n      normalAttribute.applyNormalMatrix(normalMatrix)\n\n      geo.setAttribute('normal', normalAttribute)\n    }\n\n    buffers.uvs.forEach(function (uvBuffer, i) {\n      if (UV1 === 'uv2') i++;\n      const name = i === 0 ? 'uv' : `uv${i}`;\n\n      geo.setAttribute(name, new Float32BufferAttribute(buffers.uvs[i], 2))\n    })\n\n    if (geoInfo.material && geoInfo.material.mappingType !== 'AllSame') {\n      // Convert the material indices of each vertex into rendering groups on the geometry.\n      let prevMaterialIndex = buffers.materialIndex[0]\n      let startIndex = 0\n\n      buffers.materialIndex.forEach(function (currentIndex, i) {\n        if (currentIndex !== prevMaterialIndex) {\n          geo.addGroup(startIndex, i - startIndex, prevMaterialIndex)\n\n          prevMaterialIndex = currentIndex\n          startIndex = i\n        }\n      })\n\n      // the loop above doesn't add the last group, do that here.\n      if (geo.groups.length > 0) {\n        const lastGroup = geo.groups[geo.groups.length - 1]\n        const lastIndex = lastGroup.start + lastGroup.count\n\n        if (lastIndex !== buffers.materialIndex.length) {\n          geo.addGroup(lastIndex, buffers.materialIndex.length - lastIndex, prevMaterialIndex)\n        }\n      }\n\n      // case where there are multiple materials but the whole geometry is only\n      // using one of them\n      if (geo.groups.length === 0) {\n        geo.addGroup(0, buffers.materialIndex.length, buffers.materialIndex[0])\n      }\n    }\n\n    this.addMorphTargets(geo, geoNode, morphTargets, preTransform)\n\n    return geo\n  }\n\n  parseGeoNode(geoNode, skeleton) {\n    const geoInfo = {}\n\n    geoInfo.vertexPositions = geoNode.Vertices !== undefined ? geoNode.Vertices.a : []\n    geoInfo.vertexIndices = geoNode.PolygonVertexIndex !== undefined ? geoNode.PolygonVertexIndex.a : []\n\n    if (geoNode.LayerElementColor) {\n      geoInfo.color = this.parseVertexColors(geoNode.LayerElementColor[0])\n    }\n\n    if (geoNode.LayerElementMaterial) {\n      geoInfo.material = this.parseMaterialIndices(geoNode.LayerElementMaterial[0])\n    }\n\n    if (geoNode.LayerElementNormal) {\n      geoInfo.normal = this.parseNormals(geoNode.LayerElementNormal[0])\n    }\n\n    if (geoNode.LayerElementUV) {\n      geoInfo.uv = []\n\n      let i = 0\n      while (geoNode.LayerElementUV[i]) {\n        if (geoNode.LayerElementUV[i].UV) {\n          geoInfo.uv.push(this.parseUVs(geoNode.LayerElementUV[i]))\n        }\n\n        i++\n      }\n    }\n\n    geoInfo.weightTable = {}\n\n    if (skeleton !== null) {\n      geoInfo.skeleton = skeleton\n\n      skeleton.rawBones.forEach(function (rawBone, i) {\n        // loop over the bone's vertex indices and weights\n        rawBone.indices.forEach(function (index, j) {\n          if (geoInfo.weightTable[index] === undefined) geoInfo.weightTable[index] = []\n\n          geoInfo.weightTable[index].push({\n            id: i,\n            weight: rawBone.weights[j],\n          })\n        })\n      })\n    }\n\n    return geoInfo\n  }\n\n  genBuffers(geoInfo) {\n    const buffers = {\n      vertex: [],\n      normal: [],\n      colors: [],\n      uvs: [],\n      materialIndex: [],\n      vertexWeights: [],\n      weightsIndices: [],\n    }\n\n    let polygonIndex = 0\n    let faceLength = 0\n    let displayedWeightsWarning = false\n\n    // these will hold data for a single face\n    let facePositionIndexes = []\n    let faceNormals = []\n    let faceColors = []\n    let faceUVs = []\n    let faceWeights = []\n    let faceWeightIndices = []\n\n    const scope = this\n    geoInfo.vertexIndices.forEach(function (vertexIndex, polygonVertexIndex) {\n      let materialIndex\n      let endOfFace = false\n\n      // Face index and vertex index arrays are combined in a single array\n      // A cube with quad faces looks like this:\n      // PolygonVertexIndex: *24 {\n      //  a: 0, 1, 3, -3, 2, 3, 5, -5, 4, 5, 7, -7, 6, 7, 1, -1, 1, 7, 5, -4, 6, 0, 2, -5\n      //  }\n      // Negative numbers mark the end of a face - first face here is 0, 1, 3, -3\n      // to find index of last vertex bit shift the index: ^ - 1\n      if (vertexIndex < 0) {\n        vertexIndex = vertexIndex ^ -1 // equivalent to ( x * -1 ) - 1\n        endOfFace = true\n      }\n\n      let weightIndices = []\n      let weights = []\n\n      facePositionIndexes.push(vertexIndex * 3, vertexIndex * 3 + 1, vertexIndex * 3 + 2)\n\n      if (geoInfo.color) {\n        const data = getData(polygonVertexIndex, polygonIndex, vertexIndex, geoInfo.color)\n\n        faceColors.push(data[0], data[1], data[2])\n      }\n\n      if (geoInfo.skeleton) {\n        if (geoInfo.weightTable[vertexIndex] !== undefined) {\n          geoInfo.weightTable[vertexIndex].forEach(function (wt) {\n            weights.push(wt.weight)\n            weightIndices.push(wt.id)\n          })\n        }\n\n        if (weights.length > 4) {\n          if (!displayedWeightsWarning) {\n            console.warn(\n              'THREE.FBXLoader: Vertex has more than 4 skinning weights assigned to vertex. Deleting additional weights.',\n            )\n            displayedWeightsWarning = true\n          }\n\n          const wIndex = [0, 0, 0, 0]\n          const Weight = [0, 0, 0, 0]\n\n          weights.forEach(function (weight, weightIndex) {\n            let currentWeight = weight\n            let currentIndex = weightIndices[weightIndex]\n\n            Weight.forEach(function (comparedWeight, comparedWeightIndex, comparedWeightArray) {\n              if (currentWeight > comparedWeight) {\n                comparedWeightArray[comparedWeightIndex] = currentWeight\n                currentWeight = comparedWeight\n\n                const tmp = wIndex[comparedWeightIndex]\n                wIndex[comparedWeightIndex] = currentIndex\n                currentIndex = tmp\n              }\n            })\n          })\n\n          weightIndices = wIndex\n          weights = Weight\n        }\n\n        // if the weight array is shorter than 4 pad with 0s\n        while (weights.length < 4) {\n          weights.push(0)\n          weightIndices.push(0)\n        }\n\n        for (let i = 0; i < 4; ++i) {\n          faceWeights.push(weights[i])\n          faceWeightIndices.push(weightIndices[i])\n        }\n      }\n\n      if (geoInfo.normal) {\n        const data = getData(polygonVertexIndex, polygonIndex, vertexIndex, geoInfo.normal)\n\n        faceNormals.push(data[0], data[1], data[2])\n      }\n\n      if (geoInfo.material && geoInfo.material.mappingType !== 'AllSame') {\n        materialIndex = getData(polygonVertexIndex, polygonIndex, vertexIndex, geoInfo.material)[0]\n      }\n\n      if (geoInfo.uv) {\n        geoInfo.uv.forEach(function (uv, i) {\n          const data = getData(polygonVertexIndex, polygonIndex, vertexIndex, uv)\n\n          if (faceUVs[i] === undefined) {\n            faceUVs[i] = []\n          }\n\n          faceUVs[i].push(data[0])\n          faceUVs[i].push(data[1])\n        })\n      }\n\n      faceLength++\n\n      if (endOfFace) {\n        scope.genFace(\n          buffers,\n          geoInfo,\n          facePositionIndexes,\n          materialIndex,\n          faceNormals,\n          faceColors,\n          faceUVs,\n          faceWeights,\n          faceWeightIndices,\n          faceLength,\n        )\n\n        polygonIndex++\n        faceLength = 0\n\n        // reset arrays for the next face\n        facePositionIndexes = []\n        faceNormals = []\n        faceColors = []\n        faceUVs = []\n        faceWeights = []\n        faceWeightIndices = []\n      }\n    })\n\n    return buffers\n  }\n\n  // Generate data for a single face in a geometry. If the face is a quad then split it into 2 tris\n  genFace(\n    buffers,\n    geoInfo,\n    facePositionIndexes,\n    materialIndex,\n    faceNormals,\n    faceColors,\n    faceUVs,\n    faceWeights,\n    faceWeightIndices,\n    faceLength,\n  ) {\n    for (let i = 2; i < faceLength; i++) {\n      buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[0]])\n      buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[1]])\n      buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[2]])\n\n      buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[(i - 1) * 3]])\n      buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[(i - 1) * 3 + 1]])\n      buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[(i - 1) * 3 + 2]])\n\n      buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[i * 3]])\n      buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[i * 3 + 1]])\n      buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[i * 3 + 2]])\n\n      if (geoInfo.skeleton) {\n        buffers.vertexWeights.push(faceWeights[0])\n        buffers.vertexWeights.push(faceWeights[1])\n        buffers.vertexWeights.push(faceWeights[2])\n        buffers.vertexWeights.push(faceWeights[3])\n\n        buffers.vertexWeights.push(faceWeights[(i - 1) * 4])\n        buffers.vertexWeights.push(faceWeights[(i - 1) * 4 + 1])\n        buffers.vertexWeights.push(faceWeights[(i - 1) * 4 + 2])\n        buffers.vertexWeights.push(faceWeights[(i - 1) * 4 + 3])\n\n        buffers.vertexWeights.push(faceWeights[i * 4])\n        buffers.vertexWeights.push(faceWeights[i * 4 + 1])\n        buffers.vertexWeights.push(faceWeights[i * 4 + 2])\n        buffers.vertexWeights.push(faceWeights[i * 4 + 3])\n\n        buffers.weightsIndices.push(faceWeightIndices[0])\n        buffers.weightsIndices.push(faceWeightIndices[1])\n        buffers.weightsIndices.push(faceWeightIndices[2])\n        buffers.weightsIndices.push(faceWeightIndices[3])\n\n        buffers.weightsIndices.push(faceWeightIndices[(i - 1) * 4])\n        buffers.weightsIndices.push(faceWeightIndices[(i - 1) * 4 + 1])\n        buffers.weightsIndices.push(faceWeightIndices[(i - 1) * 4 + 2])\n        buffers.weightsIndices.push(faceWeightIndices[(i - 1) * 4 + 3])\n\n        buffers.weightsIndices.push(faceWeightIndices[i * 4])\n        buffers.weightsIndices.push(faceWeightIndices[i * 4 + 1])\n        buffers.weightsIndices.push(faceWeightIndices[i * 4 + 2])\n        buffers.weightsIndices.push(faceWeightIndices[i * 4 + 3])\n      }\n\n      if (geoInfo.color) {\n        buffers.colors.push(faceColors[0])\n        buffers.colors.push(faceColors[1])\n        buffers.colors.push(faceColors[2])\n\n        buffers.colors.push(faceColors[(i - 1) * 3])\n        buffers.colors.push(faceColors[(i - 1) * 3 + 1])\n        buffers.colors.push(faceColors[(i - 1) * 3 + 2])\n\n        buffers.colors.push(faceColors[i * 3])\n        buffers.colors.push(faceColors[i * 3 + 1])\n        buffers.colors.push(faceColors[i * 3 + 2])\n      }\n\n      if (geoInfo.material && geoInfo.material.mappingType !== 'AllSame') {\n        buffers.materialIndex.push(materialIndex)\n        buffers.materialIndex.push(materialIndex)\n        buffers.materialIndex.push(materialIndex)\n      }\n\n      if (geoInfo.normal) {\n        buffers.normal.push(faceNormals[0])\n        buffers.normal.push(faceNormals[1])\n        buffers.normal.push(faceNormals[2])\n\n        buffers.normal.push(faceNormals[(i - 1) * 3])\n        buffers.normal.push(faceNormals[(i - 1) * 3 + 1])\n        buffers.normal.push(faceNormals[(i - 1) * 3 + 2])\n\n        buffers.normal.push(faceNormals[i * 3])\n        buffers.normal.push(faceNormals[i * 3 + 1])\n        buffers.normal.push(faceNormals[i * 3 + 2])\n      }\n\n      if (geoInfo.uv) {\n        geoInfo.uv.forEach(function (uv, j) {\n          if (buffers.uvs[j] === undefined) buffers.uvs[j] = []\n\n          buffers.uvs[j].push(faceUVs[j][0])\n          buffers.uvs[j].push(faceUVs[j][1])\n\n          buffers.uvs[j].push(faceUVs[j][(i - 1) * 2])\n          buffers.uvs[j].push(faceUVs[j][(i - 1) * 2 + 1])\n\n          buffers.uvs[j].push(faceUVs[j][i * 2])\n          buffers.uvs[j].push(faceUVs[j][i * 2 + 1])\n        })\n      }\n    }\n  }\n\n  addMorphTargets(parentGeo, parentGeoNode, morphTargets, preTransform) {\n    if (morphTargets.length === 0) return\n\n    parentGeo.morphTargetsRelative = true\n\n    parentGeo.morphAttributes.position = []\n    // parentGeo.morphAttributes.normal = []; // not implemented\n\n    const scope = this\n    morphTargets.forEach(function (morphTarget) {\n      morphTarget.rawTargets.forEach(function (rawTarget) {\n        const morphGeoNode = fbxTree.Objects.Geometry[rawTarget.geoID]\n\n        if (morphGeoNode !== undefined) {\n          scope.genMorphGeometry(parentGeo, parentGeoNode, morphGeoNode, preTransform, rawTarget.name)\n        }\n      })\n    })\n  }\n\n  // a morph geometry node is similar to a standard  node, and the node is also contained\n  // in FBXTree.Objects.Geometry, however it can only have attributes for position, normal\n  // and a special attribute Index defining which vertices of the original geometry are affected\n  // Normal and position attributes only have data for the vertices that are affected by the morph\n  genMorphGeometry(parentGeo, parentGeoNode, morphGeoNode, preTransform, name) {\n    const vertexIndices = parentGeoNode.PolygonVertexIndex !== undefined ? parentGeoNode.PolygonVertexIndex.a : []\n\n    const morphPositionsSparse = morphGeoNode.Vertices !== undefined ? morphGeoNode.Vertices.a : []\n    const indices = morphGeoNode.Indexes !== undefined ? morphGeoNode.Indexes.a : []\n\n    const length = parentGeo.attributes.position.count * 3\n    const morphPositions = new Float32Array(length)\n\n    for (let i = 0; i < indices.length; i++) {\n      const morphIndex = indices[i] * 3\n\n      morphPositions[morphIndex] = morphPositionsSparse[i * 3]\n      morphPositions[morphIndex + 1] = morphPositionsSparse[i * 3 + 1]\n      morphPositions[morphIndex + 2] = morphPositionsSparse[i * 3 + 2]\n    }\n\n    // TODO: add morph normal support\n    const morphGeoInfo = {\n      vertexIndices: vertexIndices,\n      vertexPositions: morphPositions,\n    }\n\n    const morphBuffers = this.genBuffers(morphGeoInfo)\n\n    const positionAttribute = new Float32BufferAttribute(morphBuffers.vertex, 3)\n    positionAttribute.name = name || morphGeoNode.attrName\n\n    positionAttribute.applyMatrix4(preTransform)\n\n    parentGeo.morphAttributes.position.push(positionAttribute)\n  }\n\n  // Parse normal from FBXTree.Objects.Geometry.LayerElementNormal if it exists\n  parseNormals(NormalNode) {\n    const mappingType = NormalNode.MappingInformationType\n    const referenceType = NormalNode.ReferenceInformationType\n    const buffer = NormalNode.Normals.a\n    let indexBuffer = []\n    if (referenceType === 'IndexToDirect') {\n      if ('NormalIndex' in NormalNode) {\n        indexBuffer = NormalNode.NormalIndex.a\n      } else if ('NormalsIndex' in NormalNode) {\n        indexBuffer = NormalNode.NormalsIndex.a\n      }\n    }\n\n    return {\n      dataSize: 3,\n      buffer: buffer,\n      indices: indexBuffer,\n      mappingType: mappingType,\n      referenceType: referenceType,\n    }\n  }\n\n  // Parse UVs from FBXTree.Objects.Geometry.LayerElementUV if it exists\n  parseUVs(UVNode) {\n    const mappingType = UVNode.MappingInformationType\n    const referenceType = UVNode.ReferenceInformationType\n    const buffer = UVNode.UV.a\n    let indexBuffer = []\n    if (referenceType === 'IndexToDirect') {\n      indexBuffer = UVNode.UVIndex.a\n    }\n\n    return {\n      dataSize: 2,\n      buffer: buffer,\n      indices: indexBuffer,\n      mappingType: mappingType,\n      referenceType: referenceType,\n    }\n  }\n\n  // Parse Vertex Colors from FBXTree.Objects.Geometry.LayerElementColor if it exists\n  parseVertexColors(ColorNode) {\n    const mappingType = ColorNode.MappingInformationType\n    const referenceType = ColorNode.ReferenceInformationType\n    const buffer = ColorNode.Colors.a\n    let indexBuffer = []\n    if (referenceType === 'IndexToDirect') {\n      indexBuffer = ColorNode.ColorIndex.a\n    }\n\n    return {\n      dataSize: 4,\n      buffer: buffer,\n      indices: indexBuffer,\n      mappingType: mappingType,\n      referenceType: referenceType,\n    }\n  }\n\n  // Parse mapping and material data in FBXTree.Objects.Geometry.LayerElementMaterial if it exists\n  parseMaterialIndices(MaterialNode) {\n    const mappingType = MaterialNode.MappingInformationType\n    const referenceType = MaterialNode.ReferenceInformationType\n\n    if (mappingType === 'NoMappingInformation') {\n      return {\n        dataSize: 1,\n        buffer: [0],\n        indices: [0],\n        mappingType: 'AllSame',\n        referenceType: referenceType,\n      }\n    }\n\n    const materialIndexBuffer = MaterialNode.Materials.a\n\n    // Since materials are stored as indices, there's a bit of a mismatch between FBX and what\n    // we expect.So we create an intermediate buffer that points to the index in the buffer,\n    // for conforming with the other functions we've written for other data.\n    const materialIndices = []\n\n    for (let i = 0; i < materialIndexBuffer.length; ++i) {\n      materialIndices.push(i)\n    }\n\n    return {\n      dataSize: 1,\n      buffer: materialIndexBuffer,\n      indices: materialIndices,\n      mappingType: mappingType,\n      referenceType: referenceType,\n    }\n  }\n\n  // Generate a NurbGeometry from a node in FBXTree.Objects.Geometry\n  parseNurbsGeometry(geoNode) {\n    if (NURBSCurve === undefined) {\n      console.error(\n        'THREE.FBXLoader: The loader relies on NURBSCurve for any nurbs present in the model. Nurbs will show up as empty geometry.',\n      )\n      return new BufferGeometry()\n    }\n\n    const order = parseInt(geoNode.Order)\n\n    if (isNaN(order)) {\n      console.error('THREE.FBXLoader: Invalid Order %s given for geometry ID: %s', geoNode.Order, geoNode.id)\n      return new BufferGeometry()\n    }\n\n    const degree = order - 1\n\n    const knots = geoNode.KnotVector.a\n    const controlPoints = []\n    const pointsValues = geoNode.Points.a\n\n    for (let i = 0, l = pointsValues.length; i < l; i += 4) {\n      controlPoints.push(new Vector4().fromArray(pointsValues, i))\n    }\n\n    let startKnot, endKnot\n\n    if (geoNode.Form === 'Closed') {\n      controlPoints.push(controlPoints[0])\n    } else if (geoNode.Form === 'Periodic') {\n      startKnot = degree\n      endKnot = knots.length - 1 - startKnot\n\n      for (let i = 0; i < degree; ++i) {\n        controlPoints.push(controlPoints[i])\n      }\n    }\n\n    const curve = new NURBSCurve(degree, knots, controlPoints, startKnot, endKnot)\n    const points = curve.getPoints(controlPoints.length * 12)\n\n    return new BufferGeometry().setFromPoints(points)\n  }\n}\n\n// parse animation data from FBXTree\nclass AnimationParser {\n  // take raw animation clips and turn them into three.js animation clips\n  parse() {\n    const animationClips = []\n\n    const rawClips = this.parseClips()\n\n    if (rawClips !== undefined) {\n      for (const key in rawClips) {\n        const rawClip = rawClips[key]\n\n        const clip = this.addClip(rawClip)\n\n        animationClips.push(clip)\n      }\n    }\n\n    return animationClips\n  }\n\n  parseClips() {\n    // since the actual transformation data is stored in FBXTree.Objects.AnimationCurve,\n    // if this is undefined we can safely assume there are no animations\n    if (fbxTree.Objects.AnimationCurve === undefined) return undefined\n\n    const curveNodesMap = this.parseAnimationCurveNodes()\n\n    this.parseAnimationCurves(curveNodesMap)\n\n    const layersMap = this.parseAnimationLayers(curveNodesMap)\n    const rawClips = this.parseAnimStacks(layersMap)\n\n    return rawClips\n  }\n\n  // parse nodes in FBXTree.Objects.AnimationCurveNode\n  // each AnimationCurveNode holds data for an animation transform for a model (e.g. left arm rotation )\n  // and is referenced by an AnimationLayer\n  parseAnimationCurveNodes() {\n    const rawCurveNodes = fbxTree.Objects.AnimationCurveNode\n\n    const curveNodesMap = new Map()\n\n    for (const nodeID in rawCurveNodes) {\n      const rawCurveNode = rawCurveNodes[nodeID]\n\n      if (rawCurveNode.attrName.match(/S|R|T|DeformPercent/) !== null) {\n        const curveNode = {\n          id: rawCurveNode.id,\n          attr: rawCurveNode.attrName,\n          curves: {},\n        }\n\n        curveNodesMap.set(curveNode.id, curveNode)\n      }\n    }\n\n    return curveNodesMap\n  }\n\n  // parse nodes in FBXTree.Objects.AnimationCurve and connect them up to\n  // previously parsed AnimationCurveNodes. Each AnimationCurve holds data for a single animated\n  // axis ( e.g. times and values of x rotation)\n  parseAnimationCurves(curveNodesMap) {\n    const rawCurves = fbxTree.Objects.AnimationCurve\n\n    // TODO: Many values are identical up to roundoff error, but won't be optimised\n    // e.g. position times: [0, 0.4, 0. 8]\n    // position values: [7.23538335023477e-7, 93.67518615722656, -0.9982695579528809, 7.23538335023477e-7, 93.67518615722656, -0.9982695579528809, 7.235384487103147e-7, 93.67520904541016, -0.9982695579528809]\n    // clearly, this should be optimised to\n    // times: [0], positions [7.23538335023477e-7, 93.67518615722656, -0.9982695579528809]\n    // this shows up in nearly every FBX file, and generally time array is length > 100\n\n    for (const nodeID in rawCurves) {\n      const animationCurve = {\n        id: rawCurves[nodeID].id,\n        times: rawCurves[nodeID].KeyTime.a.map(convertFBXTimeToSeconds),\n        values: rawCurves[nodeID].KeyValueFloat.a,\n      }\n\n      const relationships = connections.get(animationCurve.id)\n\n      if (relationships !== undefined) {\n        const animationCurveID = relationships.parents[0].ID\n        const animationCurveRelationship = relationships.parents[0].relationship\n\n        if (animationCurveRelationship.match(/X/)) {\n          curveNodesMap.get(animationCurveID).curves['x'] = animationCurve\n        } else if (animationCurveRelationship.match(/Y/)) {\n          curveNodesMap.get(animationCurveID).curves['y'] = animationCurve\n        } else if (animationCurveRelationship.match(/Z/)) {\n          curveNodesMap.get(animationCurveID).curves['z'] = animationCurve\n        } else if (animationCurveRelationship.match(/d|DeformPercent/) && curveNodesMap.has(animationCurveID)) {\n          curveNodesMap.get(animationCurveID).curves['morph'] = animationCurve\n        }\n      }\n    }\n  }\n\n  // parse nodes in FBXTree.Objects.AnimationLayer. Each layers holds references\n  // to various AnimationCurveNodes and is referenced by an AnimationStack node\n  // note: theoretically a stack can have multiple layers, however in practice there always seems to be one per stack\n  parseAnimationLayers(curveNodesMap) {\n    const rawLayers = fbxTree.Objects.AnimationLayer\n\n    const layersMap = new Map()\n\n    for (const nodeID in rawLayers) {\n      const layerCurveNodes = []\n\n      const connection = connections.get(parseInt(nodeID))\n\n      if (connection !== undefined) {\n        // all the animationCurveNodes used in the layer\n        const children = connection.children\n\n        children.forEach(function (child, i) {\n          if (curveNodesMap.has(child.ID)) {\n            const curveNode = curveNodesMap.get(child.ID)\n\n            // check that the curves are defined for at least one axis, otherwise ignore the curveNode\n            if (\n              curveNode.curves.x !== undefined ||\n              curveNode.curves.y !== undefined ||\n              curveNode.curves.z !== undefined\n            ) {\n              if (layerCurveNodes[i] === undefined) {\n                const modelID = connections.get(child.ID).parents.filter(function (parent) {\n                  return parent.relationship !== undefined\n                })[0].ID\n\n                if (modelID !== undefined) {\n                  const rawModel = fbxTree.Objects.Model[modelID.toString()]\n\n                  if (rawModel === undefined) {\n                    console.warn('THREE.FBXLoader: Encountered a unused curve.', child)\n                    return\n                  }\n\n                  const node = {\n                    modelName: rawModel.attrName ? PropertyBinding.sanitizeNodeName(rawModel.attrName) : '',\n                    ID: rawModel.id,\n                    initialPosition: [0, 0, 0],\n                    initialRotation: [0, 0, 0],\n                    initialScale: [1, 1, 1],\n                  }\n\n                  sceneGraph.traverse(function (child) {\n                    if (child.ID === rawModel.id) {\n                      node.transform = child.matrix\n\n                      if (child.userData.transformData) node.eulerOrder = child.userData.transformData.eulerOrder\n                    }\n                  })\n\n                  if (!node.transform) node.transform = new Matrix4()\n\n                  // if the animated model is pre rotated, we'll have to apply the pre rotations to every\n                  // animation value as well\n                  if ('PreRotation' in rawModel) node.preRotation = rawModel.PreRotation.value\n                  if ('PostRotation' in rawModel) node.postRotation = rawModel.PostRotation.value\n\n                  layerCurveNodes[i] = node\n                }\n              }\n\n              if (layerCurveNodes[i]) layerCurveNodes[i][curveNode.attr] = curveNode\n            } else if (curveNode.curves.morph !== undefined) {\n              if (layerCurveNodes[i] === undefined) {\n                const deformerID = connections.get(child.ID).parents.filter(function (parent) {\n                  return parent.relationship !== undefined\n                })[0].ID\n\n                const morpherID = connections.get(deformerID).parents[0].ID\n                const geoID = connections.get(morpherID).parents[0].ID\n\n                // assuming geometry is not used in more than one model\n                const modelID = connections.get(geoID).parents[0].ID\n\n                const rawModel = fbxTree.Objects.Model[modelID]\n\n                const node = {\n                  modelName: rawModel.attrName ? PropertyBinding.sanitizeNodeName(rawModel.attrName) : '',\n                  morphName: fbxTree.Objects.Deformer[deformerID].attrName,\n                }\n\n                layerCurveNodes[i] = node\n              }\n\n              layerCurveNodes[i][curveNode.attr] = curveNode\n            }\n          }\n        })\n\n        layersMap.set(parseInt(nodeID), layerCurveNodes)\n      }\n    }\n\n    return layersMap\n  }\n\n  // parse nodes in FBXTree.Objects.AnimationStack. These are the top level node in the animation\n  // hierarchy. Each Stack node will be used to create a AnimationClip\n  parseAnimStacks(layersMap) {\n    const rawStacks = fbxTree.Objects.AnimationStack\n\n    // connect the stacks (clips) up to the layers\n    const rawClips = {}\n\n    for (const nodeID in rawStacks) {\n      const children = connections.get(parseInt(nodeID)).children\n\n      if (children.length > 1) {\n        // it seems like stacks will always be associated with a single layer. But just in case there are files\n        // where there are multiple layers per stack, we'll display a warning\n        console.warn(\n          'THREE.FBXLoader: Encountered an animation stack with multiple layers, this is currently not supported. Ignoring subsequent layers.',\n        )\n      }\n\n      const layer = layersMap.get(children[0].ID)\n\n      rawClips[nodeID] = {\n        name: rawStacks[nodeID].attrName,\n        layer: layer,\n      }\n    }\n\n    return rawClips\n  }\n\n  addClip(rawClip) {\n    let tracks = []\n\n    const scope = this\n    rawClip.layer.forEach(function (rawTracks) {\n      tracks = tracks.concat(scope.generateTracks(rawTracks))\n    })\n\n    return new AnimationClip(rawClip.name, -1, tracks)\n  }\n\n  generateTracks(rawTracks) {\n    const tracks = []\n\n    let initialPosition = new Vector3()\n    let initialRotation = new Quaternion()\n    let initialScale = new Vector3()\n\n    if (rawTracks.transform) rawTracks.transform.decompose(initialPosition, initialRotation, initialScale)\n\n    initialPosition = initialPosition.toArray()\n    initialRotation = new Euler().setFromQuaternion(initialRotation, rawTracks.eulerOrder).toArray()\n    initialScale = initialScale.toArray()\n\n    if (rawTracks.T !== undefined && Object.keys(rawTracks.T.curves).length > 0) {\n      const positionTrack = this.generateVectorTrack(\n        rawTracks.modelName,\n        rawTracks.T.curves,\n        initialPosition,\n        'position',\n      )\n      if (positionTrack !== undefined) tracks.push(positionTrack)\n    }\n\n    if (rawTracks.R !== undefined && Object.keys(rawTracks.R.curves).length > 0) {\n      const rotationTrack = this.generateRotationTrack(\n        rawTracks.modelName,\n        rawTracks.R.curves,\n        initialRotation,\n        rawTracks.preRotation,\n        rawTracks.postRotation,\n        rawTracks.eulerOrder,\n      )\n      if (rotationTrack !== undefined) tracks.push(rotationTrack)\n    }\n\n    if (rawTracks.S !== undefined && Object.keys(rawTracks.S.curves).length > 0) {\n      const scaleTrack = this.generateVectorTrack(rawTracks.modelName, rawTracks.S.curves, initialScale, 'scale')\n      if (scaleTrack !== undefined) tracks.push(scaleTrack)\n    }\n\n    if (rawTracks.DeformPercent !== undefined) {\n      const morphTrack = this.generateMorphTrack(rawTracks)\n      if (morphTrack !== undefined) tracks.push(morphTrack)\n    }\n\n    return tracks\n  }\n\n  generateVectorTrack(modelName, curves, initialValue, type) {\n    const times = this.getTimesForAllAxes(curves)\n    const values = this.getKeyframeTrackValues(times, curves, initialValue)\n\n    return new VectorKeyframeTrack(modelName + '.' + type, times, values)\n  }\n\n  generateRotationTrack(modelName, curves, initialValue, preRotation, postRotation, eulerOrder) {\n    if (curves.x !== undefined) {\n      this.interpolateRotations(curves.x)\n      curves.x.values = curves.x.values.map(MathUtils.degToRad)\n    }\n\n    if (curves.y !== undefined) {\n      this.interpolateRotations(curves.y)\n      curves.y.values = curves.y.values.map(MathUtils.degToRad)\n    }\n\n    if (curves.z !== undefined) {\n      this.interpolateRotations(curves.z)\n      curves.z.values = curves.z.values.map(MathUtils.degToRad)\n    }\n\n    const times = this.getTimesForAllAxes(curves)\n    const values = this.getKeyframeTrackValues(times, curves, initialValue)\n\n    if (preRotation !== undefined) {\n      preRotation = preRotation.map(MathUtils.degToRad)\n      preRotation.push(eulerOrder)\n\n      preRotation = new Euler().fromArray(preRotation)\n      preRotation = new Quaternion().setFromEuler(preRotation)\n    }\n\n    if (postRotation !== undefined) {\n      postRotation = postRotation.map(MathUtils.degToRad)\n      postRotation.push(eulerOrder)\n\n      postRotation = new Euler().fromArray(postRotation)\n      postRotation = new Quaternion().setFromEuler(postRotation).invert()\n    }\n\n    const quaternion = new Quaternion()\n    const euler = new Euler()\n\n    const quaternionValues = []\n\n    for (let i = 0; i < values.length; i += 3) {\n      euler.set(values[i], values[i + 1], values[i + 2], eulerOrder)\n\n      quaternion.setFromEuler(euler)\n\n      if (preRotation !== undefined) quaternion.premultiply(preRotation)\n      if (postRotation !== undefined) quaternion.multiply(postRotation)\n\n      quaternion.toArray(quaternionValues, (i / 3) * 4)\n    }\n\n    return new QuaternionKeyframeTrack(modelName + '.quaternion', times, quaternionValues)\n  }\n\n  generateMorphTrack(rawTracks) {\n    const curves = rawTracks.DeformPercent.curves.morph\n    const values = curves.values.map(function (val) {\n      return val / 100\n    })\n\n    const morphNum = sceneGraph.getObjectByName(rawTracks.modelName).morphTargetDictionary[rawTracks.morphName]\n\n    return new NumberKeyframeTrack(\n      rawTracks.modelName + '.morphTargetInfluences[' + morphNum + ']',\n      curves.times,\n      values,\n    )\n  }\n\n  // For all animated objects, times are defined separately for each axis\n  // Here we'll combine the times into one sorted array without duplicates\n  getTimesForAllAxes(curves) {\n    let times = []\n\n    // first join together the times for each axis, if defined\n    if (curves.x !== undefined) times = times.concat(curves.x.times)\n    if (curves.y !== undefined) times = times.concat(curves.y.times)\n    if (curves.z !== undefined) times = times.concat(curves.z.times)\n\n    // then sort them\n    times = times.sort(function (a, b) {\n      return a - b\n    })\n\n    // and remove duplicates\n    if (times.length > 1) {\n      let targetIndex = 1\n      let lastValue = times[0]\n      for (let i = 1; i < times.length; i++) {\n        const currentValue = times[i]\n        if (currentValue !== lastValue) {\n          times[targetIndex] = currentValue\n          lastValue = currentValue\n          targetIndex++\n        }\n      }\n\n      times = times.slice(0, targetIndex)\n    }\n\n    return times\n  }\n\n  getKeyframeTrackValues(times, curves, initialValue) {\n    const prevValue = initialValue\n\n    const values = []\n\n    let xIndex = -1\n    let yIndex = -1\n    let zIndex = -1\n\n    times.forEach(function (time) {\n      if (curves.x) xIndex = curves.x.times.indexOf(time)\n      if (curves.y) yIndex = curves.y.times.indexOf(time)\n      if (curves.z) zIndex = curves.z.times.indexOf(time)\n\n      // if there is an x value defined for this frame, use that\n      if (xIndex !== -1) {\n        const xValue = curves.x.values[xIndex]\n        values.push(xValue)\n        prevValue[0] = xValue\n      } else {\n        // otherwise use the x value from the previous frame\n        values.push(prevValue[0])\n      }\n\n      if (yIndex !== -1) {\n        const yValue = curves.y.values[yIndex]\n        values.push(yValue)\n        prevValue[1] = yValue\n      } else {\n        values.push(prevValue[1])\n      }\n\n      if (zIndex !== -1) {\n        const zValue = curves.z.values[zIndex]\n        values.push(zValue)\n        prevValue[2] = zValue\n      } else {\n        values.push(prevValue[2])\n      }\n    })\n\n    return values\n  }\n\n  // Rotations are defined as Euler angles which can have values  of any size\n  // These will be converted to quaternions which don't support values greater than\n  // PI, so we'll interpolate large rotations\n  interpolateRotations(curve) {\n    for (let i = 1; i < curve.values.length; i++) {\n      const initialValue = curve.values[i - 1]\n      const valuesSpan = curve.values[i] - initialValue\n\n      const absoluteSpan = Math.abs(valuesSpan)\n\n      if (absoluteSpan >= 180) {\n        const numSubIntervals = absoluteSpan / 180\n\n        const step = valuesSpan / numSubIntervals\n        let nextValue = initialValue + step\n\n        const initialTime = curve.times[i - 1]\n        const timeSpan = curve.times[i] - initialTime\n        const interval = timeSpan / numSubIntervals\n        let nextTime = initialTime + interval\n\n        const interpolatedTimes = []\n        const interpolatedValues = []\n\n        while (nextTime < curve.times[i]) {\n          interpolatedTimes.push(nextTime)\n          nextTime += interval\n\n          interpolatedValues.push(nextValue)\n          nextValue += step\n        }\n\n        curve.times = inject(curve.times, i, interpolatedTimes)\n        curve.values = inject(curve.values, i, interpolatedValues)\n      }\n    }\n  }\n}\n\n// parse an FBX file in ASCII format\nclass TextParser {\n  getPrevNode() {\n    return this.nodeStack[this.currentIndent - 2]\n  }\n\n  getCurrentNode() {\n    return this.nodeStack[this.currentIndent - 1]\n  }\n\n  getCurrentProp() {\n    return this.currentProp\n  }\n\n  pushStack(node) {\n    this.nodeStack.push(node)\n    this.currentIndent += 1\n  }\n\n  popStack() {\n    this.nodeStack.pop()\n    this.currentIndent -= 1\n  }\n\n  setCurrentProp(val, name) {\n    this.currentProp = val\n    this.currentPropName = name\n  }\n\n  parse(text) {\n    this.currentIndent = 0\n\n    this.allNodes = new FBXTree()\n    this.nodeStack = []\n    this.currentProp = []\n    this.currentPropName = ''\n\n    const scope = this\n\n    const split = text.split(/[\\r\\n]+/)\n\n    split.forEach(function (line, i) {\n      const matchComment = line.match(/^[\\s\\t]*;/)\n      const matchEmpty = line.match(/^[\\s\\t]*$/)\n\n      if (matchComment || matchEmpty) return\n\n      const matchBeginning = line.match('^\\\\t{' + scope.currentIndent + '}(\\\\w+):(.*){', '')\n      const matchProperty = line.match('^\\\\t{' + scope.currentIndent + '}(\\\\w+):[\\\\s\\\\t\\\\r\\\\n](.*)')\n      const matchEnd = line.match('^\\\\t{' + (scope.currentIndent - 1) + '}}')\n\n      if (matchBeginning) {\n        scope.parseNodeBegin(line, matchBeginning)\n      } else if (matchProperty) {\n        scope.parseNodeProperty(line, matchProperty, split[++i])\n      } else if (matchEnd) {\n        scope.popStack()\n      } else if (line.match(/^[^\\s\\t}]/)) {\n        // large arrays are split over multiple lines terminated with a ',' character\n        // if this is encountered the line needs to be joined to the previous line\n        scope.parseNodePropertyContinued(line)\n      }\n    })\n\n    return this.allNodes\n  }\n\n  parseNodeBegin(line, property) {\n    const nodeName = property[1].trim().replace(/^\"/, '').replace(/\"$/, '')\n\n    const nodeAttrs = property[2].split(',').map(function (attr) {\n      return attr.trim().replace(/^\"/, '').replace(/\"$/, '')\n    })\n\n    const node = { name: nodeName }\n    const attrs = this.parseNodeAttr(nodeAttrs)\n\n    const currentNode = this.getCurrentNode()\n\n    // a top node\n    if (this.currentIndent === 0) {\n      this.allNodes.add(nodeName, node)\n    } else {\n      // a subnode\n\n      // if the subnode already exists, append it\n      if (nodeName in currentNode) {\n        // special case Pose needs PoseNodes as an array\n        if (nodeName === 'PoseNode') {\n          currentNode.PoseNode.push(node)\n        } else if (currentNode[nodeName].id !== undefined) {\n          currentNode[nodeName] = {}\n          currentNode[nodeName][currentNode[nodeName].id] = currentNode[nodeName]\n        }\n\n        if (attrs.id !== '') currentNode[nodeName][attrs.id] = node\n      } else if (typeof attrs.id === 'number') {\n        currentNode[nodeName] = {}\n        currentNode[nodeName][attrs.id] = node\n      } else if (nodeName !== 'Properties70') {\n        if (nodeName === 'PoseNode') currentNode[nodeName] = [node]\n        else currentNode[nodeName] = node\n      }\n    }\n\n    if (typeof attrs.id === 'number') node.id = attrs.id\n    if (attrs.name !== '') node.attrName = attrs.name\n    if (attrs.type !== '') node.attrType = attrs.type\n\n    this.pushStack(node)\n  }\n\n  parseNodeAttr(attrs) {\n    let id = attrs[0]\n\n    if (attrs[0] !== '') {\n      id = parseInt(attrs[0])\n\n      if (isNaN(id)) {\n        id = attrs[0]\n      }\n    }\n\n    let name = '',\n      type = ''\n\n    if (attrs.length > 1) {\n      name = attrs[1].replace(/^(\\w+)::/, '')\n      type = attrs[2]\n    }\n\n    return { id: id, name: name, type: type }\n  }\n\n  parseNodeProperty(line, property, contentLine) {\n    let propName = property[1].replace(/^\"/, '').replace(/\"$/, '').trim()\n    let propValue = property[2].replace(/^\"/, '').replace(/\"$/, '').trim()\n\n    // for special case: base64 image data follows \"Content: ,\" line\n    //\tContent: ,\n    //\t \"/9j/4RDaRXhpZgAATU0A...\"\n    if (propName === 'Content' && propValue === ',') {\n      propValue = contentLine.replace(/\"/g, '').replace(/,$/, '').trim()\n    }\n\n    const currentNode = this.getCurrentNode()\n    const parentName = currentNode.name\n\n    if (parentName === 'Properties70') {\n      this.parseNodeSpecialProperty(line, propName, propValue)\n      return\n    }\n\n    // Connections\n    if (propName === 'C') {\n      const connProps = propValue.split(',').slice(1)\n      const from = parseInt(connProps[0])\n      const to = parseInt(connProps[1])\n\n      let rest = propValue.split(',').slice(3)\n\n      rest = rest.map(function (elem) {\n        return elem.trim().replace(/^\"/, '')\n      })\n\n      propName = 'connections'\n      propValue = [from, to]\n      append(propValue, rest)\n\n      if (currentNode[propName] === undefined) {\n        currentNode[propName] = []\n      }\n    }\n\n    // Node\n    if (propName === 'Node') currentNode.id = propValue\n\n    // connections\n    if (propName in currentNode && Array.isArray(currentNode[propName])) {\n      currentNode[propName].push(propValue)\n    } else {\n      if (propName !== 'a') currentNode[propName] = propValue\n      else currentNode.a = propValue\n    }\n\n    this.setCurrentProp(currentNode, propName)\n\n    // convert string to array, unless it ends in ',' in which case more will be added to it\n    if (propName === 'a' && propValue.slice(-1) !== ',') {\n      currentNode.a = parseNumberArray(propValue)\n    }\n  }\n\n  parseNodePropertyContinued(line) {\n    const currentNode = this.getCurrentNode()\n\n    currentNode.a += line\n\n    // if the line doesn't end in ',' we have reached the end of the property value\n    // so convert the string to an array\n    if (line.slice(-1) !== ',') {\n      currentNode.a = parseNumberArray(currentNode.a)\n    }\n  }\n\n  // parse \"Property70\"\n  parseNodeSpecialProperty(line, propName, propValue) {\n    // split this\n    // P: \"Lcl Scaling\", \"Lcl Scaling\", \"\", \"A\",1,1,1\n    // into array like below\n    // [\"Lcl Scaling\", \"Lcl Scaling\", \"\", \"A\", \"1,1,1\" ]\n    const props = propValue.split('\",').map(function (prop) {\n      return prop.trim().replace(/^\\\"/, '').replace(/\\s/, '_')\n    })\n\n    const innerPropName = props[0]\n    const innerPropType1 = props[1]\n    const innerPropType2 = props[2]\n    const innerPropFlag = props[3]\n    let innerPropValue = props[4]\n\n    // cast values where needed, otherwise leave as strings\n    switch (innerPropType1) {\n      case 'int':\n      case 'enum':\n      case 'bool':\n      case 'ULongLong':\n      case 'double':\n      case 'Number':\n      case 'FieldOfView':\n        innerPropValue = parseFloat(innerPropValue)\n        break\n\n      case 'Color':\n      case 'ColorRGB':\n      case 'Vector3D':\n      case 'Lcl_Translation':\n      case 'Lcl_Rotation':\n      case 'Lcl_Scaling':\n        innerPropValue = parseNumberArray(innerPropValue)\n        break\n    }\n\n    // CAUTION: these props must append to parent's parent\n    this.getPrevNode()[innerPropName] = {\n      type: innerPropType1,\n      type2: innerPropType2,\n      flag: innerPropFlag,\n      value: innerPropValue,\n    }\n\n    this.setCurrentProp(this.getPrevNode(), innerPropName)\n  }\n}\n\n// Parse an FBX file in Binary format\nclass BinaryParser {\n  parse(buffer) {\n    const reader = new BinaryReader(buffer)\n    reader.skip(23) // skip magic 23 bytes\n\n    const version = reader.getUint32()\n\n    if (version < 6400) {\n      throw new Error('THREE.FBXLoader: FBX version not supported, FileVersion: ' + version)\n    }\n\n    const allNodes = new FBXTree()\n\n    while (!this.endOfContent(reader)) {\n      const node = this.parseNode(reader, version)\n      if (node !== null) allNodes.add(node.name, node)\n    }\n\n    return allNodes\n  }\n\n  // Check if reader has reached the end of content.\n  endOfContent(reader) {\n    // footer size: 160bytes + 16-byte alignment padding\n    // - 16bytes: magic\n    // - padding til 16-byte alignment (at least 1byte?)\n    //\t(seems like some exporters embed fixed 15 or 16bytes?)\n    // - 4bytes: magic\n    // - 4bytes: version\n    // - 120bytes: zero\n    // - 16bytes: magic\n    if (reader.size() % 16 === 0) {\n      return ((reader.getOffset() + 160 + 16) & ~0xf) >= reader.size()\n    } else {\n      return reader.getOffset() + 160 + 16 >= reader.size()\n    }\n  }\n\n  // recursively parse nodes until the end of the file is reached\n  parseNode(reader, version) {\n    const node = {}\n\n    // The first three data sizes depends on version.\n    const endOffset = version >= 7500 ? reader.getUint64() : reader.getUint32()\n    const numProperties = version >= 7500 ? reader.getUint64() : reader.getUint32()\n\n    version >= 7500 ? reader.getUint64() : reader.getUint32() // the returned propertyListLen is not used\n\n    const nameLen = reader.getUint8()\n    const name = reader.getString(nameLen)\n\n    // Regards this node as NULL-record if endOffset is zero\n    if (endOffset === 0) return null\n\n    const propertyList = []\n\n    for (let i = 0; i < numProperties; i++) {\n      propertyList.push(this.parseProperty(reader))\n    }\n\n    // Regards the first three elements in propertyList as id, attrName, and attrType\n    const id = propertyList.length > 0 ? propertyList[0] : ''\n    const attrName = propertyList.length > 1 ? propertyList[1] : ''\n    const attrType = propertyList.length > 2 ? propertyList[2] : ''\n\n    // check if this node represents just a single property\n    // like (name, 0) set or (name2, [0, 1, 2]) set of {name: 0, name2: [0, 1, 2]}\n    node.singleProperty = numProperties === 1 && reader.getOffset() === endOffset ? true : false\n\n    while (endOffset > reader.getOffset()) {\n      const subNode = this.parseNode(reader, version)\n\n      if (subNode !== null) this.parseSubNode(name, node, subNode)\n    }\n\n    node.propertyList = propertyList // raw property list used by parent\n\n    if (typeof id === 'number') node.id = id\n    if (attrName !== '') node.attrName = attrName\n    if (attrType !== '') node.attrType = attrType\n    if (name !== '') node.name = name\n\n    return node\n  }\n\n  parseSubNode(name, node, subNode) {\n    // special case: child node is single property\n    if (subNode.singleProperty === true) {\n      const value = subNode.propertyList[0]\n\n      if (Array.isArray(value)) {\n        node[subNode.name] = subNode\n\n        subNode.a = value\n      } else {\n        node[subNode.name] = value\n      }\n    } else if (name === 'Connections' && subNode.name === 'C') {\n      const array = []\n\n      subNode.propertyList.forEach(function (property, i) {\n        // first Connection is FBX type (OO, OP, etc.). We'll discard these\n        if (i !== 0) array.push(property)\n      })\n\n      if (node.connections === undefined) {\n        node.connections = []\n      }\n\n      node.connections.push(array)\n    } else if (subNode.name === 'Properties70') {\n      const keys = Object.keys(subNode)\n\n      keys.forEach(function (key) {\n        node[key] = subNode[key]\n      })\n    } else if (name === 'Properties70' && subNode.name === 'P') {\n      let innerPropName = subNode.propertyList[0]\n      let innerPropType1 = subNode.propertyList[1]\n      const innerPropType2 = subNode.propertyList[2]\n      const innerPropFlag = subNode.propertyList[3]\n      let innerPropValue\n\n      if (innerPropName.indexOf('Lcl ') === 0) innerPropName = innerPropName.replace('Lcl ', 'Lcl_')\n      if (innerPropType1.indexOf('Lcl ') === 0) innerPropType1 = innerPropType1.replace('Lcl ', 'Lcl_')\n\n      if (\n        innerPropType1 === 'Color' ||\n        innerPropType1 === 'ColorRGB' ||\n        innerPropType1 === 'Vector' ||\n        innerPropType1 === 'Vector3D' ||\n        innerPropType1.indexOf('Lcl_') === 0\n      ) {\n        innerPropValue = [subNode.propertyList[4], subNode.propertyList[5], subNode.propertyList[6]]\n      } else {\n        innerPropValue = subNode.propertyList[4]\n      }\n\n      // this will be copied to parent, see above\n      node[innerPropName] = {\n        type: innerPropType1,\n        type2: innerPropType2,\n        flag: innerPropFlag,\n        value: innerPropValue,\n      }\n    } else if (node[subNode.name] === undefined) {\n      if (typeof subNode.id === 'number') {\n        node[subNode.name] = {}\n        node[subNode.name][subNode.id] = subNode\n      } else {\n        node[subNode.name] = subNode\n      }\n    } else {\n      if (subNode.name === 'PoseNode') {\n        if (!Array.isArray(node[subNode.name])) {\n          node[subNode.name] = [node[subNode.name]]\n        }\n\n        node[subNode.name].push(subNode)\n      } else if (node[subNode.name][subNode.id] === undefined) {\n        node[subNode.name][subNode.id] = subNode\n      }\n    }\n  }\n\n  parseProperty(reader) {\n    const type = reader.getString(1)\n    let length\n\n    switch (type) {\n      case 'C':\n        return reader.getBoolean()\n\n      case 'D':\n        return reader.getFloat64()\n\n      case 'F':\n        return reader.getFloat32()\n\n      case 'I':\n        return reader.getInt32()\n\n      case 'L':\n        return reader.getInt64()\n\n      case 'R':\n        length = reader.getUint32()\n        return reader.getArrayBuffer(length)\n\n      case 'S':\n        length = reader.getUint32()\n        return reader.getString(length)\n\n      case 'Y':\n        return reader.getInt16()\n\n      case 'b':\n      case 'c':\n      case 'd':\n      case 'f':\n      case 'i':\n      case 'l':\n        const arrayLength = reader.getUint32()\n        const encoding = reader.getUint32() // 0: non-compressed, 1: compressed\n        const compressedLength = reader.getUint32()\n\n        if (encoding === 0) {\n          switch (type) {\n            case 'b':\n            case 'c':\n              return reader.getBooleanArray(arrayLength)\n\n            case 'd':\n              return reader.getFloat64Array(arrayLength)\n\n            case 'f':\n              return reader.getFloat32Array(arrayLength)\n\n            case 'i':\n              return reader.getInt32Array(arrayLength)\n\n            case 'l':\n              return reader.getInt64Array(arrayLength)\n          }\n        }\n\n        const data = unzlibSync(new Uint8Array(reader.getArrayBuffer(compressedLength)))\n        const reader2 = new BinaryReader(data.buffer)\n\n        switch (type) {\n          case 'b':\n          case 'c':\n            return reader2.getBooleanArray(arrayLength)\n\n          case 'd':\n            return reader2.getFloat64Array(arrayLength)\n\n          case 'f':\n            return reader2.getFloat32Array(arrayLength)\n\n          case 'i':\n            return reader2.getInt32Array(arrayLength)\n\n          case 'l':\n            return reader2.getInt64Array(arrayLength)\n        }\n\n      default:\n        throw new Error('THREE.FBXLoader: Unknown property type ' + type)\n    }\n  }\n}\n\nclass BinaryReader {\n  constructor(buffer, littleEndian) {\n    this.dv = new DataView(buffer)\n    this.offset = 0\n    this.littleEndian = littleEndian !== undefined ? littleEndian : true\n  }\n\n  getOffset() {\n    return this.offset\n  }\n\n  size() {\n    return this.dv.buffer.byteLength\n  }\n\n  skip(length) {\n    this.offset += length\n  }\n\n  // seems like true/false representation depends on exporter.\n  // true: 1 or 'Y'(=0x59), false: 0 or 'T'(=0x54)\n  // then sees LSB.\n  getBoolean() {\n    return (this.getUint8() & 1) === 1\n  }\n\n  getBooleanArray(size) {\n    const a = []\n\n    for (let i = 0; i < size; i++) {\n      a.push(this.getBoolean())\n    }\n\n    return a\n  }\n\n  getUint8() {\n    const value = this.dv.getUint8(this.offset)\n    this.offset += 1\n    return value\n  }\n\n  getInt16() {\n    const value = this.dv.getInt16(this.offset, this.littleEndian)\n    this.offset += 2\n    return value\n  }\n\n  getInt32() {\n    const value = this.dv.getInt32(this.offset, this.littleEndian)\n    this.offset += 4\n    return value\n  }\n\n  getInt32Array(size) {\n    const a = []\n\n    for (let i = 0; i < size; i++) {\n      a.push(this.getInt32())\n    }\n\n    return a\n  }\n\n  getUint32() {\n    const value = this.dv.getUint32(this.offset, this.littleEndian)\n    this.offset += 4\n    return value\n  }\n\n  // JavaScript doesn't support 64-bit integer so calculate this here\n  // 1 << 32 will return 1 so using multiply operation instead here.\n  // There's a possibility that this method returns wrong value if the value\n  // is out of the range between Number.MAX_SAFE_INTEGER and Number.MIN_SAFE_INTEGER.\n  // TODO: safely handle 64-bit integer\n  getInt64() {\n    let low, high\n\n    if (this.littleEndian) {\n      low = this.getUint32()\n      high = this.getUint32()\n    } else {\n      high = this.getUint32()\n      low = this.getUint32()\n    }\n\n    // calculate negative value\n    if (high & 0x80000000) {\n      high = ~high & 0xffffffff\n      low = ~low & 0xffffffff\n\n      if (low === 0xffffffff) high = (high + 1) & 0xffffffff\n\n      low = (low + 1) & 0xffffffff\n\n      return -(high * 0x100000000 + low)\n    }\n\n    return high * 0x100000000 + low\n  }\n\n  getInt64Array(size) {\n    const a = []\n\n    for (let i = 0; i < size; i++) {\n      a.push(this.getInt64())\n    }\n\n    return a\n  }\n\n  // Note: see getInt64() comment\n  getUint64() {\n    let low, high\n\n    if (this.littleEndian) {\n      low = this.getUint32()\n      high = this.getUint32()\n    } else {\n      high = this.getUint32()\n      low = this.getUint32()\n    }\n\n    return high * 0x100000000 + low\n  }\n\n  getFloat32() {\n    const value = this.dv.getFloat32(this.offset, this.littleEndian)\n    this.offset += 4\n    return value\n  }\n\n  getFloat32Array(size) {\n    const a = []\n\n    for (let i = 0; i < size; i++) {\n      a.push(this.getFloat32())\n    }\n\n    return a\n  }\n\n  getFloat64() {\n    const value = this.dv.getFloat64(this.offset, this.littleEndian)\n    this.offset += 8\n    return value\n  }\n\n  getFloat64Array(size) {\n    const a = []\n\n    for (let i = 0; i < size; i++) {\n      a.push(this.getFloat64())\n    }\n\n    return a\n  }\n\n  getArrayBuffer(size) {\n    const value = this.dv.buffer.slice(this.offset, this.offset + size)\n    this.offset += size\n    return value\n  }\n\n  getString(size) {\n    // note: safari 9 doesn't support Uint8Array.indexOf; create intermediate array instead\n    let a = []\n\n    for (let i = 0; i < size; i++) {\n      a[i] = this.getUint8()\n    }\n\n    const nullByte = a.indexOf(0)\n    if (nullByte >= 0) a = a.slice(0, nullByte)\n\n    return decodeText(new Uint8Array(a))\n  }\n}\n\n// FBXTree holds a representation of the FBX data, returned by the TextParser ( FBX ASCII format)\n// and BinaryParser( FBX Binary format)\nclass FBXTree {\n  add(key, val) {\n    this[key] = val\n  }\n}\n\n// ************** UTILITY FUNCTIONS **************\n\nfunction isFbxFormatBinary(buffer) {\n  const CORRECT = 'Kaydara\\u0020FBX\\u0020Binary\\u0020\\u0020\\0'\n\n  return buffer.byteLength >= CORRECT.length && CORRECT === convertArrayBufferToString(buffer, 0, CORRECT.length)\n}\n\nfunction isFbxFormatASCII(text) {\n  const CORRECT = [\n    'K',\n    'a',\n    'y',\n    'd',\n    'a',\n    'r',\n    'a',\n    '\\\\',\n    'F',\n    'B',\n    'X',\n    '\\\\',\n    'B',\n    'i',\n    'n',\n    'a',\n    'r',\n    'y',\n    '\\\\',\n    '\\\\',\n  ]\n\n  let cursor = 0\n\n  function read(offset) {\n    const result = text[offset - 1]\n    text = text.slice(cursor + offset)\n    cursor++\n    return result\n  }\n\n  for (let i = 0; i < CORRECT.length; ++i) {\n    const num = read(1)\n    if (num === CORRECT[i]) {\n      return false\n    }\n  }\n\n  return true\n}\n\nfunction getFbxVersion(text) {\n  const versionRegExp = /FBXVersion: (\\d+)/\n  const match = text.match(versionRegExp)\n\n  if (match) {\n    const version = parseInt(match[1])\n    return version\n  }\n\n  throw new Error('THREE.FBXLoader: Cannot find the version number for the file given.')\n}\n\n// Converts FBX ticks into real time seconds.\nfunction convertFBXTimeToSeconds(time) {\n  return time / 46186158000\n}\n\nconst dataArray = []\n\n// extracts the data from the correct position in the FBX array based on indexing type\nfunction getData(polygonVertexIndex, polygonIndex, vertexIndex, infoObject) {\n  let index\n\n  switch (infoObject.mappingType) {\n    case 'ByPolygonVertex':\n      index = polygonVertexIndex\n      break\n    case 'ByPolygon':\n      index = polygonIndex\n      break\n    case 'ByVertice':\n      index = vertexIndex\n      break\n    case 'AllSame':\n      index = infoObject.indices[0]\n      break\n    default:\n      console.warn('THREE.FBXLoader: unknown attribute mapping type ' + infoObject.mappingType)\n  }\n\n  if (infoObject.referenceType === 'IndexToDirect') index = infoObject.indices[index]\n\n  const from = index * infoObject.dataSize\n  const to = from + infoObject.dataSize\n\n  return slice(dataArray, infoObject.buffer, from, to)\n}\n\nconst tempEuler = new Euler()\nconst tempVec = new Vector3()\n\n// generate transformation from FBX transform data\n// ref: https://help.autodesk.com/view/FBX/2017/ENU/?guid=__files_GUID_10CDD63C_79C1_4F2D_BB28_AD2BE65A02ED_htm\n// ref: http://docs.autodesk.com/FBX/2014/ENU/FBX-SDK-Documentation/index.html?url=cpp_ref/_transformations_2main_8cxx-example.html,topicNumber=cpp_ref__transformations_2main_8cxx_example_htmlfc10a1e1-b18d-4e72-9dc0-70d0f1959f5e\nfunction generateTransform(transformData) {\n  const lTranslationM = new Matrix4()\n  const lPreRotationM = new Matrix4()\n  const lRotationM = new Matrix4()\n  const lPostRotationM = new Matrix4()\n\n  const lScalingM = new Matrix4()\n  const lScalingPivotM = new Matrix4()\n  const lScalingOffsetM = new Matrix4()\n  const lRotationOffsetM = new Matrix4()\n  const lRotationPivotM = new Matrix4()\n\n  const lParentGX = new Matrix4()\n  const lParentLX = new Matrix4()\n  const lGlobalT = new Matrix4()\n\n  const inheritType = transformData.inheritType ? transformData.inheritType : 0\n\n  if (transformData.translation) lTranslationM.setPosition(tempVec.fromArray(transformData.translation))\n\n  if (transformData.preRotation) {\n    const array = transformData.preRotation.map(MathUtils.degToRad)\n    array.push(transformData.eulerOrder)\n    lPreRotationM.makeRotationFromEuler(tempEuler.fromArray(array))\n  }\n\n  if (transformData.rotation) {\n    const array = transformData.rotation.map(MathUtils.degToRad)\n    array.push(transformData.eulerOrder)\n    lRotationM.makeRotationFromEuler(tempEuler.fromArray(array))\n  }\n\n  if (transformData.postRotation) {\n    const array = transformData.postRotation.map(MathUtils.degToRad)\n    array.push(transformData.eulerOrder)\n    lPostRotationM.makeRotationFromEuler(tempEuler.fromArray(array))\n    lPostRotationM.invert()\n  }\n\n  if (transformData.scale) lScalingM.scale(tempVec.fromArray(transformData.scale))\n\n  // Pivots and offsets\n  if (transformData.scalingOffset) lScalingOffsetM.setPosition(tempVec.fromArray(transformData.scalingOffset))\n  if (transformData.scalingPivot) lScalingPivotM.setPosition(tempVec.fromArray(transformData.scalingPivot))\n  if (transformData.rotationOffset) lRotationOffsetM.setPosition(tempVec.fromArray(transformData.rotationOffset))\n  if (transformData.rotationPivot) lRotationPivotM.setPosition(tempVec.fromArray(transformData.rotationPivot))\n\n  // parent transform\n  if (transformData.parentMatrixWorld) {\n    lParentLX.copy(transformData.parentMatrix)\n    lParentGX.copy(transformData.parentMatrixWorld)\n  }\n\n  const lLRM = lPreRotationM.clone().multiply(lRotationM).multiply(lPostRotationM)\n  // Global Rotation\n  const lParentGRM = new Matrix4()\n  lParentGRM.extractRotation(lParentGX)\n\n  // Global Shear*Scaling\n  const lParentTM = new Matrix4()\n  lParentTM.copyPosition(lParentGX)\n\n  const lParentGRSM = lParentTM.clone().invert().multiply(lParentGX)\n  const lParentGSM = lParentGRM.clone().invert().multiply(lParentGRSM)\n  const lLSM = lScalingM\n\n  const lGlobalRS = new Matrix4()\n\n  if (inheritType === 0) {\n    lGlobalRS.copy(lParentGRM).multiply(lLRM).multiply(lParentGSM).multiply(lLSM)\n  } else if (inheritType === 1) {\n    lGlobalRS.copy(lParentGRM).multiply(lParentGSM).multiply(lLRM).multiply(lLSM)\n  } else {\n    const lParentLSM = new Matrix4().scale(new Vector3().setFromMatrixScale(lParentLX))\n    const lParentLSM_inv = lParentLSM.clone().invert()\n    const lParentGSM_noLocal = lParentGSM.clone().multiply(lParentLSM_inv)\n\n    lGlobalRS.copy(lParentGRM).multiply(lLRM).multiply(lParentGSM_noLocal).multiply(lLSM)\n  }\n\n  const lRotationPivotM_inv = lRotationPivotM.clone().invert()\n  const lScalingPivotM_inv = lScalingPivotM.clone().invert()\n  // Calculate the local transform matrix\n  let lTransform = lTranslationM\n    .clone()\n    .multiply(lRotationOffsetM)\n    .multiply(lRotationPivotM)\n    .multiply(lPreRotationM)\n    .multiply(lRotationM)\n    .multiply(lPostRotationM)\n    .multiply(lRotationPivotM_inv)\n    .multiply(lScalingOffsetM)\n    .multiply(lScalingPivotM)\n    .multiply(lScalingM)\n    .multiply(lScalingPivotM_inv)\n\n  const lLocalTWithAllPivotAndOffsetInfo = new Matrix4().copyPosition(lTransform)\n\n  const lGlobalTranslation = lParentGX.clone().multiply(lLocalTWithAllPivotAndOffsetInfo)\n  lGlobalT.copyPosition(lGlobalTranslation)\n\n  lTransform = lGlobalT.clone().multiply(lGlobalRS)\n\n  // from global to local\n  lTransform.premultiply(lParentGX.invert())\n\n  return lTransform\n}\n\n// Returns the three.js intrinsic Euler order corresponding to FBX extrinsic Euler order\n// ref: http://help.autodesk.com/view/FBX/2017/ENU/?guid=__cpp_ref_class_fbx_euler_html\nfunction getEulerOrder(order) {\n  order = order || 0\n\n  const enums = [\n    'ZYX', // -> XYZ extrinsic\n    'YZX', // -> XZY extrinsic\n    'XZY', // -> YZX extrinsic\n    'ZXY', // -> YXZ extrinsic\n    'YXZ', // -> ZXY extrinsic\n    'XYZ', // -> ZYX extrinsic\n    //'SphericXYZ', // not possible to support\n  ]\n\n  if (order === 6) {\n    console.warn('THREE.FBXLoader: unsupported Euler Order: Spherical XYZ. Animations and rotations may be incorrect.')\n    return enums[0]\n  }\n\n  return enums[order]\n}\n\n// Parses comma separated list of numbers and returns them an array.\n// Used internally by the TextParser\nfunction parseNumberArray(value) {\n  const array = value.split(',').map(function (val) {\n    return parseFloat(val)\n  })\n\n  return array\n}\n\nfunction convertArrayBufferToString(buffer, from, to) {\n  if (from === undefined) from = 0\n  if (to === undefined) to = buffer.byteLength\n\n  return decodeText(new Uint8Array(buffer, from, to))\n}\n\nfunction append(a, b) {\n  for (let i = 0, j = a.length, l = b.length; i < l; i++, j++) {\n    a[j] = b[i]\n  }\n}\n\nfunction slice(a, b, from, to) {\n  for (let i = from, j = 0; i < to; i++, j++) {\n    a[j] = b[i]\n  }\n\n  return a\n}\n\n// inject array a2 into array a1 at index\nfunction inject(a1, index, a2) {\n  return a1.slice(0, index).concat(a2).concat(a1.slice(index))\n}\n\nexport { FBXLoader }\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}