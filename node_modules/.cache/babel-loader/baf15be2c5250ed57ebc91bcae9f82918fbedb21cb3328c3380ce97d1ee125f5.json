{"ast":null,"code":"import _classCallCheck from \"C:/Users/Nayyu/Desktop/skibidai-public-build/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Nayyu/Desktop/skibidai-public-build/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"C:/Users/Nayyu/Desktop/skibidai-public-build/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/Nayyu/Desktop/skibidai-public-build/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nvar __defProp = Object.defineProperty;\nvar __defNormalProp = function __defNormalProp(obj, key, value) {\n  return key in obj ? __defProp(obj, key, {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: value\n  }) : obj[key] = value;\n};\nvar __publicField = function __publicField(obj, key, value) {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nimport { Color, Vector2, WebGLRenderTarget, HalfFloatType, NearestFilter, DepthTexture, UnsignedShortType, MeshDepthMaterial, RGBADepthPacking, NoBlending, MeshNormalMaterial, ShaderMaterial, UniformsUtils, CustomBlending, DstColorFactor, ZeroFactor, AddEquation, DstAlphaFactor } from \"three\";\nimport { Pass, FullScreenQuad } from \"./Pass.js\";\nimport { SAOShader } from \"../shaders/SAOShader.js\";\nimport { DepthLimitedBlurShader, BlurShaderUtils } from \"../shaders/DepthLimitedBlurShader.js\";\nimport { CopyShader } from \"../shaders/CopyShader.js\";\nimport { UnpackDepthRGBAShader } from \"../shaders/UnpackDepthRGBAShader.js\";\nvar SAOPass = /*#__PURE__*/function (_Pass) {\n  _inherits(SAOPass, _Pass);\n  var _super = _createSuper(SAOPass);\n  function SAOPass(scene, camera) {\n    var _this;\n    var useDepthTexture = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    var useNormals = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n    var resolution = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : new Vector2(256, 256);\n    _classCallCheck(this, SAOPass);\n    _this = _super.call(this);\n    _this.scene = scene;\n    _this.camera = camera;\n    _this.clear = true;\n    _this.needsSwap = false;\n    _this.supportsDepthTextureExtension = useDepthTexture;\n    _this.supportsNormalTexture = useNormals;\n    _this.originalClearColor = new Color();\n    _this._oldClearColor = new Color();\n    _this.oldClearAlpha = 1;\n    _this.params = {\n      output: 0,\n      saoBias: 0.5,\n      saoIntensity: 0.18,\n      saoScale: 1,\n      saoKernelRadius: 100,\n      saoMinResolution: 0,\n      saoBlur: true,\n      saoBlurRadius: 8,\n      saoBlurStdDev: 4,\n      saoBlurDepthCutoff: 0.01\n    };\n    _this.resolution = new Vector2(resolution.x, resolution.y);\n    _this.saoRenderTarget = new WebGLRenderTarget(_this.resolution.x, _this.resolution.y, {\n      type: HalfFloatType\n    });\n    _this.blurIntermediateRenderTarget = _this.saoRenderTarget.clone();\n    _this.beautyRenderTarget = _this.saoRenderTarget.clone();\n    _this.normalRenderTarget = new WebGLRenderTarget(_this.resolution.x, _this.resolution.y, {\n      minFilter: NearestFilter,\n      magFilter: NearestFilter,\n      type: HalfFloatType\n    });\n    _this.depthRenderTarget = _this.normalRenderTarget.clone();\n    var depthTexture;\n    if (_this.supportsDepthTextureExtension) {\n      depthTexture = new DepthTexture();\n      depthTexture.type = UnsignedShortType;\n      _this.beautyRenderTarget.depthTexture = depthTexture;\n      _this.beautyRenderTarget.depthBuffer = true;\n    }\n    _this.depthMaterial = new MeshDepthMaterial();\n    _this.depthMaterial.depthPacking = RGBADepthPacking;\n    _this.depthMaterial.blending = NoBlending;\n    _this.normalMaterial = new MeshNormalMaterial();\n    _this.normalMaterial.blending = NoBlending;\n    _this.saoMaterial = new ShaderMaterial({\n      defines: Object.assign({}, SAOShader.defines),\n      fragmentShader: SAOShader.fragmentShader,\n      vertexShader: SAOShader.vertexShader,\n      uniforms: UniformsUtils.clone(SAOShader.uniforms)\n    });\n    _this.saoMaterial.extensions.derivatives = true;\n    _this.saoMaterial.defines[\"DEPTH_PACKING\"] = _this.supportsDepthTextureExtension ? 0 : 1;\n    _this.saoMaterial.defines[\"NORMAL_TEXTURE\"] = _this.supportsNormalTexture ? 1 : 0;\n    _this.saoMaterial.defines[\"PERSPECTIVE_CAMERA\"] = _this.camera.isPerspectiveCamera ? 1 : 0;\n    _this.saoMaterial.uniforms[\"tDepth\"].value = _this.supportsDepthTextureExtension ? depthTexture : _this.depthRenderTarget.texture;\n    _this.saoMaterial.uniforms[\"tNormal\"].value = _this.normalRenderTarget.texture;\n    _this.saoMaterial.uniforms[\"size\"].value.set(_this.resolution.x, _this.resolution.y);\n    _this.saoMaterial.uniforms[\"cameraInverseProjectionMatrix\"].value.copy(_this.camera.projectionMatrixInverse);\n    _this.saoMaterial.uniforms[\"cameraProjectionMatrix\"].value = _this.camera.projectionMatrix;\n    _this.saoMaterial.blending = NoBlending;\n    _this.vBlurMaterial = new ShaderMaterial({\n      uniforms: UniformsUtils.clone(DepthLimitedBlurShader.uniforms),\n      defines: Object.assign({}, DepthLimitedBlurShader.defines),\n      vertexShader: DepthLimitedBlurShader.vertexShader,\n      fragmentShader: DepthLimitedBlurShader.fragmentShader\n    });\n    _this.vBlurMaterial.defines[\"DEPTH_PACKING\"] = _this.supportsDepthTextureExtension ? 0 : 1;\n    _this.vBlurMaterial.defines[\"PERSPECTIVE_CAMERA\"] = _this.camera.isPerspectiveCamera ? 1 : 0;\n    _this.vBlurMaterial.uniforms[\"tDiffuse\"].value = _this.saoRenderTarget.texture;\n    _this.vBlurMaterial.uniforms[\"tDepth\"].value = _this.supportsDepthTextureExtension ? depthTexture : _this.depthRenderTarget.texture;\n    _this.vBlurMaterial.uniforms[\"size\"].value.set(_this.resolution.x, _this.resolution.y);\n    _this.vBlurMaterial.blending = NoBlending;\n    _this.hBlurMaterial = new ShaderMaterial({\n      uniforms: UniformsUtils.clone(DepthLimitedBlurShader.uniforms),\n      defines: Object.assign({}, DepthLimitedBlurShader.defines),\n      vertexShader: DepthLimitedBlurShader.vertexShader,\n      fragmentShader: DepthLimitedBlurShader.fragmentShader\n    });\n    _this.hBlurMaterial.defines[\"DEPTH_PACKING\"] = _this.supportsDepthTextureExtension ? 0 : 1;\n    _this.hBlurMaterial.defines[\"PERSPECTIVE_CAMERA\"] = _this.camera.isPerspectiveCamera ? 1 : 0;\n    _this.hBlurMaterial.uniforms[\"tDiffuse\"].value = _this.blurIntermediateRenderTarget.texture;\n    _this.hBlurMaterial.uniforms[\"tDepth\"].value = _this.supportsDepthTextureExtension ? depthTexture : _this.depthRenderTarget.texture;\n    _this.hBlurMaterial.uniforms[\"size\"].value.set(_this.resolution.x, _this.resolution.y);\n    _this.hBlurMaterial.blending = NoBlending;\n    _this.materialCopy = new ShaderMaterial({\n      uniforms: UniformsUtils.clone(CopyShader.uniforms),\n      vertexShader: CopyShader.vertexShader,\n      fragmentShader: CopyShader.fragmentShader,\n      blending: NoBlending\n    });\n    _this.materialCopy.transparent = true;\n    _this.materialCopy.depthTest = false;\n    _this.materialCopy.depthWrite = false;\n    _this.materialCopy.blending = CustomBlending;\n    _this.materialCopy.blendSrc = DstColorFactor;\n    _this.materialCopy.blendDst = ZeroFactor;\n    _this.materialCopy.blendEquation = AddEquation;\n    _this.materialCopy.blendSrcAlpha = DstAlphaFactor;\n    _this.materialCopy.blendDstAlpha = ZeroFactor;\n    _this.materialCopy.blendEquationAlpha = AddEquation;\n    _this.depthCopy = new ShaderMaterial({\n      uniforms: UniformsUtils.clone(UnpackDepthRGBAShader.uniforms),\n      vertexShader: UnpackDepthRGBAShader.vertexShader,\n      fragmentShader: UnpackDepthRGBAShader.fragmentShader,\n      blending: NoBlending\n    });\n    _this.fsQuad = new FullScreenQuad(null);\n    return _this;\n  }\n  _createClass(SAOPass, [{\n    key: \"render\",\n    value: function render(renderer, writeBuffer, readBuffer) {\n      if (this.renderToScreen) {\n        this.materialCopy.blending = NoBlending;\n        this.materialCopy.uniforms[\"tDiffuse\"].value = readBuffer.texture;\n        this.materialCopy.needsUpdate = true;\n        this.renderPass(renderer, this.materialCopy, null);\n      }\n      if (this.params.output === 1) {\n        return;\n      }\n      renderer.getClearColor(this._oldClearColor);\n      this.oldClearAlpha = renderer.getClearAlpha();\n      var oldAutoClear = renderer.autoClear;\n      renderer.autoClear = false;\n      renderer.setRenderTarget(this.depthRenderTarget);\n      renderer.clear();\n      this.saoMaterial.uniforms[\"bias\"].value = this.params.saoBias;\n      this.saoMaterial.uniforms[\"intensity\"].value = this.params.saoIntensity;\n      this.saoMaterial.uniforms[\"scale\"].value = this.params.saoScale;\n      this.saoMaterial.uniforms[\"kernelRadius\"].value = this.params.saoKernelRadius;\n      this.saoMaterial.uniforms[\"minResolution\"].value = this.params.saoMinResolution;\n      this.saoMaterial.uniforms[\"cameraNear\"].value = this.camera.near;\n      this.saoMaterial.uniforms[\"cameraFar\"].value = this.camera.far;\n      var depthCutoff = this.params.saoBlurDepthCutoff * (this.camera.far - this.camera.near);\n      this.vBlurMaterial.uniforms[\"depthCutoff\"].value = depthCutoff;\n      this.hBlurMaterial.uniforms[\"depthCutoff\"].value = depthCutoff;\n      this.vBlurMaterial.uniforms[\"cameraNear\"].value = this.camera.near;\n      this.vBlurMaterial.uniforms[\"cameraFar\"].value = this.camera.far;\n      this.hBlurMaterial.uniforms[\"cameraNear\"].value = this.camera.near;\n      this.hBlurMaterial.uniforms[\"cameraFar\"].value = this.camera.far;\n      this.params.saoBlurRadius = Math.floor(this.params.saoBlurRadius);\n      if (this.prevStdDev !== this.params.saoBlurStdDev || this.prevNumSamples !== this.params.saoBlurRadius) {\n        BlurShaderUtils.configure(this.vBlurMaterial, this.params.saoBlurRadius, this.params.saoBlurStdDev, new Vector2(0, 1));\n        BlurShaderUtils.configure(this.hBlurMaterial, this.params.saoBlurRadius, this.params.saoBlurStdDev, new Vector2(1, 0));\n        this.prevStdDev = this.params.saoBlurStdDev;\n        this.prevNumSamples = this.params.saoBlurRadius;\n      }\n      renderer.setClearColor(0);\n      renderer.setRenderTarget(this.beautyRenderTarget);\n      renderer.clear();\n      renderer.render(this.scene, this.camera);\n      if (!this.supportsDepthTextureExtension) {\n        this.renderOverride(renderer, this.depthMaterial, this.depthRenderTarget, 0, 1);\n      }\n      if (this.supportsNormalTexture) {\n        this.renderOverride(renderer, this.normalMaterial, this.normalRenderTarget, 7829503, 1);\n      }\n      this.renderPass(renderer, this.saoMaterial, this.saoRenderTarget, 16777215, 1);\n      if (this.params.saoBlur) {\n        this.renderPass(renderer, this.vBlurMaterial, this.blurIntermediateRenderTarget, 16777215, 1);\n        this.renderPass(renderer, this.hBlurMaterial, this.saoRenderTarget, 16777215, 1);\n      }\n      var outputMaterial = this.materialCopy;\n      if (this.params.output === 3) {\n        if (this.supportsDepthTextureExtension) {\n          this.materialCopy.uniforms[\"tDiffuse\"].value = this.beautyRenderTarget.depthTexture;\n          this.materialCopy.needsUpdate = true;\n        } else {\n          this.depthCopy.uniforms[\"tDiffuse\"].value = this.depthRenderTarget.texture;\n          this.depthCopy.needsUpdate = true;\n          outputMaterial = this.depthCopy;\n        }\n      } else if (this.params.output === 4) {\n        this.materialCopy.uniforms[\"tDiffuse\"].value = this.normalRenderTarget.texture;\n        this.materialCopy.needsUpdate = true;\n      } else {\n        this.materialCopy.uniforms[\"tDiffuse\"].value = this.saoRenderTarget.texture;\n        this.materialCopy.needsUpdate = true;\n      }\n      if (this.params.output === 0) {\n        outputMaterial.blending = CustomBlending;\n      } else {\n        outputMaterial.blending = NoBlending;\n      }\n      this.renderPass(renderer, outputMaterial, this.renderToScreen ? null : readBuffer);\n      renderer.setClearColor(this._oldClearColor, this.oldClearAlpha);\n      renderer.autoClear = oldAutoClear;\n    }\n  }, {\n    key: \"renderPass\",\n    value: function renderPass(renderer, passMaterial, renderTarget, clearColor, clearAlpha) {\n      renderer.getClearColor(this.originalClearColor);\n      var originalClearAlpha = renderer.getClearAlpha();\n      var originalAutoClear = renderer.autoClear;\n      renderer.setRenderTarget(renderTarget);\n      renderer.autoClear = false;\n      if (clearColor !== void 0 && clearColor !== null) {\n        renderer.setClearColor(clearColor);\n        renderer.setClearAlpha(clearAlpha || 0);\n        renderer.clear();\n      }\n      this.fsQuad.material = passMaterial;\n      this.fsQuad.render(renderer);\n      renderer.autoClear = originalAutoClear;\n      renderer.setClearColor(this.originalClearColor);\n      renderer.setClearAlpha(originalClearAlpha);\n    }\n  }, {\n    key: \"renderOverride\",\n    value: function renderOverride(renderer, overrideMaterial, renderTarget, clearColor, clearAlpha) {\n      renderer.getClearColor(this.originalClearColor);\n      var originalClearAlpha = renderer.getClearAlpha();\n      var originalAutoClear = renderer.autoClear;\n      renderer.setRenderTarget(renderTarget);\n      renderer.autoClear = false;\n      clearColor = overrideMaterial.clearColor || clearColor;\n      clearAlpha = overrideMaterial.clearAlpha || clearAlpha;\n      if (clearColor !== void 0 && clearColor !== null) {\n        renderer.setClearColor(clearColor);\n        renderer.setClearAlpha(clearAlpha || 0);\n        renderer.clear();\n      }\n      this.scene.overrideMaterial = overrideMaterial;\n      renderer.render(this.scene, this.camera);\n      this.scene.overrideMaterial = null;\n      renderer.autoClear = originalAutoClear;\n      renderer.setClearColor(this.originalClearColor);\n      renderer.setClearAlpha(originalClearAlpha);\n    }\n  }, {\n    key: \"setSize\",\n    value: function setSize(width, height) {\n      this.beautyRenderTarget.setSize(width, height);\n      this.saoRenderTarget.setSize(width, height);\n      this.blurIntermediateRenderTarget.setSize(width, height);\n      this.normalRenderTarget.setSize(width, height);\n      this.depthRenderTarget.setSize(width, height);\n      this.saoMaterial.uniforms[\"size\"].value.set(width, height);\n      this.saoMaterial.uniforms[\"cameraInverseProjectionMatrix\"].value.copy(this.camera.projectionMatrixInverse);\n      this.saoMaterial.uniforms[\"cameraProjectionMatrix\"].value = this.camera.projectionMatrix;\n      this.saoMaterial.needsUpdate = true;\n      this.vBlurMaterial.uniforms[\"size\"].value.set(width, height);\n      this.vBlurMaterial.needsUpdate = true;\n      this.hBlurMaterial.uniforms[\"size\"].value.set(width, height);\n      this.hBlurMaterial.needsUpdate = true;\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      this.saoRenderTarget.dispose();\n      this.blurIntermediateRenderTarget.dispose();\n      this.beautyRenderTarget.dispose();\n      this.normalRenderTarget.dispose();\n      this.depthRenderTarget.dispose();\n      this.depthMaterial.dispose();\n      this.normalMaterial.dispose();\n      this.saoMaterial.dispose();\n      this.vBlurMaterial.dispose();\n      this.hBlurMaterial.dispose();\n      this.materialCopy.dispose();\n      this.depthCopy.dispose();\n      this.fsQuad.dispose();\n    }\n  }]);\n  return SAOPass;\n}(Pass);\n__publicField(SAOPass, \"OUTPUT\", {\n  Beauty: 1,\n  Default: 0,\n  SAO: 2,\n  Depth: 3,\n  Normal: 4\n});\nexport { SAOPass };","map":{"version":3,"names":["SAOPass","_Pass","_inherits","_super","_createSuper","scene","camera","_this","useDepthTexture","arguments","length","undefined","useNormals","resolution","Vector2","_classCallCheck","call","clear","needsSwap","supportsDepthTextureExtension","supportsNormalTexture","originalClearColor","Color","_oldClearColor","oldClearAlpha","params","output","saoBias","saoIntensity","saoScale","saoKernelRadius","saoMinResolution","saoBlur","saoBlurRadius","saoBlurStdDev","saoBlurDepthCutoff","x","y","saoRenderTarget","WebGLRenderTarget","type","HalfFloatType","blurIntermediateRenderTarget","clone","beautyRenderTarget","normalRenderTarget","minFilter","NearestFilter","magFilter","depthRenderTarget","depthTexture","DepthTexture","UnsignedShortType","depthBuffer","depthMaterial","MeshDepthMaterial","depthPacking","RGBADepthPacking","blending","NoBlending","normalMaterial","MeshNormalMaterial","saoMaterial","ShaderMaterial","defines","Object","assign","SAOShader","fragmentShader","vertexShader","uniforms","UniformsUtils","extensions","derivatives","isPerspectiveCamera","value","texture","set","copy","projectionMatrixInverse","projectionMatrix","vBlurMaterial","DepthLimitedBlurShader","hBlurMaterial","materialCopy","CopyShader","transparent","depthTest","depthWrite","CustomBlending","blendSrc","DstColorFactor","blendDst","ZeroFactor","blendEquation","AddEquation","blendSrcAlpha","DstAlphaFactor","blendDstAlpha","blendEquationAlpha","depthCopy","UnpackDepthRGBAShader","fsQuad","FullScreenQuad","_createClass","key","render","renderer","writeBuffer","readBuffer","renderToScreen","needsUpdate","renderPass","getClearColor","getClearAlpha","oldAutoClear","autoClear","setRenderTarget","near","far","depthCutoff","Math","floor","prevStdDev","prevNumSamples","BlurShaderUtils","configure","setClearColor","renderOverride","outputMaterial","passMaterial","renderTarget","clearColor","clearAlpha","originalClearAlpha","originalAutoClear","setClearAlpha","material","overrideMaterial","setSize","width","height","dispose","Pass","__publicField","Beauty","Default","SAO","Depth","Normal"],"sources":["C:\\Users\\Nayyu\\Desktop\\skibidai-public-build\\node_modules\\src\\postprocessing\\SAOPass.js"],"sourcesContent":["import {\n  AddEquation,\n  Color,\n  CustomBlending,\n  DepthTexture,\n  DstAlphaFactor,\n  DstColorFactor,\n  HalfFloatType,\n  MeshDepthMaterial,\n  MeshNormalMaterial,\n  NearestFilter,\n  NoBlending,\n  RGBADepthPacking,\n  ShaderMaterial,\n  UniformsUtils,\n  UnsignedShortType,\n  Vector2,\n  WebGLRenderTarget,\n  ZeroFactor,\n} from 'three'\nimport { Pass, FullScreenQuad } from './Pass'\nimport { SAOShader } from '../shaders/SAOShader'\nimport { DepthLimitedBlurShader } from '../shaders/DepthLimitedBlurShader'\nimport { BlurShaderUtils } from '../shaders/DepthLimitedBlurShader'\nimport { CopyShader } from '../shaders/CopyShader'\nimport { UnpackDepthRGBAShader } from '../shaders/UnpackDepthRGBAShader'\n\n/**\n * SAO implementation inspired from bhouston previous SAO work\n */\nclass SAOPass extends Pass {\n  static OUTPUT = {\n    Beauty: 1,\n    Default: 0,\n    SAO: 2,\n    Depth: 3,\n    Normal: 4,\n  }\n\n  constructor(scene, camera, useDepthTexture = false, useNormals = false, resolution = new Vector2(256, 256)) {\n    super()\n\n    this.scene = scene\n    this.camera = camera\n\n    this.clear = true\n    this.needsSwap = false\n\n    this.supportsDepthTextureExtension = useDepthTexture\n    this.supportsNormalTexture = useNormals\n\n    this.originalClearColor = new Color()\n    this._oldClearColor = new Color()\n    this.oldClearAlpha = 1\n\n    this.params = {\n      output: 0,\n      saoBias: 0.5,\n      saoIntensity: 0.18,\n      saoScale: 1,\n      saoKernelRadius: 100,\n      saoMinResolution: 0,\n      saoBlur: true,\n      saoBlurRadius: 8,\n      saoBlurStdDev: 4,\n      saoBlurDepthCutoff: 0.01,\n    }\n\n    this.resolution = new Vector2(resolution.x, resolution.y)\n\n    this.saoRenderTarget = new WebGLRenderTarget(this.resolution.x, this.resolution.y, { type: HalfFloatType })\n    this.blurIntermediateRenderTarget = this.saoRenderTarget.clone()\n    this.beautyRenderTarget = this.saoRenderTarget.clone()\n\n    this.normalRenderTarget = new WebGLRenderTarget(this.resolution.x, this.resolution.y, {\n      minFilter: NearestFilter,\n      magFilter: NearestFilter,\n      type: HalfFloatType,\n    })\n    this.depthRenderTarget = this.normalRenderTarget.clone()\n\n    let depthTexture\n\n    if (this.supportsDepthTextureExtension) {\n      depthTexture = new DepthTexture()\n      depthTexture.type = UnsignedShortType\n\n      this.beautyRenderTarget.depthTexture = depthTexture\n      this.beautyRenderTarget.depthBuffer = true\n    }\n\n    this.depthMaterial = new MeshDepthMaterial()\n    this.depthMaterial.depthPacking = RGBADepthPacking\n    this.depthMaterial.blending = NoBlending\n\n    this.normalMaterial = new MeshNormalMaterial()\n    this.normalMaterial.blending = NoBlending\n\n    this.saoMaterial = new ShaderMaterial({\n      defines: Object.assign({}, SAOShader.defines),\n      fragmentShader: SAOShader.fragmentShader,\n      vertexShader: SAOShader.vertexShader,\n      uniforms: UniformsUtils.clone(SAOShader.uniforms),\n    })\n    this.saoMaterial.extensions.derivatives = true\n    this.saoMaterial.defines['DEPTH_PACKING'] = this.supportsDepthTextureExtension ? 0 : 1\n    this.saoMaterial.defines['NORMAL_TEXTURE'] = this.supportsNormalTexture ? 1 : 0\n    this.saoMaterial.defines['PERSPECTIVE_CAMERA'] = this.camera.isPerspectiveCamera ? 1 : 0\n    this.saoMaterial.uniforms['tDepth'].value = this.supportsDepthTextureExtension\n      ? depthTexture\n      : this.depthRenderTarget.texture\n    this.saoMaterial.uniforms['tNormal'].value = this.normalRenderTarget.texture\n    this.saoMaterial.uniforms['size'].value.set(this.resolution.x, this.resolution.y)\n    this.saoMaterial.uniforms['cameraInverseProjectionMatrix'].value.copy(this.camera.projectionMatrixInverse)\n    this.saoMaterial.uniforms['cameraProjectionMatrix'].value = this.camera.projectionMatrix\n    this.saoMaterial.blending = NoBlending\n\n    this.vBlurMaterial = new ShaderMaterial({\n      uniforms: UniformsUtils.clone(DepthLimitedBlurShader.uniforms),\n      defines: Object.assign({}, DepthLimitedBlurShader.defines),\n      vertexShader: DepthLimitedBlurShader.vertexShader,\n      fragmentShader: DepthLimitedBlurShader.fragmentShader,\n    })\n    this.vBlurMaterial.defines['DEPTH_PACKING'] = this.supportsDepthTextureExtension ? 0 : 1\n    this.vBlurMaterial.defines['PERSPECTIVE_CAMERA'] = this.camera.isPerspectiveCamera ? 1 : 0\n    this.vBlurMaterial.uniforms['tDiffuse'].value = this.saoRenderTarget.texture\n    this.vBlurMaterial.uniforms['tDepth'].value = this.supportsDepthTextureExtension\n      ? depthTexture\n      : this.depthRenderTarget.texture\n    this.vBlurMaterial.uniforms['size'].value.set(this.resolution.x, this.resolution.y)\n    this.vBlurMaterial.blending = NoBlending\n\n    this.hBlurMaterial = new ShaderMaterial({\n      uniforms: UniformsUtils.clone(DepthLimitedBlurShader.uniforms),\n      defines: Object.assign({}, DepthLimitedBlurShader.defines),\n      vertexShader: DepthLimitedBlurShader.vertexShader,\n      fragmentShader: DepthLimitedBlurShader.fragmentShader,\n    })\n    this.hBlurMaterial.defines['DEPTH_PACKING'] = this.supportsDepthTextureExtension ? 0 : 1\n    this.hBlurMaterial.defines['PERSPECTIVE_CAMERA'] = this.camera.isPerspectiveCamera ? 1 : 0\n    this.hBlurMaterial.uniforms['tDiffuse'].value = this.blurIntermediateRenderTarget.texture\n    this.hBlurMaterial.uniforms['tDepth'].value = this.supportsDepthTextureExtension\n      ? depthTexture\n      : this.depthRenderTarget.texture\n    this.hBlurMaterial.uniforms['size'].value.set(this.resolution.x, this.resolution.y)\n    this.hBlurMaterial.blending = NoBlending\n\n    this.materialCopy = new ShaderMaterial({\n      uniforms: UniformsUtils.clone(CopyShader.uniforms),\n      vertexShader: CopyShader.vertexShader,\n      fragmentShader: CopyShader.fragmentShader,\n      blending: NoBlending,\n    })\n    this.materialCopy.transparent = true\n    this.materialCopy.depthTest = false\n    this.materialCopy.depthWrite = false\n    this.materialCopy.blending = CustomBlending\n    this.materialCopy.blendSrc = DstColorFactor\n    this.materialCopy.blendDst = ZeroFactor\n    this.materialCopy.blendEquation = AddEquation\n    this.materialCopy.blendSrcAlpha = DstAlphaFactor\n    this.materialCopy.blendDstAlpha = ZeroFactor\n    this.materialCopy.blendEquationAlpha = AddEquation\n\n    this.depthCopy = new ShaderMaterial({\n      uniforms: UniformsUtils.clone(UnpackDepthRGBAShader.uniforms),\n      vertexShader: UnpackDepthRGBAShader.vertexShader,\n      fragmentShader: UnpackDepthRGBAShader.fragmentShader,\n      blending: NoBlending,\n    })\n\n    this.fsQuad = new FullScreenQuad(null)\n  }\n\n  render(renderer, writeBuffer, readBuffer /*, deltaTime, maskActive*/) {\n    // Rendering readBuffer first when rendering to screen\n    if (this.renderToScreen) {\n      this.materialCopy.blending = NoBlending\n      this.materialCopy.uniforms['tDiffuse'].value = readBuffer.texture\n      this.materialCopy.needsUpdate = true\n      this.renderPass(renderer, this.materialCopy, null)\n    }\n\n    if (this.params.output === 1) {\n      return\n    }\n\n    renderer.getClearColor(this._oldClearColor)\n    this.oldClearAlpha = renderer.getClearAlpha()\n    const oldAutoClear = renderer.autoClear\n    renderer.autoClear = false\n\n    renderer.setRenderTarget(this.depthRenderTarget)\n    renderer.clear()\n\n    this.saoMaterial.uniforms['bias'].value = this.params.saoBias\n    this.saoMaterial.uniforms['intensity'].value = this.params.saoIntensity\n    this.saoMaterial.uniforms['scale'].value = this.params.saoScale\n    this.saoMaterial.uniforms['kernelRadius'].value = this.params.saoKernelRadius\n    this.saoMaterial.uniforms['minResolution'].value = this.params.saoMinResolution\n    this.saoMaterial.uniforms['cameraNear'].value = this.camera.near\n    this.saoMaterial.uniforms['cameraFar'].value = this.camera.far\n    // this.saoMaterial.uniforms['randomSeed'].value = Math.random();\n\n    const depthCutoff = this.params.saoBlurDepthCutoff * (this.camera.far - this.camera.near)\n    this.vBlurMaterial.uniforms['depthCutoff'].value = depthCutoff\n    this.hBlurMaterial.uniforms['depthCutoff'].value = depthCutoff\n\n    this.vBlurMaterial.uniforms['cameraNear'].value = this.camera.near\n    this.vBlurMaterial.uniforms['cameraFar'].value = this.camera.far\n    this.hBlurMaterial.uniforms['cameraNear'].value = this.camera.near\n    this.hBlurMaterial.uniforms['cameraFar'].value = this.camera.far\n\n    this.params.saoBlurRadius = Math.floor(this.params.saoBlurRadius)\n    if (this.prevStdDev !== this.params.saoBlurStdDev || this.prevNumSamples !== this.params.saoBlurRadius) {\n      BlurShaderUtils.configure(\n        this.vBlurMaterial,\n        this.params.saoBlurRadius,\n        this.params.saoBlurStdDev,\n        new Vector2(0, 1),\n      )\n      BlurShaderUtils.configure(\n        this.hBlurMaterial,\n        this.params.saoBlurRadius,\n        this.params.saoBlurStdDev,\n        new Vector2(1, 0),\n      )\n      this.prevStdDev = this.params.saoBlurStdDev\n      this.prevNumSamples = this.params.saoBlurRadius\n    }\n\n    // Rendering scene to depth texture\n    renderer.setClearColor(0x000000)\n    renderer.setRenderTarget(this.beautyRenderTarget)\n    renderer.clear()\n    renderer.render(this.scene, this.camera)\n\n    // Re-render scene if depth texture extension is not supported\n    if (!this.supportsDepthTextureExtension) {\n      // Clear rule : far clipping plane in both RGBA and Basic encoding\n      this.renderOverride(renderer, this.depthMaterial, this.depthRenderTarget, 0x000000, 1.0)\n    }\n\n    if (this.supportsNormalTexture) {\n      // Clear rule : default normal is facing the camera\n      this.renderOverride(renderer, this.normalMaterial, this.normalRenderTarget, 0x7777ff, 1.0)\n    }\n\n    // Rendering SAO texture\n    this.renderPass(renderer, this.saoMaterial, this.saoRenderTarget, 0xffffff, 1.0)\n\n    // Blurring SAO texture\n    if (this.params.saoBlur) {\n      this.renderPass(renderer, this.vBlurMaterial, this.blurIntermediateRenderTarget, 0xffffff, 1.0)\n      this.renderPass(renderer, this.hBlurMaterial, this.saoRenderTarget, 0xffffff, 1.0)\n    }\n\n    let outputMaterial = this.materialCopy\n    // Setting up SAO rendering\n    if (this.params.output === 3) {\n      if (this.supportsDepthTextureExtension) {\n        this.materialCopy.uniforms['tDiffuse'].value = this.beautyRenderTarget.depthTexture\n        this.materialCopy.needsUpdate = true\n      } else {\n        this.depthCopy.uniforms['tDiffuse'].value = this.depthRenderTarget.texture\n        this.depthCopy.needsUpdate = true\n        outputMaterial = this.depthCopy\n      }\n    } else if (this.params.output === 4) {\n      this.materialCopy.uniforms['tDiffuse'].value = this.normalRenderTarget.texture\n      this.materialCopy.needsUpdate = true\n    } else {\n      this.materialCopy.uniforms['tDiffuse'].value = this.saoRenderTarget.texture\n      this.materialCopy.needsUpdate = true\n    }\n\n    // Blending depends on output, only want a CustomBlending when showing SAO\n    if (this.params.output === 0) {\n      outputMaterial.blending = CustomBlending\n    } else {\n      outputMaterial.blending = NoBlending\n    }\n\n    // Rendering SAOPass result on top of previous pass\n    this.renderPass(renderer, outputMaterial, this.renderToScreen ? null : readBuffer)\n\n    renderer.setClearColor(this._oldClearColor, this.oldClearAlpha)\n    renderer.autoClear = oldAutoClear\n  }\n\n  renderPass(renderer, passMaterial, renderTarget, clearColor, clearAlpha) {\n    // save original state\n    renderer.getClearColor(this.originalClearColor)\n    const originalClearAlpha = renderer.getClearAlpha()\n    const originalAutoClear = renderer.autoClear\n\n    renderer.setRenderTarget(renderTarget)\n\n    // setup pass state\n    renderer.autoClear = false\n    if (clearColor !== undefined && clearColor !== null) {\n      renderer.setClearColor(clearColor)\n      renderer.setClearAlpha(clearAlpha || 0.0)\n      renderer.clear()\n    }\n\n    this.fsQuad.material = passMaterial\n    this.fsQuad.render(renderer)\n\n    // restore original state\n    renderer.autoClear = originalAutoClear\n    renderer.setClearColor(this.originalClearColor)\n    renderer.setClearAlpha(originalClearAlpha)\n  }\n\n  renderOverride(renderer, overrideMaterial, renderTarget, clearColor, clearAlpha) {\n    renderer.getClearColor(this.originalClearColor)\n    const originalClearAlpha = renderer.getClearAlpha()\n    const originalAutoClear = renderer.autoClear\n\n    renderer.setRenderTarget(renderTarget)\n    renderer.autoClear = false\n\n    clearColor = overrideMaterial.clearColor || clearColor\n    clearAlpha = overrideMaterial.clearAlpha || clearAlpha\n    if (clearColor !== undefined && clearColor !== null) {\n      renderer.setClearColor(clearColor)\n      renderer.setClearAlpha(clearAlpha || 0.0)\n      renderer.clear()\n    }\n\n    this.scene.overrideMaterial = overrideMaterial\n    renderer.render(this.scene, this.camera)\n    this.scene.overrideMaterial = null\n\n    // restore original state\n    renderer.autoClear = originalAutoClear\n    renderer.setClearColor(this.originalClearColor)\n    renderer.setClearAlpha(originalClearAlpha)\n  }\n\n  setSize(width, height) {\n    this.beautyRenderTarget.setSize(width, height)\n    this.saoRenderTarget.setSize(width, height)\n    this.blurIntermediateRenderTarget.setSize(width, height)\n    this.normalRenderTarget.setSize(width, height)\n    this.depthRenderTarget.setSize(width, height)\n\n    this.saoMaterial.uniforms['size'].value.set(width, height)\n    this.saoMaterial.uniforms['cameraInverseProjectionMatrix'].value.copy(this.camera.projectionMatrixInverse)\n    this.saoMaterial.uniforms['cameraProjectionMatrix'].value = this.camera.projectionMatrix\n    this.saoMaterial.needsUpdate = true\n\n    this.vBlurMaterial.uniforms['size'].value.set(width, height)\n    this.vBlurMaterial.needsUpdate = true\n\n    this.hBlurMaterial.uniforms['size'].value.set(width, height)\n    this.hBlurMaterial.needsUpdate = true\n  }\n\n  dispose() {\n    this.saoRenderTarget.dispose()\n    this.blurIntermediateRenderTarget.dispose()\n    this.beautyRenderTarget.dispose()\n    this.normalRenderTarget.dispose()\n    this.depthRenderTarget.dispose()\n\n    this.depthMaterial.dispose()\n    this.normalMaterial.dispose()\n    this.saoMaterial.dispose()\n    this.vBlurMaterial.dispose()\n    this.hBlurMaterial.dispose()\n    this.materialCopy.dispose()\n    this.depthCopy.dispose()\n\n    this.fsQuad.dispose()\n  }\n}\n\nexport { SAOPass }\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}