{"ast":null,"code":"import { useThree, useLoader } from '@react-three/fiber';\nimport { CubeReflectionMapping, EquirectangularReflectionMapping, CubeTextureLoader } from 'three';\nimport { RGBELoader, EXRLoader } from 'three-stdlib';\nimport { HDRJPGLoader, GainMapLoader } from '@monogrid/gainmap-js';\nimport { presetsObj } from '../helpers/environment-assets.js';\nimport { sRGBEncoding, LinearEncoding } from '../helpers/deprecated.js';\nimport { useLayoutEffect } from 'react';\nvar CUBEMAP_ROOT = 'https://raw.githack.com/pmndrs/drei-assets/456060a26bbeb8fdf79326f224b6d99b8bcce736/hdri/';\nvar isArray = function isArray(arr) {\n  return Array.isArray(arr);\n};\nfunction useEnvironment() {\n  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n    _ref$files = _ref.files,\n    files = _ref$files === void 0 ? ['/px.png', '/nx.png', '/py.png', '/ny.png', '/pz.png', '/nz.png'] : _ref$files,\n    _ref$path = _ref.path,\n    path = _ref$path === void 0 ? '' : _ref$path,\n    _ref$preset = _ref.preset,\n    preset = _ref$preset === void 0 ? undefined : _ref$preset,\n    _ref$encoding = _ref.encoding,\n    encoding = _ref$encoding === void 0 ? undefined : _ref$encoding,\n    extensions = _ref.extensions;\n  var _firstEntry$split$pop;\n  var loader = null;\n  var multiFile = false;\n  if (preset) {\n    if (!(preset in presetsObj)) throw new Error('Preset must be one of: ' + Object.keys(presetsObj).join(', '));\n    files = presetsObj[preset];\n    path = CUBEMAP_ROOT;\n  }\n  var isCubemap = isArray(files) && files.length === 6;\n  var isGainmap = isArray(files) && files.length === 3 && files.some(function (file) {\n    return file.endsWith('json');\n  });\n  var firstEntry = isArray(files) ? files[0] : files;\n\n  // Everything else\n  multiFile = isArray(files);\n  var extension = isCubemap ? 'cube' : isGainmap ? 'webp' : firstEntry.startsWith('data:application/exr') ? 'exr' : firstEntry.startsWith('data:application/hdr') ? 'hdr' : firstEntry.startsWith('data:image/jpeg') ? 'jpg' : (_firstEntry$split$pop = firstEntry.split('.').pop()) == null || (_firstEntry$split$pop = _firstEntry$split$pop.split('?')) == null || (_firstEntry$split$pop = _firstEntry$split$pop.shift()) == null ? void 0 : _firstEntry$split$pop.toLowerCase();\n  loader = extension === 'cube' ? CubeTextureLoader : extension === 'hdr' ? RGBELoader : extension === 'exr' ? EXRLoader : extension === 'jpg' || extension === 'jpeg' ? HDRJPGLoader : extension === 'webp' ? GainMapLoader : null;\n  if (!loader) throw new Error('useEnvironment: Unrecognized file extension: ' + files);\n  var gl = useThree(function (state) {\n    return state.gl;\n  });\n  useLayoutEffect(function () {\n    // Only required for gainmap\n    if (extension !== 'webp' && extension !== 'jpg' && extension !== 'jpeg') return;\n    function clearGainmapTexture() {\n      // @ts-expect-error\n      useLoader.clear(loader, multiFile ? [files] : files);\n    }\n    gl.domElement.addEventListener('webglcontextlost', clearGainmapTexture, {\n      once: true\n    });\n  }, [files, gl.domElement]);\n  var loaderResult = useLoader(\n  // @ts-expect-error\n  loader, multiFile ? [files] : files, function (loader) {\n    // Gainmap requires a renderer\n    if (extension === 'webp' || extension === 'jpg' || extension === 'jpeg') {\n      loader.setRenderer(gl);\n    }\n    loader.setPath == null || loader.setPath(path);\n    if (extensions) extensions(loader);\n  });\n  var texture = multiFile ?\n  // @ts-ignore\n  loaderResult[0] : loaderResult;\n  if (extension === 'jpg' || extension === 'jpeg' || extension === 'webp') {\n    var _renderTarget;\n    texture = (_renderTarget = texture.renderTarget) == null ? void 0 : _renderTarget.texture;\n  }\n  texture.mapping = isCubemap ? CubeReflectionMapping : EquirectangularReflectionMapping;\n  if ('colorSpace' in texture) texture.colorSpace = (encoding !== null && encoding !== void 0 ? encoding : isCubemap) ? 'srgb' : 'srgb-linear';else texture.encoding = (encoding !== null && encoding !== void 0 ? encoding : isCubemap) ? sRGBEncoding : LinearEncoding;\n  return texture;\n}\nexport { useEnvironment };","map":{"version":3,"names":["useThree","useLoader","CubeReflectionMapping","EquirectangularReflectionMapping","CubeTextureLoader","RGBELoader","EXRLoader","HDRJPGLoader","GainMapLoader","presetsObj","sRGBEncoding","LinearEncoding","useLayoutEffect","CUBEMAP_ROOT","isArray","arr","Array","useEnvironment","_ref","arguments","length","undefined","_ref$files","files","_ref$path","path","_ref$preset","preset","_ref$encoding","encoding","extensions","_firstEntry$split$pop","loader","multiFile","Error","Object","keys","join","isCubemap","isGainmap","some","file","endsWith","firstEntry","extension","startsWith","split","pop","shift","toLowerCase","gl","state","clearGainmapTexture","clear","domElement","addEventListener","once","loaderResult","setRenderer","setPath","texture","_renderTarget","renderTarget","mapping","colorSpace"],"sources":["C:/Users/Nayyu/Desktop/skibidai-public-build/node_modules/@react-three/drei/core/useEnvironment.js"],"sourcesContent":["import { useThree, useLoader } from '@react-three/fiber';\nimport { CubeReflectionMapping, EquirectangularReflectionMapping, CubeTextureLoader } from 'three';\nimport { RGBELoader, EXRLoader } from 'three-stdlib';\nimport { HDRJPGLoader, GainMapLoader } from '@monogrid/gainmap-js';\nimport { presetsObj } from '../helpers/environment-assets.js';\nimport { sRGBEncoding, LinearEncoding } from '../helpers/deprecated.js';\nimport { useLayoutEffect } from 'react';\n\nconst CUBEMAP_ROOT = 'https://raw.githack.com/pmndrs/drei-assets/456060a26bbeb8fdf79326f224b6d99b8bcce736/hdri/';\nconst isArray = arr => Array.isArray(arr);\nfunction useEnvironment({\n  files = ['/px.png', '/nx.png', '/py.png', '/ny.png', '/pz.png', '/nz.png'],\n  path = '',\n  preset = undefined,\n  encoding = undefined,\n  extensions\n} = {}) {\n  var _firstEntry$split$pop;\n  let loader = null;\n  let multiFile = false;\n  if (preset) {\n    if (!(preset in presetsObj)) throw new Error('Preset must be one of: ' + Object.keys(presetsObj).join(', '));\n    files = presetsObj[preset];\n    path = CUBEMAP_ROOT;\n  }\n  const isCubemap = isArray(files) && files.length === 6;\n  const isGainmap = isArray(files) && files.length === 3 && files.some(file => file.endsWith('json'));\n  const firstEntry = isArray(files) ? files[0] : files;\n\n  // Everything else\n  multiFile = isArray(files);\n  const extension = isCubemap ? 'cube' : isGainmap ? 'webp' : firstEntry.startsWith('data:application/exr') ? 'exr' : firstEntry.startsWith('data:application/hdr') ? 'hdr' : firstEntry.startsWith('data:image/jpeg') ? 'jpg' : (_firstEntry$split$pop = firstEntry.split('.').pop()) == null || (_firstEntry$split$pop = _firstEntry$split$pop.split('?')) == null || (_firstEntry$split$pop = _firstEntry$split$pop.shift()) == null ? void 0 : _firstEntry$split$pop.toLowerCase();\n  loader = extension === 'cube' ? CubeTextureLoader : extension === 'hdr' ? RGBELoader : extension === 'exr' ? EXRLoader : extension === 'jpg' || extension === 'jpeg' ? HDRJPGLoader : extension === 'webp' ? GainMapLoader : null;\n  if (!loader) throw new Error('useEnvironment: Unrecognized file extension: ' + files);\n  const gl = useThree(state => state.gl);\n  useLayoutEffect(() => {\n    // Only required for gainmap\n    if (extension !== 'webp' && extension !== 'jpg' && extension !== 'jpeg') return;\n    function clearGainmapTexture() {\n      // @ts-expect-error\n      useLoader.clear(loader, multiFile ? [files] : files);\n    }\n    gl.domElement.addEventListener('webglcontextlost', clearGainmapTexture, {\n      once: true\n    });\n  }, [files, gl.domElement]);\n  const loaderResult = useLoader(\n  // @ts-expect-error\n  loader, multiFile ? [files] : files, loader => {\n    // Gainmap requires a renderer\n    if (extension === 'webp' || extension === 'jpg' || extension === 'jpeg') {\n      loader.setRenderer(gl);\n    }\n    loader.setPath == null || loader.setPath(path);\n    if (extensions) extensions(loader);\n  });\n  let texture = multiFile ?\n  // @ts-ignore\n  loaderResult[0] : loaderResult;\n  if (extension === 'jpg' || extension === 'jpeg' || extension === 'webp') {\n    var _renderTarget;\n    texture = (_renderTarget = texture.renderTarget) == null ? void 0 : _renderTarget.texture;\n  }\n  texture.mapping = isCubemap ? CubeReflectionMapping : EquirectangularReflectionMapping;\n  if ('colorSpace' in texture) texture.colorSpace = (encoding !== null && encoding !== void 0 ? encoding : isCubemap) ? 'srgb' : 'srgb-linear';else texture.encoding = (encoding !== null && encoding !== void 0 ? encoding : isCubemap) ? sRGBEncoding : LinearEncoding;\n  return texture;\n}\n\nexport { useEnvironment };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}