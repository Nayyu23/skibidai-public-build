{"ast":null,"code":"import _classCallCheck from \"C:/Users/Nayyu/Desktop/skibidai-public-build/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Nayyu/Desktop/skibidai-public-build/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"C:/Users/Nayyu/Desktop/skibidai-public-build/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/Nayyu/Desktop/skibidai-public-build/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nvar __defProp = Object.defineProperty;\nvar __defNormalProp = function __defNormalProp(obj, key, value) {\n  return key in obj ? __defProp(obj, key, {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: value\n  }) : obj[key] = value;\n};\nvar __publicField = function __publicField(obj, key, value) {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nimport { DepthTexture, DepthStencilFormat, UnsignedInt248Type, WebGLRenderTarget, NearestFilter, ShaderMaterial, UniformsUtils, NoBlending, MeshNormalMaterial, DstColorFactor, ZeroFactor, AddEquation, DstAlphaFactor, Color, LuminanceFormat, CustomBlending, Vector3, MathUtils, DataTexture, RedFormat, FloatType, RepeatWrapping } from \"three\";\nimport { Pass, FullScreenQuad } from \"./Pass.js\";\nimport { SimplexNoise } from \"../math/SimplexNoise.js\";\nimport { SSAOShader, SSAOBlurShader, SSAODepthShader } from \"../shaders/SSAOShader.js\";\nimport { CopyShader } from \"../shaders/CopyShader.js\";\nvar _SSAOPass = /*#__PURE__*/function (_Pass) {\n  _inherits(_SSAOPass, _Pass);\n  var _super = _createSuper(_SSAOPass);\n  function _SSAOPass(scene, camera, width, height) {\n    var _this;\n    _classCallCheck(this, _SSAOPass);\n    _this = _super.call(this);\n    _this.width = width !== void 0 ? width : 512;\n    _this.height = height !== void 0 ? height : 512;\n    _this.clear = true;\n    _this.camera = camera;\n    _this.scene = scene;\n    _this.kernelRadius = 8;\n    _this.kernelSize = 32;\n    _this.kernel = [];\n    _this.noiseTexture = null;\n    _this.output = 0;\n    _this.minDistance = 5e-3;\n    _this.maxDistance = 0.1;\n    _this._visibilityCache = /* @__PURE__ */new Map();\n    _this.generateSampleKernel();\n    _this.generateRandomKernelRotations();\n    var depthTexture = new DepthTexture();\n    depthTexture.format = DepthStencilFormat;\n    depthTexture.type = UnsignedInt248Type;\n    _this.beautyRenderTarget = new WebGLRenderTarget(_this.width, _this.height);\n    _this.normalRenderTarget = new WebGLRenderTarget(_this.width, _this.height, {\n      minFilter: NearestFilter,\n      magFilter: NearestFilter,\n      depthTexture: depthTexture\n    });\n    _this.ssaoRenderTarget = new WebGLRenderTarget(_this.width, _this.height);\n    _this.blurRenderTarget = _this.ssaoRenderTarget.clone();\n    if (SSAOShader === void 0) {\n      console.error(\"THREE.SSAOPass: The pass relies on SSAOShader.\");\n    }\n    _this.ssaoMaterial = new ShaderMaterial({\n      defines: Object.assign({}, SSAOShader.defines),\n      uniforms: UniformsUtils.clone(SSAOShader.uniforms),\n      vertexShader: SSAOShader.vertexShader,\n      fragmentShader: SSAOShader.fragmentShader,\n      blending: NoBlending\n    });\n    _this.ssaoMaterial.uniforms[\"tDiffuse\"].value = _this.beautyRenderTarget.texture;\n    _this.ssaoMaterial.uniforms[\"tNormal\"].value = _this.normalRenderTarget.texture;\n    _this.ssaoMaterial.uniforms[\"tDepth\"].value = _this.normalRenderTarget.depthTexture;\n    _this.ssaoMaterial.uniforms[\"tNoise\"].value = _this.noiseTexture;\n    _this.ssaoMaterial.uniforms[\"kernel\"].value = _this.kernel;\n    _this.ssaoMaterial.uniforms[\"cameraNear\"].value = _this.camera.near;\n    _this.ssaoMaterial.uniforms[\"cameraFar\"].value = _this.camera.far;\n    _this.ssaoMaterial.uniforms[\"resolution\"].value.set(_this.width, _this.height);\n    _this.ssaoMaterial.uniforms[\"cameraProjectionMatrix\"].value.copy(_this.camera.projectionMatrix);\n    _this.ssaoMaterial.uniforms[\"cameraInverseProjectionMatrix\"].value.copy(_this.camera.projectionMatrixInverse);\n    _this.normalMaterial = new MeshNormalMaterial();\n    _this.normalMaterial.blending = NoBlending;\n    _this.blurMaterial = new ShaderMaterial({\n      defines: Object.assign({}, SSAOBlurShader.defines),\n      uniforms: UniformsUtils.clone(SSAOBlurShader.uniforms),\n      vertexShader: SSAOBlurShader.vertexShader,\n      fragmentShader: SSAOBlurShader.fragmentShader\n    });\n    _this.blurMaterial.uniforms[\"tDiffuse\"].value = _this.ssaoRenderTarget.texture;\n    _this.blurMaterial.uniforms[\"resolution\"].value.set(_this.width, _this.height);\n    _this.depthRenderMaterial = new ShaderMaterial({\n      defines: Object.assign({}, SSAODepthShader.defines),\n      uniforms: UniformsUtils.clone(SSAODepthShader.uniforms),\n      vertexShader: SSAODepthShader.vertexShader,\n      fragmentShader: SSAODepthShader.fragmentShader,\n      blending: NoBlending\n    });\n    _this.depthRenderMaterial.uniforms[\"tDepth\"].value = _this.normalRenderTarget.depthTexture;\n    _this.depthRenderMaterial.uniforms[\"cameraNear\"].value = _this.camera.near;\n    _this.depthRenderMaterial.uniforms[\"cameraFar\"].value = _this.camera.far;\n    _this.copyMaterial = new ShaderMaterial({\n      uniforms: UniformsUtils.clone(CopyShader.uniforms),\n      vertexShader: CopyShader.vertexShader,\n      fragmentShader: CopyShader.fragmentShader,\n      transparent: true,\n      depthTest: false,\n      depthWrite: false,\n      blendSrc: DstColorFactor,\n      blendDst: ZeroFactor,\n      blendEquation: AddEquation,\n      blendSrcAlpha: DstAlphaFactor,\n      blendDstAlpha: ZeroFactor,\n      blendEquationAlpha: AddEquation\n    });\n    _this.fsQuad = new FullScreenQuad(null);\n    _this.originalClearColor = new Color();\n    return _this;\n  }\n  _createClass(_SSAOPass, [{\n    key: \"dispose\",\n    value: function dispose() {\n      this.beautyRenderTarget.dispose();\n      this.normalRenderTarget.dispose();\n      this.ssaoRenderTarget.dispose();\n      this.blurRenderTarget.dispose();\n      this.normalMaterial.dispose();\n      this.blurMaterial.dispose();\n      this.copyMaterial.dispose();\n      this.depthRenderMaterial.dispose();\n      this.fsQuad.dispose();\n    }\n  }, {\n    key: \"render\",\n    value: function render(renderer, writeBuffer) {\n      if (renderer.capabilities.isWebGL2 === false) this.noiseTexture.format = LuminanceFormat;\n      renderer.setRenderTarget(this.beautyRenderTarget);\n      renderer.clear();\n      renderer.render(this.scene, this.camera);\n      this.overrideVisibility();\n      this.renderOverride(renderer, this.normalMaterial, this.normalRenderTarget, 7829503, 1);\n      this.restoreVisibility();\n      this.ssaoMaterial.uniforms[\"kernelRadius\"].value = this.kernelRadius;\n      this.ssaoMaterial.uniforms[\"minDistance\"].value = this.minDistance;\n      this.ssaoMaterial.uniforms[\"maxDistance\"].value = this.maxDistance;\n      this.renderPass(renderer, this.ssaoMaterial, this.ssaoRenderTarget);\n      this.renderPass(renderer, this.blurMaterial, this.blurRenderTarget);\n      switch (this.output) {\n        case _SSAOPass.OUTPUT.SSAO:\n          this.copyMaterial.uniforms[\"tDiffuse\"].value = this.ssaoRenderTarget.texture;\n          this.copyMaterial.blending = NoBlending;\n          this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n          break;\n        case _SSAOPass.OUTPUT.Blur:\n          this.copyMaterial.uniforms[\"tDiffuse\"].value = this.blurRenderTarget.texture;\n          this.copyMaterial.blending = NoBlending;\n          this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n          break;\n        case _SSAOPass.OUTPUT.Beauty:\n          this.copyMaterial.uniforms[\"tDiffuse\"].value = this.beautyRenderTarget.texture;\n          this.copyMaterial.blending = NoBlending;\n          this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n          break;\n        case _SSAOPass.OUTPUT.Depth:\n          this.renderPass(renderer, this.depthRenderMaterial, this.renderToScreen ? null : writeBuffer);\n          break;\n        case _SSAOPass.OUTPUT.Normal:\n          this.copyMaterial.uniforms[\"tDiffuse\"].value = this.normalRenderTarget.texture;\n          this.copyMaterial.blending = NoBlending;\n          this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n          break;\n        case _SSAOPass.OUTPUT.Default:\n          this.copyMaterial.uniforms[\"tDiffuse\"].value = this.beautyRenderTarget.texture;\n          this.copyMaterial.blending = NoBlending;\n          this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n          this.copyMaterial.uniforms[\"tDiffuse\"].value = this.blurRenderTarget.texture;\n          this.copyMaterial.blending = CustomBlending;\n          this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n          break;\n        default:\n          console.warn(\"THREE.SSAOPass: Unknown output type.\");\n      }\n    }\n  }, {\n    key: \"renderPass\",\n    value: function renderPass(renderer, passMaterial, renderTarget, clearColor, clearAlpha) {\n      renderer.getClearColor(this.originalClearColor);\n      var originalClearAlpha = renderer.getClearAlpha();\n      var originalAutoClear = renderer.autoClear;\n      renderer.setRenderTarget(renderTarget);\n      renderer.autoClear = false;\n      if (clearColor !== void 0 && clearColor !== null) {\n        renderer.setClearColor(clearColor);\n        renderer.setClearAlpha(clearAlpha || 0);\n        renderer.clear();\n      }\n      this.fsQuad.material = passMaterial;\n      this.fsQuad.render(renderer);\n      renderer.autoClear = originalAutoClear;\n      renderer.setClearColor(this.originalClearColor);\n      renderer.setClearAlpha(originalClearAlpha);\n    }\n  }, {\n    key: \"renderOverride\",\n    value: function renderOverride(renderer, overrideMaterial, renderTarget, clearColor, clearAlpha) {\n      renderer.getClearColor(this.originalClearColor);\n      var originalClearAlpha = renderer.getClearAlpha();\n      var originalAutoClear = renderer.autoClear;\n      renderer.setRenderTarget(renderTarget);\n      renderer.autoClear = false;\n      clearColor = overrideMaterial.clearColor || clearColor;\n      clearAlpha = overrideMaterial.clearAlpha || clearAlpha;\n      if (clearColor !== void 0 && clearColor !== null) {\n        renderer.setClearColor(clearColor);\n        renderer.setClearAlpha(clearAlpha || 0);\n        renderer.clear();\n      }\n      this.scene.overrideMaterial = overrideMaterial;\n      renderer.render(this.scene, this.camera);\n      this.scene.overrideMaterial = null;\n      renderer.autoClear = originalAutoClear;\n      renderer.setClearColor(this.originalClearColor);\n      renderer.setClearAlpha(originalClearAlpha);\n    }\n  }, {\n    key: \"setSize\",\n    value: function setSize(width, height) {\n      this.width = width;\n      this.height = height;\n      this.beautyRenderTarget.setSize(width, height);\n      this.ssaoRenderTarget.setSize(width, height);\n      this.normalRenderTarget.setSize(width, height);\n      this.blurRenderTarget.setSize(width, height);\n      this.ssaoMaterial.uniforms[\"resolution\"].value.set(width, height);\n      this.ssaoMaterial.uniforms[\"cameraProjectionMatrix\"].value.copy(this.camera.projectionMatrix);\n      this.ssaoMaterial.uniforms[\"cameraInverseProjectionMatrix\"].value.copy(this.camera.projectionMatrixInverse);\n      this.blurMaterial.uniforms[\"resolution\"].value.set(width, height);\n    }\n  }, {\n    key: \"generateSampleKernel\",\n    value: function generateSampleKernel() {\n      var kernelSize = this.kernelSize;\n      var kernel = this.kernel;\n      for (var i = 0; i < kernelSize; i++) {\n        var sample = new Vector3();\n        sample.x = Math.random() * 2 - 1;\n        sample.y = Math.random() * 2 - 1;\n        sample.z = Math.random();\n        sample.normalize();\n        var scale = i / kernelSize;\n        scale = MathUtils.lerp(0.1, 1, scale * scale);\n        sample.multiplyScalar(scale);\n        kernel.push(sample);\n      }\n    }\n  }, {\n    key: \"generateRandomKernelRotations\",\n    value: function generateRandomKernelRotations() {\n      var width = 4,\n        height = 4;\n      if (SimplexNoise === void 0) {\n        console.error(\"THREE.SSAOPass: The pass relies on SimplexNoise.\");\n      }\n      var simplex = new SimplexNoise();\n      var size = width * height;\n      var data = new Float32Array(size);\n      for (var i = 0; i < size; i++) {\n        var x = Math.random() * 2 - 1;\n        var y = Math.random() * 2 - 1;\n        var z = 0;\n        data[i] = simplex.noise3d(x, y, z);\n      }\n      this.noiseTexture = new DataTexture(data, width, height, RedFormat, FloatType);\n      this.noiseTexture.wrapS = RepeatWrapping;\n      this.noiseTexture.wrapT = RepeatWrapping;\n      this.noiseTexture.needsUpdate = true;\n    }\n  }, {\n    key: \"overrideVisibility\",\n    value: function overrideVisibility() {\n      var scene = this.scene;\n      var cache = this._visibilityCache;\n      scene.traverse(function (object) {\n        cache.set(object, object.visible);\n        if (object.isPoints || object.isLine) object.visible = false;\n      });\n    }\n  }, {\n    key: \"restoreVisibility\",\n    value: function restoreVisibility() {\n      var scene = this.scene;\n      var cache = this._visibilityCache;\n      scene.traverse(function (object) {\n        var visible = cache.get(object);\n        object.visible = visible;\n      });\n      cache.clear();\n    }\n  }]);\n  return _SSAOPass;\n}(Pass);\nvar SSAOPass = _SSAOPass;\n__publicField(SSAOPass, \"OUTPUT\", {\n  Default: 0,\n  SSAO: 1,\n  Blur: 2,\n  Beauty: 3,\n  Depth: 4,\n  Normal: 5\n});\nexport { SSAOPass };","map":{"version":3,"names":["_SSAOPass","_Pass","_inherits","_super","_createSuper","scene","camera","width","height","_this","_classCallCheck","call","clear","kernelRadius","kernelSize","kernel","noiseTexture","output","minDistance","maxDistance","_visibilityCache","Map","generateSampleKernel","generateRandomKernelRotations","depthTexture","DepthTexture","format","DepthStencilFormat","type","UnsignedInt248Type","beautyRenderTarget","WebGLRenderTarget","normalRenderTarget","minFilter","NearestFilter","magFilter","ssaoRenderTarget","blurRenderTarget","clone","SSAOShader","console","error","ssaoMaterial","ShaderMaterial","defines","Object","assign","uniforms","UniformsUtils","vertexShader","fragmentShader","blending","NoBlending","value","texture","near","far","set","copy","projectionMatrix","projectionMatrixInverse","normalMaterial","MeshNormalMaterial","blurMaterial","SSAOBlurShader","depthRenderMaterial","SSAODepthShader","copyMaterial","CopyShader","transparent","depthTest","depthWrite","blendSrc","DstColorFactor","blendDst","ZeroFactor","blendEquation","AddEquation","blendSrcAlpha","DstAlphaFactor","blendDstAlpha","blendEquationAlpha","fsQuad","FullScreenQuad","originalClearColor","Color","_createClass","key","dispose","render","renderer","writeBuffer","capabilities","isWebGL2","LuminanceFormat","setRenderTarget","overrideVisibility","renderOverride","restoreVisibility","renderPass","OUTPUT","SSAO","renderToScreen","Blur","Beauty","Depth","Normal","Default","CustomBlending","warn","passMaterial","renderTarget","clearColor","clearAlpha","getClearColor","originalClearAlpha","getClearAlpha","originalAutoClear","autoClear","setClearColor","setClearAlpha","material","overrideMaterial","setSize","i","sample","Vector3","x","Math","random","y","z","normalize","scale","MathUtils","lerp","multiplyScalar","push","SimplexNoise","simplex","size","data","Float32Array","noise3d","DataTexture","RedFormat","FloatType","wrapS","RepeatWrapping","wrapT","needsUpdate","cache","traverse","object","visible","isPoints","isLine","get","Pass","SSAOPass","__publicField"],"sources":["C:\\Users\\Nayyu\\Desktop\\skibidai-public-build\\node_modules\\src\\postprocessing\\SSAOPass.js"],"sourcesContent":["import {\n  AddEquation,\n  Color,\n  CustomBlending,\n  DataTexture,\n  DepthTexture,\n  DstAlphaFactor,\n  DstColorFactor,\n  FloatType,\n  MathUtils,\n  MeshNormalMaterial,\n  NearestFilter,\n  NoBlending,\n  RedFormat,\n  LuminanceFormat,\n  DepthStencilFormat,\n  UnsignedInt248Type,\n  RepeatWrapping,\n  ShaderMaterial,\n  UniformsUtils,\n  Vector3,\n  WebGLRenderTarget,\n  ZeroFactor,\n} from 'three'\nimport { Pass, FullScreenQuad } from './Pass'\nimport { SimplexNoise } from '../math/SimplexNoise'\nimport { SSAOShader, SSAOBlurShader, SSAODepthShader } from '../shaders/SSAOShader'\n\nimport { CopyShader } from '../shaders/CopyShader'\n\nclass SSAOPass extends Pass {\n  static OUTPUT = {\n    Default: 0,\n    SSAO: 1,\n    Blur: 2,\n    Beauty: 3,\n    Depth: 4,\n    Normal: 5,\n  }\n\n  constructor(scene, camera, width, height) {\n    super()\n\n    this.width = width !== undefined ? width : 512\n    this.height = height !== undefined ? height : 512\n\n    this.clear = true\n\n    this.camera = camera\n    this.scene = scene\n\n    this.kernelRadius = 8\n    this.kernelSize = 32\n    this.kernel = []\n    this.noiseTexture = null\n    this.output = 0\n\n    this.minDistance = 0.005\n    this.maxDistance = 0.1\n\n    this._visibilityCache = new Map()\n\n    //\n\n    this.generateSampleKernel()\n    this.generateRandomKernelRotations()\n\n    // beauty render target\n\n    const depthTexture = new DepthTexture()\n    depthTexture.format = DepthStencilFormat\n    depthTexture.type = UnsignedInt248Type\n\n    this.beautyRenderTarget = new WebGLRenderTarget(this.width, this.height)\n\n    // normal render target with depth buffer\n\n    this.normalRenderTarget = new WebGLRenderTarget(this.width, this.height, {\n      minFilter: NearestFilter,\n      magFilter: NearestFilter,\n      depthTexture: depthTexture,\n    })\n\n    // ssao render target\n\n    this.ssaoRenderTarget = new WebGLRenderTarget(this.width, this.height)\n\n    this.blurRenderTarget = this.ssaoRenderTarget.clone()\n\n    // ssao material\n\n    if (SSAOShader === undefined) {\n      console.error('THREE.SSAOPass: The pass relies on SSAOShader.')\n    }\n\n    this.ssaoMaterial = new ShaderMaterial({\n      defines: Object.assign({}, SSAOShader.defines),\n      uniforms: UniformsUtils.clone(SSAOShader.uniforms),\n      vertexShader: SSAOShader.vertexShader,\n      fragmentShader: SSAOShader.fragmentShader,\n      blending: NoBlending,\n    })\n\n    this.ssaoMaterial.uniforms['tDiffuse'].value = this.beautyRenderTarget.texture\n    this.ssaoMaterial.uniforms['tNormal'].value = this.normalRenderTarget.texture\n    this.ssaoMaterial.uniforms['tDepth'].value = this.normalRenderTarget.depthTexture\n    this.ssaoMaterial.uniforms['tNoise'].value = this.noiseTexture\n    this.ssaoMaterial.uniforms['kernel'].value = this.kernel\n    this.ssaoMaterial.uniforms['cameraNear'].value = this.camera.near\n    this.ssaoMaterial.uniforms['cameraFar'].value = this.camera.far\n    this.ssaoMaterial.uniforms['resolution'].value.set(this.width, this.height)\n    this.ssaoMaterial.uniforms['cameraProjectionMatrix'].value.copy(this.camera.projectionMatrix)\n    this.ssaoMaterial.uniforms['cameraInverseProjectionMatrix'].value.copy(this.camera.projectionMatrixInverse)\n\n    // normal material\n\n    this.normalMaterial = new MeshNormalMaterial()\n    this.normalMaterial.blending = NoBlending\n\n    // blur material\n\n    this.blurMaterial = new ShaderMaterial({\n      defines: Object.assign({}, SSAOBlurShader.defines),\n      uniforms: UniformsUtils.clone(SSAOBlurShader.uniforms),\n      vertexShader: SSAOBlurShader.vertexShader,\n      fragmentShader: SSAOBlurShader.fragmentShader,\n    })\n    this.blurMaterial.uniforms['tDiffuse'].value = this.ssaoRenderTarget.texture\n    this.blurMaterial.uniforms['resolution'].value.set(this.width, this.height)\n\n    // material for rendering the depth\n\n    this.depthRenderMaterial = new ShaderMaterial({\n      defines: Object.assign({}, SSAODepthShader.defines),\n      uniforms: UniformsUtils.clone(SSAODepthShader.uniforms),\n      vertexShader: SSAODepthShader.vertexShader,\n      fragmentShader: SSAODepthShader.fragmentShader,\n      blending: NoBlending,\n    })\n    this.depthRenderMaterial.uniforms['tDepth'].value = this.normalRenderTarget.depthTexture\n    this.depthRenderMaterial.uniforms['cameraNear'].value = this.camera.near\n    this.depthRenderMaterial.uniforms['cameraFar'].value = this.camera.far\n\n    // material for rendering the content of a render target\n\n    this.copyMaterial = new ShaderMaterial({\n      uniforms: UniformsUtils.clone(CopyShader.uniforms),\n      vertexShader: CopyShader.vertexShader,\n      fragmentShader: CopyShader.fragmentShader,\n      transparent: true,\n      depthTest: false,\n      depthWrite: false,\n      blendSrc: DstColorFactor,\n      blendDst: ZeroFactor,\n      blendEquation: AddEquation,\n      blendSrcAlpha: DstAlphaFactor,\n      blendDstAlpha: ZeroFactor,\n      blendEquationAlpha: AddEquation,\n    })\n\n    this.fsQuad = new FullScreenQuad(null)\n\n    this.originalClearColor = new Color()\n  }\n\n  dispose() {\n    // dispose render targets\n\n    this.beautyRenderTarget.dispose()\n    this.normalRenderTarget.dispose()\n    this.ssaoRenderTarget.dispose()\n    this.blurRenderTarget.dispose()\n\n    // dispose materials\n\n    this.normalMaterial.dispose()\n    this.blurMaterial.dispose()\n    this.copyMaterial.dispose()\n    this.depthRenderMaterial.dispose()\n\n    // dipsose full screen quad\n\n    this.fsQuad.dispose()\n  }\n\n  render(renderer, writeBuffer /*, readBuffer, deltaTime, maskActive */) {\n    if (renderer.capabilities.isWebGL2 === false) this.noiseTexture.format = LuminanceFormat\n\n    // render beauty\n\n    renderer.setRenderTarget(this.beautyRenderTarget)\n    renderer.clear()\n    renderer.render(this.scene, this.camera)\n\n    // render normals and depth (honor only meshes, points and lines do not contribute to SSAO)\n\n    this.overrideVisibility()\n    this.renderOverride(renderer, this.normalMaterial, this.normalRenderTarget, 0x7777ff, 1.0)\n    this.restoreVisibility()\n\n    // render SSAO\n\n    this.ssaoMaterial.uniforms['kernelRadius'].value = this.kernelRadius\n    this.ssaoMaterial.uniforms['minDistance'].value = this.minDistance\n    this.ssaoMaterial.uniforms['maxDistance'].value = this.maxDistance\n    this.renderPass(renderer, this.ssaoMaterial, this.ssaoRenderTarget)\n\n    // render blur\n\n    this.renderPass(renderer, this.blurMaterial, this.blurRenderTarget)\n\n    // output result to screen\n\n    switch (this.output) {\n      case SSAOPass.OUTPUT.SSAO:\n        this.copyMaterial.uniforms['tDiffuse'].value = this.ssaoRenderTarget.texture\n        this.copyMaterial.blending = NoBlending\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer)\n\n        break\n\n      case SSAOPass.OUTPUT.Blur:\n        this.copyMaterial.uniforms['tDiffuse'].value = this.blurRenderTarget.texture\n        this.copyMaterial.blending = NoBlending\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer)\n\n        break\n\n      case SSAOPass.OUTPUT.Beauty:\n        this.copyMaterial.uniforms['tDiffuse'].value = this.beautyRenderTarget.texture\n        this.copyMaterial.blending = NoBlending\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer)\n\n        break\n\n      case SSAOPass.OUTPUT.Depth:\n        this.renderPass(renderer, this.depthRenderMaterial, this.renderToScreen ? null : writeBuffer)\n\n        break\n\n      case SSAOPass.OUTPUT.Normal:\n        this.copyMaterial.uniforms['tDiffuse'].value = this.normalRenderTarget.texture\n        this.copyMaterial.blending = NoBlending\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer)\n\n        break\n\n      case SSAOPass.OUTPUT.Default:\n        this.copyMaterial.uniforms['tDiffuse'].value = this.beautyRenderTarget.texture\n        this.copyMaterial.blending = NoBlending\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer)\n\n        this.copyMaterial.uniforms['tDiffuse'].value = this.blurRenderTarget.texture\n        this.copyMaterial.blending = CustomBlending\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer)\n\n        break\n\n      default:\n        console.warn('THREE.SSAOPass: Unknown output type.')\n    }\n  }\n\n  renderPass(renderer, passMaterial, renderTarget, clearColor, clearAlpha) {\n    // save original state\n    renderer.getClearColor(this.originalClearColor)\n    const originalClearAlpha = renderer.getClearAlpha()\n    const originalAutoClear = renderer.autoClear\n\n    renderer.setRenderTarget(renderTarget)\n\n    // setup pass state\n    renderer.autoClear = false\n    if (clearColor !== undefined && clearColor !== null) {\n      renderer.setClearColor(clearColor)\n      renderer.setClearAlpha(clearAlpha || 0.0)\n      renderer.clear()\n    }\n\n    this.fsQuad.material = passMaterial\n    this.fsQuad.render(renderer)\n\n    // restore original state\n    renderer.autoClear = originalAutoClear\n    renderer.setClearColor(this.originalClearColor)\n    renderer.setClearAlpha(originalClearAlpha)\n  }\n\n  renderOverride(renderer, overrideMaterial, renderTarget, clearColor, clearAlpha) {\n    renderer.getClearColor(this.originalClearColor)\n    const originalClearAlpha = renderer.getClearAlpha()\n    const originalAutoClear = renderer.autoClear\n\n    renderer.setRenderTarget(renderTarget)\n    renderer.autoClear = false\n\n    clearColor = overrideMaterial.clearColor || clearColor\n    clearAlpha = overrideMaterial.clearAlpha || clearAlpha\n\n    if (clearColor !== undefined && clearColor !== null) {\n      renderer.setClearColor(clearColor)\n      renderer.setClearAlpha(clearAlpha || 0.0)\n      renderer.clear()\n    }\n\n    this.scene.overrideMaterial = overrideMaterial\n    renderer.render(this.scene, this.camera)\n    this.scene.overrideMaterial = null\n\n    // restore original state\n\n    renderer.autoClear = originalAutoClear\n    renderer.setClearColor(this.originalClearColor)\n    renderer.setClearAlpha(originalClearAlpha)\n  }\n\n  setSize(width, height) {\n    this.width = width\n    this.height = height\n\n    this.beautyRenderTarget.setSize(width, height)\n    this.ssaoRenderTarget.setSize(width, height)\n    this.normalRenderTarget.setSize(width, height)\n    this.blurRenderTarget.setSize(width, height)\n\n    this.ssaoMaterial.uniforms['resolution'].value.set(width, height)\n    this.ssaoMaterial.uniforms['cameraProjectionMatrix'].value.copy(this.camera.projectionMatrix)\n    this.ssaoMaterial.uniforms['cameraInverseProjectionMatrix'].value.copy(this.camera.projectionMatrixInverse)\n\n    this.blurMaterial.uniforms['resolution'].value.set(width, height)\n  }\n\n  generateSampleKernel() {\n    const kernelSize = this.kernelSize\n    const kernel = this.kernel\n\n    for (let i = 0; i < kernelSize; i++) {\n      const sample = new Vector3()\n      sample.x = Math.random() * 2 - 1\n      sample.y = Math.random() * 2 - 1\n      sample.z = Math.random()\n\n      sample.normalize()\n\n      let scale = i / kernelSize\n      scale = MathUtils.lerp(0.1, 1, scale * scale)\n      sample.multiplyScalar(scale)\n\n      kernel.push(sample)\n    }\n  }\n\n  generateRandomKernelRotations() {\n    const width = 4,\n      height = 4\n\n    if (SimplexNoise === undefined) {\n      console.error('THREE.SSAOPass: The pass relies on SimplexNoise.')\n    }\n\n    const simplex = new SimplexNoise()\n\n    const size = width * height\n    const data = new Float32Array(size)\n\n    for (let i = 0; i < size; i++) {\n      const x = Math.random() * 2 - 1\n      const y = Math.random() * 2 - 1\n      const z = 0\n\n      data[i] = simplex.noise3d(x, y, z)\n    }\n\n    this.noiseTexture = new DataTexture(data, width, height, RedFormat, FloatType)\n    this.noiseTexture.wrapS = RepeatWrapping\n    this.noiseTexture.wrapT = RepeatWrapping\n    this.noiseTexture.needsUpdate = true\n  }\n\n  overrideVisibility() {\n    const scene = this.scene\n    const cache = this._visibilityCache\n\n    scene.traverse(function (object) {\n      cache.set(object, object.visible)\n\n      if (object.isPoints || object.isLine) object.visible = false\n    })\n  }\n\n  restoreVisibility() {\n    const scene = this.scene\n    const cache = this._visibilityCache\n\n    scene.traverse(function (object) {\n      const visible = cache.get(object)\n      object.visible = visible\n    })\n\n    cache.clear()\n  }\n}\n\nexport { SSAOPass }\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}