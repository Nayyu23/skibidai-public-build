{"ast":null,"code":"import _createClass from \"C:/Users/Nayyu/Desktop/skibidai-public-build/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"C:/Users/Nayyu/Desktop/skibidai-public-build/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _inherits from \"C:/Users/Nayyu/Desktop/skibidai-public-build/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/Nayyu/Desktop/skibidai-public-build/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { BufferGeometry, Vector3, Quaternion, BufferAttribute, Raycaster, Color } from \"three\";\nvar RollerCoasterGeometry = /*#__PURE__*/function (_BufferGeometry) {\n  _inherits(RollerCoasterGeometry, _BufferGeometry);\n  var _super = _createSuper(RollerCoasterGeometry);\n  function RollerCoasterGeometry(curve, divisions) {\n    var _this;\n    _classCallCheck(this, RollerCoasterGeometry);\n    _this = _super.call(this);\n    var vertices = [];\n    var normals = [];\n    var colors = [];\n    var color1 = [1, 1, 1];\n    var color2 = [1, 1, 0];\n    var up = new Vector3(0, 1, 0);\n    var forward = new Vector3();\n    var right = new Vector3();\n    var quaternion = new Quaternion();\n    var prevQuaternion = new Quaternion();\n    prevQuaternion.setFromAxisAngle(up, Math.PI / 2);\n    var point = new Vector3();\n    var prevPoint = new Vector3();\n    prevPoint.copy(curve.getPointAt(0));\n    var step = [new Vector3(-0.225, 0, 0), new Vector3(0, -0.05, 0), new Vector3(0, -0.175, 0), new Vector3(0, -0.05, 0), new Vector3(0.225, 0, 0), new Vector3(0, -0.175, 0)];\n    var PI2 = Math.PI * 2;\n    var sides = 5;\n    var tube1 = [];\n    for (var i = 0; i < sides; i++) {\n      var angle = i / sides * PI2;\n      tube1.push(new Vector3(Math.sin(angle) * 0.06, Math.cos(angle) * 0.06, 0));\n    }\n    sides = 6;\n    var tube2 = [];\n    for (var _i = 0; _i < sides; _i++) {\n      var _angle = _i / sides * PI2;\n      tube2.push(new Vector3(Math.sin(_angle) * 0.025, Math.cos(_angle) * 0.025, 0));\n    }\n    var vector = new Vector3();\n    var normal = new Vector3();\n    function drawShape(shape, color) {\n      normal.set(0, 0, -1).applyQuaternion(quaternion);\n      for (var j = 0; j < shape.length; j++) {\n        vector.copy(shape[j]);\n        vector.applyQuaternion(quaternion);\n        vector.add(point);\n        vertices.push(vector.x, vector.y, vector.z);\n        normals.push(normal.x, normal.y, normal.z);\n        colors.push(color[0], color[1], color[2]);\n      }\n      normal.set(0, 0, 1).applyQuaternion(quaternion);\n      for (var _j = shape.length - 1; _j >= 0; _j--) {\n        vector.copy(shape[_j]);\n        vector.applyQuaternion(quaternion);\n        vector.add(point);\n        vertices.push(vector.x, vector.y, vector.z);\n        normals.push(normal.x, normal.y, normal.z);\n        colors.push(color[0], color[1], color[2]);\n      }\n    }\n    var vector1 = new Vector3();\n    var vector2 = new Vector3();\n    var vector3 = new Vector3();\n    var vector4 = new Vector3();\n    var normal1 = new Vector3();\n    var normal2 = new Vector3();\n    var normal3 = new Vector3();\n    var normal4 = new Vector3();\n    function extrudeShape(shape, offset2, color) {\n      for (var j = 0, jl = shape.length; j < jl; j++) {\n        var point1 = shape[j];\n        var point2 = shape[(j + 1) % jl];\n        vector1.copy(point1).add(offset2);\n        vector1.applyQuaternion(quaternion);\n        vector1.add(point);\n        vector2.copy(point2).add(offset2);\n        vector2.applyQuaternion(quaternion);\n        vector2.add(point);\n        vector3.copy(point2).add(offset2);\n        vector3.applyQuaternion(prevQuaternion);\n        vector3.add(prevPoint);\n        vector4.copy(point1).add(offset2);\n        vector4.applyQuaternion(prevQuaternion);\n        vector4.add(prevPoint);\n        vertices.push(vector1.x, vector1.y, vector1.z);\n        vertices.push(vector2.x, vector2.y, vector2.z);\n        vertices.push(vector4.x, vector4.y, vector4.z);\n        vertices.push(vector2.x, vector2.y, vector2.z);\n        vertices.push(vector3.x, vector3.y, vector3.z);\n        vertices.push(vector4.x, vector4.y, vector4.z);\n        normal1.copy(point1);\n        normal1.applyQuaternion(quaternion);\n        normal1.normalize();\n        normal2.copy(point2);\n        normal2.applyQuaternion(quaternion);\n        normal2.normalize();\n        normal3.copy(point2);\n        normal3.applyQuaternion(prevQuaternion);\n        normal3.normalize();\n        normal4.copy(point1);\n        normal4.applyQuaternion(prevQuaternion);\n        normal4.normalize();\n        normals.push(normal1.x, normal1.y, normal1.z);\n        normals.push(normal2.x, normal2.y, normal2.z);\n        normals.push(normal4.x, normal4.y, normal4.z);\n        normals.push(normal2.x, normal2.y, normal2.z);\n        normals.push(normal3.x, normal3.y, normal3.z);\n        normals.push(normal4.x, normal4.y, normal4.z);\n        colors.push(color[0], color[1], color[2]);\n        colors.push(color[0], color[1], color[2]);\n        colors.push(color[0], color[1], color[2]);\n        colors.push(color[0], color[1], color[2]);\n        colors.push(color[0], color[1], color[2]);\n        colors.push(color[0], color[1], color[2]);\n      }\n    }\n    var offset = new Vector3();\n    for (var _i2 = 1; _i2 <= divisions; _i2++) {\n      point.copy(curve.getPointAt(_i2 / divisions));\n      up.set(0, 1, 0);\n      forward.subVectors(point, prevPoint).normalize();\n      right.crossVectors(up, forward).normalize();\n      up.crossVectors(forward, right);\n      var _angle2 = Math.atan2(forward.x, forward.z);\n      quaternion.setFromAxisAngle(up, _angle2);\n      if (_i2 % 2 === 0) {\n        drawShape(step, color2);\n      }\n      extrudeShape(tube1, offset.set(0, -0.125, 0), color2);\n      extrudeShape(tube2, offset.set(0.2, 0, 0), color1);\n      extrudeShape(tube2, offset.set(-0.2, 0, 0), color1);\n      prevPoint.copy(point);\n      prevQuaternion.copy(quaternion);\n    }\n    _this.setAttribute(\"position\", new BufferAttribute(new Float32Array(vertices), 3));\n    _this.setAttribute(\"normal\", new BufferAttribute(new Float32Array(normals), 3));\n    _this.setAttribute(\"color\", new BufferAttribute(new Float32Array(colors), 3));\n    return _this;\n  }\n  return _createClass(RollerCoasterGeometry);\n}(BufferGeometry);\nvar RollerCoasterLiftersGeometry = /*#__PURE__*/function (_BufferGeometry2) {\n  _inherits(RollerCoasterLiftersGeometry, _BufferGeometry2);\n  var _super2 = _createSuper(RollerCoasterLiftersGeometry);\n  function RollerCoasterLiftersGeometry(curve, divisions) {\n    var _this2;\n    _classCallCheck(this, RollerCoasterLiftersGeometry);\n    _this2 = _super2.call(this);\n    var vertices = [];\n    var normals = [];\n    var quaternion = new Quaternion();\n    var up = new Vector3(0, 1, 0);\n    var point = new Vector3();\n    var tangent = new Vector3();\n    var tube1 = [new Vector3(0, 0.05, -0.05), new Vector3(0, 0.05, 0.05), new Vector3(0, -0.05, 0)];\n    var tube2 = [new Vector3(-0.05, 0, 0.05), new Vector3(-0.05, 0, -0.05), new Vector3(0.05, 0, 0)];\n    var tube3 = [new Vector3(0.05, 0, -0.05), new Vector3(0.05, 0, 0.05), new Vector3(-0.05, 0, 0)];\n    var vector1 = new Vector3();\n    var vector2 = new Vector3();\n    var vector3 = new Vector3();\n    var vector4 = new Vector3();\n    var normal1 = new Vector3();\n    var normal2 = new Vector3();\n    var normal3 = new Vector3();\n    var normal4 = new Vector3();\n    function extrudeShape(shape, fromPoint2, toPoint2) {\n      for (var j = 0, jl = shape.length; j < jl; j++) {\n        var point1 = shape[j];\n        var point2 = shape[(j + 1) % jl];\n        vector1.copy(point1);\n        vector1.applyQuaternion(quaternion);\n        vector1.add(fromPoint2);\n        vector2.copy(point2);\n        vector2.applyQuaternion(quaternion);\n        vector2.add(fromPoint2);\n        vector3.copy(point2);\n        vector3.applyQuaternion(quaternion);\n        vector3.add(toPoint2);\n        vector4.copy(point1);\n        vector4.applyQuaternion(quaternion);\n        vector4.add(toPoint2);\n        vertices.push(vector1.x, vector1.y, vector1.z);\n        vertices.push(vector2.x, vector2.y, vector2.z);\n        vertices.push(vector4.x, vector4.y, vector4.z);\n        vertices.push(vector2.x, vector2.y, vector2.z);\n        vertices.push(vector3.x, vector3.y, vector3.z);\n        vertices.push(vector4.x, vector4.y, vector4.z);\n        normal1.copy(point1);\n        normal1.applyQuaternion(quaternion);\n        normal1.normalize();\n        normal2.copy(point2);\n        normal2.applyQuaternion(quaternion);\n        normal2.normalize();\n        normal3.copy(point2);\n        normal3.applyQuaternion(quaternion);\n        normal3.normalize();\n        normal4.copy(point1);\n        normal4.applyQuaternion(quaternion);\n        normal4.normalize();\n        normals.push(normal1.x, normal1.y, normal1.z);\n        normals.push(normal2.x, normal2.y, normal2.z);\n        normals.push(normal4.x, normal4.y, normal4.z);\n        normals.push(normal2.x, normal2.y, normal2.z);\n        normals.push(normal3.x, normal3.y, normal3.z);\n        normals.push(normal4.x, normal4.y, normal4.z);\n      }\n    }\n    var fromPoint = new Vector3();\n    var toPoint = new Vector3();\n    for (var i = 1; i <= divisions; i++) {\n      point.copy(curve.getPointAt(i / divisions));\n      tangent.copy(curve.getTangentAt(i / divisions));\n      var angle = Math.atan2(tangent.x, tangent.z);\n      quaternion.setFromAxisAngle(up, angle);\n      if (point.y > 10) {\n        fromPoint.set(-0.75, -0.35, 0);\n        fromPoint.applyQuaternion(quaternion);\n        fromPoint.add(point);\n        toPoint.set(0.75, -0.35, 0);\n        toPoint.applyQuaternion(quaternion);\n        toPoint.add(point);\n        extrudeShape(tube1, fromPoint, toPoint);\n        fromPoint.set(-0.7, -0.3, 0);\n        fromPoint.applyQuaternion(quaternion);\n        fromPoint.add(point);\n        toPoint.set(-0.7, -point.y, 0);\n        toPoint.applyQuaternion(quaternion);\n        toPoint.add(point);\n        extrudeShape(tube2, fromPoint, toPoint);\n        fromPoint.set(0.7, -0.3, 0);\n        fromPoint.applyQuaternion(quaternion);\n        fromPoint.add(point);\n        toPoint.set(0.7, -point.y, 0);\n        toPoint.applyQuaternion(quaternion);\n        toPoint.add(point);\n        extrudeShape(tube3, fromPoint, toPoint);\n      } else {\n        fromPoint.set(0, -0.2, 0);\n        fromPoint.applyQuaternion(quaternion);\n        fromPoint.add(point);\n        toPoint.set(0, -point.y, 0);\n        toPoint.applyQuaternion(quaternion);\n        toPoint.add(point);\n        extrudeShape(tube3, fromPoint, toPoint);\n      }\n    }\n    _this2.setAttribute(\"position\", new BufferAttribute(new Float32Array(vertices), 3));\n    _this2.setAttribute(\"normal\", new BufferAttribute(new Float32Array(normals), 3));\n    return _this2;\n  }\n  return _createClass(RollerCoasterLiftersGeometry);\n}(BufferGeometry);\nvar RollerCoasterShadowGeometry = /*#__PURE__*/function (_BufferGeometry3) {\n  _inherits(RollerCoasterShadowGeometry, _BufferGeometry3);\n  var _super3 = _createSuper(RollerCoasterShadowGeometry);\n  function RollerCoasterShadowGeometry(curve, divisions) {\n    var _this3;\n    _classCallCheck(this, RollerCoasterShadowGeometry);\n    _this3 = _super3.call(this);\n    var vertices = [];\n    var up = new Vector3(0, 1, 0);\n    var forward = new Vector3();\n    var quaternion = new Quaternion();\n    var prevQuaternion = new Quaternion();\n    prevQuaternion.setFromAxisAngle(up, Math.PI / 2);\n    var point = new Vector3();\n    var prevPoint = new Vector3();\n    prevPoint.copy(curve.getPointAt(0));\n    prevPoint.y = 0;\n    var vector1 = new Vector3();\n    var vector2 = new Vector3();\n    var vector3 = new Vector3();\n    var vector4 = new Vector3();\n    for (var i = 1; i <= divisions; i++) {\n      point.copy(curve.getPointAt(i / divisions));\n      point.y = 0;\n      forward.subVectors(point, prevPoint);\n      var angle = Math.atan2(forward.x, forward.z);\n      quaternion.setFromAxisAngle(up, angle);\n      vector1.set(-0.3, 0, 0);\n      vector1.applyQuaternion(quaternion);\n      vector1.add(point);\n      vector2.set(0.3, 0, 0);\n      vector2.applyQuaternion(quaternion);\n      vector2.add(point);\n      vector3.set(0.3, 0, 0);\n      vector3.applyQuaternion(prevQuaternion);\n      vector3.add(prevPoint);\n      vector4.set(-0.3, 0, 0);\n      vector4.applyQuaternion(prevQuaternion);\n      vector4.add(prevPoint);\n      vertices.push(vector1.x, vector1.y, vector1.z);\n      vertices.push(vector2.x, vector2.y, vector2.z);\n      vertices.push(vector4.x, vector4.y, vector4.z);\n      vertices.push(vector2.x, vector2.y, vector2.z);\n      vertices.push(vector3.x, vector3.y, vector3.z);\n      vertices.push(vector4.x, vector4.y, vector4.z);\n      prevPoint.copy(point);\n      prevQuaternion.copy(quaternion);\n    }\n    _this3.setAttribute(\"position\", new BufferAttribute(new Float32Array(vertices), 3));\n    return _this3;\n  }\n  return _createClass(RollerCoasterShadowGeometry);\n}(BufferGeometry);\nvar SkyGeometry = /*#__PURE__*/function (_BufferGeometry4) {\n  _inherits(SkyGeometry, _BufferGeometry4);\n  var _super4 = _createSuper(SkyGeometry);\n  function SkyGeometry() {\n    var _this4;\n    _classCallCheck(this, SkyGeometry);\n    _this4 = _super4.call(this);\n    var vertices = [];\n    for (var i = 0; i < 100; i++) {\n      var x = Math.random() * 800 - 400;\n      var y = Math.random() * 50 + 50;\n      var z = Math.random() * 800 - 400;\n      var size = Math.random() * 40 + 20;\n      vertices.push(x - size, y, z - size);\n      vertices.push(x + size, y, z - size);\n      vertices.push(x - size, y, z + size);\n      vertices.push(x + size, y, z - size);\n      vertices.push(x + size, y, z + size);\n      vertices.push(x - size, y, z + size);\n    }\n    _this4.setAttribute(\"position\", new BufferAttribute(new Float32Array(vertices), 3));\n    return _this4;\n  }\n  return _createClass(SkyGeometry);\n}(BufferGeometry);\nvar TreesGeometry = /*#__PURE__*/function (_BufferGeometry5) {\n  _inherits(TreesGeometry, _BufferGeometry5);\n  var _super5 = _createSuper(TreesGeometry);\n  function TreesGeometry(landscape) {\n    var _this5;\n    _classCallCheck(this, TreesGeometry);\n    _this5 = _super5.call(this);\n    var vertices = [];\n    var colors = [];\n    var raycaster = new Raycaster();\n    raycaster.ray.direction.set(0, -1, 0);\n    var _color = new Color();\n    for (var i = 0; i < 2e3; i++) {\n      var x = Math.random() * 500 - 250;\n      var z = Math.random() * 500 - 250;\n      raycaster.ray.origin.set(x, 50, z);\n      var intersections = raycaster.intersectObject(landscape);\n      if (intersections.length === 0) continue;\n      var y = intersections[0].point.y;\n      var height = Math.random() * 5 + 0.5;\n      var angle = Math.random() * Math.PI * 2;\n      vertices.push(x + Math.sin(angle), y, z + Math.cos(angle));\n      vertices.push(x, y + height, z);\n      vertices.push(x + Math.sin(angle + Math.PI), y, z + Math.cos(angle + Math.PI));\n      angle += Math.PI / 2;\n      vertices.push(x + Math.sin(angle), y, z + Math.cos(angle));\n      vertices.push(x, y + height, z);\n      vertices.push(x + Math.sin(angle + Math.PI), y, z + Math.cos(angle + Math.PI));\n      var random = Math.random() * 0.1;\n      for (var j = 0; j < 6; j++) {\n        _color.setRGB(0.2 + random, 0.4 + random, 0, \"srgb\");\n        colors.push(_color.r, _color.g, _color.b);\n      }\n    }\n    _this5.setAttribute(\"position\", new BufferAttribute(new Float32Array(vertices), 3));\n    _this5.setAttribute(\"color\", new BufferAttribute(new Float32Array(colors), 3));\n    return _this5;\n  }\n  return _createClass(TreesGeometry);\n}(BufferGeometry);\nexport { RollerCoasterGeometry, RollerCoasterLiftersGeometry, RollerCoasterShadowGeometry, SkyGeometry, TreesGeometry };","map":{"version":3,"names":["RollerCoasterGeometry","_BufferGeometry","_inherits","_super","_createSuper","curve","divisions","_this","_classCallCheck","call","vertices","normals","colors","color1","color2","up","Vector3","forward","right","quaternion","Quaternion","prevQuaternion","setFromAxisAngle","Math","PI","point","prevPoint","copy","getPointAt","step","PI2","sides","tube1","i","angle","push","sin","cos","tube2","vector","normal","drawShape","shape","color","set","applyQuaternion","j","length","add","x","y","z","vector1","vector2","vector3","vector4","normal1","normal2","normal3","normal4","extrudeShape","offset2","jl","point1","point2","normalize","offset","subVectors","crossVectors","atan2","setAttribute","BufferAttribute","Float32Array","_createClass","BufferGeometry","RollerCoasterLiftersGeometry","_BufferGeometry2","_super2","_this2","tangent","tube3","fromPoint2","toPoint2","fromPoint","toPoint","getTangentAt","RollerCoasterShadowGeometry","_BufferGeometry3","_super3","_this3","SkyGeometry","_BufferGeometry4","_super4","_this4","random","size","TreesGeometry","_BufferGeometry5","_super5","landscape","_this5","raycaster","Raycaster","ray","direction","_color","Color","origin","intersections","intersectObject","height","setRGB","r","g","b"],"sources":["C:\\Users\\Nayyu\\Desktop\\skibidai-public-build\\node_modules\\src\\misc\\RollerCoaster.js"],"sourcesContent":["import { BufferAttribute, BufferGeometry, Color, Quaternion, Raycaster, Vector3 } from 'three'\n\nclass RollerCoasterGeometry extends BufferGeometry {\n  constructor(curve, divisions) {\n    super()\n\n    const vertices = []\n    const normals = []\n    const colors = []\n\n    const color1 = [1, 1, 1]\n    const color2 = [1, 1, 0]\n\n    const up = new Vector3(0, 1, 0)\n    const forward = new Vector3()\n    const right = new Vector3()\n\n    const quaternion = new Quaternion()\n    const prevQuaternion = new Quaternion()\n    prevQuaternion.setFromAxisAngle(up, Math.PI / 2)\n\n    const point = new Vector3()\n    const prevPoint = new Vector3()\n    prevPoint.copy(curve.getPointAt(0))\n\n    // shapes\n\n    const step = [\n      new Vector3(-0.225, 0, 0),\n      new Vector3(0, -0.05, 0),\n      new Vector3(0, -0.175, 0),\n\n      new Vector3(0, -0.05, 0),\n      new Vector3(0.225, 0, 0),\n      new Vector3(0, -0.175, 0),\n    ]\n\n    const PI2 = Math.PI * 2\n\n    let sides = 5\n    const tube1 = []\n\n    for (let i = 0; i < sides; i++) {\n      const angle = (i / sides) * PI2\n      tube1.push(new Vector3(Math.sin(angle) * 0.06, Math.cos(angle) * 0.06, 0))\n    }\n\n    sides = 6\n    const tube2 = []\n\n    for (let i = 0; i < sides; i++) {\n      const angle = (i / sides) * PI2\n      tube2.push(new Vector3(Math.sin(angle) * 0.025, Math.cos(angle) * 0.025, 0))\n    }\n\n    const vector = new Vector3()\n    const normal = new Vector3()\n\n    function drawShape(shape, color) {\n      normal.set(0, 0, -1).applyQuaternion(quaternion)\n\n      for (let j = 0; j < shape.length; j++) {\n        vector.copy(shape[j])\n        vector.applyQuaternion(quaternion)\n        vector.add(point)\n\n        vertices.push(vector.x, vector.y, vector.z)\n        normals.push(normal.x, normal.y, normal.z)\n        colors.push(color[0], color[1], color[2])\n      }\n\n      normal.set(0, 0, 1).applyQuaternion(quaternion)\n\n      for (let j = shape.length - 1; j >= 0; j--) {\n        vector.copy(shape[j])\n        vector.applyQuaternion(quaternion)\n        vector.add(point)\n\n        vertices.push(vector.x, vector.y, vector.z)\n        normals.push(normal.x, normal.y, normal.z)\n        colors.push(color[0], color[1], color[2])\n      }\n    }\n\n    const vector1 = new Vector3()\n    const vector2 = new Vector3()\n    const vector3 = new Vector3()\n    const vector4 = new Vector3()\n\n    const normal1 = new Vector3()\n    const normal2 = new Vector3()\n    const normal3 = new Vector3()\n    const normal4 = new Vector3()\n\n    function extrudeShape(shape, offset, color) {\n      for (let j = 0, jl = shape.length; j < jl; j++) {\n        const point1 = shape[j]\n        const point2 = shape[(j + 1) % jl]\n\n        vector1.copy(point1).add(offset)\n        vector1.applyQuaternion(quaternion)\n        vector1.add(point)\n\n        vector2.copy(point2).add(offset)\n        vector2.applyQuaternion(quaternion)\n        vector2.add(point)\n\n        vector3.copy(point2).add(offset)\n        vector3.applyQuaternion(prevQuaternion)\n        vector3.add(prevPoint)\n\n        vector4.copy(point1).add(offset)\n        vector4.applyQuaternion(prevQuaternion)\n        vector4.add(prevPoint)\n\n        vertices.push(vector1.x, vector1.y, vector1.z)\n        vertices.push(vector2.x, vector2.y, vector2.z)\n        vertices.push(vector4.x, vector4.y, vector4.z)\n\n        vertices.push(vector2.x, vector2.y, vector2.z)\n        vertices.push(vector3.x, vector3.y, vector3.z)\n        vertices.push(vector4.x, vector4.y, vector4.z)\n\n        //\n\n        normal1.copy(point1)\n        normal1.applyQuaternion(quaternion)\n        normal1.normalize()\n\n        normal2.copy(point2)\n        normal2.applyQuaternion(quaternion)\n        normal2.normalize()\n\n        normal3.copy(point2)\n        normal3.applyQuaternion(prevQuaternion)\n        normal3.normalize()\n\n        normal4.copy(point1)\n        normal4.applyQuaternion(prevQuaternion)\n        normal4.normalize()\n\n        normals.push(normal1.x, normal1.y, normal1.z)\n        normals.push(normal2.x, normal2.y, normal2.z)\n        normals.push(normal4.x, normal4.y, normal4.z)\n\n        normals.push(normal2.x, normal2.y, normal2.z)\n        normals.push(normal3.x, normal3.y, normal3.z)\n        normals.push(normal4.x, normal4.y, normal4.z)\n\n        colors.push(color[0], color[1], color[2])\n        colors.push(color[0], color[1], color[2])\n        colors.push(color[0], color[1], color[2])\n\n        colors.push(color[0], color[1], color[2])\n        colors.push(color[0], color[1], color[2])\n        colors.push(color[0], color[1], color[2])\n      }\n    }\n\n    const offset = new Vector3()\n\n    for (let i = 1; i <= divisions; i++) {\n      point.copy(curve.getPointAt(i / divisions))\n\n      up.set(0, 1, 0)\n\n      forward.subVectors(point, prevPoint).normalize()\n      right.crossVectors(up, forward).normalize()\n      up.crossVectors(forward, right)\n\n      const angle = Math.atan2(forward.x, forward.z)\n\n      quaternion.setFromAxisAngle(up, angle)\n\n      if (i % 2 === 0) {\n        drawShape(step, color2)\n      }\n\n      extrudeShape(tube1, offset.set(0, -0.125, 0), color2)\n      extrudeShape(tube2, offset.set(0.2, 0, 0), color1)\n      extrudeShape(tube2, offset.set(-0.2, 0, 0), color1)\n\n      prevPoint.copy(point)\n      prevQuaternion.copy(quaternion)\n    }\n\n    // console.log( vertices.length );\n\n    this.setAttribute('position', new BufferAttribute(new Float32Array(vertices), 3))\n    this.setAttribute('normal', new BufferAttribute(new Float32Array(normals), 3))\n    this.setAttribute('color', new BufferAttribute(new Float32Array(colors), 3))\n  }\n}\n\nclass RollerCoasterLiftersGeometry extends BufferGeometry {\n  constructor(curve, divisions) {\n    super()\n\n    const vertices = []\n    const normals = []\n\n    const quaternion = new Quaternion()\n\n    const up = new Vector3(0, 1, 0)\n\n    const point = new Vector3()\n    const tangent = new Vector3()\n\n    // shapes\n\n    const tube1 = [new Vector3(0, 0.05, -0.05), new Vector3(0, 0.05, 0.05), new Vector3(0, -0.05, 0)]\n\n    const tube2 = [new Vector3(-0.05, 0, 0.05), new Vector3(-0.05, 0, -0.05), new Vector3(0.05, 0, 0)]\n\n    const tube3 = [new Vector3(0.05, 0, -0.05), new Vector3(0.05, 0, 0.05), new Vector3(-0.05, 0, 0)]\n\n    const vector1 = new Vector3()\n    const vector2 = new Vector3()\n    const vector3 = new Vector3()\n    const vector4 = new Vector3()\n\n    const normal1 = new Vector3()\n    const normal2 = new Vector3()\n    const normal3 = new Vector3()\n    const normal4 = new Vector3()\n\n    function extrudeShape(shape, fromPoint, toPoint) {\n      for (let j = 0, jl = shape.length; j < jl; j++) {\n        const point1 = shape[j]\n        const point2 = shape[(j + 1) % jl]\n\n        vector1.copy(point1)\n        vector1.applyQuaternion(quaternion)\n        vector1.add(fromPoint)\n\n        vector2.copy(point2)\n        vector2.applyQuaternion(quaternion)\n        vector2.add(fromPoint)\n\n        vector3.copy(point2)\n        vector3.applyQuaternion(quaternion)\n        vector3.add(toPoint)\n\n        vector4.copy(point1)\n        vector4.applyQuaternion(quaternion)\n        vector4.add(toPoint)\n\n        vertices.push(vector1.x, vector1.y, vector1.z)\n        vertices.push(vector2.x, vector2.y, vector2.z)\n        vertices.push(vector4.x, vector4.y, vector4.z)\n\n        vertices.push(vector2.x, vector2.y, vector2.z)\n        vertices.push(vector3.x, vector3.y, vector3.z)\n        vertices.push(vector4.x, vector4.y, vector4.z)\n\n        //\n\n        normal1.copy(point1)\n        normal1.applyQuaternion(quaternion)\n        normal1.normalize()\n\n        normal2.copy(point2)\n        normal2.applyQuaternion(quaternion)\n        normal2.normalize()\n\n        normal3.copy(point2)\n        normal3.applyQuaternion(quaternion)\n        normal3.normalize()\n\n        normal4.copy(point1)\n        normal4.applyQuaternion(quaternion)\n        normal4.normalize()\n\n        normals.push(normal1.x, normal1.y, normal1.z)\n        normals.push(normal2.x, normal2.y, normal2.z)\n        normals.push(normal4.x, normal4.y, normal4.z)\n\n        normals.push(normal2.x, normal2.y, normal2.z)\n        normals.push(normal3.x, normal3.y, normal3.z)\n        normals.push(normal4.x, normal4.y, normal4.z)\n      }\n    }\n\n    const fromPoint = new Vector3()\n    const toPoint = new Vector3()\n\n    for (let i = 1; i <= divisions; i++) {\n      point.copy(curve.getPointAt(i / divisions))\n      tangent.copy(curve.getTangentAt(i / divisions))\n\n      const angle = Math.atan2(tangent.x, tangent.z)\n\n      quaternion.setFromAxisAngle(up, angle)\n\n      //\n\n      if (point.y > 10) {\n        fromPoint.set(-0.75, -0.35, 0)\n        fromPoint.applyQuaternion(quaternion)\n        fromPoint.add(point)\n\n        toPoint.set(0.75, -0.35, 0)\n        toPoint.applyQuaternion(quaternion)\n        toPoint.add(point)\n\n        extrudeShape(tube1, fromPoint, toPoint)\n\n        fromPoint.set(-0.7, -0.3, 0)\n        fromPoint.applyQuaternion(quaternion)\n        fromPoint.add(point)\n\n        toPoint.set(-0.7, -point.y, 0)\n        toPoint.applyQuaternion(quaternion)\n        toPoint.add(point)\n\n        extrudeShape(tube2, fromPoint, toPoint)\n\n        fromPoint.set(0.7, -0.3, 0)\n        fromPoint.applyQuaternion(quaternion)\n        fromPoint.add(point)\n\n        toPoint.set(0.7, -point.y, 0)\n        toPoint.applyQuaternion(quaternion)\n        toPoint.add(point)\n\n        extrudeShape(tube3, fromPoint, toPoint)\n      } else {\n        fromPoint.set(0, -0.2, 0)\n        fromPoint.applyQuaternion(quaternion)\n        fromPoint.add(point)\n\n        toPoint.set(0, -point.y, 0)\n        toPoint.applyQuaternion(quaternion)\n        toPoint.add(point)\n\n        extrudeShape(tube3, fromPoint, toPoint)\n      }\n    }\n\n    this.setAttribute('position', new BufferAttribute(new Float32Array(vertices), 3))\n    this.setAttribute('normal', new BufferAttribute(new Float32Array(normals), 3))\n  }\n}\n\nclass RollerCoasterShadowGeometry extends BufferGeometry {\n  constructor(curve, divisions) {\n    super()\n\n    const vertices = []\n\n    const up = new Vector3(0, 1, 0)\n    const forward = new Vector3()\n\n    const quaternion = new Quaternion()\n    const prevQuaternion = new Quaternion()\n    prevQuaternion.setFromAxisAngle(up, Math.PI / 2)\n\n    const point = new Vector3()\n\n    const prevPoint = new Vector3()\n    prevPoint.copy(curve.getPointAt(0))\n    prevPoint.y = 0\n\n    const vector1 = new Vector3()\n    const vector2 = new Vector3()\n    const vector3 = new Vector3()\n    const vector4 = new Vector3()\n\n    for (let i = 1; i <= divisions; i++) {\n      point.copy(curve.getPointAt(i / divisions))\n      point.y = 0\n\n      forward.subVectors(point, prevPoint)\n\n      const angle = Math.atan2(forward.x, forward.z)\n\n      quaternion.setFromAxisAngle(up, angle)\n\n      vector1.set(-0.3, 0, 0)\n      vector1.applyQuaternion(quaternion)\n      vector1.add(point)\n\n      vector2.set(0.3, 0, 0)\n      vector2.applyQuaternion(quaternion)\n      vector2.add(point)\n\n      vector3.set(0.3, 0, 0)\n      vector3.applyQuaternion(prevQuaternion)\n      vector3.add(prevPoint)\n\n      vector4.set(-0.3, 0, 0)\n      vector4.applyQuaternion(prevQuaternion)\n      vector4.add(prevPoint)\n\n      vertices.push(vector1.x, vector1.y, vector1.z)\n      vertices.push(vector2.x, vector2.y, vector2.z)\n      vertices.push(vector4.x, vector4.y, vector4.z)\n\n      vertices.push(vector2.x, vector2.y, vector2.z)\n      vertices.push(vector3.x, vector3.y, vector3.z)\n      vertices.push(vector4.x, vector4.y, vector4.z)\n\n      prevPoint.copy(point)\n      prevQuaternion.copy(quaternion)\n    }\n\n    this.setAttribute('position', new BufferAttribute(new Float32Array(vertices), 3))\n  }\n}\n\nclass SkyGeometry extends BufferGeometry {\n  constructor() {\n    super()\n\n    const vertices = []\n\n    for (let i = 0; i < 100; i++) {\n      const x = Math.random() * 800 - 400\n      const y = Math.random() * 50 + 50\n      const z = Math.random() * 800 - 400\n\n      const size = Math.random() * 40 + 20\n\n      vertices.push(x - size, y, z - size)\n      vertices.push(x + size, y, z - size)\n      vertices.push(x - size, y, z + size)\n\n      vertices.push(x + size, y, z - size)\n      vertices.push(x + size, y, z + size)\n      vertices.push(x - size, y, z + size)\n    }\n\n    this.setAttribute('position', new BufferAttribute(new Float32Array(vertices), 3))\n  }\n}\n\nclass TreesGeometry extends BufferGeometry {\n  constructor(landscape) {\n    super()\n\n    const vertices = []\n    const colors = []\n\n    const raycaster = new Raycaster()\n    raycaster.ray.direction.set(0, -1, 0)\n\n    const _color = new Color()\n\n    for (let i = 0; i < 2000; i++) {\n      const x = Math.random() * 500 - 250\n      const z = Math.random() * 500 - 250\n\n      raycaster.ray.origin.set(x, 50, z)\n\n      const intersections = raycaster.intersectObject(landscape)\n\n      if (intersections.length === 0) continue\n\n      const y = intersections[0].point.y\n\n      const height = Math.random() * 5 + 0.5\n\n      let angle = Math.random() * Math.PI * 2\n\n      vertices.push(x + Math.sin(angle), y, z + Math.cos(angle))\n      vertices.push(x, y + height, z)\n      vertices.push(x + Math.sin(angle + Math.PI), y, z + Math.cos(angle + Math.PI))\n\n      angle += Math.PI / 2\n\n      vertices.push(x + Math.sin(angle), y, z + Math.cos(angle))\n      vertices.push(x, y + height, z)\n      vertices.push(x + Math.sin(angle + Math.PI), y, z + Math.cos(angle + Math.PI))\n\n      const random = Math.random() * 0.1\n\n      for (let j = 0; j < 6; j++) {\n        _color.setRGB(0.2 + random, 0.4 + random, 0, 'srgb')\n\n        colors.push(_color.r, _color.g, _color.b)\n      }\n    }\n\n    this.setAttribute('position', new BufferAttribute(new Float32Array(vertices), 3))\n    this.setAttribute('color', new BufferAttribute(new Float32Array(colors), 3))\n  }\n}\n\nexport { RollerCoasterGeometry, RollerCoasterLiftersGeometry, RollerCoasterShadowGeometry, SkyGeometry, TreesGeometry }\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}