{"ast":null,"code":"import _classCallCheck from \"C:/Users/Nayyu/Desktop/skibidai-public-build/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Nayyu/Desktop/skibidai-public-build/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"C:/Users/Nayyu/Desktop/skibidai-public-build/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"C:/Users/Nayyu/Desktop/skibidai-public-build/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/Nayyu/Desktop/skibidai-public-build/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nvar __defProp = Object.defineProperty;\nvar __defNormalProp = function __defNormalProp(obj, key, value) {\n  return key in obj ? __defProp(obj, key, {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: value\n  }) : obj[key] = value;\n};\nvar __publicField = function __publicField(obj, key, value) {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nimport { Pass } from \"./Pass.js\";\nvar MaskPass = /*#__PURE__*/function (_Pass) {\n  _inherits(MaskPass, _Pass);\n  var _super = _createSuper(MaskPass);\n  function MaskPass(scene, camera) {\n    var _this;\n    _classCallCheck(this, MaskPass);\n    _this = _super.call(this);\n    __publicField(_assertThisInitialized(_this), \"scene\");\n    __publicField(_assertThisInitialized(_this), \"camera\");\n    __publicField(_assertThisInitialized(_this), \"inverse\");\n    _this.scene = scene;\n    _this.camera = camera;\n    _this.clear = true;\n    _this.needsSwap = false;\n    _this.inverse = false;\n    return _this;\n  }\n  _createClass(MaskPass, [{\n    key: \"render\",\n    value: function render(renderer, writeBuffer, readBuffer) {\n      var context = renderer.getContext();\n      var state = renderer.state;\n      state.buffers.color.setMask(false);\n      state.buffers.depth.setMask(false);\n      state.buffers.color.setLocked(true);\n      state.buffers.depth.setLocked(true);\n      var writeValue, clearValue;\n      if (this.inverse) {\n        writeValue = 0;\n        clearValue = 1;\n      } else {\n        writeValue = 1;\n        clearValue = 0;\n      }\n      state.buffers.stencil.setTest(true);\n      state.buffers.stencil.setOp(context.REPLACE, context.REPLACE, context.REPLACE);\n      state.buffers.stencil.setFunc(context.ALWAYS, writeValue, 4294967295);\n      state.buffers.stencil.setClear(clearValue);\n      state.buffers.stencil.setLocked(true);\n      renderer.setRenderTarget(readBuffer);\n      if (this.clear) renderer.clear();\n      renderer.render(this.scene, this.camera);\n      renderer.setRenderTarget(writeBuffer);\n      if (this.clear) renderer.clear();\n      renderer.render(this.scene, this.camera);\n      state.buffers.color.setLocked(false);\n      state.buffers.depth.setLocked(false);\n      state.buffers.stencil.setLocked(false);\n      state.buffers.stencil.setFunc(context.EQUAL, 1, 4294967295);\n      state.buffers.stencil.setOp(context.KEEP, context.KEEP, context.KEEP);\n      state.buffers.stencil.setLocked(true);\n    }\n  }]);\n  return MaskPass;\n}(Pass);\nvar ClearMaskPass = /*#__PURE__*/function (_Pass2) {\n  _inherits(ClearMaskPass, _Pass2);\n  var _super2 = _createSuper(ClearMaskPass);\n  function ClearMaskPass() {\n    var _this2;\n    _classCallCheck(this, ClearMaskPass);\n    _this2 = _super2.call(this);\n    _this2.needsSwap = false;\n    return _this2;\n  }\n  _createClass(ClearMaskPass, [{\n    key: \"render\",\n    value: function render(renderer) {\n      renderer.state.buffers.stencil.setLocked(false);\n      renderer.state.buffers.stencil.setTest(false);\n    }\n  }]);\n  return ClearMaskPass;\n}(Pass);\nexport { ClearMaskPass, MaskPass };","map":{"version":3,"names":["MaskPass","_Pass","_inherits","_super","_createSuper","scene","camera","_this","_classCallCheck","call","__publicField","_assertThisInitialized","clear","needsSwap","inverse","_createClass","key","value","render","renderer","writeBuffer","readBuffer","context","getContext","state","buffers","color","setMask","depth","setLocked","writeValue","clearValue","stencil","setTest","setOp","REPLACE","setFunc","ALWAYS","setClear","setRenderTarget","EQUAL","KEEP","Pass","ClearMaskPass","_Pass2","_super2","_this2"],"sources":["C:\\Users\\Nayyu\\Desktop\\skibidai-public-build\\node_modules\\src\\postprocessing\\MaskPass.ts"],"sourcesContent":["import { Camera, Scene, WebGLRenderer, WebGLRenderTarget } from 'three'\nimport { Pass } from './Pass'\n\nclass MaskPass extends Pass {\n  public scene: Scene\n  public camera: Camera\n  public inverse: boolean\n\n  constructor(scene: Scene, camera: Camera) {\n    super()\n\n    this.scene = scene\n    this.camera = camera\n\n    this.clear = true\n    this.needsSwap = false\n\n    this.inverse = false\n  }\n\n  public render(\n    renderer: WebGLRenderer,\n    writeBuffer: WebGLRenderTarget,\n    readBuffer: WebGLRenderTarget /*, deltaTime, maskActive */,\n  ): void {\n    const context = renderer.getContext()\n    const state = renderer.state\n\n    // don't update color or depth\n\n    state.buffers.color.setMask(false)\n    state.buffers.depth.setMask(false)\n\n    // lock buffers\n\n    state.buffers.color.setLocked(true)\n    state.buffers.depth.setLocked(true)\n\n    // set up stencil\n\n    let writeValue, clearValue\n\n    if (this.inverse) {\n      writeValue = 0\n      clearValue = 1\n    } else {\n      writeValue = 1\n      clearValue = 0\n    }\n\n    state.buffers.stencil.setTest(true)\n    state.buffers.stencil.setOp(context.REPLACE, context.REPLACE, context.REPLACE)\n    state.buffers.stencil.setFunc(context.ALWAYS, writeValue, 0xffffffff)\n    state.buffers.stencil.setClear(clearValue)\n    state.buffers.stencil.setLocked(true)\n\n    // draw into the stencil buffer\n\n    renderer.setRenderTarget(readBuffer)\n    if (this.clear) renderer.clear()\n    renderer.render(this.scene, this.camera)\n\n    renderer.setRenderTarget(writeBuffer)\n    if (this.clear) renderer.clear()\n    renderer.render(this.scene, this.camera)\n\n    // unlock color and depth buffer for subsequent rendering\n\n    state.buffers.color.setLocked(false)\n    state.buffers.depth.setLocked(false)\n\n    // only render where stencil is set to 1\n\n    state.buffers.stencil.setLocked(false)\n    state.buffers.stencil.setFunc(context.EQUAL, 1, 0xffffffff) // draw if == 1\n    state.buffers.stencil.setOp(context.KEEP, context.KEEP, context.KEEP)\n    state.buffers.stencil.setLocked(true)\n  }\n}\n\nclass ClearMaskPass extends Pass {\n  constructor() {\n    super()\n    this.needsSwap = false\n  }\n\n  public render(renderer: WebGLRenderer /*, writeBuffer, readBuffer, deltaTime, maskActive */): void {\n    renderer.state.buffers.stencil.setLocked(false)\n    renderer.state.buffers.stencil.setTest(false)\n  }\n}\n\nexport { MaskPass, ClearMaskPass }\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}