{"ast":null,"code":"import _classCallCheck from \"C:/Users/Nayyu/Desktop/skibidai-public-build/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Nayyu/Desktop/skibidai-public-build/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nvar __defProp = Object.defineProperty;\nvar __defNormalProp = function __defNormalProp(obj, key, value) {\n  return key in obj ? __defProp(obj, key, {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: value\n  }) : obj[key] = value;\n};\nvar __publicField = function __publicField(obj, key, value) {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nimport { Vector3, Quaternion, Matrix4 } from \"three\";\nimport { CharsetEncoder } from \"../libs/mmdparser.js\";\nvar MMDExporter = /*#__PURE__*/function () {\n  function MMDExporter() {\n    _classCallCheck(this, MMDExporter);\n    // Unicode to Shift_JIS table\n    __publicField(this, \"u2sTable\");\n  }\n  /* TODO: implement\n  // mesh -> pmd\n  this.parsePmd = function ( object ) {\n  };\n  */\n  /* TODO: implement\n  // mesh -> pmx\n  this.parsePmx = function ( object ) {\n  };\n  */\n  /* TODO: implement\n  // animation + skeleton -> vmd\n  this.parseVmd = function ( object ) {\n  };\n  */\n  /*\n   * skeleton -> vpd\n   * Returns Shift_JIS encoded Uint8Array. Otherwise return strings.\n   */\n  _createClass(MMDExporter, [{\n    key: \"parseVpd\",\n    value: function parseVpd(skin, outputShiftJis, useOriginalBones) {\n      if (skin.isSkinnedMesh !== true) {\n        console.warn(\"THREE.MMDExporter: parseVpd() requires SkinnedMesh instance.\");\n        return null;\n      }\n      function toStringsFromNumber(num) {\n        if (Math.abs(num) < 1e-6) num = 0;\n        var a = num.toString();\n        if (a.indexOf(\".\") === -1) {\n          a += \".\";\n        }\n        a += \"000000\";\n        var index = a.indexOf(\".\");\n        var d = a.slice(0, index);\n        var p = a.slice(index + 1, index + 7);\n        return d + \".\" + p;\n      }\n      function toStringsFromArray(array2) {\n        var a = [];\n        for (var i = 0, il = array2.length; i < il; i++) {\n          a.push(toStringsFromNumber(array2[i]));\n        }\n        return a.join(\",\");\n      }\n      skin.updateMatrixWorld(true);\n      var bones = skin.skeleton.bones;\n      var bones2 = this.getBindBones(skin);\n      var position = new Vector3();\n      var quaternion = new Quaternion();\n      var quaternion2 = new Quaternion();\n      var matrix = new Matrix4();\n      var array = [];\n      array.push(\"Vocaloid Pose Data file\");\n      array.push(\"\");\n      array.push((skin.name !== \"\" ? skin.name.replace(/\\s/g, \"_\") : \"skin\") + \".osm;\");\n      array.push(bones.length + \";\");\n      array.push(\"\");\n      for (var i = 0, il = bones.length; i < il; i++) {\n        var bone = bones[i];\n        var bone2 = bones2[i];\n        if (useOriginalBones === true && bone.userData.ik !== void 0 && bone.userData.ik.originalMatrix !== void 0) {\n          matrix.fromArray(bone.userData.ik.originalMatrix);\n        } else {\n          matrix.copy(bone.matrix);\n        }\n        position.setFromMatrixPosition(matrix);\n        quaternion.setFromRotationMatrix(matrix);\n        var pArray = position.sub(bone2.position).toArray();\n        var qArray = quaternion2.copy(bone2.quaternion).conjugate().multiply(quaternion).toArray();\n        pArray[2] = -pArray[2];\n        qArray[0] = -qArray[0];\n        qArray[1] = -qArray[1];\n        array.push(\"Bone\" + i + \"{\" + bone.name);\n        array.push(\"  \" + toStringsFromArray(pArray) + \";\");\n        array.push(\"  \" + toStringsFromArray(qArray) + \";\");\n        array.push(\"}\");\n        array.push(\"\");\n      }\n      array.push(\"\");\n      var lines = array.join(\"\\n\");\n      return outputShiftJis === true ? this.unicodeToShiftjis(lines) : lines;\n    }\n  }, {\n    key: \"unicodeToShiftjis\",\n    value: function unicodeToShiftjis(str) {\n      if (this.u2sTable === void 0) {\n        var encoder = new CharsetEncoder();\n        var table = encoder.s2uTable;\n        this.u2sTable = {};\n        var keys = Object.keys(table);\n        for (var i = 0, il = keys.length; i < il; i++) {\n          var key = keys[i];\n          var value = table[key];\n          this.u2sTable[value] = parseInt(key);\n        }\n      }\n      var array = [];\n      for (var _i = 0, _il = str.length; _i < _il; _i++) {\n        var code = str.charCodeAt(_i);\n        var _value = this.u2sTable[code];\n        if (_value === void 0) {\n          throw \"cannot convert charcode 0x\" + code.toString(16);\n        } else if (_value > 255) {\n          array.push(_value >> 8 & 255);\n          array.push(_value & 255);\n        } else {\n          array.push(_value & 255);\n        }\n      }\n      return new Uint8Array(array);\n    }\n  }, {\n    key: \"getBindBones\",\n    value: function getBindBones(skin) {\n      var poseSkin = skin.clone();\n      poseSkin.pose();\n      return poseSkin.skeleton.bones;\n    }\n  }]);\n  return MMDExporter;\n}();\nexport { MMDExporter };","map":{"version":3,"names":["MMDExporter","_classCallCheck","__publicField","_createClass","key","value","parseVpd","skin","outputShiftJis","useOriginalBones","isSkinnedMesh","console","warn","toStringsFromNumber","num","Math","abs","a","toString","indexOf","index","d","slice","p","toStringsFromArray","array2","i","il","length","push","join","updateMatrixWorld","bones","skeleton","bones2","getBindBones","position","Vector3","quaternion","Quaternion","quaternion2","matrix","Matrix4","array","name","replace","bone","bone2","userData","ik","originalMatrix","fromArray","copy","setFromMatrixPosition","setFromRotationMatrix","pArray","sub","toArray","qArray","conjugate","multiply","lines","unicodeToShiftjis","str","u2sTable","encoder","CharsetEncoder","table","s2uTable","keys","Object","parseInt","code","charCodeAt","Uint8Array","poseSkin","clone","pose"],"sources":["C:\\Users\\Nayyu\\Desktop\\skibidai-public-build\\node_modules\\src\\exporters\\MMDExporter.ts"],"sourcesContent":["import { Matrix4, Quaternion, Vector3, Bone, SkinnedMesh } from 'three'\n// @ts-ignore\nimport { CharsetEncoder } from '../libs/mmdparser'\n\n/**\n * Dependencies\n *  - mmd-parser https://github.com/takahirox/mmd-parser\n */\n\nclass MMDExporter {\n  /* TODO: implement\n\t// mesh -> pmd\n\tthis.parsePmd = function ( object ) {\n\t};\n\t*/\n\n  /* TODO: implement\n\t// mesh -> pmx\n\tthis.parsePmx = function ( object ) {\n\t};\n\t*/\n\n  /* TODO: implement\n\t// animation + skeleton -> vmd\n\tthis.parseVmd = function ( object ) {\n\t};\n\t*/\n\n  /*\n   * skeleton -> vpd\n   * Returns Shift_JIS encoded Uint8Array. Otherwise return strings.\n   */\n  public parseVpd(skin: SkinnedMesh, outputShiftJis: boolean, useOriginalBones: boolean): Uint8Array | string | null {\n    if (skin.isSkinnedMesh !== true) {\n      console.warn('THREE.MMDExporter: parseVpd() requires SkinnedMesh instance.')\n      return null\n    }\n\n    function toStringsFromNumber(num: number): string {\n      if (Math.abs(num) < 1e-6) num = 0\n\n      let a = num.toString()\n\n      if (a.indexOf('.') === -1) {\n        a += '.'\n      }\n\n      a += '000000'\n\n      const index = a.indexOf('.')\n\n      const d = a.slice(0, index)\n      const p = a.slice(index + 1, index + 7)\n\n      return d + '.' + p\n    }\n\n    function toStringsFromArray(array: number[]): string {\n      const a = []\n\n      for (let i = 0, il = array.length; i < il; i++) {\n        a.push(toStringsFromNumber(array[i]))\n      }\n\n      return a.join(',')\n    }\n\n    skin.updateMatrixWorld(true)\n\n    const bones = skin.skeleton.bones\n    const bones2 = this.getBindBones(skin)\n\n    const position = new Vector3()\n    const quaternion = new Quaternion()\n    const quaternion2 = new Quaternion()\n    const matrix = new Matrix4()\n\n    const array = []\n    array.push('Vocaloid Pose Data file')\n    array.push('')\n    array.push((skin.name !== '' ? skin.name.replace(/\\s/g, '_') : 'skin') + '.osm;')\n    array.push(bones.length + ';')\n    array.push('')\n\n    for (let i = 0, il = bones.length; i < il; i++) {\n      const bone = bones[i]\n      const bone2 = bones2[i]\n\n      /*\n       * use the bone matrix saved before solving IK.\n       * see CCDIKSolver for the detail.\n       */\n      if (\n        useOriginalBones === true &&\n        bone.userData.ik !== undefined &&\n        bone.userData.ik.originalMatrix !== undefined\n      ) {\n        matrix.fromArray(bone.userData.ik.originalMatrix)\n      } else {\n        matrix.copy(bone.matrix)\n      }\n\n      position.setFromMatrixPosition(matrix)\n      quaternion.setFromRotationMatrix(matrix)\n\n      const pArray = position.sub(bone2.position).toArray()\n      const qArray = quaternion2.copy(bone2.quaternion).conjugate().multiply(quaternion).toArray()\n\n      // right to left\n      pArray[2] = -pArray[2]\n      qArray[0] = -qArray[0]\n      qArray[1] = -qArray[1]\n\n      array.push('Bone' + i + '{' + bone.name)\n      array.push('  ' + toStringsFromArray(pArray) + ';')\n      array.push('  ' + toStringsFromArray(qArray) + ';')\n      array.push('}')\n      array.push('')\n    }\n\n    array.push('')\n\n    const lines = array.join('\\n')\n\n    return outputShiftJis === true ? this.unicodeToShiftjis(lines) : lines\n  }\n\n  // Unicode to Shift_JIS table\n  private u2sTable: { [key: string]: number | undefined } | undefined\n\n  private unicodeToShiftjis(str: string): Uint8Array {\n    if (this.u2sTable === undefined) {\n      const encoder = new CharsetEncoder()\n      const table = encoder.s2uTable\n      this.u2sTable = {}\n\n      const keys = Object.keys(table)\n\n      for (let i = 0, il = keys.length; i < il; i++) {\n        let key = keys[i]\n\n        const value = table[key]\n\n        this.u2sTable[value] = parseInt(key)\n      }\n    }\n\n    const array = []\n\n    for (let i = 0, il = str.length; i < il; i++) {\n      const code = str.charCodeAt(i)\n\n      const value = this.u2sTable[code]\n\n      if (value === undefined) {\n        throw 'cannot convert charcode 0x' + code.toString(16)\n      } else if (value > 0xff) {\n        array.push((value >> 8) & 0xff)\n        array.push(value & 0xff)\n      } else {\n        array.push(value & 0xff)\n      }\n    }\n\n    return new Uint8Array(array)\n  }\n\n  private getBindBones(skin: SkinnedMesh): Bone[] {\n    // any more efficient ways?\n    const poseSkin = skin.clone()\n    poseSkin.pose()\n    return poseSkin.skeleton.bones\n  }\n}\n\nexport { MMDExporter }\n"],"mappings":";;;;;;;;;;;;;;;;;IASMA,WAAA;EAAN,SAAAA,YAAA;IAAAC,eAAA,OAAAD,WAAA;IAuHU;IAAAE,aAAA;EAAA;EAAA;AAAA;AAAA;AAAA;AAAA;EAAA;AAAA;AAAA;AAAA;AAAA;EAAA;AAAA;AAAA;AAAA;AAAA;EAAA;AAAA;AAAA;AAAA;EAAAC,YAAA,CAAAH,WAAA;IAAAI,GAAA;IAAAC,KAAA,EAhGD,SAAAC,SAASC,IAAA,EAAmBC,cAAA,EAAyBC,gBAAA,EAAuD;MAC7G,IAAAF,IAAA,CAAKG,aAAA,KAAkB,MAAM;QAC/BC,OAAA,CAAQC,IAAA,CAAK,8DAA8D;QACpE;MACT;MAEA,SAASC,oBAAoBC,GAAA,EAAqB;QAC5C,IAAAC,IAAA,CAAKC,GAAA,CAAIF,GAAG,IAAI,MAAYA,GAAA;QAE5B,IAAAG,CAAA,GAAIH,GAAA,CAAII,QAAA;QAEZ,IAAID,CAAA,CAAEE,OAAA,CAAQ,GAAG,MAAM,IAAI;UACpBF,CAAA;QACP;QAEKA,CAAA;QAEC,IAAAG,KAAA,GAAQH,CAAA,CAAEE,OAAA,CAAQ,GAAG;QAE3B,IAAME,CAAA,GAAIJ,CAAA,CAAEK,KAAA,CAAM,GAAGF,KAAK;QAC1B,IAAMG,CAAA,GAAIN,CAAA,CAAEK,KAAA,CAAMF,KAAA,GAAQ,GAAGA,KAAA,GAAQ,CAAC;QAEtC,OAAOC,CAAA,GAAI,MAAME,CAAA;MACnB;MAEA,SAASC,mBAAmBC,MAAA,EAAyB;QACnD,IAAMR,CAAA,GAAI;QAEV,SAASS,CAAA,GAAI,GAAGC,EAAA,GAAKF,MAAA,CAAMG,MAAA,EAAQF,CAAA,GAAIC,EAAA,EAAID,CAAA,IAAK;UAC9CT,CAAA,CAAEY,IAAA,CAAKhB,mBAAA,CAAoBY,MAAA,CAAMC,CAAC,CAAC,CAAC;QACtC;QAEO,OAAAT,CAAA,CAAEa,IAAA,CAAK,GAAG;MACnB;MAEAvB,IAAA,CAAKwB,iBAAA,CAAkB,IAAI;MAErB,IAAAC,KAAA,GAAQzB,IAAA,CAAK0B,QAAA,CAASD,KAAA;MACtB,IAAAE,MAAA,GAAS,KAAKC,YAAA,CAAa5B,IAAI;MAE/B,IAAA6B,QAAA,GAAW,IAAIC,OAAA;MACf,IAAAC,UAAA,GAAa,IAAIC,UAAA;MACjB,IAAAC,WAAA,GAAc,IAAID,UAAA;MAClB,IAAAE,MAAA,GAAS,IAAIC,OAAA;MAEnB,IAAMC,KAAA,GAAQ;MACdA,KAAA,CAAMd,IAAA,CAAK,yBAAyB;MACpCc,KAAA,CAAMd,IAAA,CAAK,EAAE;MACPc,KAAA,CAAAd,IAAA,EAAMtB,IAAA,CAAKqC,IAAA,KAAS,KAAKrC,IAAA,CAAKqC,IAAA,CAAKC,OAAA,CAAQ,OAAO,GAAG,IAAI,UAAU,OAAO;MAC1EF,KAAA,CAAAd,IAAA,CAAKG,KAAA,CAAMJ,MAAA,GAAS,GAAG;MAC7Be,KAAA,CAAMd,IAAA,CAAK,EAAE;MAEb,SAASH,CAAA,GAAI,GAAGC,EAAA,GAAKK,KAAA,CAAMJ,MAAA,EAAQF,CAAA,GAAIC,EAAA,EAAID,CAAA,IAAK;QACxC,IAAAoB,IAAA,GAAOd,KAAA,CAAMN,CAAC;QACd,IAAAqB,KAAA,GAAQb,MAAA,CAAOR,CAAC;QAOpB,IAAAjB,gBAAA,KAAqB,QACrBqC,IAAA,CAAKE,QAAA,CAASC,EAAA,KAAO,UACrBH,IAAA,CAAKE,QAAA,CAASC,EAAA,CAAGC,cAAA,KAAmB,QACpC;UACAT,MAAA,CAAOU,SAAA,CAAUL,IAAA,CAAKE,QAAA,CAASC,EAAA,CAAGC,cAAc;QAAA,OAC3C;UACET,MAAA,CAAAW,IAAA,CAAKN,IAAA,CAAKL,MAAM;QACzB;QAEAL,QAAA,CAASiB,qBAAA,CAAsBZ,MAAM;QACrCH,UAAA,CAAWgB,qBAAA,CAAsBb,MAAM;QAEvC,IAAMc,MAAA,GAASnB,QAAA,CAASoB,GAAA,CAAIT,KAAA,CAAMX,QAAQ,EAAEqB,OAAA;QACtC,IAAAC,MAAA,GAASlB,WAAA,CAAYY,IAAA,CAAKL,KAAA,CAAMT,UAAU,EAAEqB,SAAA,GAAYC,QAAA,CAAStB,UAAU,EAAEmB,OAAA,CAAQ;QAG3FF,MAAA,CAAO,CAAC,IAAI,CAACA,MAAA,CAAO,CAAC;QACrBG,MAAA,CAAO,CAAC,IAAI,CAACA,MAAA,CAAO,CAAC;QACrBA,MAAA,CAAO,CAAC,IAAI,CAACA,MAAA,CAAO,CAAC;QAErBf,KAAA,CAAMd,IAAA,CAAK,SAASH,CAAA,GAAI,MAAMoB,IAAA,CAAKF,IAAI;QACvCD,KAAA,CAAMd,IAAA,CAAK,OAAOL,kBAAA,CAAmB+B,MAAM,IAAI,GAAG;QAClDZ,KAAA,CAAMd,IAAA,CAAK,OAAOL,kBAAA,CAAmBkC,MAAM,IAAI,GAAG;QAClDf,KAAA,CAAMd,IAAA,CAAK,GAAG;QACdc,KAAA,CAAMd,IAAA,CAAK,EAAE;MACf;MAEAc,KAAA,CAAMd,IAAA,CAAK,EAAE;MAEP,IAAAgC,KAAA,GAAQlB,KAAA,CAAMb,IAAA,CAAK,IAAI;MAE7B,OAAOtB,cAAA,KAAmB,OAAO,KAAKsD,iBAAA,CAAkBD,KAAK,IAAIA,KAAA;IACnE;EAAA;IAAAzD,GAAA;IAAAC,KAAA,EAKQ,SAAAyD,kBAAkBC,GAAA,EAAyB;MAC7C,SAAKC,QAAA,KAAa,QAAW;QACzB,IAAAC,OAAA,GAAU,IAAIC,cAAA;QACpB,IAAMC,KAAA,GAAQF,OAAA,CAAQG,QAAA;QACtB,KAAKJ,QAAA,GAAW;QAEV,IAAAK,IAAA,GAAOC,MAAA,CAAOD,IAAA,CAAKF,KAAK;QAE9B,SAASzC,CAAA,GAAI,GAAGC,EAAA,GAAK0C,IAAA,CAAKzC,MAAA,EAAQF,CAAA,GAAIC,EAAA,EAAID,CAAA,IAAK;UACzC,IAAAtB,GAAA,GAAMiE,IAAA,CAAK3C,CAAC;UAEV,IAAArB,KAAA,GAAQ8D,KAAA,CAAM/D,GAAG;UAEvB,KAAK4D,QAAA,CAAS3D,KAAK,IAAIkE,QAAA,CAASnE,GAAG;QACrC;MACF;MAEA,IAAMuC,KAAA,GAAQ;MAEd,SAASjB,EAAA,GAAI,GAAGC,GAAA,GAAKoC,GAAA,CAAInC,MAAA,EAAQF,EAAA,GAAIC,GAAA,EAAID,EAAA,IAAK;QACtC,IAAA8C,IAAA,GAAOT,GAAA,CAAIU,UAAA,CAAW/C,EAAC;QAEvB,IAAArB,MAAA,GAAQ,KAAK2D,QAAA,CAASQ,IAAI;QAEhC,IAAInE,MAAA,KAAU,QAAW;UACjB,qCAA+BmE,IAAA,CAAKtD,QAAA,CAAS,EAAE;QAAA,WAC5Cb,MAAA,GAAQ,KAAM;UACjBsC,KAAA,CAAAd,IAAA,CAAMxB,MAAA,IAAS,IAAK,GAAI;UACxBsC,KAAA,CAAAd,IAAA,CAAKxB,MAAA,GAAQ,GAAI;QAAA,OAClB;UACCsC,KAAA,CAAAd,IAAA,CAAKxB,MAAA,GAAQ,GAAI;QACzB;MACF;MAEO,WAAIqE,UAAA,CAAW/B,KAAK;IAC7B;EAAA;IAAAvC,GAAA;IAAAC,KAAA,EAEQ,SAAA8B,aAAa5B,IAAA,EAA2B;MAExC,IAAAoE,QAAA,GAAWpE,IAAA,CAAKqE,KAAA;MACtBD,QAAA,CAASE,IAAA,CAAK;MACd,OAAOF,QAAA,CAAS1C,QAAA,CAASD,KAAA;IAC3B;EAAA;EAAA,OAAAhC,WAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}