{"ast":null,"code":"import _classCallCheck from \"C:/Users/Nayyu/Desktop/skibidai-public-build/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Nayyu/Desktop/skibidai-public-build/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"C:/Users/Nayyu/Desktop/skibidai-public-build/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _get from \"C:/Users/Nayyu/Desktop/skibidai-public-build/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"C:/Users/Nayyu/Desktop/skibidai-public-build/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"C:/Users/Nayyu/Desktop/skibidai-public-build/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/Nayyu/Desktop/skibidai-public-build/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nvar __defProp = Object.defineProperty;\nvar __defNormalProp = function __defNormalProp(obj, key, value) {\n  return key in obj ? __defProp(obj, key, {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: value\n  }) : obj[key] = value;\n};\nvar __publicField = function __publicField(obj, key, value) {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nimport { Object3D, Mesh, SphereGeometry, MeshBasicMaterial } from \"three\";\nimport { GLTFLoader } from \"../loaders/GLTFLoader.js\";\nimport { MotionControllerConstants, fetchProfile, MotionController } from \"../libs/MotionControllers.js\";\nvar DEFAULT_PROFILES_PATH = \"https://cdn.jsdelivr.net/npm/@webxr-input-profiles/assets@1.0/dist/profiles\";\nvar DEFAULT_PROFILE = \"generic-trigger\";\nvar applyEnvironmentMap = function applyEnvironmentMap(envMap, obj) {\n  obj.traverse(function (child) {\n    if (child instanceof Mesh && \"envMap\" in child.material) {\n      child.material.envMap = envMap;\n      child.material.needsUpdate = true;\n    }\n  });\n};\nvar XRControllerModel = /*#__PURE__*/function (_Object3D) {\n  _inherits(XRControllerModel, _Object3D);\n  var _super = _createSuper(XRControllerModel);\n  function XRControllerModel() {\n    var _this;\n    _classCallCheck(this, XRControllerModel);\n    _this = _super.call(this);\n    __publicField(_assertThisInitialized(_this), \"envMap\");\n    __publicField(_assertThisInitialized(_this), \"motionController\");\n    _this.motionController = null;\n    _this.envMap = null;\n    return _this;\n  }\n  _createClass(XRControllerModel, [{\n    key: \"setEnvironmentMap\",\n    value: function setEnvironmentMap(envMap) {\n      if (this.envMap == envMap) {\n        return this;\n      }\n      this.envMap = envMap;\n      applyEnvironmentMap(this.envMap, this);\n      return this;\n    }\n    /**\n     * Polls data from the XRInputSource and updates the model's components to match\n     * the real world data\n     */\n  }, {\n    key: \"updateMatrixWorld\",\n    value: function updateMatrixWorld(force) {\n      _get(_getPrototypeOf(XRControllerModel.prototype), \"updateMatrixWorld\", this).call(this, force);\n      if (!this.motionController) return;\n      this.motionController.updateFromGamepad();\n      Object.values(this.motionController.components).forEach(function (component) {\n        Object.values(component.visualResponses).forEach(function (visualResponse) {\n          var valueNode = visualResponse.valueNode,\n            minNode = visualResponse.minNode,\n            maxNode = visualResponse.maxNode,\n            value = visualResponse.value,\n            valueNodeProperty = visualResponse.valueNodeProperty;\n          if (!valueNode) return;\n          if (valueNodeProperty === MotionControllerConstants.VisualResponseProperty.VISIBILITY && typeof value === \"boolean\") {\n            valueNode.visible = value;\n          } else if (valueNodeProperty === MotionControllerConstants.VisualResponseProperty.TRANSFORM && minNode && maxNode && typeof value === \"number\") {\n            valueNode.quaternion.slerpQuaternions(minNode.quaternion, maxNode.quaternion, value);\n            valueNode.position.lerpVectors(minNode.position, maxNode.position, value);\n          }\n        });\n      });\n    }\n  }]);\n  return XRControllerModel;\n}(Object3D);\nfunction findNodes(motionController, scene) {\n  Object.values(motionController.components).forEach(function (component) {\n    var type = component.type,\n      touchPointNodeName = component.touchPointNodeName,\n      visualResponses = component.visualResponses;\n    if (type === MotionControllerConstants.ComponentType.TOUCHPAD && touchPointNodeName) {\n      component.touchPointNode = scene.getObjectByName(touchPointNodeName);\n      if (component.touchPointNode) {\n        var sphereGeometry = new SphereGeometry(1e-3);\n        var material = new MeshBasicMaterial({\n          color: 255\n        });\n        var sphere = new Mesh(sphereGeometry, material);\n        component.touchPointNode.add(sphere);\n      } else {\n        console.warn(\"Could not find touch dot, \".concat(component.touchPointNodeName, \", in touchpad component \").concat(component.id));\n      }\n    }\n    Object.values(visualResponses).forEach(function (visualResponse) {\n      var valueNodeName = visualResponse.valueNodeName,\n        minNodeName = visualResponse.minNodeName,\n        maxNodeName = visualResponse.maxNodeName,\n        valueNodeProperty = visualResponse.valueNodeProperty;\n      if (valueNodeProperty === MotionControllerConstants.VisualResponseProperty.TRANSFORM && minNodeName && maxNodeName) {\n        visualResponse.minNode = scene.getObjectByName(minNodeName);\n        visualResponse.maxNode = scene.getObjectByName(maxNodeName);\n        if (!visualResponse.minNode) {\n          console.warn(\"Could not find \".concat(minNodeName, \" in the model\"));\n          return;\n        }\n        if (!visualResponse.maxNode) {\n          console.warn(\"Could not find \".concat(maxNodeName, \" in the model\"));\n          return;\n        }\n      }\n      visualResponse.valueNode = scene.getObjectByName(valueNodeName);\n      if (!visualResponse.valueNode) {\n        console.warn(\"Could not find \".concat(valueNodeName, \" in the model\"));\n      }\n    });\n  });\n}\nfunction addAssetSceneToControllerModel(controllerModel, scene) {\n  findNodes(controllerModel.motionController, scene);\n  if (controllerModel.envMap) {\n    applyEnvironmentMap(controllerModel.envMap, scene);\n  }\n  controllerModel.add(scene);\n}\nvar XRControllerModelFactory = /*#__PURE__*/function () {\n  function XRControllerModelFactory() {\n    var gltfLoader = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n    _classCallCheck(this, XRControllerModelFactory);\n    __publicField(this, \"gltfLoader\");\n    __publicField(this, \"path\");\n    __publicField(this, \"_assetCache\");\n    this.gltfLoader = gltfLoader;\n    this.path = DEFAULT_PROFILES_PATH;\n    this._assetCache = {};\n    if (!this.gltfLoader) {\n      this.gltfLoader = new GLTFLoader();\n    }\n  }\n  _createClass(XRControllerModelFactory, [{\n    key: \"createControllerModel\",\n    value: function createControllerModel(controller) {\n      var _this2 = this;\n      var controllerModel = new XRControllerModel();\n      var scene = null;\n      var onConnected = function onConnected(event) {\n        var xrInputSource = event.data;\n        if (xrInputSource.targetRayMode !== \"tracked-pointer\" || !xrInputSource.gamepad) return;\n        fetchProfile(xrInputSource, _this2.path, DEFAULT_PROFILE).then(function (_ref) {\n          var profile = _ref.profile,\n            assetPath = _ref.assetPath;\n          if (!assetPath) {\n            throw new Error(\"no asset path\");\n          }\n          controllerModel.motionController = new MotionController(xrInputSource, profile, assetPath);\n          var assetUrl = controllerModel.motionController.assetUrl;\n          var cachedAsset = _this2._assetCache[assetUrl];\n          if (cachedAsset) {\n            scene = cachedAsset.scene.clone();\n            addAssetSceneToControllerModel(controllerModel, scene);\n          } else {\n            if (!_this2.gltfLoader) {\n              throw new Error(\"GLTFLoader not set.\");\n            }\n            _this2.gltfLoader.setPath(\"\");\n            _this2.gltfLoader.load(controllerModel.motionController.assetUrl, function (asset) {\n              if (!controllerModel.motionController) {\n                console.warn(\"motionController gone while gltf load, bailing...\");\n                return;\n              }\n              _this2._assetCache[assetUrl] = asset;\n              scene = asset.scene.clone();\n              addAssetSceneToControllerModel(controllerModel, scene);\n            }, function () {}, function () {\n              throw new Error(\"Asset \".concat(assetUrl, \" missing or malformed.\"));\n            });\n          }\n        }).catch(function (err) {\n          console.warn(err);\n        });\n      };\n      controller.addEventListener(\"connected\", onConnected);\n      var onDisconnected = function onDisconnected() {\n        controller.removeEventListener(\"connected\", onConnected);\n        controller.removeEventListener(\"disconnected\", onDisconnected);\n        controllerModel.motionController = null;\n        if (scene) {\n          controllerModel.remove(scene);\n        }\n        scene = null;\n      };\n      controller.addEventListener(\"disconnected\", onDisconnected);\n      return controllerModel;\n    }\n  }]);\n  return XRControllerModelFactory;\n}();\nexport { XRControllerModelFactory };","map":{"version":3,"names":["DEFAULT_PROFILES_PATH","DEFAULT_PROFILE","applyEnvironmentMap","envMap","obj","traverse","child","Mesh","material","needsUpdate","XRControllerModel","_Object3D","_inherits","_super","_createSuper","_this","_classCallCheck","call","__publicField","_assertThisInitialized","motionController","_createClass","key","value","setEnvironmentMap","updateMatrixWorld","force","_get","_getPrototypeOf","prototype","updateFromGamepad","Object","values","components","forEach","component","visualResponses","visualResponse","valueNode","minNode","maxNode","valueNodeProperty","MotionControllerConstants","VisualResponseProperty","VISIBILITY","visible","TRANSFORM","quaternion","slerpQuaternions","position","lerpVectors","Object3D","findNodes","scene","type","touchPointNodeName","ComponentType","TOUCHPAD","touchPointNode","getObjectByName","sphereGeometry","SphereGeometry","MeshBasicMaterial","color","sphere","add","console","warn","concat","id","valueNodeName","minNodeName","maxNodeName","addAssetSceneToControllerModel","controllerModel","XRControllerModelFactory","gltfLoader","arguments","length","undefined","path","_assetCache","GLTFLoader","createControllerModel","controller","_this2","onConnected","event","xrInputSource","data","targetRayMode","gamepad","fetchProfile","then","_ref","profile","assetPath","Error","MotionController","assetUrl","cachedAsset","clone","setPath","load","asset","catch","err","addEventListener","onDisconnected","removeEventListener","remove"],"sources":["C:\\Users\\Nayyu\\Desktop\\skibidai-public-build\\node_modules\\src\\webxr\\XRControllerModelFactory.ts"],"sourcesContent":["import { Mesh, Object3D, SphereGeometry, MeshBasicMaterial } from 'three'\nimport type { Texture, Group } from 'three'\nimport { GLTFLoader } from '../loaders/GLTFLoader'\nimport { fetchProfile, MotionController, MotionControllerConstants } from '../libs/MotionControllers'\n\nconst DEFAULT_PROFILES_PATH = 'https://cdn.jsdelivr.net/npm/@webxr-input-profiles/assets@1.0/dist/profiles'\nconst DEFAULT_PROFILE = 'generic-trigger'\n\nconst applyEnvironmentMap = (envMap: Texture, obj: Object3D): void => {\n  obj.traverse((child) => {\n    if (child instanceof Mesh && 'envMap' in child.material) {\n      child.material.envMap = envMap\n      child.material.needsUpdate = true\n    }\n  })\n}\n\nclass XRControllerModel extends Object3D {\n  envMap: Texture | null\n  motionController: MotionController | null\n  constructor() {\n    super()\n\n    this.motionController = null\n    this.envMap = null\n  }\n\n  setEnvironmentMap(envMap: Texture): XRControllerModel {\n    if (this.envMap == envMap) {\n      return this\n    }\n\n    this.envMap = envMap\n    applyEnvironmentMap(this.envMap, this)\n\n    return this\n  }\n\n  /**\n   * Polls data from the XRInputSource and updates the model's components to match\n   * the real world data\n   */\n  updateMatrixWorld(force: boolean): void {\n    super.updateMatrixWorld(force)\n\n    if (!this.motionController) return\n\n    // Cause the MotionController to poll the Gamepad for data\n    this.motionController.updateFromGamepad()\n\n    // Update the 3D model to reflect the button, thumbstick, and touchpad state\n    Object.values(this.motionController.components).forEach((component) => {\n      // Update node data based on the visual responses' current states\n      Object.values(component.visualResponses).forEach((visualResponse) => {\n        const { valueNode, minNode, maxNode, value, valueNodeProperty } = visualResponse\n\n        // Skip if the visual response node is not found. No error is needed,\n        // because it will have been reported at load time.\n        if (!valueNode) return\n\n        // Calculate the new properties based on the weight supplied\n        if (\n          valueNodeProperty === MotionControllerConstants.VisualResponseProperty.VISIBILITY &&\n          typeof value === 'boolean'\n        ) {\n          valueNode.visible = value\n        } else if (\n          valueNodeProperty === MotionControllerConstants.VisualResponseProperty.TRANSFORM &&\n          minNode &&\n          maxNode &&\n          typeof value === 'number'\n        ) {\n          valueNode.quaternion.slerpQuaternions(minNode.quaternion, maxNode.quaternion, value)\n\n          valueNode.position.lerpVectors(minNode.position, maxNode.position, value)\n        }\n      })\n    })\n  }\n}\n\n/**\n * Walks the model's tree to find the nodes needed to animate the components and\n * saves them to the motionContoller components for use in the frame loop. When\n * touchpads are found, attaches a touch dot to them.\n */\nfunction findNodes(motionController: MotionController, scene: Object3D): void {\n  // Loop through the components and find the nodes needed for each components' visual responses\n  Object.values(motionController.components).forEach((component) => {\n    const { type, touchPointNodeName, visualResponses } = component\n\n    if (type === MotionControllerConstants.ComponentType.TOUCHPAD && touchPointNodeName) {\n      component.touchPointNode = scene.getObjectByName(touchPointNodeName)\n      if (component.touchPointNode) {\n        // Attach a touch dot to the touchpad.\n        const sphereGeometry = new SphereGeometry(0.001)\n        const material = new MeshBasicMaterial({ color: 0x0000ff })\n        const sphere = new Mesh(sphereGeometry, material)\n        component.touchPointNode.add(sphere)\n      } else {\n        console.warn(`Could not find touch dot, ${component.touchPointNodeName}, in touchpad component ${component.id}`)\n      }\n    }\n\n    // Loop through all the visual responses to be applied to this component\n    Object.values(visualResponses).forEach((visualResponse) => {\n      const { valueNodeName, minNodeName, maxNodeName, valueNodeProperty } = visualResponse\n\n      // If animating a transform, find the two nodes to be interpolated between.\n      if (\n        valueNodeProperty === MotionControllerConstants.VisualResponseProperty.TRANSFORM &&\n        minNodeName &&\n        maxNodeName\n      ) {\n        visualResponse.minNode = scene.getObjectByName(minNodeName)\n        visualResponse.maxNode = scene.getObjectByName(maxNodeName)\n\n        // If the extents cannot be found, skip this animation\n        if (!visualResponse.minNode) {\n          console.warn(`Could not find ${minNodeName} in the model`)\n          return\n        }\n\n        if (!visualResponse.maxNode) {\n          console.warn(`Could not find ${maxNodeName} in the model`)\n          return\n        }\n      }\n\n      // If the target node cannot be found, skip this animation\n      visualResponse.valueNode = scene.getObjectByName(valueNodeName)\n      if (!visualResponse.valueNode) {\n        console.warn(`Could not find ${valueNodeName} in the model`)\n      }\n    })\n  })\n}\n\nfunction addAssetSceneToControllerModel(controllerModel: XRControllerModel, scene: Object3D): void {\n  // Find the nodes needed for animation and cache them on the motionController.\n  findNodes(controllerModel.motionController!, scene)\n\n  // Apply any environment map that the mesh already has set.\n  if (controllerModel.envMap) {\n    applyEnvironmentMap(controllerModel.envMap, scene)\n  }\n\n  // Add the glTF scene to the controllerModel.\n  controllerModel.add(scene)\n}\n\nclass XRControllerModelFactory {\n  gltfLoader: GLTFLoader\n  path: string\n  private _assetCache: Record<string, { scene: Object3D } | undefined>\n  constructor(gltfLoader: GLTFLoader = null!) {\n    this.gltfLoader = gltfLoader\n    this.path = DEFAULT_PROFILES_PATH\n    this._assetCache = {}\n\n    // If a GLTFLoader wasn't supplied to the constructor create a new one.\n    if (!this.gltfLoader) {\n      this.gltfLoader = new GLTFLoader()\n    }\n  }\n\n  createControllerModel(controller: Group): XRControllerModel {\n    const controllerModel = new XRControllerModel()\n    let scene: Object3D | null = null\n\n    const onConnected = (event: any): void => {\n      const xrInputSource = event.data\n\n      if (xrInputSource.targetRayMode !== 'tracked-pointer' || !xrInputSource.gamepad) return\n\n      fetchProfile(xrInputSource, this.path, DEFAULT_PROFILE)\n        .then(({ profile, assetPath }) => {\n          if (!assetPath) {\n            throw new Error('no asset path')\n          }\n\n          controllerModel.motionController = new MotionController(xrInputSource, profile, assetPath)\n\n          const assetUrl = controllerModel.motionController.assetUrl\n\n          const cachedAsset = this._assetCache[assetUrl]\n          if (cachedAsset) {\n            scene = cachedAsset.scene.clone()\n\n            addAssetSceneToControllerModel(controllerModel, scene)\n          } else {\n            if (!this.gltfLoader) {\n              throw new Error('GLTFLoader not set.')\n            }\n\n            this.gltfLoader.setPath('')\n            this.gltfLoader.load(\n              controllerModel.motionController.assetUrl,\n              (asset: { scene: Object3D }) => {\n                if (!controllerModel.motionController) {\n                  console.warn('motionController gone while gltf load, bailing...')\n                  return\n                }\n\n                this._assetCache[assetUrl] = asset\n\n                scene = asset.scene.clone()\n\n                addAssetSceneToControllerModel(controllerModel, scene)\n              },\n              () => {},\n              () => {\n                throw new Error(`Asset ${assetUrl} missing or malformed.`)\n              },\n            )\n          }\n        })\n        .catch((err) => {\n          console.warn(err)\n        })\n    }\n\n    controller.addEventListener('connected', onConnected)\n\n    const onDisconnected = (): void => {\n      controller.removeEventListener('connected', onConnected)\n      controller.removeEventListener('disconnected', onDisconnected)\n      controllerModel.motionController = null\n      if (scene) {\n        controllerModel.remove(scene)\n      }\n      scene = null\n    }\n\n    controller.addEventListener('disconnected', onDisconnected)\n\n    return controllerModel\n  }\n}\n\nexport { XRControllerModelFactory }\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}