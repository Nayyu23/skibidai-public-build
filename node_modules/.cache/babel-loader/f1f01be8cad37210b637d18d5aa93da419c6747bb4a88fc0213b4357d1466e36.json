{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/Nayyu/Desktop/skibidai-public-build/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _objectSpread from \"C:/Users/Nayyu/Desktop/skibidai-public-build/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _classCallCheck from \"C:/Users/Nayyu/Desktop/skibidai-public-build/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Nayyu/Desktop/skibidai-public-build/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _asyncToGenerator from \"C:/Users/Nayyu/Desktop/skibidai-public-build/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar __defProp = Object.defineProperty;\nvar __defNormalProp = function __defNormalProp(obj, key, value) {\n  return key in obj ? __defProp(obj, key, {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: value\n  }) : obj[key] = value;\n};\nvar __publicField = function __publicField(obj, key, value) {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nvar MotionControllerConstants = {\n  Handedness: {\n    NONE: \"none\",\n    LEFT: \"left\",\n    RIGHT: \"right\"\n  },\n  ComponentState: {\n    DEFAULT: \"default\",\n    TOUCHED: \"touched\",\n    PRESSED: \"pressed\"\n  },\n  ComponentProperty: {\n    BUTTON: \"button\",\n    X_AXIS: \"xAxis\",\n    Y_AXIS: \"yAxis\",\n    STATE: \"state\"\n  },\n  ComponentType: {\n    TRIGGER: \"trigger\",\n    SQUEEZE: \"squeeze\",\n    TOUCHPAD: \"touchpad\",\n    THUMBSTICK: \"thumbstick\",\n    BUTTON: \"button\"\n  },\n  ButtonTouchThreshold: 0.05,\n  AxisTouchThreshold: 0.1,\n  VisualResponseProperty: {\n    TRANSFORM: \"transform\",\n    VISIBILITY: \"visibility\"\n  }\n};\nfunction fetchJsonFile(_x) {\n  return _fetchJsonFile.apply(this, arguments);\n}\nfunction _fetchJsonFile() {\n  _fetchJsonFile = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(path) {\n    var response;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return fetch(path);\n        case 2:\n          response = _context.sent;\n          if (response.ok) {\n            _context.next = 7;\n            break;\n          }\n          throw new Error(response.statusText);\n        case 7:\n          return _context.abrupt(\"return\", response.json());\n        case 8:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee);\n  }));\n  return _fetchJsonFile.apply(this, arguments);\n}\nfunction fetchProfilesList(_x2) {\n  return _fetchProfilesList.apply(this, arguments);\n}\nfunction _fetchProfilesList() {\n  _fetchProfilesList = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(basePath) {\n    var profileListFileName, profilesList;\n    return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n      while (1) switch (_context2.prev = _context2.next) {\n        case 0:\n          if (basePath) {\n            _context2.next = 2;\n            break;\n          }\n          throw new Error(\"No basePath supplied\");\n        case 2:\n          profileListFileName = \"profilesList.json\";\n          _context2.next = 5;\n          return fetchJsonFile(\"\".concat(basePath, \"/\").concat(profileListFileName));\n        case 5:\n          profilesList = _context2.sent;\n          return _context2.abrupt(\"return\", profilesList);\n        case 7:\n        case \"end\":\n          return _context2.stop();\n      }\n    }, _callee2);\n  }));\n  return _fetchProfilesList.apply(this, arguments);\n}\nfunction fetchProfile(_x3, _x4) {\n  return _fetchProfile.apply(this, arguments);\n}\nfunction _fetchProfile() {\n  _fetchProfile = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(xrInputSource, basePath) {\n    var defaultProfile,\n      getAssetPath,\n      supportedProfilesList,\n      match,\n      supportedProfile,\n      profile,\n      assetPath,\n      layout,\n      _args3 = arguments;\n    return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n      while (1) switch (_context3.prev = _context3.next) {\n        case 0:\n          defaultProfile = _args3.length > 2 && _args3[2] !== undefined ? _args3[2] : null;\n          getAssetPath = _args3.length > 3 && _args3[3] !== undefined ? _args3[3] : true;\n          if (xrInputSource) {\n            _context3.next = 4;\n            break;\n          }\n          throw new Error(\"No xrInputSource supplied\");\n        case 4:\n          if (basePath) {\n            _context3.next = 6;\n            break;\n          }\n          throw new Error(\"No basePath supplied\");\n        case 6:\n          _context3.next = 8;\n          return fetchProfilesList(basePath);\n        case 8:\n          supportedProfilesList = _context3.sent;\n          match = void 0;\n          xrInputSource.profiles.some(function (profileId) {\n            var supportedProfile = supportedProfilesList[profileId];\n            if (supportedProfile) {\n              match = {\n                profileId: profileId,\n                profilePath: \"\".concat(basePath, \"/\").concat(supportedProfile.path),\n                deprecated: !!supportedProfile.deprecated\n              };\n            }\n            return !!match;\n          });\n          if (match) {\n            _context3.next = 18;\n            break;\n          }\n          if (defaultProfile) {\n            _context3.next = 14;\n            break;\n          }\n          throw new Error(\"No matching profile name found\");\n        case 14:\n          supportedProfile = supportedProfilesList[defaultProfile];\n          if (supportedProfile) {\n            _context3.next = 17;\n            break;\n          }\n          throw new Error(\"No matching profile name found and default profile \\\"\".concat(defaultProfile, \"\\\" missing.\"));\n        case 17:\n          match = {\n            profileId: defaultProfile,\n            profilePath: \"\".concat(basePath, \"/\").concat(supportedProfile.path),\n            deprecated: !!supportedProfile.deprecated\n          };\n        case 18:\n          _context3.next = 20;\n          return fetchJsonFile(match.profilePath);\n        case 20:\n          profile = _context3.sent;\n          assetPath = void 0;\n          if (!getAssetPath) {\n            _context3.next = 27;\n            break;\n          }\n          if (xrInputSource.handedness === \"any\") {\n            layout = profile.layouts[Object.keys(profile.layouts)[0]];\n          } else {\n            layout = profile.layouts[xrInputSource.handedness];\n          }\n          if (layout) {\n            _context3.next = 26;\n            break;\n          }\n          throw new Error(\"No matching handedness, \".concat(xrInputSource.handedness, \", in profile \").concat(match.profileId));\n        case 26:\n          if (layout.assetPath) {\n            assetPath = match.profilePath.replace(\"profile.json\", layout.assetPath);\n          }\n        case 27:\n          return _context3.abrupt(\"return\", {\n            profile: profile,\n            assetPath: assetPath\n          });\n        case 28:\n        case \"end\":\n          return _context3.stop();\n      }\n    }, _callee3);\n  }));\n  return _fetchProfile.apply(this, arguments);\n}\nvar defaultComponentValues = {\n  xAxis: 0,\n  yAxis: 0,\n  button: 0,\n  state: MotionControllerConstants.ComponentState.DEFAULT\n};\nfunction normalizeAxes() {\n  var x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n  var y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  var xAxis = x;\n  var yAxis = y;\n  var hypotenuse = Math.sqrt(x * x + y * y);\n  if (hypotenuse > 1) {\n    var theta = Math.atan2(y, x);\n    xAxis = Math.cos(theta);\n    yAxis = Math.sin(theta);\n  }\n  var result = {\n    normalizedXAxis: xAxis * 0.5 + 0.5,\n    normalizedYAxis: yAxis * 0.5 + 0.5\n  };\n  return result;\n}\nvar VisualResponse = /*#__PURE__*/function () {\n  function VisualResponse(visualResponseDescription) {\n    _classCallCheck(this, VisualResponse);\n    __publicField(this, \"value\");\n    __publicField(this, \"componentProperty\");\n    __publicField(this, \"states\");\n    __publicField(this, \"valueNodeName\");\n    __publicField(this, \"valueNodeProperty\");\n    __publicField(this, \"minNodeName\");\n    __publicField(this, \"maxNodeName\");\n    __publicField(this, \"valueNode\");\n    __publicField(this, \"minNode\");\n    __publicField(this, \"maxNode\");\n    this.componentProperty = visualResponseDescription.componentProperty;\n    this.states = visualResponseDescription.states;\n    this.valueNodeName = visualResponseDescription.valueNodeName;\n    this.valueNodeProperty = visualResponseDescription.valueNodeProperty;\n    if (this.valueNodeProperty === MotionControllerConstants.VisualResponseProperty.TRANSFORM) {\n      this.minNodeName = visualResponseDescription.minNodeName;\n      this.maxNodeName = visualResponseDescription.maxNodeName;\n    }\n    this.value = 0;\n    this.updateFromComponent(defaultComponentValues);\n  }\n  /**\n   * Computes the visual response's interpolation weight based on component state\n   * @param {Object} componentValues - The component from which to update\n   * @param {number | undefined} xAxis - The reported X axis value of the component\n   * @param {number | undefined} yAxis - The reported Y axis value of the component\n   * @param {number | undefined} button - The reported value of the component's button\n   * @param {string} state - The component's active state\n   */\n  _createClass(VisualResponse, [{\n    key: \"updateFromComponent\",\n    value: function updateFromComponent(_ref) {\n      var xAxis = _ref.xAxis,\n        yAxis = _ref.yAxis,\n        button = _ref.button,\n        state = _ref.state;\n      var _normalizeAxes = normalizeAxes(xAxis, yAxis),\n        normalizedXAxis = _normalizeAxes.normalizedXAxis,\n        normalizedYAxis = _normalizeAxes.normalizedYAxis;\n      switch (this.componentProperty) {\n        case MotionControllerConstants.ComponentProperty.X_AXIS:\n          this.value = this.states.includes(state) ? normalizedXAxis : 0.5;\n          break;\n        case MotionControllerConstants.ComponentProperty.Y_AXIS:\n          this.value = this.states.includes(state) ? normalizedYAxis : 0.5;\n          break;\n        case MotionControllerConstants.ComponentProperty.BUTTON:\n          this.value = this.states.includes(state) && button ? button : 0;\n          break;\n        case MotionControllerConstants.ComponentProperty.STATE:\n          if (this.valueNodeProperty === MotionControllerConstants.VisualResponseProperty.VISIBILITY) {\n            this.value = this.states.includes(state);\n          } else {\n            this.value = this.states.includes(state) ? 1 : 0;\n          }\n          break;\n        default:\n          throw new Error(\"Unexpected visualResponse componentProperty \".concat(this.componentProperty));\n      }\n    }\n  }]);\n  return VisualResponse;\n}();\nvar Component = /*#__PURE__*/function () {\n  /**\n   * @param {string} componentId - Id of the component\n   * @param {InputProfileComponent} componentDescription - Description of the component to be created\n   */\n  function Component(componentId, componentDescription) {\n    var _this = this;\n    _classCallCheck(this, Component);\n    __publicField(this, \"id\");\n    __publicField(this, \"values\");\n    __publicField(this, \"type\");\n    __publicField(this, \"gamepadIndices\");\n    __publicField(this, \"rootNodeName\");\n    __publicField(this, \"visualResponses\");\n    __publicField(this, \"touchPointNodeName\");\n    __publicField(this, \"touchPointNode\");\n    if (!componentId || !componentDescription || !componentDescription.visualResponses || !componentDescription.gamepadIndices || Object.keys(componentDescription.gamepadIndices).length === 0) {\n      throw new Error(\"Invalid arguments supplied\");\n    }\n    this.id = componentId;\n    this.type = componentDescription.type;\n    this.rootNodeName = componentDescription.rootNodeName;\n    this.touchPointNodeName = componentDescription.touchPointNodeName;\n    this.visualResponses = {};\n    Object.keys(componentDescription.visualResponses).forEach(function (responseName) {\n      var visualResponse = new VisualResponse(componentDescription.visualResponses[responseName]);\n      _this.visualResponses[responseName] = visualResponse;\n    });\n    this.gamepadIndices = Object.assign({}, componentDescription.gamepadIndices);\n    this.values = {\n      state: MotionControllerConstants.ComponentState.DEFAULT,\n      button: this.gamepadIndices.button !== void 0 ? 0 : void 0,\n      xAxis: this.gamepadIndices.xAxis !== void 0 ? 0 : void 0,\n      yAxis: this.gamepadIndices.yAxis !== void 0 ? 0 : void 0\n    };\n  }\n  _createClass(Component, [{\n    key: \"data\",\n    get: function get() {\n      var data = _objectSpread({\n        id: this.id\n      }, this.values);\n      return data;\n    }\n    /**\n     * @description Poll for updated data based on current gamepad state\n     * @param {Object} gamepad - The gamepad object from which the component data should be polled\n     */\n  }, {\n    key: \"updateFromGamepad\",\n    value: function updateFromGamepad(gamepad) {\n      var _this2 = this;\n      this.values.state = MotionControllerConstants.ComponentState.DEFAULT;\n      if (this.gamepadIndices.button !== void 0 && gamepad.buttons.length > this.gamepadIndices.button) {\n        var gamepadButton = gamepad.buttons[this.gamepadIndices.button];\n        this.values.button = gamepadButton.value;\n        this.values.button = this.values.button < 0 ? 0 : this.values.button;\n        this.values.button = this.values.button > 1 ? 1 : this.values.button;\n        if (gamepadButton.pressed || this.values.button === 1) {\n          this.values.state = MotionControllerConstants.ComponentState.PRESSED;\n        } else if (gamepadButton.touched || this.values.button > MotionControllerConstants.ButtonTouchThreshold) {\n          this.values.state = MotionControllerConstants.ComponentState.TOUCHED;\n        }\n      }\n      if (this.gamepadIndices.xAxis !== void 0 && gamepad.axes.length > this.gamepadIndices.xAxis) {\n        this.values.xAxis = gamepad.axes[this.gamepadIndices.xAxis];\n        this.values.xAxis = this.values.xAxis < -1 ? -1 : this.values.xAxis;\n        this.values.xAxis = this.values.xAxis > 1 ? 1 : this.values.xAxis;\n        if (this.values.state === MotionControllerConstants.ComponentState.DEFAULT && Math.abs(this.values.xAxis) > MotionControllerConstants.AxisTouchThreshold) {\n          this.values.state = MotionControllerConstants.ComponentState.TOUCHED;\n        }\n      }\n      if (this.gamepadIndices.yAxis !== void 0 && gamepad.axes.length > this.gamepadIndices.yAxis) {\n        this.values.yAxis = gamepad.axes[this.gamepadIndices.yAxis];\n        this.values.yAxis = this.values.yAxis < -1 ? -1 : this.values.yAxis;\n        this.values.yAxis = this.values.yAxis > 1 ? 1 : this.values.yAxis;\n        if (this.values.state === MotionControllerConstants.ComponentState.DEFAULT && Math.abs(this.values.yAxis) > MotionControllerConstants.AxisTouchThreshold) {\n          this.values.state = MotionControllerConstants.ComponentState.TOUCHED;\n        }\n      }\n      Object.values(this.visualResponses).forEach(function (visualResponse) {\n        visualResponse.updateFromComponent(_this2.values);\n      });\n    }\n  }]);\n  return Component;\n}();\nvar MotionController = /*#__PURE__*/function () {\n  /**\n   * @param {XRInputSource} xrInputSource - The XRInputSource to build the MotionController around\n   * @param {Profile} profile - The best matched profile description for the supplied xrInputSource\n   * @param {string} assetUrl\n   */\n  function MotionController(xrInputSource, profile, assetUrl) {\n    var _this3 = this;\n    _classCallCheck(this, MotionController);\n    __publicField(this, \"xrInputSource\");\n    __publicField(this, \"assetUrl\");\n    __publicField(this, \"layoutDescription\");\n    __publicField(this, \"id\");\n    __publicField(this, \"components\");\n    if (!xrInputSource) {\n      throw new Error(\"No xrInputSource supplied\");\n    }\n    if (!profile) {\n      throw new Error(\"No profile supplied\");\n    }\n    if (!profile.layouts[xrInputSource.handedness]) {\n      throw new Error(\"No layout for \" + xrInputSource.handedness + \" handedness\");\n    }\n    this.xrInputSource = xrInputSource;\n    this.assetUrl = assetUrl;\n    this.id = profile.profileId;\n    this.layoutDescription = profile.layouts[xrInputSource.handedness];\n    this.components = {};\n    Object.keys(this.layoutDescription.components).forEach(function (componentId) {\n      var componentDescription = _this3.layoutDescription.components[componentId];\n      _this3.components[componentId] = new Component(componentId, componentDescription);\n    });\n    this.updateFromGamepad();\n  }\n  _createClass(MotionController, [{\n    key: \"gripSpace\",\n    get: function get() {\n      return this.xrInputSource.gripSpace;\n    }\n  }, {\n    key: \"targetRaySpace\",\n    get: function get() {\n      return this.xrInputSource.targetRaySpace;\n    }\n    /**\n     * @description Returns a subset of component data for simplified debugging\n     */\n  }, {\n    key: \"data\",\n    get: function get() {\n      var data = [];\n      Object.values(this.components).forEach(function (component) {\n        data.push(component.data);\n      });\n      return data;\n    }\n    /**\n     * @description Poll for updated data based on current gamepad state\n     */\n  }, {\n    key: \"updateFromGamepad\",\n    value: function updateFromGamepad() {\n      var _this4 = this;\n      Object.values(this.components).forEach(function (component) {\n        component.updateFromGamepad(_this4.xrInputSource.gamepad);\n      });\n    }\n  }]);\n  return MotionController;\n}();\nexport { MotionController, MotionControllerConstants, fetchProfile, fetchProfilesList };","map":{"version":3,"names":["MotionControllerConstants","Handedness","NONE","LEFT","RIGHT","ComponentState","DEFAULT","TOUCHED","PRESSED","ComponentProperty","BUTTON","X_AXIS","Y_AXIS","STATE","ComponentType","TRIGGER","SQUEEZE","TOUCHPAD","THUMBSTICK","ButtonTouchThreshold","AxisTouchThreshold","VisualResponseProperty","TRANSFORM","VISIBILITY","fetchJsonFile","_x","_fetchJsonFile","apply","arguments","_asyncToGenerator","_regeneratorRuntime","mark","_callee","path","response","wrap","_callee$","_context","prev","next","fetch","sent","ok","Error","statusText","abrupt","json","stop","fetchProfilesList","_x2","_fetchProfilesList","_callee2","basePath","profileListFileName","profilesList","_callee2$","_context2","concat","fetchProfile","_x3","_x4","_fetchProfile","_callee3","xrInputSource","defaultProfile","getAssetPath","supportedProfilesList","match","supportedProfile","profile","assetPath","layout","_args3","_callee3$","_context3","length","undefined","profiles","some","profileId","profilePath","deprecated","handedness","layouts","Object","keys","replace","defaultComponentValues","xAxis","yAxis","button","state","normalizeAxes","x","y","hypotenuse","Math","sqrt","theta","atan2","cos","sin","result","normalizedXAxis","normalizedYAxis","VisualResponse","visualResponseDescription","_classCallCheck","__publicField","componentProperty","states","valueNodeName","valueNodeProperty","minNodeName","maxNodeName","value","updateFromComponent","_createClass","key","_ref","_normalizeAxes","includes","Component","componentId","componentDescription","_this","visualResponses","gamepadIndices","id","type","rootNodeName","touchPointNodeName","forEach","responseName","visualResponse","assign","values","get","data","_objectSpread","updateFromGamepad","gamepad","_this2","buttons","gamepadButton","pressed","touched","axes","abs","MotionController","assetUrl","_this3","layoutDescription","components","gripSpace","targetRaySpace","component","push","_this4"],"sources":["C:\\Users\\Nayyu\\Desktop\\skibidai-public-build\\node_modules\\src\\libs\\MotionControllers.ts"],"sourcesContent":["/**\n * @webxr-input-profiles/motion-controllers 1.0.0 https://github.com/immersive-web/webxr-input-profiles\n */\n\nimport type { Object3D } from 'three'\n\ninterface GamepadIndices {\n  button: number\n  xAxis?: number\n  yAxis?: number\n}\n\ninterface VisualResponseDescription {\n  componentProperty: string\n  states: string[]\n  valueNodeProperty: string\n  valueNodeName: string\n  minNodeName?: string\n  maxNodeName?: string\n}\n\ntype VisualResponses = Record<string, VisualResponseDescription>\n\ninterface ComponentDescription {\n  type: string\n  gamepadIndices: GamepadIndices\n  rootNodeName: string\n  visualResponses: VisualResponses\n  touchPointNodeName?: string\n}\n\ninterface Components {\n  [componentKey: string]: ComponentDescription\n}\n\ninterface LayoutDescription {\n  selectComponentId: string\n  components: Components\n  gamepadMapping: string\n  rootNodeName: string\n  assetPath: string\n}\n\ntype Layouts = Partial<Record<XRHandedness, LayoutDescription>>\n\nexport interface Profile {\n  profileId: string\n  fallbackProfileIds: string[]\n  layouts: Layouts\n}\n\ninterface ProfilesList {\n  [profileId: string]: { path: string; deprecated?: boolean } | undefined\n}\n\nconst MotionControllerConstants = {\n  Handedness: {\n    NONE: 'none',\n    LEFT: 'left',\n    RIGHT: 'right',\n  },\n\n  ComponentState: {\n    DEFAULT: 'default',\n    TOUCHED: 'touched',\n    PRESSED: 'pressed',\n  },\n\n  ComponentProperty: {\n    BUTTON: 'button',\n    X_AXIS: 'xAxis',\n    Y_AXIS: 'yAxis',\n    STATE: 'state',\n  },\n\n  ComponentType: {\n    TRIGGER: 'trigger',\n    SQUEEZE: 'squeeze',\n    TOUCHPAD: 'touchpad',\n    THUMBSTICK: 'thumbstick',\n    BUTTON: 'button',\n  },\n\n  ButtonTouchThreshold: 0.05,\n\n  AxisTouchThreshold: 0.1,\n\n  VisualResponseProperty: {\n    TRANSFORM: 'transform',\n    VISIBILITY: 'visibility',\n  },\n}\n\n/**\n * @description Static helper function to fetch a JSON file and turn it into a JS object\n * @param {string} path - Path to JSON file to be fetched\n */\nasync function fetchJsonFile<T>(path: string): Promise<T> {\n  const response = await fetch(path)\n  if (!response.ok) {\n    throw new Error(response.statusText)\n  } else {\n    return response.json()\n  }\n}\n\nasync function fetchProfilesList(basePath: string): Promise<ProfilesList> {\n  if (!basePath) {\n    throw new Error('No basePath supplied')\n  }\n\n  const profileListFileName = 'profilesList.json'\n  const profilesList = await fetchJsonFile<ProfilesList>(`${basePath}/${profileListFileName}`)\n  return profilesList\n}\n\nasync function fetchProfile(\n  xrInputSource: XRInputSource,\n  basePath: string,\n  defaultProfile: string | null = null,\n  getAssetPath = true,\n): Promise<{ profile: Profile; assetPath: string | undefined }> {\n  if (!xrInputSource) {\n    throw new Error('No xrInputSource supplied')\n  }\n\n  if (!basePath) {\n    throw new Error('No basePath supplied')\n  }\n\n  // Get the list of profiles\n  const supportedProfilesList = await fetchProfilesList(basePath)\n\n  // Find the relative path to the first requested profile that is recognized\n  let match: { profileId: string; profilePath: string; deprecated: boolean } | undefined = undefined\n  xrInputSource.profiles.some((profileId: string) => {\n    const supportedProfile = supportedProfilesList[profileId]\n    if (supportedProfile) {\n      match = {\n        profileId,\n        profilePath: `${basePath}/${supportedProfile.path}`,\n        deprecated: !!supportedProfile.deprecated,\n      }\n    }\n    return !!match\n  })\n\n  if (!match) {\n    if (!defaultProfile) {\n      throw new Error('No matching profile name found')\n    }\n\n    const supportedProfile = supportedProfilesList[defaultProfile]\n    if (!supportedProfile) {\n      throw new Error(`No matching profile name found and default profile \"${defaultProfile}\" missing.`)\n    }\n\n    match = {\n      profileId: defaultProfile,\n      profilePath: `${basePath}/${supportedProfile.path}`,\n      deprecated: !!supportedProfile.deprecated,\n    }\n  }\n\n  const profile = await fetchJsonFile<Profile>(match.profilePath)\n\n  let assetPath: string | undefined = undefined\n  if (getAssetPath) {\n    let layout\n    if ((xrInputSource.handedness as string) === 'any') {\n      layout = profile.layouts[Object.keys(profile.layouts)[0] as XRHandedness]\n    } else {\n      layout = profile.layouts[xrInputSource.handedness]\n    }\n    if (!layout) {\n      throw new Error(`No matching handedness, ${xrInputSource.handedness}, in profile ${match.profileId}`)\n    }\n\n    if (layout.assetPath) {\n      assetPath = match.profilePath.replace('profile.json', layout.assetPath)\n    }\n  }\n\n  return { profile, assetPath }\n}\n\n/** @constant {Object} */\nconst defaultComponentValues = {\n  xAxis: 0,\n  yAxis: 0,\n  button: 0,\n  state: MotionControllerConstants.ComponentState.DEFAULT,\n}\n\n/**\n * @description Converts an X, Y coordinate from the range -1 to 1 (as reported by the Gamepad\n * API) to the range 0 to 1 (for interpolation). Also caps the X, Y values to be bounded within\n * a circle. This ensures that thumbsticks are not animated outside the bounds of their physical\n * range of motion and touchpads do not report touch locations off their physical bounds.\n * @param {number | undefined} x The original x coordinate in the range -1 to 1\n * @param {number | undefined} y The original y coordinate in the range -1 to 1\n */\nfunction normalizeAxes(\n  x: number | undefined = 0,\n  y: number | undefined = 0,\n): { normalizedXAxis: number; normalizedYAxis: number } {\n  let xAxis = x\n  let yAxis = y\n\n  // Determine if the point is outside the bounds of the circle\n  // and, if so, place it on the edge of the circle\n  const hypotenuse = Math.sqrt(x * x + y * y)\n  if (hypotenuse > 1) {\n    const theta = Math.atan2(y, x)\n    xAxis = Math.cos(theta)\n    yAxis = Math.sin(theta)\n  }\n\n  // Scale and move the circle so values are in the interpolation range.  The circle's origin moves\n  // from (0, 0) to (0.5, 0.5). The circle's radius scales from 1 to be 0.5.\n  const result = {\n    normalizedXAxis: xAxis * 0.5 + 0.5,\n    normalizedYAxis: yAxis * 0.5 + 0.5,\n  }\n  return result\n}\n\n/**\n * Contains the description of how the 3D model should visually respond to a specific user input.\n * This is accomplished by initializing the object with the name of a node in the 3D model and\n * property that need to be modified in response to user input, the name of the nodes representing\n * the allowable range of motion, and the name of the input which triggers the change. In response\n * to the named input changing, this object computes the appropriate weighting to use for\n * interpolating between the range of motion nodes.\n */\nclass VisualResponse implements VisualResponseDescription {\n  value: number | boolean\n  componentProperty: string\n  states: string[]\n  valueNodeName: string\n  valueNodeProperty: string\n  minNodeName?: string\n  maxNodeName?: string\n  valueNode: Object3D | undefined\n  minNode: Object3D | undefined\n  maxNode: Object3D | undefined\n  constructor(visualResponseDescription: VisualResponseDescription) {\n    this.componentProperty = visualResponseDescription.componentProperty\n    this.states = visualResponseDescription.states\n    this.valueNodeName = visualResponseDescription.valueNodeName\n    this.valueNodeProperty = visualResponseDescription.valueNodeProperty\n\n    if (this.valueNodeProperty === MotionControllerConstants.VisualResponseProperty.TRANSFORM) {\n      this.minNodeName = visualResponseDescription.minNodeName\n      this.maxNodeName = visualResponseDescription.maxNodeName\n    }\n\n    // Initializes the response's current value based on default data\n    this.value = 0\n    this.updateFromComponent(defaultComponentValues)\n  }\n\n  /**\n   * Computes the visual response's interpolation weight based on component state\n   * @param {Object} componentValues - The component from which to update\n   * @param {number | undefined} xAxis - The reported X axis value of the component\n   * @param {number | undefined} yAxis - The reported Y axis value of the component\n   * @param {number | undefined} button - The reported value of the component's button\n   * @param {string} state - The component's active state\n   */\n  updateFromComponent({\n    xAxis,\n    yAxis,\n    button,\n    state,\n  }: {\n    xAxis?: number\n    yAxis?: number\n    button?: number\n    state: string\n  }): void {\n    const { normalizedXAxis, normalizedYAxis } = normalizeAxes(xAxis, yAxis)\n    switch (this.componentProperty) {\n      case MotionControllerConstants.ComponentProperty.X_AXIS:\n        this.value = this.states.includes(state) ? normalizedXAxis : 0.5\n        break\n      case MotionControllerConstants.ComponentProperty.Y_AXIS:\n        this.value = this.states.includes(state) ? normalizedYAxis : 0.5\n        break\n      case MotionControllerConstants.ComponentProperty.BUTTON:\n        this.value = this.states.includes(state) && button ? button : 0\n        break\n      case MotionControllerConstants.ComponentProperty.STATE:\n        if (this.valueNodeProperty === MotionControllerConstants.VisualResponseProperty.VISIBILITY) {\n          this.value = this.states.includes(state)\n        } else {\n          this.value = this.states.includes(state) ? 1.0 : 0.0\n        }\n        break\n      default:\n        throw new Error(`Unexpected visualResponse componentProperty ${this.componentProperty}`)\n    }\n  }\n}\n\nclass Component implements ComponentDescription {\n  id: string\n  values: {\n    state: string\n    button: number | undefined\n    xAxis: number | undefined\n    yAxis: number | undefined\n  }\n\n  type: string\n  gamepadIndices: GamepadIndices\n  rootNodeName: string\n  visualResponses: Record<string, VisualResponse>\n  touchPointNodeName?: string | undefined\n  touchPointNode?: Object3D\n\n  /**\n   * @param {string} componentId - Id of the component\n   * @param {InputProfileComponent} componentDescription - Description of the component to be created\n   */\n  constructor(componentId: string, componentDescription: ComponentDescription) {\n    if (\n      !componentId ||\n      !componentDescription ||\n      !componentDescription.visualResponses ||\n      !componentDescription.gamepadIndices ||\n      Object.keys(componentDescription.gamepadIndices).length === 0\n    ) {\n      throw new Error('Invalid arguments supplied')\n    }\n\n    this.id = componentId\n    this.type = componentDescription.type\n    this.rootNodeName = componentDescription.rootNodeName\n    this.touchPointNodeName = componentDescription.touchPointNodeName\n\n    // Build all the visual responses for this component\n    this.visualResponses = {}\n    Object.keys(componentDescription.visualResponses).forEach((responseName) => {\n      const visualResponse = new VisualResponse(componentDescription.visualResponses[responseName])\n      this.visualResponses[responseName] = visualResponse\n    })\n\n    // Set default values\n    this.gamepadIndices = Object.assign({}, componentDescription.gamepadIndices)\n\n    this.values = {\n      state: MotionControllerConstants.ComponentState.DEFAULT,\n      button: this.gamepadIndices.button !== undefined ? 0 : undefined,\n      xAxis: this.gamepadIndices.xAxis !== undefined ? 0 : undefined,\n      yAxis: this.gamepadIndices.yAxis !== undefined ? 0 : undefined,\n    }\n  }\n\n  get data(): { id: Component['id'] } & Component['values'] {\n    const data = { id: this.id, ...this.values }\n    return data\n  }\n\n  /**\n   * @description Poll for updated data based on current gamepad state\n   * @param {Object} gamepad - The gamepad object from which the component data should be polled\n   */\n  updateFromGamepad(gamepad: Gamepad): void {\n    // Set the state to default before processing other data sources\n    this.values.state = MotionControllerConstants.ComponentState.DEFAULT\n\n    // Get and normalize button\n    if (this.gamepadIndices.button !== undefined && gamepad.buttons.length > this.gamepadIndices.button) {\n      const gamepadButton = gamepad.buttons[this.gamepadIndices.button]\n      this.values.button = gamepadButton.value\n      this.values.button = this.values.button! < 0 ? 0 : this.values.button\n      this.values.button = this.values.button! > 1 ? 1 : this.values.button\n\n      // Set the state based on the button\n      if (gamepadButton.pressed || this.values.button === 1) {\n        this.values.state = MotionControllerConstants.ComponentState.PRESSED\n      } else if (gamepadButton.touched || this.values.button! > MotionControllerConstants.ButtonTouchThreshold) {\n        this.values.state = MotionControllerConstants.ComponentState.TOUCHED\n      }\n    }\n\n    // Get and normalize x axis value\n    if (this.gamepadIndices.xAxis !== undefined && gamepad.axes.length > this.gamepadIndices.xAxis) {\n      this.values.xAxis = gamepad.axes[this.gamepadIndices.xAxis]\n      this.values.xAxis = this.values.xAxis! < -1 ? -1 : this.values.xAxis\n      this.values.xAxis = this.values.xAxis! > 1 ? 1 : this.values.xAxis\n\n      // If the state is still default, check if the xAxis makes it touched\n      if (\n        this.values.state === MotionControllerConstants.ComponentState.DEFAULT &&\n        Math.abs(this.values.xAxis!) > MotionControllerConstants.AxisTouchThreshold\n      ) {\n        this.values.state = MotionControllerConstants.ComponentState.TOUCHED\n      }\n    }\n\n    // Get and normalize Y axis value\n    if (this.gamepadIndices.yAxis !== undefined && gamepad.axes.length > this.gamepadIndices.yAxis) {\n      this.values.yAxis = gamepad.axes[this.gamepadIndices.yAxis]\n      this.values.yAxis = this.values.yAxis! < -1 ? -1 : this.values.yAxis\n      this.values.yAxis = this.values.yAxis! > 1 ? 1 : this.values.yAxis\n\n      // If the state is still default, check if the yAxis makes it touched\n      if (\n        this.values.state === MotionControllerConstants.ComponentState.DEFAULT &&\n        Math.abs(this.values.yAxis!) > MotionControllerConstants.AxisTouchThreshold\n      ) {\n        this.values.state = MotionControllerConstants.ComponentState.TOUCHED\n      }\n    }\n\n    // Update the visual response weights based on the current component data\n    Object.values(this.visualResponses).forEach((visualResponse) => {\n      visualResponse.updateFromComponent(this.values)\n    })\n  }\n}\n/**\n * @description Builds a motion controller with components and visual responses based on the\n * supplied profile description. Data is polled from the xrInputSource's gamepad.\n * @author Nell Waliczek / https://github.com/NellWaliczek\n */\nclass MotionController {\n  xrInputSource: XRInputSource\n  assetUrl: string\n  layoutDescription: LayoutDescription\n  id: string\n  components: Record<string, Component>\n  /**\n   * @param {XRInputSource} xrInputSource - The XRInputSource to build the MotionController around\n   * @param {Profile} profile - The best matched profile description for the supplied xrInputSource\n   * @param {string} assetUrl\n   */\n  constructor(xrInputSource: XRInputSource, profile: Profile, assetUrl: string) {\n    if (!xrInputSource) {\n      throw new Error('No xrInputSource supplied')\n    }\n\n    if (!profile) {\n      throw new Error('No profile supplied')\n    }\n\n    if (!profile.layouts[xrInputSource.handedness]) {\n      throw new Error('No layout for ' + xrInputSource.handedness + ' handedness')\n    }\n\n    this.xrInputSource = xrInputSource\n    this.assetUrl = assetUrl\n    this.id = profile.profileId\n\n    // Build child components as described in the profile description\n    this.layoutDescription = profile.layouts[xrInputSource.handedness]!\n\n    this.components = {}\n    Object.keys(this.layoutDescription.components).forEach((componentId) => {\n      const componentDescription = this.layoutDescription.components[componentId]\n      this.components[componentId] = new Component(componentId, componentDescription)\n    })\n\n    // Initialize components based on current gamepad state\n    this.updateFromGamepad()\n  }\n\n  get gripSpace(): XRInputSource['gripSpace'] {\n    return this.xrInputSource.gripSpace\n  }\n\n  get targetRaySpace(): XRInputSource['targetRaySpace'] {\n    return this.xrInputSource.targetRaySpace\n  }\n\n  /**\n   * @description Returns a subset of component data for simplified debugging\n   */\n  get data(): Array<Component['data']> {\n    const data: Array<Component['data']> = []\n    Object.values(this.components).forEach((component) => {\n      data.push(component.data)\n    })\n    return data\n  }\n\n  /**\n   * @description Poll for updated data based on current gamepad state\n   */\n  updateFromGamepad(): void {\n    Object.values(this.components).forEach((component) => {\n      component.updateFromGamepad(this.xrInputSource.gamepad!)\n    })\n  }\n}\n\nexport { MotionControllerConstants, MotionController, fetchProfile, fetchProfilesList }\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}