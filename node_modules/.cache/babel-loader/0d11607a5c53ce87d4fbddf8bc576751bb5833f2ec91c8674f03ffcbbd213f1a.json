{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/Nayyu/Desktop/skibidai-public-build/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"C:/Users/Nayyu/Desktop/skibidai-public-build/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"C:/Users/Nayyu/Desktop/skibidai-public-build/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Nayyu/Desktop/skibidai-public-build/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport Panel from \"./panel.js\";\nvar _Stats = /*#__PURE__*/function () {\n  function _Stats2() {\n    var _this = this;\n    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      _ref$logsPerSecond = _ref.logsPerSecond,\n      logsPerSecond = _ref$logsPerSecond === void 0 ? 20 : _ref$logsPerSecond,\n      _ref$samplesLog = _ref.samplesLog,\n      samplesLog = _ref$samplesLog === void 0 ? 100 : _ref$samplesLog,\n      _ref$samplesGraph = _ref.samplesGraph,\n      samplesGraph = _ref$samplesGraph === void 0 ? 10 : _ref$samplesGraph,\n      _ref$precision = _ref.precision,\n      precision = _ref$precision === void 0 ? 2 : _ref$precision,\n      _ref$minimal = _ref.minimal,\n      minimal = _ref$minimal === void 0 ? false : _ref$minimal,\n      _ref$horizontal = _ref.horizontal,\n      horizontal = _ref$horizontal === void 0 ? true : _ref$horizontal,\n      _ref$mode = _ref.mode,\n      mode = _ref$mode === void 0 ? 0 : _ref$mode;\n    _classCallCheck(this, _Stats2);\n    this.totalCpuDuration = 0;\n    this.totalGpuDuration = 0;\n    this.totalGpuDurationCompute = 0;\n    this.totalFps = 0;\n    this.activeQuery = null;\n    this.gpuQueries = [];\n    this.renderCount = 0;\n    this.mode = mode;\n    this.horizontal = horizontal;\n    this.dom = document.createElement(\"div\");\n    this.dom.style.cssText = \"position:fixed;top:0;left:0;opacity:0.9;z-index:10000;\";\n    if (minimal) {\n      this.dom.style.cssText += \"cursor:pointer\";\n    }\n    this.gl = null;\n    this.query = null;\n    this.isRunningCPUProfiling = false;\n    this.minimal = minimal;\n    this.beginTime = (performance || Date).now();\n    this.prevTime = this.beginTime;\n    this.prevCpuTime = this.beginTime;\n    this.frames = 0;\n    this.renderCount = 0;\n    this.threeRendererPatched = false;\n    this.averageCpu = {\n      logs: [],\n      graph: []\n    };\n    this.averageGpu = {\n      logs: [],\n      graph: []\n    };\n    this.averageGpuCompute = {\n      logs: [],\n      graph: []\n    };\n    this.queryCreated = false;\n    this.fpsPanel = this.addPanel(new _Stats2.Panel(\"FPS\", \"#0ff\", \"#002\"), 0);\n    this.msPanel = this.addPanel(new _Stats2.Panel(\"CPU\", \"#0f0\", \"#020\"), 1);\n    this.gpuPanel = null;\n    this.gpuPanelCompute = null;\n    this.samplesLog = samplesLog;\n    this.samplesGraph = samplesGraph;\n    this.precision = precision;\n    this.logsPerSecond = logsPerSecond;\n    if (this.minimal) {\n      this.dom.addEventListener(\"click\", function (event) {\n        event.preventDefault();\n        _this.showPanel(++_this.mode % _this.dom.children.length);\n      }, false);\n      this.mode = mode;\n      this.showPanel(this.mode);\n    } else {\n      window.addEventListener(\"resize\", function () {\n        _this.resizePanel(_this.fpsPanel, 0);\n        _this.resizePanel(_this.msPanel, 1);\n        if (_this.gpuPanel) {\n          _this.resizePanel(_this.gpuPanel, 2);\n        }\n        if (_this.gpuPanelCompute) {\n          _this.resizePanel(_this.gpuPanelCompute, 3);\n        }\n      });\n    }\n  }\n  _createClass(_Stats2, [{\n    key: \"patchThreeRenderer\",\n    value: function patchThreeRenderer(renderer) {\n      var originalRenderMethod = renderer.render;\n      var statsInstance = this;\n      renderer.render = function (scene, camera) {\n        statsInstance.begin();\n        originalRenderMethod.call(this, scene, camera);\n        statsInstance.end();\n      };\n      this.threeRendererPatched = true;\n    }\n  }, {\n    key: \"resizePanel\",\n    value: function resizePanel(panel, offset) {\n      panel.canvas.style.position = \"absolute\";\n      if (this.minimal) {\n        panel.canvas.style.display = \"none\";\n      } else {\n        panel.canvas.style.display = \"block\";\n        if (this.horizontal) {\n          panel.canvas.style.top = \"0px\";\n          panel.canvas.style.left = offset * panel.WIDTH / panel.PR + \"px\";\n        } else {\n          panel.canvas.style.left = \"0px\";\n          panel.canvas.style.top = offset * panel.HEIGHT / panel.PR + \"px\";\n        }\n      }\n    }\n  }, {\n    key: \"addPanel\",\n    value: function addPanel(panel, offset) {\n      if (panel.canvas) {\n        this.dom.appendChild(panel.canvas);\n        this.resizePanel(panel, offset);\n      }\n      return panel;\n    }\n  }, {\n    key: \"showPanel\",\n    value: function showPanel(id) {\n      for (var i = 0; i < this.dom.children.length; i++) {\n        var child = this.dom.children[i];\n        child.style.display = i === id ? \"block\" : \"none\";\n      }\n      this.mode = id;\n    }\n  }, {\n    key: \"init\",\n    value: function () {\n      var _init = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(canvasOrGL) {\n        var canvas;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              if (canvasOrGL) {\n                _context.next = 3;\n                break;\n              }\n              console.error('Stats: The \"canvas\" parameter is undefined.');\n              return _context.abrupt(\"return\");\n            case 3:\n              if (canvasOrGL.isWebGLRenderer && !this.threeRendererPatched) {\n                canvas = canvasOrGL;\n                this.patchThreeRenderer(canvas);\n                this.gl = canvas.getContext();\n              } else if (!this.gl && canvasOrGL instanceof WebGL2RenderingContext) {\n                this.gl = canvasOrGL;\n              }\n              if (!canvasOrGL.isWebGPURenderer) {\n                _context.next = 15;\n                break;\n              }\n              canvasOrGL.backend.trackTimestamp = true;\n              _context.next = 8;\n              return canvasOrGL.hasFeatureAsync(\"timestamp-query\");\n            case 8:\n              if (!_context.sent) {\n                _context.next = 12;\n                break;\n              }\n              this.gpuPanel = this.addPanel(new _Stats2.Panel(\"GPU\", \"#ff0\", \"#220\"), 2);\n              this.gpuPanelCompute = this.addPanel(new _Stats2.Panel(\"CPT\", \"#e1e1e1\", \"#212121\"), 3);\n              this.info = canvasOrGL.info;\n            case 12:\n              return _context.abrupt(\"return\");\n            case 15:\n              if (!(!this.gl && canvasOrGL instanceof HTMLCanvasElement || canvasOrGL instanceof OffscreenCanvas)) {\n                _context.next = 22;\n                break;\n              }\n              this.gl = canvasOrGL.getContext(\"webgl2\");\n              if (this.gl) {\n                _context.next = 20;\n                break;\n              }\n              console.error(\"Stats: Unable to obtain WebGL2 context.\");\n              return _context.abrupt(\"return\");\n            case 20:\n              _context.next = 25;\n              break;\n            case 22:\n              if (this.gl) {\n                _context.next = 25;\n                break;\n              }\n              console.error(\"Stats: Invalid input type. Expected WebGL2RenderingContext, HTMLCanvasElement, or OffscreenCanvas.\");\n              return _context.abrupt(\"return\");\n            case 25:\n              this.ext = this.gl.getExtension(\"EXT_disjoint_timer_query_webgl2\");\n              if (this.ext) {\n                this.gpuPanel = this.addPanel(new _Stats2.Panel(\"GPU\", \"#ff0\", \"#220\"), 2);\n              }\n            case 27:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }));\n      function init(_x) {\n        return _init.apply(this, arguments);\n      }\n      return init;\n    }()\n  }, {\n    key: \"begin\",\n    value: function begin() {\n      if (!this.isRunningCPUProfiling) {\n        this.beginProfiling(\"cpu-started\");\n      }\n      if (!this.gl || !this.ext) return;\n      if (this.gl && this.ext) {\n        if (this.activeQuery) {\n          this.gl.endQuery(this.ext.TIME_ELAPSED_EXT);\n        }\n        this.activeQuery = this.gl.createQuery();\n        if (this.activeQuery !== null) {\n          this.gl.beginQuery(this.ext.TIME_ELAPSED_EXT, this.activeQuery);\n        }\n      }\n    }\n  }, {\n    key: \"end\",\n    value: function end() {\n      this.renderCount++;\n      if (this.gl && this.ext && this.activeQuery) {\n        this.gl.endQuery(this.ext.TIME_ELAPSED_EXT);\n        this.gpuQueries.push({\n          query: this.activeQuery\n        });\n        this.activeQuery = null;\n      }\n    }\n  }, {\n    key: \"processGpuQueries\",\n    value: function processGpuQueries() {\n      var _this2 = this;\n      if (!this.gl || !this.ext) return;\n      this.totalGpuDuration = 0;\n      this.gpuQueries.forEach(function (queryInfo, index) {\n        if (_this2.gl) {\n          var available = _this2.gl.getQueryParameter(queryInfo.query, _this2.gl.QUERY_RESULT_AVAILABLE);\n          var disjoint = _this2.gl.getParameter(_this2.ext.GPU_DISJOINT_EXT);\n          if (available && !disjoint) {\n            var elapsed = _this2.gl.getQueryParameter(queryInfo.query, _this2.gl.QUERY_RESULT);\n            var duration = elapsed * 1e-6;\n            _this2.totalGpuDuration += duration;\n            _this2.gl.deleteQuery(queryInfo.query);\n            _this2.gpuQueries.splice(index, 1);\n          }\n        }\n      });\n    }\n  }, {\n    key: \"update\",\n    value: function update() {\n      if (this.info === void 0) {\n        this.processGpuQueries();\n      } else {\n        this.totalGpuDuration = this.info.render.timestamp;\n        this.totalGpuDurationCompute = this.info.compute.timestamp;\n        this.addToAverage(this.totalGpuDurationCompute, this.averageGpuCompute);\n      }\n      this.endProfiling(\"cpu-started\", \"cpu-finished\", \"cpu-duration\");\n      this.addToAverage(this.totalCpuDuration, this.averageCpu);\n      this.addToAverage(this.totalGpuDuration, this.averageGpu);\n      this.renderCount = 0;\n      if (this.totalCpuDuration === 0) {\n        this.beginProfiling(\"cpu-started\");\n      }\n      this.totalCpuDuration = 0;\n      this.totalFps = 0;\n      this.beginTime = this.endInternal();\n    }\n  }, {\n    key: \"endInternal\",\n    value: function endInternal() {\n      this.frames++;\n      var time = (performance || Date).now();\n      if (time >= this.prevCpuTime + 1e3 / this.logsPerSecond) {\n        this.updatePanel(this.msPanel, this.averageCpu);\n        this.updatePanel(this.gpuPanel, this.averageGpu);\n        if (this.gpuPanelCompute) {\n          this.updatePanel(this.gpuPanelCompute, this.averageGpuCompute);\n        }\n        this.prevCpuTime = time;\n      }\n      if (time >= this.prevTime + 1e3) {\n        var fps = this.frames * 1e3 / (time - this.prevTime);\n        this.fpsPanel.update(fps, fps, 100, 100, 0);\n        this.prevTime = time;\n        this.frames = 0;\n      }\n      return time;\n    }\n  }, {\n    key: \"addToAverage\",\n    value: function addToAverage(value, averageArray) {\n      averageArray.logs.push(value);\n      if (averageArray.logs.length > this.samplesLog) {\n        averageArray.logs.shift();\n      }\n      averageArray.graph.push(value);\n      if (averageArray.graph.length > this.samplesGraph) {\n        averageArray.graph.shift();\n      }\n    }\n  }, {\n    key: \"beginProfiling\",\n    value: function beginProfiling(marker) {\n      if (window.performance) {\n        window.performance.mark(marker);\n        this.isRunningCPUProfiling = true;\n      }\n    }\n  }, {\n    key: \"endProfiling\",\n    value: function endProfiling(startMarker, endMarker, measureName) {\n      if (window.performance && endMarker && this.isRunningCPUProfiling) {\n        window.performance.mark(endMarker);\n        var cpuMeasure = performance.measure(measureName, startMarker, endMarker);\n        this.totalCpuDuration += cpuMeasure.duration;\n        this.isRunningCPUProfiling = false;\n      }\n    }\n  }, {\n    key: \"updatePanel\",\n    value: function updatePanel(panel, averageArray) {\n      if (averageArray.logs.length > 0) {\n        var sumLog = 0;\n        var max = 0.01;\n        for (var i = 0; i < averageArray.logs.length; i++) {\n          sumLog += averageArray.logs[i];\n          if (averageArray.logs[i] > max) {\n            max = averageArray.logs[i];\n          }\n        }\n        var sumGraph = 0;\n        var maxGraph = 0.01;\n        for (var _i = 0; _i < averageArray.graph.length; _i++) {\n          sumGraph += averageArray.graph[_i];\n          if (averageArray.graph[_i] > maxGraph) {\n            maxGraph = averageArray.graph[_i];\n          }\n        }\n        if (panel) {\n          panel.update(sumLog / Math.min(averageArray.logs.length, this.samplesLog), sumGraph / Math.min(averageArray.graph.length, this.samplesGraph), max, maxGraph, this.precision);\n        }\n      }\n    }\n  }, {\n    key: \"domElement\",\n    get: function get() {\n      return this.dom;\n    }\n  }, {\n    key: \"container\",\n    get: function get() {\n      console.warn(\"Stats: Deprecated! this.container as been replaced to this.dom \");\n      return this.dom;\n    }\n  }]);\n  return _Stats2;\n}();\n_Stats.Panel = Panel;\nvar Stats = _Stats;\nexport { Stats as default };","map":{"version":3,"names":["_Stats","_Stats2","_this","_ref","arguments","length","undefined","_ref$logsPerSecond","logsPerSecond","_ref$samplesLog","samplesLog","_ref$samplesGraph","samplesGraph","_ref$precision","precision","_ref$minimal","minimal","_ref$horizontal","horizontal","_ref$mode","mode","_classCallCheck","totalCpuDuration","totalGpuDuration","totalGpuDurationCompute","totalFps","activeQuery","gpuQueries","renderCount","dom","document","createElement","style","cssText","gl","query","isRunningCPUProfiling","beginTime","performance","Date","now","prevTime","prevCpuTime","frames","threeRendererPatched","averageCpu","logs","graph","averageGpu","averageGpuCompute","queryCreated","fpsPanel","addPanel","Panel","msPanel","gpuPanel","gpuPanelCompute","addEventListener","event","preventDefault","showPanel","children","window","resizePanel","_createClass","key","value","patchThreeRenderer","renderer","originalRenderMethod","render","statsInstance","scene","camera","begin","call","end","panel","offset","canvas","position","display","top","left","WIDTH","PR","HEIGHT","appendChild","id","i","child","_init","_asyncToGenerator","_regeneratorRuntime","mark","_callee","canvasOrGL","wrap","_callee$","_context","prev","next","console","error","abrupt","isWebGLRenderer","getContext","WebGL2RenderingContext","isWebGPURenderer","backend","trackTimestamp","hasFeatureAsync","sent","info","HTMLCanvasElement","OffscreenCanvas","ext","getExtension","stop","init","_x","apply","beginProfiling","endQuery","TIME_ELAPSED_EXT","createQuery","beginQuery","push","processGpuQueries","_this2","forEach","queryInfo","index","available","getQueryParameter","QUERY_RESULT_AVAILABLE","disjoint","getParameter","GPU_DISJOINT_EXT","elapsed","QUERY_RESULT","duration","deleteQuery","splice","update","timestamp","compute","addToAverage","endProfiling","endInternal","time","updatePanel","fps","averageArray","shift","marker","startMarker","endMarker","measureName","cpuMeasure","measure","sumLog","max","sumGraph","maxGraph","Math","min","get","warn","Stats"],"sources":["C:\\Users\\Nayyu\\Desktop\\skibidai-public-build\\node_modules\\stats-gl\\lib\\main.ts"],"sourcesContent":["import Panel from \"./panel\";\nimport * as THREE from 'three';\nexport interface AverageArray {\n  logs: number[];\n  graph: number[];\n}\n\n\nclass Stats {\n  totalCpuDuration: number = 0;\n  totalGpuDuration: number = 0;\n  totalGpuDurationCompute: number = 0;\n  totalFps: number = 0;\n  mode: number;\n  info: any;\n  dom: HTMLDivElement;\n  minimal: boolean;\n  horizontal: boolean;\n  beginTime: number;\n  prevTime: number;\n  prevCpuTime: number;\n  frames: number;\n  averageCpu: AverageArray;\n  averageGpu: AverageArray;\n  averageGpuCompute: AverageArray;\n  queryCreated: boolean;\n  isRunningCPUProfiling: boolean;\n  fpsPanel: Panel;\n  static Panel: typeof Panel = Panel;\n  msPanel: Panel;\n  gpuPanel: Panel | null;\n  gpuPanelCompute: Panel | null;\n  samplesLog: number;\n  samplesGraph: number;\n  logsPerSecond: number;\n  activeQuery: WebGLQuery | null = null;\n\n  precision: number;\n  gl: WebGL2RenderingContext | null;\n  ext: any;\n  query: WebGLQuery | null;\n  disjoint: any;\n  ns: any;\n  threeRendererPatched: boolean;\n  gpuQueries: { query: WebGLQuery }[] = [];\n  renderCount: number = 0;\n\n  constructor({ logsPerSecond = 20, samplesLog = 100, samplesGraph = 10, precision = 2, minimal = false, horizontal = true, mode = 0 } = {}) {\n\n    this.mode = mode;\n    this.horizontal = horizontal;\n    this.dom = document.createElement('div');\n    this.dom.style.cssText = 'position:fixed;top:0;left:0;opacity:0.9;z-index:10000;';\n\n    if (minimal) {\n\n      this.dom.style.cssText += 'cursor:pointer';\n\n    }\n\n    this.gl = null;\n    this.query = null;\n\n    this.isRunningCPUProfiling = false;\n    this.minimal = minimal;\n\n    this.beginTime = (performance || Date).now();\n    this.prevTime = this.beginTime;\n    this.prevCpuTime = this.beginTime;\n    this.frames = 0;\n    this.renderCount = 0;\n    this.threeRendererPatched = false;\n    this.averageCpu = {\n      logs: [],\n      graph: []\n    };\n    this.averageGpu = {\n      logs: [],\n      graph: []\n    };\n    this.averageGpuCompute = {\n      logs: [],\n      graph: []\n    };\n\n    this.queryCreated = false;\n\n    this.fpsPanel = this.addPanel(new Stats.Panel('FPS', '#0ff', '#002'), 0);\n    this.msPanel = this.addPanel(new Stats.Panel('CPU', '#0f0', '#020'), 1);\n    this.gpuPanel = null;\n    this.gpuPanelCompute = null;\n\n    this.samplesLog = samplesLog;\n    this.samplesGraph = samplesGraph;\n    this.precision = precision;\n    this.logsPerSecond = logsPerSecond;\n\n    if (this.minimal) {\n\n      this.dom.addEventListener('click', (event) => {\n\n        event.preventDefault();\n        this.showPanel(++this.mode % this.dom.children.length);\n\n      }, false);\n\n      this.mode = mode;\n      this.showPanel(this.mode);\n\n    } else {\n\n      window.addEventListener('resize', () => {\n\n        this.resizePanel(this.fpsPanel, 0);\n        this.resizePanel(this.msPanel, 1);\n\n        if (this.gpuPanel) {\n          this.resizePanel(this.gpuPanel, 2);\n        }\n        if (this.gpuPanelCompute) {\n          this.resizePanel(this.gpuPanelCompute, 3);\n        }\n      })\n    }\n\n\n  }\n\n  patchThreeRenderer(renderer: any) {\n\n    // Store the original render method\n    const originalRenderMethod = renderer.render;\n\n    // Reference to the stats instance\n    const statsInstance = this;\n\n    // Override the render method on the prototype\n    renderer.render = function (scene: THREE.Scene, camera: THREE.Camera) {\n\n\n      statsInstance.begin(); // Start tracking for this render call\n\n      // Call the original render method\n      originalRenderMethod.call(this, scene, camera);\n\n      statsInstance.end(); // End tracking for this render call\n    };\n\n\n    this.threeRendererPatched = true;\n\n  }\n\n  resizePanel(panel: Panel, offset: number) {\n\n    panel.canvas.style.position = 'absolute';\n\n    if (this.minimal) {\n\n      panel.canvas.style.display = 'none';\n\n    } else {\n\n      panel.canvas.style.display = 'block';\n      if (this.horizontal) {\n        panel.canvas.style.top = '0px';\n        panel.canvas.style.left = offset * panel.WIDTH / panel.PR + 'px';\n      } else {\n        panel.canvas.style.left = '0px';\n        panel.canvas.style.top = offset * panel.HEIGHT / panel.PR + 'px';\n\n      }\n    }\n  }\n\n  addPanel(panel: Panel, offset: number) {\n\n    if (panel.canvas) {\n\n      this.dom.appendChild(panel.canvas);\n\n      this.resizePanel(panel, offset);\n\n    }\n\n    return panel;\n\n  }\n\n  showPanel(id: number) {\n\n    for (let i = 0; i < this.dom.children.length; i++) {\n      const child = this.dom.children[i] as HTMLElement;\n\n      child.style.display = i === id ? 'block' : 'none';\n\n    }\n\n    this.mode = id;\n\n  }\n\n  async init(canvasOrGL: any) {\n    if (!canvasOrGL) {\n      console.error('Stats: The \"canvas\" parameter is undefined.');\n      return;\n    }\n\n\n    // if ((canvasOrGL as any).isWebGPURenderer && !this.threeRendererPatched) {\n    // TODO Color GPU Analytic in another color than yellow to know webgpu or webgl context (blue)\n    //   const canvas: any = canvasOrGL\n    //   this.patchThreeRenderer(canvas as any);\n    //   this.gl = canvas.getContext();\n    // } else \n    if ((canvasOrGL as any).isWebGLRenderer && !this.threeRendererPatched) {\n      const canvas: any = canvasOrGL\n      this.patchThreeRenderer(canvas as any);\n      this.gl = canvas.getContext();\n    } else if (!this.gl && canvasOrGL instanceof WebGL2RenderingContext) {\n      this.gl = canvasOrGL;\n    }\n\n    if (canvasOrGL.isWebGPURenderer) {\n\n      canvasOrGL.backend.trackTimestamp = true\n\n      if (await canvasOrGL.hasFeatureAsync('timestamp-query')) {\n        this.gpuPanel = this.addPanel(new Stats.Panel('GPU', '#ff0', '#220'), 2);\n        this.gpuPanelCompute = this.addPanel(new Stats.Panel('CPT', '#e1e1e1', '#212121'), 3);\n        this.info = canvasOrGL.info\n      }\n      return;\n    }\n    // Check if canvasOrGL is already a WebGL2RenderingContext\n\n\n    // Handle HTMLCanvasElement and OffscreenCanvas\n    else if (!this.gl && canvasOrGL instanceof HTMLCanvasElement || canvasOrGL instanceof OffscreenCanvas) {\n      this.gl = canvasOrGL.getContext('webgl2') as WebGL2RenderingContext;\n      if (!this.gl) {\n        console.error('Stats: Unable to obtain WebGL2 context.');\n        return;\n      }\n    } else if (!this.gl) {\n      console.error('Stats: Invalid input type. Expected WebGL2RenderingContext, HTMLCanvasElement, or OffscreenCanvas.');\n      return;\n    }\n\n    // Get the extension\n    this.ext = this.gl.getExtension('EXT_disjoint_timer_query_webgl2');\n    if (this.ext) {\n      this.gpuPanel = this.addPanel(new Stats.Panel('GPU', '#ff0', '#220'), 2);\n    }\n  }\n\n\n  begin() {\n\n    if (!this.isRunningCPUProfiling) {\n      this.beginProfiling('cpu-started');\n    }\n\n    if (!this.gl || !this.ext) return;\n\n    if (this.gl && this.ext) {\n      if (this.activeQuery) {\n        // End the previous query if it's still active\n        this.gl.endQuery(this.ext.TIME_ELAPSED_EXT);\n      }\n\n      this.activeQuery = this.gl.createQuery();\n      if (this.activeQuery !== null) {\n        this.gl.beginQuery(this.ext.TIME_ELAPSED_EXT, this.activeQuery);\n      }\n    }\n  }\n\n\n\n  end() {\n\n    // Increase render count\n    this.renderCount++;\n\n    if (this.gl && this.ext && this.activeQuery) {\n      this.gl.endQuery(this.ext.TIME_ELAPSED_EXT);\n      // Add the active query to the gpuQueries array and reset it\n      this.gpuQueries.push({ query: this.activeQuery });\n      this.activeQuery = null;\n    }\n\n  }\n\n  processGpuQueries() {\n\n\n    if (!this.gl || !this.ext) return;\n\n    this.totalGpuDuration = 0;\n\n    this.gpuQueries.forEach((queryInfo, index) => {\n      if (this.gl) {\n        const available = this.gl.getQueryParameter(queryInfo.query, this.gl.QUERY_RESULT_AVAILABLE);\n        const disjoint = this.gl.getParameter(this.ext.GPU_DISJOINT_EXT);\n\n        if (available && !disjoint) {\n          const elapsed = this.gl.getQueryParameter(queryInfo.query, this.gl.QUERY_RESULT);\n          const duration = elapsed * 1e-6;  // Convert nanoseconds to milliseconds\n          this.totalGpuDuration += duration;\n          this.gl.deleteQuery(queryInfo.query);\n          this.gpuQueries.splice(index, 1);  // Remove the processed query\n        }\n      }\n    });\n\n  }\n\n  update() {\n\n    if (this.info === undefined) {\n      this.processGpuQueries();\n    } else {\n\n      this.totalGpuDuration = this.info.render.timestamp\n      this.totalGpuDurationCompute = this.info.compute.timestamp\n      this.addToAverage(this.totalGpuDurationCompute, this.averageGpuCompute);\n\n    }\n\n    this.endProfiling('cpu-started', 'cpu-finished', 'cpu-duration');\n\n    // Calculate the total duration of CPU and GPU work for this frame\n    this.addToAverage(this.totalCpuDuration, this.averageCpu);\n    this.addToAverage(this.totalGpuDuration, this.averageGpu);\n\n    this.renderCount = 0;\n\n    // If this.totalCpuDuration is 0, it means that the CPU query was not created and stats.begin() never called/overrided\n    if (this.totalCpuDuration === 0) {\n      this.beginProfiling('cpu-started');\n    }\n\n    this.totalCpuDuration = 0;\n\n    this.totalFps = 0;\n\n    this.beginTime = this.endInternal()\n\n  }\n\n  endInternal() {\n\n    this.frames++;\n    const time = (performance || Date).now();\n\n    if (time >= this.prevCpuTime + 1000 / this.logsPerSecond) {\n      this.updatePanel(this.msPanel, this.averageCpu);\n      this.updatePanel(this.gpuPanel, this.averageGpu);\n\n      if (this.gpuPanelCompute) {\n        this.updatePanel(this.gpuPanelCompute, this.averageGpuCompute);\n      }\n\n      this.prevCpuTime = time;\n    }\n\n    if (time >= this.prevTime + 1000) {\n\n      const fps = (this.frames * 1000) / (time - this.prevTime);\n\n      this.fpsPanel.update(fps, fps, 100, 100, 0);\n\n      this.prevTime = time;\n      this.frames = 0;\n\n    }\n\n    return time;\n\n  }\n\n  addToAverage(value: number, averageArray: { logs: any; graph: any; }) {\n\n    averageArray.logs.push(value);\n    if (averageArray.logs.length > this.samplesLog) {\n\n      averageArray.logs.shift();\n\n    }\n\n    averageArray.graph.push(value);\n    if (averageArray.graph.length > this.samplesGraph) {\n\n      averageArray.graph.shift();\n\n    }\n\n  }\n\n  beginProfiling(marker: string) {\n\n    if (window.performance) {\n\n      window.performance.mark(marker);\n      this.isRunningCPUProfiling = true\n\n    }\n\n  }\n\n  endProfiling(startMarker: string | PerformanceMeasureOptions | undefined, endMarker: string | undefined, measureName: string) {\n\n    if (window.performance && endMarker && this.isRunningCPUProfiling) {\n\n      window.performance.mark(endMarker);\n      const cpuMeasure = performance.measure(measureName, startMarker, endMarker);\n      this.totalCpuDuration += cpuMeasure.duration;\n      this.isRunningCPUProfiling = false\n\n    }\n\n  }\n\n  updatePanel(panel: { update: any; } | null, averageArray: { logs: number[], graph: number[] }) {\n\n    if (averageArray.logs.length > 0) {\n\n      let sumLog = 0;\n      let max = 0.01;\n\n      for (let i = 0; i < averageArray.logs.length; i++) {\n\n        sumLog += averageArray.logs[i];\n\n        if (averageArray.logs[i] > max) {\n          max = averageArray.logs[i];\n        }\n\n      }\n\n      let sumGraph = 0;\n      let maxGraph = 0.01;\n      for (let i = 0; i < averageArray.graph.length; i++) {\n\n        sumGraph += averageArray.graph[i];\n\n        if (averageArray.graph[i] > maxGraph) {\n          maxGraph = averageArray.graph[i];\n        }\n\n      }\n\n      if (panel) {\n        panel.update(sumLog / Math.min(averageArray.logs.length, this.samplesLog), sumGraph / Math.min(averageArray.graph.length, this.samplesGraph), max, maxGraph, this.precision);\n      }\n\n    }\n  }\n\n  get domElement() {\n    // patch for some use case in threejs\n    return this.dom;\n\n  }\n\n  get container() { // @deprecated\n\n    console.warn('Stats: Deprecated! this.container as been replaced to this.dom ')\n    return this.dom;\n\n  }\n\n}\n\n\nexport default Stats;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}