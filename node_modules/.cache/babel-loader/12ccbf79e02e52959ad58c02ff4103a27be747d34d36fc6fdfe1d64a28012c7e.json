{"ast":null,"code":"import _createClass from \"C:/Users/Nayyu/Desktop/skibidai-public-build/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"C:/Users/Nayyu/Desktop/skibidai-public-build/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _inherits from \"C:/Users/Nayyu/Desktop/skibidai-public-build/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/Nayyu/Desktop/skibidai-public-build/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { BufferGeometry, Float32BufferAttribute } from \"three\";\nvar BoxLineGeometry = /*#__PURE__*/function (_BufferGeometry) {\n  _inherits(BoxLineGeometry, _BufferGeometry);\n  var _super = _createSuper(BoxLineGeometry);\n  function BoxLineGeometry(width, height, depth, widthSegments, heightSegments, depthSegments) {\n    var _this;\n    _classCallCheck(this, BoxLineGeometry);\n    _this = _super.call(this);\n    width = width || 1;\n    height = height || 1;\n    depth = depth || 1;\n    widthSegments = Math.floor(widthSegments) || 1;\n    heightSegments = Math.floor(heightSegments) || 1;\n    depthSegments = Math.floor(depthSegments) || 1;\n    var widthHalf = width / 2;\n    var heightHalf = height / 2;\n    var depthHalf = depth / 2;\n    var segmentWidth = width / widthSegments;\n    var segmentHeight = height / heightSegments;\n    var segmentDepth = depth / depthSegments;\n    var vertices = [];\n    var x = -widthHalf,\n      y = -heightHalf,\n      z = -depthHalf;\n    for (var i = 0; i <= widthSegments; i++) {\n      vertices.push(x, -heightHalf, -depthHalf, x, heightHalf, -depthHalf);\n      vertices.push(x, heightHalf, -depthHalf, x, heightHalf, depthHalf);\n      vertices.push(x, heightHalf, depthHalf, x, -heightHalf, depthHalf);\n      vertices.push(x, -heightHalf, depthHalf, x, -heightHalf, -depthHalf);\n      x += segmentWidth;\n    }\n    for (var _i = 0; _i <= heightSegments; _i++) {\n      vertices.push(-widthHalf, y, -depthHalf, widthHalf, y, -depthHalf);\n      vertices.push(widthHalf, y, -depthHalf, widthHalf, y, depthHalf);\n      vertices.push(widthHalf, y, depthHalf, -widthHalf, y, depthHalf);\n      vertices.push(-widthHalf, y, depthHalf, -widthHalf, y, -depthHalf);\n      y += segmentHeight;\n    }\n    for (var _i2 = 0; _i2 <= depthSegments; _i2++) {\n      vertices.push(-widthHalf, -heightHalf, z, -widthHalf, heightHalf, z);\n      vertices.push(-widthHalf, heightHalf, z, widthHalf, heightHalf, z);\n      vertices.push(widthHalf, heightHalf, z, widthHalf, -heightHalf, z);\n      vertices.push(widthHalf, -heightHalf, z, -widthHalf, -heightHalf, z);\n      z += segmentDepth;\n    }\n    _this.setAttribute(\"position\", new Float32BufferAttribute(vertices, 3));\n    return _this;\n  }\n  return _createClass(BoxLineGeometry);\n}(BufferGeometry);\nexport { BoxLineGeometry };","map":{"version":3,"names":["BoxLineGeometry","_BufferGeometry","_inherits","_super","_createSuper","width","height","depth","widthSegments","heightSegments","depthSegments","_this","_classCallCheck","call","Math","floor","widthHalf","heightHalf","depthHalf","segmentWidth","segmentHeight","segmentDepth","vertices","x","y","z","i","push","setAttribute","Float32BufferAttribute","_createClass","BufferGeometry"],"sources":["C:\\Users\\Nayyu\\Desktop\\skibidai-public-build\\node_modules\\src\\geometries\\BoxLineGeometry.js"],"sourcesContent":["import { BufferGeometry, Float32BufferAttribute } from 'three'\n\nclass BoxLineGeometry extends BufferGeometry {\n  constructor(width, height, depth, widthSegments, heightSegments, depthSegments) {\n    super()\n\n    width = width || 1\n    height = height || 1\n    depth = depth || 1\n\n    widthSegments = Math.floor(widthSegments) || 1\n    heightSegments = Math.floor(heightSegments) || 1\n    depthSegments = Math.floor(depthSegments) || 1\n\n    const widthHalf = width / 2\n    const heightHalf = height / 2\n    const depthHalf = depth / 2\n\n    const segmentWidth = width / widthSegments\n    const segmentHeight = height / heightSegments\n    const segmentDepth = depth / depthSegments\n\n    const vertices = []\n\n    let x = -widthHalf,\n      y = -heightHalf,\n      z = -depthHalf\n\n    for (let i = 0; i <= widthSegments; i++) {\n      vertices.push(x, -heightHalf, -depthHalf, x, heightHalf, -depthHalf)\n      vertices.push(x, heightHalf, -depthHalf, x, heightHalf, depthHalf)\n      vertices.push(x, heightHalf, depthHalf, x, -heightHalf, depthHalf)\n      vertices.push(x, -heightHalf, depthHalf, x, -heightHalf, -depthHalf)\n\n      x += segmentWidth\n    }\n\n    for (let i = 0; i <= heightSegments; i++) {\n      vertices.push(-widthHalf, y, -depthHalf, widthHalf, y, -depthHalf)\n      vertices.push(widthHalf, y, -depthHalf, widthHalf, y, depthHalf)\n      vertices.push(widthHalf, y, depthHalf, -widthHalf, y, depthHalf)\n      vertices.push(-widthHalf, y, depthHalf, -widthHalf, y, -depthHalf)\n\n      y += segmentHeight\n    }\n\n    for (let i = 0; i <= depthSegments; i++) {\n      vertices.push(-widthHalf, -heightHalf, z, -widthHalf, heightHalf, z)\n      vertices.push(-widthHalf, heightHalf, z, widthHalf, heightHalf, z)\n      vertices.push(widthHalf, heightHalf, z, widthHalf, -heightHalf, z)\n      vertices.push(widthHalf, -heightHalf, z, -widthHalf, -heightHalf, z)\n\n      z += segmentDepth\n    }\n\n    this.setAttribute('position', new Float32BufferAttribute(vertices, 3))\n  }\n}\n\nexport { BoxLineGeometry }\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}