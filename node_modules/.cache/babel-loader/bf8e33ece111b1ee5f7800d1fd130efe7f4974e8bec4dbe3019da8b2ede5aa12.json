{"ast":null,"code":"import _createClass from \"C:/Users/Nayyu/Desktop/skibidai-public-build/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"C:/Users/Nayyu/Desktop/skibidai-public-build/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport { PerspectiveCamera, Vector3, Quaternion } from \"three\";\nvar PeppersGhostEffect = /*#__PURE__*/_createClass(function PeppersGhostEffect(renderer) {\n  _classCallCheck(this, PeppersGhostEffect);\n  var scope = this;\n  scope.cameraDistance = 15;\n  scope.reflectFromAbove = false;\n  var _halfWidth, _width, _height;\n  var _cameraF = new PerspectiveCamera();\n  var _cameraB = new PerspectiveCamera();\n  var _cameraL = new PerspectiveCamera();\n  var _cameraR = new PerspectiveCamera();\n  var _position = new Vector3();\n  var _quaternion = new Quaternion();\n  var _scale = new Vector3();\n  renderer.autoClear = false;\n  this.setSize = function (width, height) {\n    _halfWidth = width / 2;\n    if (width < height) {\n      _width = width / 3;\n      _height = width / 3;\n    } else {\n      _width = height / 3;\n      _height = height / 3;\n    }\n    renderer.setSize(width, height);\n  };\n  this.render = function (scene, camera) {\n    if (scene.matrixWorldAutoUpdate === true) scene.updateMatrixWorld();\n    if (camera.parent === null && camera.matrixWorldAutoUpdate === true) camera.updateMatrixWorld();\n    camera.matrixWorld.decompose(_position, _quaternion, _scale);\n    _cameraF.position.copy(_position);\n    _cameraF.quaternion.copy(_quaternion);\n    _cameraF.translateZ(scope.cameraDistance);\n    _cameraF.lookAt(scene.position);\n    _cameraB.position.copy(_position);\n    _cameraB.quaternion.copy(_quaternion);\n    _cameraB.translateZ(-scope.cameraDistance);\n    _cameraB.lookAt(scene.position);\n    _cameraB.rotation.z += 180 * (Math.PI / 180);\n    _cameraL.position.copy(_position);\n    _cameraL.quaternion.copy(_quaternion);\n    _cameraL.translateX(-scope.cameraDistance);\n    _cameraL.lookAt(scene.position);\n    _cameraL.rotation.x += 90 * (Math.PI / 180);\n    _cameraR.position.copy(_position);\n    _cameraR.quaternion.copy(_quaternion);\n    _cameraR.translateX(scope.cameraDistance);\n    _cameraR.lookAt(scene.position);\n    _cameraR.rotation.x += 90 * (Math.PI / 180);\n    renderer.clear();\n    renderer.setScissorTest(true);\n    renderer.setScissor(_halfWidth - _width / 2, _height * 2, _width, _height);\n    renderer.setViewport(_halfWidth - _width / 2, _height * 2, _width, _height);\n    if (scope.reflectFromAbove) {\n      renderer.render(scene, _cameraB);\n    } else {\n      renderer.render(scene, _cameraF);\n    }\n    renderer.setScissor(_halfWidth - _width / 2, 0, _width, _height);\n    renderer.setViewport(_halfWidth - _width / 2, 0, _width, _height);\n    if (scope.reflectFromAbove) {\n      renderer.render(scene, _cameraF);\n    } else {\n      renderer.render(scene, _cameraB);\n    }\n    renderer.setScissor(_halfWidth - _width / 2 - _width, _height, _width, _height);\n    renderer.setViewport(_halfWidth - _width / 2 - _width, _height, _width, _height);\n    if (scope.reflectFromAbove) {\n      renderer.render(scene, _cameraR);\n    } else {\n      renderer.render(scene, _cameraL);\n    }\n    renderer.setScissor(_halfWidth + _width / 2, _height, _width, _height);\n    renderer.setViewport(_halfWidth + _width / 2, _height, _width, _height);\n    if (scope.reflectFromAbove) {\n      renderer.render(scene, _cameraL);\n    } else {\n      renderer.render(scene, _cameraR);\n    }\n    renderer.setScissorTest(false);\n  };\n});\nexport { PeppersGhostEffect };","map":{"version":3,"names":["PeppersGhostEffect","_createClass","renderer","_classCallCheck","scope","cameraDistance","reflectFromAbove","_halfWidth","_width","_height","_cameraF","PerspectiveCamera","_cameraB","_cameraL","_cameraR","_position","Vector3","_quaternion","Quaternion","_scale","autoClear","setSize","width","height","render","scene","camera","matrixWorldAutoUpdate","updateMatrixWorld","parent","matrixWorld","decompose","position","copy","quaternion","translateZ","lookAt","rotation","z","Math","PI","translateX","x","clear","setScissorTest","setScissor","setViewport"],"sources":["C:\\Users\\Nayyu\\Desktop\\skibidai-public-build\\node_modules\\src\\effects\\PeppersGhostEffect.js"],"sourcesContent":["import { PerspectiveCamera, Quaternion, Vector3 } from 'three'\n\n/**\n * peppers ghost effect based on http://www.instructables.com/id/Reflective-Prism/?ALLSTEPS\n */\n\nclass PeppersGhostEffect {\n  constructor(renderer) {\n    const scope = this\n\n    scope.cameraDistance = 15\n    scope.reflectFromAbove = false\n\n    // Internals\n    let _halfWidth, _width, _height\n\n    const _cameraF = new PerspectiveCamera() //front\n    const _cameraB = new PerspectiveCamera() //back\n    const _cameraL = new PerspectiveCamera() //left\n    const _cameraR = new PerspectiveCamera() //right\n\n    const _position = new Vector3()\n    const _quaternion = new Quaternion()\n    const _scale = new Vector3()\n\n    // Initialization\n    renderer.autoClear = false\n\n    this.setSize = function (width, height) {\n      _halfWidth = width / 2\n      if (width < height) {\n        _width = width / 3\n        _height = width / 3\n      } else {\n        _width = height / 3\n        _height = height / 3\n      }\n\n      renderer.setSize(width, height)\n    }\n\n    this.render = function (scene, camera) {\n      if (scene.matrixWorldAutoUpdate === true) scene.updateMatrixWorld()\n\n      if (camera.parent === null && camera.matrixWorldAutoUpdate === true) camera.updateMatrixWorld()\n\n      camera.matrixWorld.decompose(_position, _quaternion, _scale)\n\n      // front\n      _cameraF.position.copy(_position)\n      _cameraF.quaternion.copy(_quaternion)\n      _cameraF.translateZ(scope.cameraDistance)\n      _cameraF.lookAt(scene.position)\n\n      // back\n      _cameraB.position.copy(_position)\n      _cameraB.quaternion.copy(_quaternion)\n      _cameraB.translateZ(-scope.cameraDistance)\n      _cameraB.lookAt(scene.position)\n      _cameraB.rotation.z += 180 * (Math.PI / 180)\n\n      // left\n      _cameraL.position.copy(_position)\n      _cameraL.quaternion.copy(_quaternion)\n      _cameraL.translateX(-scope.cameraDistance)\n      _cameraL.lookAt(scene.position)\n      _cameraL.rotation.x += 90 * (Math.PI / 180)\n\n      // right\n      _cameraR.position.copy(_position)\n      _cameraR.quaternion.copy(_quaternion)\n      _cameraR.translateX(scope.cameraDistance)\n      _cameraR.lookAt(scene.position)\n      _cameraR.rotation.x += 90 * (Math.PI / 180)\n\n      renderer.clear()\n      renderer.setScissorTest(true)\n\n      renderer.setScissor(_halfWidth - _width / 2, _height * 2, _width, _height)\n      renderer.setViewport(_halfWidth - _width / 2, _height * 2, _width, _height)\n\n      if (scope.reflectFromAbove) {\n        renderer.render(scene, _cameraB)\n      } else {\n        renderer.render(scene, _cameraF)\n      }\n\n      renderer.setScissor(_halfWidth - _width / 2, 0, _width, _height)\n      renderer.setViewport(_halfWidth - _width / 2, 0, _width, _height)\n\n      if (scope.reflectFromAbove) {\n        renderer.render(scene, _cameraF)\n      } else {\n        renderer.render(scene, _cameraB)\n      }\n\n      renderer.setScissor(_halfWidth - _width / 2 - _width, _height, _width, _height)\n      renderer.setViewport(_halfWidth - _width / 2 - _width, _height, _width, _height)\n\n      if (scope.reflectFromAbove) {\n        renderer.render(scene, _cameraR)\n      } else {\n        renderer.render(scene, _cameraL)\n      }\n\n      renderer.setScissor(_halfWidth + _width / 2, _height, _width, _height)\n      renderer.setViewport(_halfWidth + _width / 2, _height, _width, _height)\n\n      if (scope.reflectFromAbove) {\n        renderer.render(scene, _cameraL)\n      } else {\n        renderer.render(scene, _cameraR)\n      }\n\n      renderer.setScissorTest(false)\n    }\n  }\n}\n\nexport { PeppersGhostEffect }\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}