{"ast":null,"code":"import _classCallCheck from \"C:/Users/Nayyu/Desktop/skibidai-public-build/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Nayyu/Desktop/skibidai-public-build/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"C:/Users/Nayyu/Desktop/skibidai-public-build/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"C:/Users/Nayyu/Desktop/skibidai-public-build/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"C:/Users/Nayyu/Desktop/skibidai-public-build/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/Nayyu/Desktop/skibidai-public-build/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { Object3D } from \"three\";\nimport { XRHandPrimitiveModel } from \"./XRHandPrimitiveModel.js\";\nimport { XRHandMeshModel } from \"./XRHandMeshModel.js\";\nvar XRHandModel = /*#__PURE__*/function (_Object3D) {\n  _inherits(XRHandModel, _Object3D);\n  var _super = _createSuper(XRHandModel);\n  function XRHandModel(controller) {\n    var _this;\n    _classCallCheck(this, XRHandModel);\n    _this = _super.call(this);\n    _this.controller = controller;\n    _this.motionController = null;\n    _this.envMap = null;\n    _this.mesh = null;\n    return _this;\n  }\n  _createClass(XRHandModel, [{\n    key: \"updateMatrixWorld\",\n    value: function updateMatrixWorld(force) {\n      _get(_getPrototypeOf(XRHandModel.prototype), \"updateMatrixWorld\", this).call(this, force);\n      if (this.motionController) {\n        this.motionController.updateMesh();\n      }\n    }\n  }]);\n  return XRHandModel;\n}(Object3D);\nvar XRHandModelFactory = /*#__PURE__*/function () {\n  function XRHandModelFactory() {\n    _classCallCheck(this, XRHandModelFactory);\n    this.path = null;\n  }\n  _createClass(XRHandModelFactory, [{\n    key: \"setPath\",\n    value: function setPath(path) {\n      this.path = path;\n      return this;\n    }\n  }, {\n    key: \"createHandModel\",\n    value: function createHandModel(controller, profile) {\n      var _this2 = this;\n      var handModel = new XRHandModel(controller);\n      controller.addEventListener(\"connected\", function (event) {\n        var xrInputSource = event.data;\n        if (xrInputSource.hand && !handModel.motionController) {\n          handModel.xrInputSource = xrInputSource;\n          if (profile === void 0 || profile === \"spheres\") {\n            handModel.motionController = new XRHandPrimitiveModel(handModel, controller, _this2.path, xrInputSource.handedness, {\n              primitive: \"sphere\"\n            });\n          } else if (profile === \"boxes\") {\n            handModel.motionController = new XRHandPrimitiveModel(handModel, controller, _this2.path, xrInputSource.handedness, {\n              primitive: \"box\"\n            });\n          } else if (profile === \"mesh\") {\n            handModel.motionController = new XRHandMeshModel(handModel, controller, _this2.path, xrInputSource.handedness);\n          }\n        }\n      });\n      controller.addEventListener(\"disconnected\", function () {});\n      return handModel;\n    }\n  }]);\n  return XRHandModelFactory;\n}();\nexport { XRHandModelFactory };","map":{"version":3,"names":["XRHandModel","_Object3D","_inherits","_super","_createSuper","controller","_this","_classCallCheck","call","motionController","envMap","mesh","_createClass","key","value","updateMatrixWorld","force","_get","_getPrototypeOf","prototype","updateMesh","Object3D","XRHandModelFactory","path","setPath","createHandModel","profile","_this2","handModel","addEventListener","event","xrInputSource","data","hand","XRHandPrimitiveModel","handedness","primitive","XRHandMeshModel"],"sources":["C:\\Users\\Nayyu\\Desktop\\skibidai-public-build\\node_modules\\src\\webxr\\XRHandModelFactory.js"],"sourcesContent":["import { Object3D } from 'three'\nimport { XRHandPrimitiveModel } from './XRHandPrimitiveModel'\nimport { XRHandMeshModel } from './XRHandMeshModel'\n\nclass XRHandModel extends Object3D {\n  constructor(controller) {\n    super()\n\n    this.controller = controller\n    this.motionController = null\n    this.envMap = null\n\n    this.mesh = null\n  }\n\n  updateMatrixWorld(force) {\n    super.updateMatrixWorld(force)\n\n    if (this.motionController) {\n      this.motionController.updateMesh()\n    }\n  }\n}\n\nclass XRHandModelFactory {\n  constructor() {\n    this.path = null\n  }\n\n  setPath(path) {\n    this.path = path\n\n    return this\n  }\n\n  createHandModel(controller, profile) {\n    const handModel = new XRHandModel(controller)\n\n    controller.addEventListener('connected', (event) => {\n      const xrInputSource = event.data\n\n      if (xrInputSource.hand && !handModel.motionController) {\n        handModel.xrInputSource = xrInputSource\n\n        // @todo Detect profile if not provided\n        if (profile === undefined || profile === 'spheres') {\n          handModel.motionController = new XRHandPrimitiveModel(\n            handModel,\n            controller,\n            this.path,\n            xrInputSource.handedness,\n            { primitive: 'sphere' },\n          )\n        } else if (profile === 'boxes') {\n          handModel.motionController = new XRHandPrimitiveModel(\n            handModel,\n            controller,\n            this.path,\n            xrInputSource.handedness,\n            { primitive: 'box' },\n          )\n        } else if (profile === 'mesh') {\n          handModel.motionController = new XRHandMeshModel(handModel, controller, this.path, xrInputSource.handedness)\n        }\n      }\n    })\n\n    controller.addEventListener('disconnected', () => {\n      // handModel.motionController = null;\n      // handModel.remove( scene );\n      // scene = null;\n    })\n\n    return handModel\n  }\n}\n\nexport { XRHandModelFactory }\n"],"mappings":";;;;;;;;;IAIMA,WAAA,0BAAAC,SAAA;EAAAC,SAAA,CAAAF,WAAA,EAAAC,SAAA;EAAA,IAAAE,MAAA,GAAAC,YAAA,CAAAJ,WAAA;EACJ,SAAAA,YAAYK,UAAA,EAAY;IAAA,IAAAC,KAAA;IAAAC,eAAA,OAAAP,WAAA;IACtBM,KAAA,GAAAH,MAAA,CAAAK,IAAA;IAEAF,KAAA,CAAKD,UAAA,GAAaA,UAAA;IAClBC,KAAA,CAAKG,gBAAA,GAAmB;IACxBH,KAAA,CAAKI,MAAA,GAAS;IAEdJ,KAAA,CAAKK,IAAA,GAAO;IAAA,OAAAL,KAAA;EACb;EAAAM,YAAA,CAAAZ,WAAA;IAAAa,GAAA;IAAAC,KAAA,EAED,SAAAC,kBAAkBC,KAAA,EAAO;MACvBC,IAAA,CAAAC,eAAA,CAAAlB,WAAA,CAAAmB,SAAA,8BAAAX,IAAA,OAAwBQ,KAAK;MAE7B,IAAI,KAAKP,gBAAA,EAAkB;QACzB,KAAKA,gBAAA,CAAiBW,UAAA,CAAY;MACnC;IACF;EAAA;EAAA,OAAApB,WAAA;AAAA,EAjBuBqB,QAAA;AAAA,IAoBpBC,kBAAA;EACJ,SAAAA,mBAAA,EAAc;IAAAf,eAAA,OAAAe,kBAAA;IACZ,KAAKC,IAAA,GAAO;EACb;EAAAX,YAAA,CAAAU,kBAAA;IAAAT,GAAA;IAAAC,KAAA,EAED,SAAAU,QAAQD,IAAA,EAAM;MACZ,KAAKA,IAAA,GAAOA,IAAA;MAEZ,OAAO;IACR;EAAA;IAAAV,GAAA;IAAAC,KAAA,EAED,SAAAW,gBAAgBpB,UAAA,EAAYqB,OAAA,EAAS;MAAA,IAAAC,MAAA;MACnC,IAAMC,SAAA,GAAY,IAAI5B,WAAA,CAAYK,UAAU;MAE5CA,UAAA,CAAWwB,gBAAA,CAAiB,aAAa,UAACC,KAAA,EAAU;QAClD,IAAMC,aAAA,GAAgBD,KAAA,CAAME,IAAA;QAE5B,IAAID,aAAA,CAAcE,IAAA,IAAQ,CAACL,SAAA,CAAUnB,gBAAA,EAAkB;UACrDmB,SAAA,CAAUG,aAAA,GAAgBA,aAAA;UAG1B,IAAIL,OAAA,KAAY,UAAaA,OAAA,KAAY,WAAW;YAClDE,SAAA,CAAUnB,gBAAA,GAAmB,IAAIyB,oBAAA,CAC/BN,SAAA,EACAvB,UAAA,EACAsB,MAAA,CAAKJ,IAAA,EACLQ,aAAA,CAAcI,UAAA,EACd;cAAEC,SAAA,EAAW;YAAU,CACxB;UACX,WAAmBV,OAAA,KAAY,SAAS;YAC9BE,SAAA,CAAUnB,gBAAA,GAAmB,IAAIyB,oBAAA,CAC/BN,SAAA,EACAvB,UAAA,EACAsB,MAAA,CAAKJ,IAAA,EACLQ,aAAA,CAAcI,UAAA,EACd;cAAEC,SAAA,EAAW;YAAO,CACrB;UACX,WAAmBV,OAAA,KAAY,QAAQ;YAC7BE,SAAA,CAAUnB,gBAAA,GAAmB,IAAI4B,eAAA,CAAgBT,SAAA,EAAWvB,UAAA,EAAYsB,MAAA,CAAKJ,IAAA,EAAMQ,aAAA,CAAcI,UAAU;UAC5G;QACF;MACP,CAAK;MAED9B,UAAA,CAAWwB,gBAAA,CAAiB,gBAAgB,YAAM,CAItD,CAAK;MAED,OAAOD,SAAA;IACR;EAAA;EAAA,OAAAN,kBAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}