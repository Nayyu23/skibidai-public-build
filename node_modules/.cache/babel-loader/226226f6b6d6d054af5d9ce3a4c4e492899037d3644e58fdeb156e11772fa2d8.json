{"ast":null,"code":"import _classCallCheck from \"C:/Users/Nayyu/Desktop/skibidai-public-build/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Nayyu/Desktop/skibidai-public-build/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"C:/Users/Nayyu/Desktop/skibidai-public-build/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/Nayyu/Desktop/skibidai-public-build/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { UniformsUtils, ShaderMaterial } from \"three\";\nimport { Pass, FullScreenQuad } from \"./Pass.js\";\nimport { CopyShader } from \"../shaders/CopyShader.js\";\nvar TexturePass = /*#__PURE__*/function (_Pass) {\n  _inherits(TexturePass, _Pass);\n  var _super = _createSuper(TexturePass);\n  function TexturePass(map, opacity) {\n    var _this;\n    _classCallCheck(this, TexturePass);\n    _this = _super.call(this);\n    var shader = CopyShader;\n    _this.map = map;\n    _this.opacity = opacity !== void 0 ? opacity : 1;\n    _this.uniforms = UniformsUtils.clone(shader.uniforms);\n    _this.material = new ShaderMaterial({\n      uniforms: _this.uniforms,\n      vertexShader: shader.vertexShader,\n      fragmentShader: shader.fragmentShader,\n      depthTest: false,\n      depthWrite: false,\n      premultipliedAlpha: true\n    });\n    _this.needsSwap = false;\n    _this.fsQuad = new FullScreenQuad(null);\n    return _this;\n  }\n  _createClass(TexturePass, [{\n    key: \"render\",\n    value: function render(renderer, writeBuffer, readBuffer) {\n      var oldAutoClear = renderer.autoClear;\n      renderer.autoClear = false;\n      this.fsQuad.material = this.material;\n      this.uniforms[\"opacity\"].value = this.opacity;\n      this.uniforms[\"tDiffuse\"].value = this.map;\n      this.material.transparent = this.opacity < 1;\n      renderer.setRenderTarget(this.renderToScreen ? null : readBuffer);\n      if (this.clear) renderer.clear();\n      this.fsQuad.render(renderer);\n      renderer.autoClear = oldAutoClear;\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      this.material.dispose();\n      this.fsQuad.dispose();\n    }\n  }]);\n  return TexturePass;\n}(Pass);\nexport { TexturePass };","map":{"version":3,"names":["TexturePass","_Pass","_inherits","_super","_createSuper","map","opacity","_this","_classCallCheck","call","shader","CopyShader","uniforms","UniformsUtils","clone","material","ShaderMaterial","vertexShader","fragmentShader","depthTest","depthWrite","premultipliedAlpha","needsSwap","fsQuad","FullScreenQuad","_createClass","key","value","render","renderer","writeBuffer","readBuffer","oldAutoClear","autoClear","transparent","setRenderTarget","renderToScreen","clear","dispose","Pass"],"sources":["C:\\Users\\Nayyu\\Desktop\\skibidai-public-build\\node_modules\\src\\postprocessing\\TexturePass.js"],"sourcesContent":["import { ShaderMaterial, UniformsUtils } from 'three'\nimport { Pass, FullScreenQuad } from './Pass'\nimport { CopyShader } from '../shaders/CopyShader'\n\nclass TexturePass extends Pass {\n  constructor(map, opacity) {\n    super()\n\n    const shader = CopyShader\n\n    this.map = map\n    this.opacity = opacity !== undefined ? opacity : 1.0\n\n    this.uniforms = UniformsUtils.clone(shader.uniforms)\n\n    this.material = new ShaderMaterial({\n      uniforms: this.uniforms,\n      vertexShader: shader.vertexShader,\n      fragmentShader: shader.fragmentShader,\n      depthTest: false,\n      depthWrite: false,\n      premultipliedAlpha: true,\n    })\n\n    this.needsSwap = false\n\n    this.fsQuad = new FullScreenQuad(null)\n  }\n\n  render(renderer, writeBuffer, readBuffer /*, deltaTime, maskActive */) {\n    const oldAutoClear = renderer.autoClear\n    renderer.autoClear = false\n\n    this.fsQuad.material = this.material\n\n    this.uniforms['opacity'].value = this.opacity\n    this.uniforms['tDiffuse'].value = this.map\n    this.material.transparent = this.opacity < 1.0\n\n    renderer.setRenderTarget(this.renderToScreen ? null : readBuffer)\n    if (this.clear) renderer.clear()\n    this.fsQuad.render(renderer)\n\n    renderer.autoClear = oldAutoClear\n  }\n\n  dispose() {\n    this.material.dispose()\n\n    this.fsQuad.dispose()\n  }\n}\n\nexport { TexturePass }\n"],"mappings":";;;;;;;IAIMA,WAAA,0BAAAC,KAAA;EAAAC,SAAA,CAAAF,WAAA,EAAAC,KAAA;EAAA,IAAAE,MAAA,GAAAC,YAAA,CAAAJ,WAAA;EACJ,SAAAA,YAAYK,GAAA,EAAKC,OAAA,EAAS;IAAA,IAAAC,KAAA;IAAAC,eAAA,OAAAR,WAAA;IACxBO,KAAA,GAAAJ,MAAA,CAAAM,IAAA;IAEA,IAAMC,MAAA,GAASC,UAAA;IAEfJ,KAAA,CAAKF,GAAA,GAAMA,GAAA;IACXE,KAAA,CAAKD,OAAA,GAAUA,OAAA,KAAY,SAAYA,OAAA,GAAU;IAEjDC,KAAA,CAAKK,QAAA,GAAWC,aAAA,CAAcC,KAAA,CAAMJ,MAAA,CAAOE,QAAQ;IAEnDL,KAAA,CAAKQ,QAAA,GAAW,IAAIC,cAAA,CAAe;MACjCJ,QAAA,EAAUL,KAAA,CAAKK,QAAA;MACfK,YAAA,EAAcP,MAAA,CAAOO,YAAA;MACrBC,cAAA,EAAgBR,MAAA,CAAOQ,cAAA;MACvBC,SAAA,EAAW;MACXC,UAAA,EAAY;MACZC,kBAAA,EAAoB;IAC1B,CAAK;IAEDd,KAAA,CAAKe,SAAA,GAAY;IAEjBf,KAAA,CAAKgB,MAAA,GAAS,IAAIC,cAAA,CAAe,IAAI;IAAA,OAAAjB,KAAA;EACtC;EAAAkB,YAAA,CAAAzB,WAAA;IAAA0B,GAAA;IAAAC,KAAA,EAED,SAAAC,OAAOC,QAAA,EAAUC,WAAA,EAAaC,UAAA,EAAyC;MACrE,IAAMC,YAAA,GAAeH,QAAA,CAASI,SAAA;MAC9BJ,QAAA,CAASI,SAAA,GAAY;MAErB,KAAKV,MAAA,CAAOR,QAAA,GAAW,KAAKA,QAAA;MAE5B,KAAKH,QAAA,CAAS,SAAS,EAAEe,KAAA,GAAQ,KAAKrB,OAAA;MACtC,KAAKM,QAAA,CAAS,UAAU,EAAEe,KAAA,GAAQ,KAAKtB,GAAA;MACvC,KAAKU,QAAA,CAASmB,WAAA,GAAc,KAAK5B,OAAA,GAAU;MAE3CuB,QAAA,CAASM,eAAA,CAAgB,KAAKC,cAAA,GAAiB,OAAOL,UAAU;MAChE,IAAI,KAAKM,KAAA,EAAOR,QAAA,CAASQ,KAAA,CAAO;MAChC,KAAKd,MAAA,CAAOK,MAAA,CAAOC,QAAQ;MAE3BA,QAAA,CAASI,SAAA,GAAYD,YAAA;IACtB;EAAA;IAAAN,GAAA;IAAAC,KAAA,EAED,SAAAW,QAAA,EAAU;MACR,KAAKvB,QAAA,CAASuB,OAAA,CAAS;MAEvB,KAAKf,MAAA,CAAOe,OAAA,CAAS;IACtB;EAAA;EAAA,OAAAtC,WAAA;AAAA,EA9CuBuC,IAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}