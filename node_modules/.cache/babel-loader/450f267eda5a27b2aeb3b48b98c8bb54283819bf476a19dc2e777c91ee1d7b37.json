{"ast":null,"code":"import _classCallCheck from \"C:/Users/Nayyu/Desktop/skibidai-public-build/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Nayyu/Desktop/skibidai-public-build/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"C:/Users/Nayyu/Desktop/skibidai-public-build/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"C:/Users/Nayyu/Desktop/skibidai-public-build/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/Nayyu/Desktop/skibidai-public-build/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nvar __defProp = Object.defineProperty;\nvar __defNormalProp = function __defNormalProp(obj, key, value) {\n  return key in obj ? __defProp(obj, key, {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: value\n  }) : obj[key] = value;\n};\nvar __publicField = function __publicField(obj, key, value) {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nimport { Vector2, ShaderMaterial } from \"three\";\nimport { Pass, FullScreenQuad } from \"./Pass.js\";\nvar WaterPass = /*#__PURE__*/function (_Pass) {\n  _inherits(WaterPass, _Pass);\n  var _super = _createSuper(WaterPass);\n  function WaterPass() {\n    var _this;\n    _classCallCheck(this, WaterPass);\n    _this = _super.call(this);\n    __publicField(_assertThisInitialized(_this), \"material\");\n    __publicField(_assertThisInitialized(_this), \"fsQuad\");\n    __publicField(_assertThisInitialized(_this), \"factor\");\n    __publicField(_assertThisInitialized(_this), \"time\");\n    __publicField(_assertThisInitialized(_this), \"uniforms\");\n    _this.uniforms = {\n      tex: {\n        value: null\n      },\n      time: {\n        value: 0\n      },\n      factor: {\n        value: 0\n      },\n      resolution: {\n        value: new Vector2(64, 64)\n      }\n    };\n    _this.material = new ShaderMaterial({\n      uniforms: _this.uniforms,\n      vertexShader: \"\\n      varying vec2 vUv;\\n      void main(){  \\n        vUv = uv; \\n        vec4 modelViewPosition = modelViewMatrix * vec4(position, 1.0);\\n        gl_Position = projectionMatrix * modelViewPosition;\\n      }\",\n      fragmentShader: \"\\n      uniform float time;\\n      uniform float factor;\\n      uniform vec2 resolution;\\n      uniform sampler2D tex;\\n      varying vec2 vUv;\\n      void main() {  \\n        vec2 uv1 = vUv;\\n        vec2 uv = gl_FragCoord.xy/resolution.xy;\\n        float frequency = 6.0 * factor;\\n        float amplitude = 0.015 * factor;\\n        float x = uv1.y * frequency + time * .7; \\n        float y = uv1.x * frequency + time * .3;\\n        uv1.x += cos(x+y) * amplitude * cos(y);\\n        uv1.y += sin(x-y) * amplitude * cos(y);\\n        vec4 rgba = texture2D(tex, uv1);\\n        gl_FragColor = rgba;\\n      }\"\n    });\n    _this.fsQuad = new FullScreenQuad(_this.material);\n    _this.factor = 0;\n    _this.time = 0;\n    return _this;\n  }\n  _createClass(WaterPass, [{\n    key: \"render\",\n    value: function render(renderer, writeBuffer, readBuffer) {\n      this.uniforms[\"tex\"].value = readBuffer.texture;\n      this.uniforms[\"time\"].value = this.time;\n      this.uniforms[\"factor\"].value = this.factor;\n      if (this.renderToScreen) {\n        renderer.setRenderTarget(null);\n        this.fsQuad.render(renderer);\n      } else {\n        renderer.setRenderTarget(writeBuffer);\n        if (this.clear) renderer.clear();\n        this.fsQuad.render(renderer);\n      }\n    }\n  }]);\n  return WaterPass;\n}(Pass);\nexport { WaterPass };","map":{"version":3,"names":["WaterPass","_Pass","_inherits","_super","_createSuper","_this","_classCallCheck","call","__publicField","_assertThisInitialized","uniforms","tex","value","time","factor","resolution","Vector2","material","ShaderMaterial","vertexShader","fragmentShader","fsQuad","FullScreenQuad","_createClass","key","render","renderer","writeBuffer","readBuffer","texture","renderToScreen","setRenderTarget","clear","Pass"],"sources":["C:\\Users\\Nayyu\\Desktop\\skibidai-public-build\\node_modules\\src\\postprocessing\\WaterPass.ts"],"sourcesContent":["import { WebGLRenderer, WebGLRenderTarget, ShaderMaterial, Vector2, IUniform, Texture } from 'three'\nimport { Pass, FullScreenQuad } from '../postprocessing/Pass'\n\n/**\n * Simple underwater shader\n * \n \n parameters:\n tex: texture\n time: this should increase with time passing\n factor: to what degree will the shader distort the screen \n\n explaination:\n the shader is quite simple\n it chooses a center and start from there make pixels around it to \"swell\" then \"shrink\" then \"swell\"...\n this is of course nothing really similar to underwater scene\n but you can combine several this shaders together to create the effect you need...\n And yes, this shader could be used for something other than underwater effect, for example, magnifier effect :)\n\n * @author vergil Wang\n */\n\nclass WaterPass extends Pass {\n  public material: ShaderMaterial\n  public fsQuad: FullScreenQuad\n  public factor: number\n  public time: number\n  public uniforms: {\n    tex: IUniform<Texture>\n    time: IUniform<number>\n    factor: IUniform<number>\n    resolution: IUniform<Vector2>\n  }\n\n  constructor() {\n    super()\n    this.uniforms = {\n      tex: { value: null! },\n      time: { value: 0.0 },\n      factor: { value: 0.0 },\n      resolution: { value: new Vector2(64, 64) },\n    }\n    this.material = new ShaderMaterial({\n      uniforms: this.uniforms,\n      vertexShader: `\n      varying vec2 vUv;\n      void main(){  \n        vUv = uv; \n        vec4 modelViewPosition = modelViewMatrix * vec4(position, 1.0);\n        gl_Position = projectionMatrix * modelViewPosition;\n      }`,\n      fragmentShader: `\n      uniform float time;\n      uniform float factor;\n      uniform vec2 resolution;\n      uniform sampler2D tex;\n      varying vec2 vUv;\n      void main() {  \n        vec2 uv1 = vUv;\n        vec2 uv = gl_FragCoord.xy/resolution.xy;\n        float frequency = 6.0 * factor;\n        float amplitude = 0.015 * factor;\n        float x = uv1.y * frequency + time * .7; \n        float y = uv1.x * frequency + time * .3;\n        uv1.x += cos(x+y) * amplitude * cos(y);\n        uv1.y += sin(x-y) * amplitude * cos(y);\n        vec4 rgba = texture2D(tex, uv1);\n        gl_FragColor = rgba;\n      }`,\n    })\n    this.fsQuad = new FullScreenQuad(this.material)\n    this.factor = 0\n    this.time = 0\n  }\n\n  public render(renderer: WebGLRenderer, writeBuffer: WebGLRenderTarget, readBuffer: WebGLRenderTarget): void {\n    this.uniforms['tex'].value = readBuffer.texture\n    this.uniforms['time'].value = this.time\n    this.uniforms['factor'].value = this.factor\n    if (this.renderToScreen) {\n      renderer.setRenderTarget(null)\n      this.fsQuad.render(renderer)\n    } else {\n      renderer.setRenderTarget(writeBuffer)\n      if (this.clear) renderer.clear()\n      this.fsQuad.render(renderer)\n    }\n  }\n}\n\nexport { WaterPass }\n"],"mappings":";;;;;;;;;;;;;;;;;;;;IAsBMA,SAAA,0BAAAC,KAAA;EAAAC,SAAA,CAAAF,SAAA,EAAAC,KAAA;EAAA,IAAAE,MAAA,GAAAC,YAAA,CAAAJ,SAAA;EAYJ,SAAAA,UAAA,EAAc;IAAA,IAAAK,KAAA;IAAAC,eAAA,OAAAN,SAAA;IACNK,KAAA,GAAAF,MAAA,CAAAI,IAAA;IAZDC,aAAA,CAAAC,sBAAA,CAAAJ,KAAA;IACAG,aAAA,CAAAC,sBAAA,CAAAJ,KAAA;IACAG,aAAA,CAAAC,sBAAA,CAAAJ,KAAA;IACAG,aAAA,CAAAC,sBAAA,CAAAJ,KAAA;IACAG,aAAA,CAAAC,sBAAA,CAAAJ,KAAA;IASLA,KAAA,CAAKK,QAAA,GAAW;MACdC,GAAA,EAAK;QAAEC,KAAA,EAAO;MAAM;MACpBC,IAAA,EAAM;QAAED,KAAA,EAAO;MAAI;MACnBE,MAAA,EAAQ;QAAEF,KAAA,EAAO;MAAI;MACrBG,UAAA,EAAY;QAAEH,KAAA,EAAO,IAAII,OAAA,CAAQ,IAAI,EAAE;MAAE;IAAA;IAEtCX,KAAA,CAAAY,QAAA,GAAW,IAAIC,cAAA,CAAe;MACjCR,QAAA,EAAUL,KAAA,CAAKK,QAAA;MACfS,YAAA,sNAAc;MAOdC,cAAA;IAAgB,CAkBjB;IACDf,KAAA,CAAKgB,MAAA,GAAS,IAAIC,cAAA,CAAejB,KAAA,CAAKY,QAAQ;IAC9CZ,KAAA,CAAKS,MAAA,GAAS;IACdT,KAAA,CAAKQ,IAAA,GAAO;IAAA,OAAAR,KAAA;EACd;EAAAkB,YAAA,CAAAvB,SAAA;IAAAwB,GAAA;IAAAZ,KAAA,EAEO,SAAAa,OAAOC,QAAA,EAAyBC,WAAA,EAAgCC,UAAA,EAAqC;MAC1G,KAAKlB,QAAA,CAAS,KAAK,EAAEE,KAAA,GAAQgB,UAAA,CAAWC,OAAA;MACxC,KAAKnB,QAAA,CAAS,MAAM,EAAEE,KAAA,GAAQ,KAAKC,IAAA;MACnC,KAAKH,QAAA,CAAS,QAAQ,EAAEE,KAAA,GAAQ,KAAKE,MAAA;MACrC,IAAI,KAAKgB,cAAA,EAAgB;QACvBJ,QAAA,CAASK,eAAA,CAAgB,IAAI;QACxB,KAAAV,MAAA,CAAOI,MAAA,CAAOC,QAAQ;MAAA,OACtB;QACLA,QAAA,CAASK,eAAA,CAAgBJ,WAAW;QACpC,IAAI,KAAKK,KAAA,EAAON,QAAA,CAASM,KAAA,CAAM;QAC1B,KAAAX,MAAA,CAAOI,MAAA,CAAOC,QAAQ;MAC7B;IACF;EAAA;EAAA,OAAA1B,SAAA;AAAA,EAjEsBiC,IAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}