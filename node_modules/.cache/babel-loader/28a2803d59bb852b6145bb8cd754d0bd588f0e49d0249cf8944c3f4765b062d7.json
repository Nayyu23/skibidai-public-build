{"ast":null,"code":"import _classCallCheck from \"C:/Users/Nayyu/Desktop/skibidai-public-build/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Nayyu/Desktop/skibidai-public-build/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n/**\n * @monogrid/gainmap-js v3.0.5\n * With ❤️, by MONOGRID <rnd@monogrid.com>\n */\n\nimport { RGBAFormat, LinearFilter, ClampToEdgeWrapping, Scene, OrthographicCamera, HalfFloatType, FloatType, Mesh, PlaneGeometry, WebGLRenderTarget, UVMapping, WebGLRenderer, DataTexture, LinearSRGBColorSpace, ShaderMaterial, Texture, IntType, ShortType, ByteType, UnsignedIntType, UnsignedByteType, MeshBasicMaterial } from 'three';\nvar getBufferForType = function getBufferForType(type, width, height) {\n  var out;\n  switch (type) {\n    case UnsignedByteType:\n      out = new Uint8ClampedArray(width * height * 4);\n      break;\n    case HalfFloatType:\n      out = new Uint16Array(width * height * 4);\n      break;\n    case UnsignedIntType:\n      out = new Uint32Array(width * height * 4);\n      break;\n    case ByteType:\n      out = new Int8Array(width * height * 4);\n      break;\n    case ShortType:\n      out = new Int16Array(width * height * 4);\n      break;\n    case IntType:\n      out = new Int32Array(width * height * 4);\n      break;\n    case FloatType:\n      out = new Float32Array(width * height * 4);\n      break;\n    default:\n      throw new Error('Unsupported data type');\n  }\n  return out;\n};\nvar _canReadPixelsResult;\n/**\n * Test if this browser implementation can correctly read pixels from the specified\n * Render target type.\n *\n * Runs only once\n *\n * @param type\n * @param renderer\n * @param camera\n * @param renderTargetOptions\n * @returns\n */\nvar canReadPixels = function canReadPixels(type, renderer, camera, renderTargetOptions) {\n  if (_canReadPixelsResult !== undefined) return _canReadPixelsResult;\n  var testRT = new WebGLRenderTarget(1, 1, renderTargetOptions);\n  renderer.setRenderTarget(testRT);\n  var mesh = new Mesh(new PlaneGeometry(), new MeshBasicMaterial({\n    color: 0xffffff\n  }));\n  renderer.render(mesh, camera);\n  renderer.setRenderTarget(null);\n  var out = getBufferForType(type, testRT.width, testRT.height);\n  renderer.readRenderTargetPixels(testRT, 0, 0, testRT.width, testRT.height, out);\n  testRT.dispose();\n  mesh.geometry.dispose();\n  mesh.material.dispose();\n  _canReadPixelsResult = out[0] !== 0;\n  return _canReadPixelsResult;\n};\n/**\n * Utility class used for rendering a texture with a material\n *\n * @category Core\n * @group Core\n */\nvar QuadRenderer = /*#__PURE__*/function () {\n  /**\n   * Constructs a new QuadRenderer\n   *\n   * @param options Parameters for this QuadRenderer\n   */\n  function QuadRenderer(options) {\n    var _this = this;\n    _classCallCheck(this, QuadRenderer);\n    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r;\n    this._rendererIsDisposable = false;\n    this._supportsReadPixels = true;\n    /**\n     * Renders the input texture using the specified material\n     */\n    this.render = function () {\n      _this._renderer.setRenderTarget(_this._renderTarget);\n      try {\n        _this._renderer.render(_this._scene, _this._camera);\n      } catch (e) {\n        _this._renderer.setRenderTarget(null);\n        throw e;\n      }\n      _this._renderer.setRenderTarget(null);\n    };\n    this._width = options.width;\n    this._height = options.height;\n    this._type = options.type;\n    this._colorSpace = options.colorSpace;\n    var rtOptions = {\n      // fixed options\n      format: RGBAFormat,\n      depthBuffer: false,\n      stencilBuffer: false,\n      // user options\n      type: this._type,\n      // set in class property\n      colorSpace: this._colorSpace,\n      // set in class property\n      anisotropy: ((_a = options.renderTargetOptions) === null || _a === void 0 ? void 0 : _a.anisotropy) !== undefined ? (_b = options.renderTargetOptions) === null || _b === void 0 ? void 0 : _b.anisotropy : 1,\n      generateMipmaps: ((_c = options.renderTargetOptions) === null || _c === void 0 ? void 0 : _c.generateMipmaps) !== undefined ? (_d = options.renderTargetOptions) === null || _d === void 0 ? void 0 : _d.generateMipmaps : false,\n      magFilter: ((_e = options.renderTargetOptions) === null || _e === void 0 ? void 0 : _e.magFilter) !== undefined ? (_f = options.renderTargetOptions) === null || _f === void 0 ? void 0 : _f.magFilter : LinearFilter,\n      minFilter: ((_g = options.renderTargetOptions) === null || _g === void 0 ? void 0 : _g.minFilter) !== undefined ? (_h = options.renderTargetOptions) === null || _h === void 0 ? void 0 : _h.minFilter : LinearFilter,\n      samples: ((_j = options.renderTargetOptions) === null || _j === void 0 ? void 0 : _j.samples) !== undefined ? (_k = options.renderTargetOptions) === null || _k === void 0 ? void 0 : _k.samples : undefined,\n      wrapS: ((_l = options.renderTargetOptions) === null || _l === void 0 ? void 0 : _l.wrapS) !== undefined ? (_m = options.renderTargetOptions) === null || _m === void 0 ? void 0 : _m.wrapS : ClampToEdgeWrapping,\n      wrapT: ((_o = options.renderTargetOptions) === null || _o === void 0 ? void 0 : _o.wrapT) !== undefined ? (_p = options.renderTargetOptions) === null || _p === void 0 ? void 0 : _p.wrapT : ClampToEdgeWrapping\n    };\n    this._material = options.material;\n    if (options.renderer) {\n      this._renderer = options.renderer;\n    } else {\n      this._renderer = QuadRenderer.instantiateRenderer();\n      this._rendererIsDisposable = true;\n    }\n    this._scene = new Scene();\n    this._camera = new OrthographicCamera();\n    this._camera.position.set(0, 0, 10);\n    this._camera.left = -0.5;\n    this._camera.right = 0.5;\n    this._camera.top = 0.5;\n    this._camera.bottom = -0.5;\n    this._camera.updateProjectionMatrix();\n    if (!canReadPixels(this._type, this._renderer, this._camera, rtOptions)) {\n      var alternativeType;\n      switch (this._type) {\n        case HalfFloatType:\n          alternativeType = this._renderer.extensions.has('EXT_color_buffer_float') ? FloatType : undefined;\n          break;\n      }\n      if (alternativeType !== undefined) {\n        console.warn(\"This browser does not support reading pixels from \".concat(this._type, \" RenderTargets, switching to \").concat(FloatType));\n        this._type = alternativeType;\n      } else {\n        this._supportsReadPixels = false;\n        console.warn('This browser dos not support toArray or toDataTexture, calls to those methods will result in an error thrown');\n      }\n    }\n    this._quad = new Mesh(new PlaneGeometry(), this._material);\n    this._quad.geometry.computeBoundingBox();\n    this._scene.add(this._quad);\n    this._renderTarget = new WebGLRenderTarget(this.width, this.height, rtOptions);\n    this._renderTarget.texture.mapping = ((_q = options.renderTargetOptions) === null || _q === void 0 ? void 0 : _q.mapping) !== undefined ? (_r = options.renderTargetOptions) === null || _r === void 0 ? void 0 : _r.mapping : UVMapping;\n  }\n  /**\n   * Instantiates a temporary renderer\n   *\n   * @returns\n   */\n  _createClass(QuadRenderer, [{\n    key: \"toArray\",\n    value:\n    /**\n     * Obtains a Buffer containing the rendered texture.\n     *\n     * @throws Error if the browser cannot read pixels from this RenderTarget type.\n     * @returns a TypedArray containing RGBA values from this renderer\n     */\n    function toArray() {\n      if (!this._supportsReadPixels) throw new Error('Can\\'t read pixels in this browser');\n      var out = getBufferForType(this._type, this._width, this._height);\n      this._renderer.readRenderTargetPixels(this._renderTarget, 0, 0, this._width, this._height, out);\n      return out;\n    }\n    /**\n     * Performs a readPixel operation in the renderTarget\n     * and returns a DataTexture containing the read data\n     *\n     * @params options\n     * @returns\n     */\n  }, {\n    key: \"toDataTexture\",\n    value: function toDataTexture(options) {\n      var returnValue = new DataTexture(\n      // fixed values\n      this.toArray(), this.width, this.height, RGBAFormat, this._type,\n      // user values\n      (options === null || options === void 0 ? void 0 : options.mapping) || UVMapping, (options === null || options === void 0 ? void 0 : options.wrapS) || ClampToEdgeWrapping, (options === null || options === void 0 ? void 0 : options.wrapT) || ClampToEdgeWrapping, (options === null || options === void 0 ? void 0 : options.magFilter) || LinearFilter, (options === null || options === void 0 ? void 0 : options.minFilter) || LinearFilter, (options === null || options === void 0 ? void 0 : options.anisotropy) || 1,\n      // fixed value\n      LinearSRGBColorSpace);\n      // set this afterwards, we can't set it in constructor\n      returnValue.generateMipmaps = (options === null || options === void 0 ? void 0 : options.generateMipmaps) !== undefined ? options === null || options === void 0 ? void 0 : options.generateMipmaps : false;\n      return returnValue;\n    }\n    /**\n     * If using a disposable renderer, it will dispose it.\n     */\n  }, {\n    key: \"disposeOnDemandRenderer\",\n    value: function disposeOnDemandRenderer() {\n      this._renderer.setRenderTarget(null);\n      if (this._rendererIsDisposable) {\n        this._renderer.dispose();\n        this._renderer.forceContextLoss();\n      }\n    }\n    /**\n     * Will dispose of **all** assets used by this renderer.\n     *\n     *\n     * @param disposeRenderTarget will dispose of the renderTarget which will not be usable later\n     * set this to true if you passed the `renderTarget.texture` to a `PMREMGenerator`\n     * or are otherwise done with it.\n     *\n     * @example\n     * ```js\n     * const loader = new HDRJPGLoader(renderer)\n     * const result = await loader.loadAsync('gainmap.jpeg')\n     * const mesh = new Mesh(geometry, new MeshBasicMaterial({ map: result.renderTarget.texture }) )\n     * // DO NOT dispose the renderTarget here,\n     * // it is used directly in the material\n     * result.dispose()\n     * ```\n     *\n     * @example\n     * ```js\n     * const loader = new HDRJPGLoader(renderer)\n     * const pmremGenerator = new PMREMGenerator( renderer );\n     * const result = await loader.loadAsync('gainmap.jpeg')\n     * const envMap = pmremGenerator.fromEquirectangular(result.renderTarget.texture)\n     * const mesh = new Mesh(geometry, new MeshStandardMaterial({ envMap }) )\n     * // renderTarget can be disposed here\n     * // because it was used to generate a PMREM texture\n     * result.dispose(true)\n     * ```\n     */\n  }, {\n    key: \"dispose\",\n    value: function dispose(disposeRenderTarget) {\n      this.disposeOnDemandRenderer();\n      if (disposeRenderTarget) {\n        this.renderTarget.dispose();\n      }\n      // dispose shader material texture uniforms\n      if (this.material instanceof ShaderMaterial) {\n        Object.values(this.material.uniforms).forEach(function (v) {\n          if (v.value instanceof Texture) v.value.dispose();\n        });\n      }\n      // dispose other material properties\n      Object.values(this.material).forEach(function (value) {\n        if (value instanceof Texture) value.dispose();\n      });\n      this.material.dispose();\n      this._quad.geometry.dispose();\n    }\n    /**\n     * Width of the texture\n     */\n  }, {\n    key: \"width\",\n    get: function get() {\n      return this._width;\n    },\n    set: function set(value) {\n      this._width = value;\n      this._renderTarget.setSize(this._width, this._height);\n    }\n    /**\n     * Height of the texture\n     */\n  }, {\n    key: \"height\",\n    get: function get() {\n      return this._height;\n    },\n    set: function set(value) {\n      this._height = value;\n      this._renderTarget.setSize(this._width, this._height);\n    }\n    /**\n     * The renderer used\n     */\n  }, {\n    key: \"renderer\",\n    get: function get() {\n      return this._renderer;\n    }\n    /**\n     * The `WebGLRenderTarget` used.\n     */\n  }, {\n    key: \"renderTarget\",\n    get: function get() {\n      return this._renderTarget;\n    },\n    set: function set(value) {\n      this._renderTarget = value;\n      this._width = value.width;\n      this._height = value.height;\n      // this._type = value.texture.type\n    }\n    /**\n     * The `Material` used.\n     */\n  }, {\n    key: \"material\",\n    get: function get() {\n      return this._material;\n    }\n    /**\n     *\n     */\n  }, {\n    key: \"type\",\n    get: function get() {\n      return this._type;\n    }\n  }, {\n    key: \"colorSpace\",\n    get: function get() {\n      return this._colorSpace;\n    }\n  }], [{\n    key: \"instantiateRenderer\",\n    value: function instantiateRenderer() {\n      var renderer = new WebGLRenderer();\n      renderer.setSize(128, 128);\n      // renderer.outputColorSpace = SRGBColorSpace\n      // renderer.toneMapping = LinearToneMapping\n      // renderer.debug.checkShaderErrors = false\n      // this._rendererIsDisposable = true\n      return renderer;\n    }\n  }]);\n  return QuadRenderer;\n}();\nexport { QuadRenderer as Q };","map":{"version":3,"names":["RGBAFormat","LinearFilter","ClampToEdgeWrapping","Scene","OrthographicCamera","HalfFloatType","FloatType","Mesh","PlaneGeometry","WebGLRenderTarget","UVMapping","WebGLRenderer","DataTexture","LinearSRGBColorSpace","ShaderMaterial","Texture","IntType","ShortType","ByteType","UnsignedIntType","UnsignedByteType","MeshBasicMaterial","getBufferForType","type","width","height","out","Uint8ClampedArray","Uint16Array","Uint32Array","Int8Array","Int16Array","Int32Array","Float32Array","Error","_canReadPixelsResult","canReadPixels","renderer","camera","renderTargetOptions","undefined","testRT","setRenderTarget","mesh","color","render","readRenderTargetPixels","dispose","geometry","material","QuadRenderer","options","_this","_classCallCheck","_a","_b","_c","_d","_e","_f","_g","_h","_j","_k","_l","_m","_o","_p","_q","_r","_rendererIsDisposable","_supportsReadPixels","_renderer","_renderTarget","_scene","_camera","e","_width","_height","_type","_colorSpace","colorSpace","rtOptions","format","depthBuffer","stencilBuffer","anisotropy","generateMipmaps","magFilter","minFilter","samples","wrapS","wrapT","_material","instantiateRenderer","position","set","left","right","top","bottom","updateProjectionMatrix","alternativeType","extensions","has","console","warn","concat","_quad","computeBoundingBox","add","texture","mapping","_createClass","key","value","toArray","toDataTexture","returnValue","disposeOnDemandRenderer","forceContextLoss","disposeRenderTarget","renderTarget","Object","values","uniforms","forEach","v","get","setSize","Q"],"sources":["C:/Users/Nayyu/Desktop/skibidai-public-build/node_modules/@monogrid/gainmap-js/dist/QuadRenderer-6HrRQdJM.js"],"sourcesContent":["/**\n * @monogrid/gainmap-js v3.0.5\n * With ❤️, by MONOGRID <rnd@monogrid.com>\n */\n\nimport { RGBAFormat, LinearFilter, ClampToEdgeWrapping, Scene, OrthographicCamera, HalfFloatType, FloatType, Mesh, PlaneGeometry, WebGLRenderTarget, UVMapping, WebGLRenderer, DataTexture, LinearSRGBColorSpace, ShaderMaterial, Texture, IntType, ShortType, ByteType, UnsignedIntType, UnsignedByteType, MeshBasicMaterial } from 'three';\n\nconst getBufferForType = (type, width, height) => {\n    let out;\n    switch (type) {\n        case UnsignedByteType:\n            out = new Uint8ClampedArray(width * height * 4);\n            break;\n        case HalfFloatType:\n            out = new Uint16Array(width * height * 4);\n            break;\n        case UnsignedIntType:\n            out = new Uint32Array(width * height * 4);\n            break;\n        case ByteType:\n            out = new Int8Array(width * height * 4);\n            break;\n        case ShortType:\n            out = new Int16Array(width * height * 4);\n            break;\n        case IntType:\n            out = new Int32Array(width * height * 4);\n            break;\n        case FloatType:\n            out = new Float32Array(width * height * 4);\n            break;\n        default:\n            throw new Error('Unsupported data type');\n    }\n    return out;\n};\nlet _canReadPixelsResult;\n/**\n * Test if this browser implementation can correctly read pixels from the specified\n * Render target type.\n *\n * Runs only once\n *\n * @param type\n * @param renderer\n * @param camera\n * @param renderTargetOptions\n * @returns\n */\nconst canReadPixels = (type, renderer, camera, renderTargetOptions) => {\n    if (_canReadPixelsResult !== undefined)\n        return _canReadPixelsResult;\n    const testRT = new WebGLRenderTarget(1, 1, renderTargetOptions);\n    renderer.setRenderTarget(testRT);\n    const mesh = new Mesh(new PlaneGeometry(), new MeshBasicMaterial({ color: 0xffffff }));\n    renderer.render(mesh, camera);\n    renderer.setRenderTarget(null);\n    const out = getBufferForType(type, testRT.width, testRT.height);\n    renderer.readRenderTargetPixels(testRT, 0, 0, testRT.width, testRT.height, out);\n    testRT.dispose();\n    mesh.geometry.dispose();\n    mesh.material.dispose();\n    _canReadPixelsResult = out[0] !== 0;\n    return _canReadPixelsResult;\n};\n/**\n * Utility class used for rendering a texture with a material\n *\n * @category Core\n * @group Core\n */\nclass QuadRenderer {\n    /**\n     * Constructs a new QuadRenderer\n     *\n     * @param options Parameters for this QuadRenderer\n     */\n    constructor(options) {\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r;\n        this._rendererIsDisposable = false;\n        this._supportsReadPixels = true;\n        /**\n         * Renders the input texture using the specified material\n         */\n        this.render = () => {\n            this._renderer.setRenderTarget(this._renderTarget);\n            try {\n                this._renderer.render(this._scene, this._camera);\n            }\n            catch (e) {\n                this._renderer.setRenderTarget(null);\n                throw e;\n            }\n            this._renderer.setRenderTarget(null);\n        };\n        this._width = options.width;\n        this._height = options.height;\n        this._type = options.type;\n        this._colorSpace = options.colorSpace;\n        const rtOptions = {\n            // fixed options\n            format: RGBAFormat,\n            depthBuffer: false,\n            stencilBuffer: false,\n            // user options\n            type: this._type, // set in class property\n            colorSpace: this._colorSpace, // set in class property\n            anisotropy: ((_a = options.renderTargetOptions) === null || _a === void 0 ? void 0 : _a.anisotropy) !== undefined ? (_b = options.renderTargetOptions) === null || _b === void 0 ? void 0 : _b.anisotropy : 1,\n            generateMipmaps: ((_c = options.renderTargetOptions) === null || _c === void 0 ? void 0 : _c.generateMipmaps) !== undefined ? (_d = options.renderTargetOptions) === null || _d === void 0 ? void 0 : _d.generateMipmaps : false,\n            magFilter: ((_e = options.renderTargetOptions) === null || _e === void 0 ? void 0 : _e.magFilter) !== undefined ? (_f = options.renderTargetOptions) === null || _f === void 0 ? void 0 : _f.magFilter : LinearFilter,\n            minFilter: ((_g = options.renderTargetOptions) === null || _g === void 0 ? void 0 : _g.minFilter) !== undefined ? (_h = options.renderTargetOptions) === null || _h === void 0 ? void 0 : _h.minFilter : LinearFilter,\n            samples: ((_j = options.renderTargetOptions) === null || _j === void 0 ? void 0 : _j.samples) !== undefined ? (_k = options.renderTargetOptions) === null || _k === void 0 ? void 0 : _k.samples : undefined,\n            wrapS: ((_l = options.renderTargetOptions) === null || _l === void 0 ? void 0 : _l.wrapS) !== undefined ? (_m = options.renderTargetOptions) === null || _m === void 0 ? void 0 : _m.wrapS : ClampToEdgeWrapping,\n            wrapT: ((_o = options.renderTargetOptions) === null || _o === void 0 ? void 0 : _o.wrapT) !== undefined ? (_p = options.renderTargetOptions) === null || _p === void 0 ? void 0 : _p.wrapT : ClampToEdgeWrapping\n        };\n        this._material = options.material;\n        if (options.renderer) {\n            this._renderer = options.renderer;\n        }\n        else {\n            this._renderer = QuadRenderer.instantiateRenderer();\n            this._rendererIsDisposable = true;\n        }\n        this._scene = new Scene();\n        this._camera = new OrthographicCamera();\n        this._camera.position.set(0, 0, 10);\n        this._camera.left = -0.5;\n        this._camera.right = 0.5;\n        this._camera.top = 0.5;\n        this._camera.bottom = -0.5;\n        this._camera.updateProjectionMatrix();\n        if (!canReadPixels(this._type, this._renderer, this._camera, rtOptions)) {\n            let alternativeType;\n            switch (this._type) {\n                case HalfFloatType:\n                    alternativeType = this._renderer.extensions.has('EXT_color_buffer_float') ? FloatType : undefined;\n                    break;\n            }\n            if (alternativeType !== undefined) {\n                console.warn(`This browser does not support reading pixels from ${this._type} RenderTargets, switching to ${FloatType}`);\n                this._type = alternativeType;\n            }\n            else {\n                this._supportsReadPixels = false;\n                console.warn('This browser dos not support toArray or toDataTexture, calls to those methods will result in an error thrown');\n            }\n        }\n        this._quad = new Mesh(new PlaneGeometry(), this._material);\n        this._quad.geometry.computeBoundingBox();\n        this._scene.add(this._quad);\n        this._renderTarget = new WebGLRenderTarget(this.width, this.height, rtOptions);\n        this._renderTarget.texture.mapping = ((_q = options.renderTargetOptions) === null || _q === void 0 ? void 0 : _q.mapping) !== undefined ? (_r = options.renderTargetOptions) === null || _r === void 0 ? void 0 : _r.mapping : UVMapping;\n    }\n    /**\n     * Instantiates a temporary renderer\n     *\n     * @returns\n     */\n    static instantiateRenderer() {\n        const renderer = new WebGLRenderer();\n        renderer.setSize(128, 128);\n        // renderer.outputColorSpace = SRGBColorSpace\n        // renderer.toneMapping = LinearToneMapping\n        // renderer.debug.checkShaderErrors = false\n        // this._rendererIsDisposable = true\n        return renderer;\n    }\n    /**\n     * Obtains a Buffer containing the rendered texture.\n     *\n     * @throws Error if the browser cannot read pixels from this RenderTarget type.\n     * @returns a TypedArray containing RGBA values from this renderer\n     */\n    toArray() {\n        if (!this._supportsReadPixels)\n            throw new Error('Can\\'t read pixels in this browser');\n        const out = getBufferForType(this._type, this._width, this._height);\n        this._renderer.readRenderTargetPixels(this._renderTarget, 0, 0, this._width, this._height, out);\n        return out;\n    }\n    /**\n     * Performs a readPixel operation in the renderTarget\n     * and returns a DataTexture containing the read data\n     *\n     * @params options\n     * @returns\n     */\n    toDataTexture(options) {\n        const returnValue = new DataTexture(\n        // fixed values\n        this.toArray(), this.width, this.height, RGBAFormat, this._type, \n        // user values\n        (options === null || options === void 0 ? void 0 : options.mapping) || UVMapping, (options === null || options === void 0 ? void 0 : options.wrapS) || ClampToEdgeWrapping, (options === null || options === void 0 ? void 0 : options.wrapT) || ClampToEdgeWrapping, (options === null || options === void 0 ? void 0 : options.magFilter) || LinearFilter, (options === null || options === void 0 ? void 0 : options.minFilter) || LinearFilter, (options === null || options === void 0 ? void 0 : options.anisotropy) || 1, \n        // fixed value\n        LinearSRGBColorSpace);\n        // set this afterwards, we can't set it in constructor\n        returnValue.generateMipmaps = (options === null || options === void 0 ? void 0 : options.generateMipmaps) !== undefined ? options === null || options === void 0 ? void 0 : options.generateMipmaps : false;\n        return returnValue;\n    }\n    /**\n     * If using a disposable renderer, it will dispose it.\n     */\n    disposeOnDemandRenderer() {\n        this._renderer.setRenderTarget(null);\n        if (this._rendererIsDisposable) {\n            this._renderer.dispose();\n            this._renderer.forceContextLoss();\n        }\n    }\n    /**\n     * Will dispose of **all** assets used by this renderer.\n     *\n     *\n     * @param disposeRenderTarget will dispose of the renderTarget which will not be usable later\n     * set this to true if you passed the `renderTarget.texture` to a `PMREMGenerator`\n     * or are otherwise done with it.\n     *\n     * @example\n     * ```js\n     * const loader = new HDRJPGLoader(renderer)\n     * const result = await loader.loadAsync('gainmap.jpeg')\n     * const mesh = new Mesh(geometry, new MeshBasicMaterial({ map: result.renderTarget.texture }) )\n     * // DO NOT dispose the renderTarget here,\n     * // it is used directly in the material\n     * result.dispose()\n     * ```\n     *\n     * @example\n     * ```js\n     * const loader = new HDRJPGLoader(renderer)\n     * const pmremGenerator = new PMREMGenerator( renderer );\n     * const result = await loader.loadAsync('gainmap.jpeg')\n     * const envMap = pmremGenerator.fromEquirectangular(result.renderTarget.texture)\n     * const mesh = new Mesh(geometry, new MeshStandardMaterial({ envMap }) )\n     * // renderTarget can be disposed here\n     * // because it was used to generate a PMREM texture\n     * result.dispose(true)\n     * ```\n     */\n    dispose(disposeRenderTarget) {\n        this.disposeOnDemandRenderer();\n        if (disposeRenderTarget) {\n            this.renderTarget.dispose();\n        }\n        // dispose shader material texture uniforms\n        if (this.material instanceof ShaderMaterial) {\n            Object.values(this.material.uniforms).forEach(v => {\n                if (v.value instanceof Texture)\n                    v.value.dispose();\n            });\n        }\n        // dispose other material properties\n        Object.values(this.material).forEach(value => {\n            if (value instanceof Texture)\n                value.dispose();\n        });\n        this.material.dispose();\n        this._quad.geometry.dispose();\n    }\n    /**\n     * Width of the texture\n     */\n    get width() { return this._width; }\n    set width(value) {\n        this._width = value;\n        this._renderTarget.setSize(this._width, this._height);\n    }\n    /**\n     * Height of the texture\n     */\n    get height() { return this._height; }\n    set height(value) {\n        this._height = value;\n        this._renderTarget.setSize(this._width, this._height);\n    }\n    /**\n     * The renderer used\n     */\n    get renderer() { return this._renderer; }\n    /**\n     * The `WebGLRenderTarget` used.\n     */\n    get renderTarget() { return this._renderTarget; }\n    set renderTarget(value) {\n        this._renderTarget = value;\n        this._width = value.width;\n        this._height = value.height;\n        // this._type = value.texture.type\n    }\n    /**\n     * The `Material` used.\n     */\n    get material() { return this._material; }\n    /**\n     *\n     */\n    get type() { return this._type; }\n    get colorSpace() { return this._colorSpace; }\n}\n\nexport { QuadRenderer as Q };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}