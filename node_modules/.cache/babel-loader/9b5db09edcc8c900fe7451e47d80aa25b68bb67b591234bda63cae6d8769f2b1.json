{"ast":null,"code":"import _classCallCheck from \"C:/Users/Nayyu/Desktop/skibidai-public-build/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Nayyu/Desktop/skibidai-public-build/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"C:/Users/Nayyu/Desktop/skibidai-public-build/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/Nayyu/Desktop/skibidai-public-build/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { Loader, HalfFloatType, CubeTexture, LinearFilter, FloatType, FileLoader, DataTexture } from \"three\";\nimport { RGBELoader } from \"./RGBELoader.js\";\nvar HDRCubeTextureLoader = /*#__PURE__*/function (_Loader) {\n  _inherits(HDRCubeTextureLoader, _Loader);\n  var _super = _createSuper(HDRCubeTextureLoader);\n  function HDRCubeTextureLoader(manager) {\n    var _this;\n    _classCallCheck(this, HDRCubeTextureLoader);\n    _this = _super.call(this, manager);\n    _this.hdrLoader = new RGBELoader();\n    _this.type = HalfFloatType;\n    return _this;\n  }\n  _createClass(HDRCubeTextureLoader, [{\n    key: \"load\",\n    value: function load(urls, onLoad, onProgress, onError) {\n      if (typeof urls === \"string\") {\n        urls = [urls];\n      } else if (!Array.isArray(urls)) {\n        console.warn(\"THREE.HDRCubeTextureLoader signature has changed. Use .setDataType() instead.\");\n        this.setDataType(urls);\n        urls = onLoad;\n        onLoad = onProgress;\n        onProgress = onError;\n        onError = arguments[4];\n      }\n      var texture = new CubeTexture();\n      texture.type = this.type;\n      switch (texture.type) {\n        case FloatType:\n        case HalfFloatType:\n          if (\"colorSpace\" in texture) texture.colorSpace = \"srgb-linear\";else texture.encoding = 3e3;\n          texture.minFilter = LinearFilter;\n          texture.magFilter = LinearFilter;\n          texture.generateMipmaps = false;\n          break;\n      }\n      var scope = this;\n      var loaded = 0;\n      function loadHDRData(i, onLoad2, onProgress2, onError2) {\n        new FileLoader(scope.manager).setPath(scope.path).setResponseType(\"arraybuffer\").setWithCredentials(scope.withCredentials).load(urls[i], function (buffer) {\n          loaded++;\n          var texData = scope.hdrLoader.parse(buffer);\n          if (!texData) return;\n          if (texData.data !== void 0) {\n            var dataTexture = new DataTexture(texData.data, texData.width, texData.height);\n            dataTexture.type = texture.type;\n            if (\"colorSpace\" in dataTexture) dataTexture.colorSpace = texture.SRGBColorSpace;else dataTexture.encoding = texture.encoding;\n            dataTexture.format = texture.format;\n            dataTexture.minFilter = texture.minFilter;\n            dataTexture.magFilter = texture.magFilter;\n            dataTexture.generateMipmaps = texture.generateMipmaps;\n            texture.images[i] = dataTexture;\n          }\n          if (loaded === 6) {\n            texture.needsUpdate = true;\n            if (onLoad2) onLoad2(texture);\n          }\n        }, onProgress2, onError2);\n      }\n      for (var i = 0; i < urls.length; i++) {\n        loadHDRData(i, onLoad, onProgress, onError);\n      }\n      return texture;\n    }\n  }, {\n    key: \"setDataType\",\n    value: function setDataType(value) {\n      this.type = value;\n      this.hdrLoader.setDataType(value);\n      return this;\n    }\n  }]);\n  return HDRCubeTextureLoader;\n}(Loader);\nexport { HDRCubeTextureLoader };","map":{"version":3,"names":["HDRCubeTextureLoader","_Loader","_inherits","_super","_createSuper","manager","_this","_classCallCheck","call","hdrLoader","RGBELoader","type","HalfFloatType","_createClass","key","value","load","urls","onLoad","onProgress","onError","Array","isArray","console","warn","setDataType","arguments","texture","CubeTexture","FloatType","colorSpace","encoding","minFilter","LinearFilter","magFilter","generateMipmaps","scope","loaded","loadHDRData","i","onLoad2","onProgress2","onError2","FileLoader","setPath","path","setResponseType","setWithCredentials","withCredentials","buffer","texData","parse","data","dataTexture","DataTexture","width","height","SRGBColorSpace","format","images","needsUpdate","length","Loader"],"sources":["C:\\Users\\Nayyu\\Desktop\\skibidai-public-build\\node_modules\\src\\loaders\\HDRCubeTextureLoader.js"],"sourcesContent":["import { CubeTexture, DataTexture, FileLoader, FloatType, HalfFloatType, LinearFilter, Loader } from 'three'\nimport { RGBELoader } from '../loaders/RGBELoader.js'\n\nclass HDRCubeTextureLoader extends Loader {\n  constructor(manager) {\n    super(manager)\n\n    this.hdrLoader = new RGBELoader()\n    this.type = HalfFloatType\n  }\n\n  load(urls, onLoad, onProgress, onError) {\n    if (typeof urls === 'string') {\n      urls = [urls]\n    } else if (!Array.isArray(urls)) {\n      console.warn('THREE.HDRCubeTextureLoader signature has changed. Use .setDataType() instead.')\n\n      this.setDataType(urls)\n\n      urls = onLoad\n      onLoad = onProgress\n      onProgress = onError\n      onError = arguments[4]\n    }\n\n    const texture = new CubeTexture()\n\n    texture.type = this.type\n\n    switch (texture.type) {\n      case FloatType:\n      case HalfFloatType:\n        if ('colorSpace' in texture) texture.colorSpace = 'srgb-linear'\n        else texture.encoding = 3000 // LinearEncoding\n        texture.minFilter = LinearFilter\n        texture.magFilter = LinearFilter\n        texture.generateMipmaps = false\n        break\n    }\n\n    const scope = this\n\n    let loaded = 0\n\n    function loadHDRData(i, onLoad, onProgress, onError) {\n      new FileLoader(scope.manager)\n        .setPath(scope.path)\n        .setResponseType('arraybuffer')\n        .setWithCredentials(scope.withCredentials)\n        .load(\n          urls[i],\n          function (buffer) {\n            loaded++\n\n            const texData = scope.hdrLoader.parse(buffer)\n\n            if (!texData) return\n\n            if (texData.data !== undefined) {\n              const dataTexture = new DataTexture(texData.data, texData.width, texData.height)\n\n              dataTexture.type = texture.type\n              if ('colorSpace' in dataTexture) dataTexture.colorSpace = texture.SRGBColorSpace\n              else dataTexture.encoding = texture.encoding\n              dataTexture.format = texture.format\n              dataTexture.minFilter = texture.minFilter\n              dataTexture.magFilter = texture.magFilter\n              dataTexture.generateMipmaps = texture.generateMipmaps\n\n              texture.images[i] = dataTexture\n            }\n\n            if (loaded === 6) {\n              texture.needsUpdate = true\n              if (onLoad) onLoad(texture)\n            }\n          },\n          onProgress,\n          onError,\n        )\n    }\n\n    for (let i = 0; i < urls.length; i++) {\n      loadHDRData(i, onLoad, onProgress, onError)\n    }\n\n    return texture\n  }\n\n  setDataType(value) {\n    this.type = value\n    this.hdrLoader.setDataType(value)\n\n    return this\n  }\n}\n\nexport { HDRCubeTextureLoader }\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}