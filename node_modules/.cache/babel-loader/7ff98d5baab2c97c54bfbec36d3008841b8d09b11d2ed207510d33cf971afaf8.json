{"ast":null,"code":"import _createClass from \"C:/Users/Nayyu/Desktop/skibidai-public-build/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"C:/Users/Nayyu/Desktop/skibidai-public-build/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _assertThisInitialized from \"C:/Users/Nayyu/Desktop/skibidai-public-build/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"C:/Users/Nayyu/Desktop/skibidai-public-build/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/Nayyu/Desktop/skibidai-public-build/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _get from \"C:/Users/Nayyu/Desktop/skibidai-public-build/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"C:/Users/Nayyu/Desktop/skibidai-public-build/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nvar __defProp = Object.defineProperty;\nvar __defNormalProp = function __defNormalProp(obj, key, value) {\n  return key in obj ? __defProp(obj, key, {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: value\n  }) : obj[key] = value;\n};\nvar __publicField = function __publicField(obj, key, value) {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nimport { Object3D, Raycaster, Vector3, Quaternion, Euler, Matrix4, MeshBasicMaterial, DoubleSide, LineBasicMaterial, CylinderGeometry, BoxGeometry, BufferGeometry, Float32BufferAttribute, Mesh, Line, OctahedronGeometry, PlaneGeometry, TorusGeometry, SphereGeometry, Color } from \"three\";\nvar TransformControls = /*#__PURE__*/function (_Object3D) {\n  _inherits(TransformControls, _Object3D);\n  var _super = _createSuper(TransformControls);\n  function TransformControls(camera, domElement) {\n    var _thisSuper, _this;\n    _classCallCheck(this, TransformControls);\n    _this = _super.call(this);\n    __publicField(_assertThisInitialized(_this), \"isTransformControls\", true);\n    __publicField(_assertThisInitialized(_this), \"visible\", false);\n    __publicField(_assertThisInitialized(_this), \"domElement\");\n    __publicField(_assertThisInitialized(_this), \"raycaster\", new Raycaster());\n    __publicField(_assertThisInitialized(_this), \"gizmo\");\n    __publicField(_assertThisInitialized(_this), \"plane\");\n    __publicField(_assertThisInitialized(_this), \"tempVector\", new Vector3());\n    __publicField(_assertThisInitialized(_this), \"tempVector2\", new Vector3());\n    __publicField(_assertThisInitialized(_this), \"tempQuaternion\", new Quaternion());\n    __publicField(_assertThisInitialized(_this), \"unit\", {\n      X: new Vector3(1, 0, 0),\n      Y: new Vector3(0, 1, 0),\n      Z: new Vector3(0, 0, 1)\n    });\n    __publicField(_assertThisInitialized(_this), \"pointStart\", new Vector3());\n    __publicField(_assertThisInitialized(_this), \"pointEnd\", new Vector3());\n    __publicField(_assertThisInitialized(_this), \"offset\", new Vector3());\n    __publicField(_assertThisInitialized(_this), \"rotationAxis\", new Vector3());\n    __publicField(_assertThisInitialized(_this), \"startNorm\", new Vector3());\n    __publicField(_assertThisInitialized(_this), \"endNorm\", new Vector3());\n    __publicField(_assertThisInitialized(_this), \"rotationAngle\", 0);\n    __publicField(_assertThisInitialized(_this), \"cameraPosition\", new Vector3());\n    __publicField(_assertThisInitialized(_this), \"cameraQuaternion\", new Quaternion());\n    __publicField(_assertThisInitialized(_this), \"cameraScale\", new Vector3());\n    __publicField(_assertThisInitialized(_this), \"parentPosition\", new Vector3());\n    __publicField(_assertThisInitialized(_this), \"parentQuaternion\", new Quaternion());\n    __publicField(_assertThisInitialized(_this), \"parentQuaternionInv\", new Quaternion());\n    __publicField(_assertThisInitialized(_this), \"parentScale\", new Vector3());\n    __publicField(_assertThisInitialized(_this), \"worldPositionStart\", new Vector3());\n    __publicField(_assertThisInitialized(_this), \"worldQuaternionStart\", new Quaternion());\n    __publicField(_assertThisInitialized(_this), \"worldScaleStart\", new Vector3());\n    __publicField(_assertThisInitialized(_this), \"worldPosition\", new Vector3());\n    __publicField(_assertThisInitialized(_this), \"worldQuaternion\", new Quaternion());\n    __publicField(_assertThisInitialized(_this), \"worldQuaternionInv\", new Quaternion());\n    __publicField(_assertThisInitialized(_this), \"worldScale\", new Vector3());\n    __publicField(_assertThisInitialized(_this), \"eye\", new Vector3());\n    __publicField(_assertThisInitialized(_this), \"positionStart\", new Vector3());\n    __publicField(_assertThisInitialized(_this), \"quaternionStart\", new Quaternion());\n    __publicField(_assertThisInitialized(_this), \"scaleStart\", new Vector3());\n    __publicField(_assertThisInitialized(_this), \"camera\");\n    __publicField(_assertThisInitialized(_this), \"object\");\n    __publicField(_assertThisInitialized(_this), \"enabled\", true);\n    __publicField(_assertThisInitialized(_this), \"axis\", null);\n    __publicField(_assertThisInitialized(_this), \"mode\", \"translate\");\n    __publicField(_assertThisInitialized(_this), \"translationSnap\", null);\n    __publicField(_assertThisInitialized(_this), \"rotationSnap\", null);\n    __publicField(_assertThisInitialized(_this), \"scaleSnap\", null);\n    __publicField(_assertThisInitialized(_this), \"space\", \"world\");\n    __publicField(_assertThisInitialized(_this), \"size\", 1);\n    __publicField(_assertThisInitialized(_this), \"dragging\", false);\n    __publicField(_assertThisInitialized(_this), \"showX\", true);\n    __publicField(_assertThisInitialized(_this), \"showY\", true);\n    __publicField(_assertThisInitialized(_this), \"showZ\", true);\n    // events\n    __publicField(_assertThisInitialized(_this), \"changeEvent\", {\n      type: \"change\"\n    });\n    __publicField(_assertThisInitialized(_this), \"mouseDownEvent\", {\n      type: \"mouseDown\",\n      mode: _this.mode\n    });\n    __publicField(_assertThisInitialized(_this), \"mouseUpEvent\", {\n      type: \"mouseUp\",\n      mode: _this.mode\n    });\n    __publicField(_assertThisInitialized(_this), \"objectChangeEvent\", {\n      type: \"objectChange\"\n    });\n    __publicField(_assertThisInitialized(_this), \"intersectObjectWithRay\", function (object, raycaster, includeInvisible) {\n      var allIntersections = raycaster.intersectObject(object, true);\n      for (var i = 0; i < allIntersections.length; i++) {\n        if (allIntersections[i].object.visible || includeInvisible) {\n          return allIntersections[i];\n        }\n      }\n      return false;\n    });\n    // Set current object\n    __publicField(_assertThisInitialized(_this), \"attach\", function (object) {\n      _this.object = object;\n      _this.visible = true;\n      return _assertThisInitialized(_this);\n    });\n    // Detatch from object\n    __publicField(_assertThisInitialized(_this), \"detach\", function () {\n      _this.object = void 0;\n      _this.visible = false;\n      _this.axis = null;\n      return _assertThisInitialized(_this);\n    });\n    // Reset\n    __publicField(_assertThisInitialized(_this), \"reset\", function () {\n      if (!_this.enabled) return _assertThisInitialized(_this);\n      if (_this.dragging) {\n        if (_this.object !== void 0) {\n          _this.object.position.copy(_this.positionStart);\n          _this.object.quaternion.copy(_this.quaternionStart);\n          _this.object.scale.copy(_this.scaleStart);\n          _this.dispatchEvent(_this.changeEvent);\n          _this.dispatchEvent(_this.objectChangeEvent);\n          _this.pointStart.copy(_this.pointEnd);\n        }\n      }\n      return _assertThisInitialized(_this);\n    });\n    __publicField(_assertThisInitialized(_this), \"updateMatrixWorld\", function () {\n      if (_this.object !== void 0) {\n        _this.object.updateMatrixWorld();\n        if (_this.object.parent === null) {\n          console.error(\"TransformControls: The attached 3D object must be a part of the scene graph.\");\n        } else {\n          _this.object.parent.matrixWorld.decompose(_this.parentPosition, _this.parentQuaternion, _this.parentScale);\n        }\n        _this.object.matrixWorld.decompose(_this.worldPosition, _this.worldQuaternion, _this.worldScale);\n        _this.parentQuaternionInv.copy(_this.parentQuaternion).invert();\n        _this.worldQuaternionInv.copy(_this.worldQuaternion).invert();\n      }\n      _this.camera.updateMatrixWorld();\n      _this.camera.matrixWorld.decompose(_this.cameraPosition, _this.cameraQuaternion, _this.cameraScale);\n      _this.eye.copy(_this.cameraPosition).sub(_this.worldPosition).normalize();\n      _get((_thisSuper = _assertThisInitialized(_this), _getPrototypeOf(TransformControls.prototype)), \"updateMatrixWorld\", _thisSuper).call(_thisSuper);\n    });\n    __publicField(_assertThisInitialized(_this), \"pointerHover\", function (pointer) {\n      if (_this.object === void 0 || _this.dragging === true) return;\n      _this.raycaster.setFromCamera(pointer, _this.camera);\n      var intersect = _this.intersectObjectWithRay(_this.gizmo.picker[_this.mode], _this.raycaster);\n      if (intersect) {\n        _this.axis = intersect.object.name;\n      } else {\n        _this.axis = null;\n      }\n    });\n    __publicField(_assertThisInitialized(_this), \"pointerDown\", function (pointer) {\n      if (_this.object === void 0 || _this.dragging === true || pointer.button !== 0) return;\n      if (_this.axis !== null) {\n        _this.raycaster.setFromCamera(pointer, _this.camera);\n        var planeIntersect = _this.intersectObjectWithRay(_this.plane, _this.raycaster, true);\n        if (planeIntersect) {\n          var space = _this.space;\n          if (_this.mode === \"scale\") {\n            space = \"local\";\n          } else if (_this.axis === \"E\" || _this.axis === \"XYZE\" || _this.axis === \"XYZ\") {\n            space = \"world\";\n          }\n          if (space === \"local\" && _this.mode === \"rotate\") {\n            var snap = _this.rotationSnap;\n            if (_this.axis === \"X\" && snap) _this.object.rotation.x = Math.round(_this.object.rotation.x / snap) * snap;\n            if (_this.axis === \"Y\" && snap) _this.object.rotation.y = Math.round(_this.object.rotation.y / snap) * snap;\n            if (_this.axis === \"Z\" && snap) _this.object.rotation.z = Math.round(_this.object.rotation.z / snap) * snap;\n          }\n          _this.object.updateMatrixWorld();\n          if (_this.object.parent) {\n            _this.object.parent.updateMatrixWorld();\n          }\n          _this.positionStart.copy(_this.object.position);\n          _this.quaternionStart.copy(_this.object.quaternion);\n          _this.scaleStart.copy(_this.object.scale);\n          _this.object.matrixWorld.decompose(_this.worldPositionStart, _this.worldQuaternionStart, _this.worldScaleStart);\n          _this.pointStart.copy(planeIntersect.point).sub(_this.worldPositionStart);\n        }\n        _this.dragging = true;\n        _this.mouseDownEvent.mode = _this.mode;\n        _this.dispatchEvent(_this.mouseDownEvent);\n      }\n    });\n    __publicField(_assertThisInitialized(_this), \"pointerMove\", function (pointer) {\n      var axis = _this.axis;\n      var mode = _this.mode;\n      var object = _this.object;\n      var space = _this.space;\n      if (mode === \"scale\") {\n        space = \"local\";\n      } else if (axis === \"E\" || axis === \"XYZE\" || axis === \"XYZ\") {\n        space = \"world\";\n      }\n      if (object === void 0 || axis === null || _this.dragging === false || pointer.button !== -1) return;\n      _this.raycaster.setFromCamera(pointer, _this.camera);\n      var planeIntersect = _this.intersectObjectWithRay(_this.plane, _this.raycaster, true);\n      if (!planeIntersect) return;\n      _this.pointEnd.copy(planeIntersect.point).sub(_this.worldPositionStart);\n      if (mode === \"translate\") {\n        _this.offset.copy(_this.pointEnd).sub(_this.pointStart);\n        if (space === \"local\" && axis !== \"XYZ\") {\n          _this.offset.applyQuaternion(_this.worldQuaternionInv);\n        }\n        if (axis.indexOf(\"X\") === -1) _this.offset.x = 0;\n        if (axis.indexOf(\"Y\") === -1) _this.offset.y = 0;\n        if (axis.indexOf(\"Z\") === -1) _this.offset.z = 0;\n        if (space === \"local\" && axis !== \"XYZ\") {\n          _this.offset.applyQuaternion(_this.quaternionStart).divide(_this.parentScale);\n        } else {\n          _this.offset.applyQuaternion(_this.parentQuaternionInv).divide(_this.parentScale);\n        }\n        object.position.copy(_this.offset).add(_this.positionStart);\n        if (_this.translationSnap) {\n          if (space === \"local\") {\n            object.position.applyQuaternion(_this.tempQuaternion.copy(_this.quaternionStart).invert());\n            if (axis.search(\"X\") !== -1) {\n              object.position.x = Math.round(object.position.x / _this.translationSnap) * _this.translationSnap;\n            }\n            if (axis.search(\"Y\") !== -1) {\n              object.position.y = Math.round(object.position.y / _this.translationSnap) * _this.translationSnap;\n            }\n            if (axis.search(\"Z\") !== -1) {\n              object.position.z = Math.round(object.position.z / _this.translationSnap) * _this.translationSnap;\n            }\n            object.position.applyQuaternion(_this.quaternionStart);\n          }\n          if (space === \"world\") {\n            if (object.parent) {\n              object.position.add(_this.tempVector.setFromMatrixPosition(object.parent.matrixWorld));\n            }\n            if (axis.search(\"X\") !== -1) {\n              object.position.x = Math.round(object.position.x / _this.translationSnap) * _this.translationSnap;\n            }\n            if (axis.search(\"Y\") !== -1) {\n              object.position.y = Math.round(object.position.y / _this.translationSnap) * _this.translationSnap;\n            }\n            if (axis.search(\"Z\") !== -1) {\n              object.position.z = Math.round(object.position.z / _this.translationSnap) * _this.translationSnap;\n            }\n            if (object.parent) {\n              object.position.sub(_this.tempVector.setFromMatrixPosition(object.parent.matrixWorld));\n            }\n          }\n        }\n      } else if (mode === \"scale\") {\n        if (axis.search(\"XYZ\") !== -1) {\n          var d = _this.pointEnd.length() / _this.pointStart.length();\n          if (_this.pointEnd.dot(_this.pointStart) < 0) d *= -1;\n          _this.tempVector2.set(d, d, d);\n        } else {\n          _this.tempVector.copy(_this.pointStart);\n          _this.tempVector2.copy(_this.pointEnd);\n          _this.tempVector.applyQuaternion(_this.worldQuaternionInv);\n          _this.tempVector2.applyQuaternion(_this.worldQuaternionInv);\n          _this.tempVector2.divide(_this.tempVector);\n          if (axis.search(\"X\") === -1) {\n            _this.tempVector2.x = 1;\n          }\n          if (axis.search(\"Y\") === -1) {\n            _this.tempVector2.y = 1;\n          }\n          if (axis.search(\"Z\") === -1) {\n            _this.tempVector2.z = 1;\n          }\n        }\n        object.scale.copy(_this.scaleStart).multiply(_this.tempVector2);\n        if (_this.scaleSnap && _this.object) {\n          if (axis.search(\"X\") !== -1) {\n            _this.object.scale.x = Math.round(object.scale.x / _this.scaleSnap) * _this.scaleSnap || _this.scaleSnap;\n          }\n          if (axis.search(\"Y\") !== -1) {\n            object.scale.y = Math.round(object.scale.y / _this.scaleSnap) * _this.scaleSnap || _this.scaleSnap;\n          }\n          if (axis.search(\"Z\") !== -1) {\n            object.scale.z = Math.round(object.scale.z / _this.scaleSnap) * _this.scaleSnap || _this.scaleSnap;\n          }\n        }\n      } else if (mode === \"rotate\") {\n        _this.offset.copy(_this.pointEnd).sub(_this.pointStart);\n        var ROTATION_SPEED = 20 / _this.worldPosition.distanceTo(_this.tempVector.setFromMatrixPosition(_this.camera.matrixWorld));\n        if (axis === \"E\") {\n          _this.rotationAxis.copy(_this.eye);\n          _this.rotationAngle = _this.pointEnd.angleTo(_this.pointStart);\n          _this.startNorm.copy(_this.pointStart).normalize();\n          _this.endNorm.copy(_this.pointEnd).normalize();\n          _this.rotationAngle *= _this.endNorm.cross(_this.startNorm).dot(_this.eye) < 0 ? 1 : -1;\n        } else if (axis === \"XYZE\") {\n          _this.rotationAxis.copy(_this.offset).cross(_this.eye).normalize();\n          _this.rotationAngle = _this.offset.dot(_this.tempVector.copy(_this.rotationAxis).cross(_this.eye)) * ROTATION_SPEED;\n        } else if (axis === \"X\" || axis === \"Y\" || axis === \"Z\") {\n          _this.rotationAxis.copy(_this.unit[axis]);\n          _this.tempVector.copy(_this.unit[axis]);\n          if (space === \"local\") {\n            _this.tempVector.applyQuaternion(_this.worldQuaternion);\n          }\n          _this.rotationAngle = _this.offset.dot(_this.tempVector.cross(_this.eye).normalize()) * ROTATION_SPEED;\n        }\n        if (_this.rotationSnap) {\n          _this.rotationAngle = Math.round(_this.rotationAngle / _this.rotationSnap) * _this.rotationSnap;\n        }\n        if (space === \"local\" && axis !== \"E\" && axis !== \"XYZE\") {\n          object.quaternion.copy(_this.quaternionStart);\n          object.quaternion.multiply(_this.tempQuaternion.setFromAxisAngle(_this.rotationAxis, _this.rotationAngle)).normalize();\n        } else {\n          _this.rotationAxis.applyQuaternion(_this.parentQuaternionInv);\n          object.quaternion.copy(_this.tempQuaternion.setFromAxisAngle(_this.rotationAxis, _this.rotationAngle));\n          object.quaternion.multiply(_this.quaternionStart).normalize();\n        }\n      }\n      _this.dispatchEvent(_this.changeEvent);\n      _this.dispatchEvent(_this.objectChangeEvent);\n    });\n    __publicField(_assertThisInitialized(_this), \"pointerUp\", function (pointer) {\n      if (pointer.button !== 0) return;\n      if (_this.dragging && _this.axis !== null) {\n        _this.mouseUpEvent.mode = _this.mode;\n        _this.dispatchEvent(_this.mouseUpEvent);\n      }\n      _this.dragging = false;\n      _this.axis = null;\n    });\n    __publicField(_assertThisInitialized(_this), \"getPointer\", function (event) {\n      var _a;\n      if (_this.domElement && ((_a = _this.domElement.ownerDocument) == null ? void 0 : _a.pointerLockElement)) {\n        return {\n          x: 0,\n          y: 0,\n          button: event.button\n        };\n      } else {\n        var pointer = event.changedTouches ? event.changedTouches[0] : event;\n        var rect = _this.domElement.getBoundingClientRect();\n        return {\n          x: (pointer.clientX - rect.left) / rect.width * 2 - 1,\n          y: -(pointer.clientY - rect.top) / rect.height * 2 + 1,\n          button: event.button\n        };\n      }\n    });\n    __publicField(_assertThisInitialized(_this), \"onPointerHover\", function (event) {\n      if (!_this.enabled) return;\n      switch (event.pointerType) {\n        case \"mouse\":\n        case \"pen\":\n          _this.pointerHover(_this.getPointer(event));\n          break;\n      }\n    });\n    __publicField(_assertThisInitialized(_this), \"onPointerDown\", function (event) {\n      if (!_this.enabled || !_this.domElement) return;\n      _this.domElement.style.touchAction = \"none\";\n      _this.domElement.ownerDocument.addEventListener(\"pointermove\", _this.onPointerMove);\n      _this.pointerHover(_this.getPointer(event));\n      _this.pointerDown(_this.getPointer(event));\n    });\n    __publicField(_assertThisInitialized(_this), \"onPointerMove\", function (event) {\n      if (!_this.enabled) return;\n      _this.pointerMove(_this.getPointer(event));\n    });\n    __publicField(_assertThisInitialized(_this), \"onPointerUp\", function (event) {\n      if (!_this.enabled || !_this.domElement) return;\n      _this.domElement.style.touchAction = \"\";\n      _this.domElement.ownerDocument.removeEventListener(\"pointermove\", _this.onPointerMove);\n      _this.pointerUp(_this.getPointer(event));\n    });\n    __publicField(_assertThisInitialized(_this), \"getMode\", function () {\n      return _this.mode;\n    });\n    __publicField(_assertThisInitialized(_this), \"setMode\", function (mode) {\n      _this.mode = mode;\n    });\n    __publicField(_assertThisInitialized(_this), \"setTranslationSnap\", function (translationSnap) {\n      _this.translationSnap = translationSnap;\n    });\n    __publicField(_assertThisInitialized(_this), \"setRotationSnap\", function (rotationSnap) {\n      _this.rotationSnap = rotationSnap;\n    });\n    __publicField(_assertThisInitialized(_this), \"setScaleSnap\", function (scaleSnap) {\n      _this.scaleSnap = scaleSnap;\n    });\n    __publicField(_assertThisInitialized(_this), \"setSize\", function (size) {\n      _this.size = size;\n    });\n    __publicField(_assertThisInitialized(_this), \"setSpace\", function (space) {\n      _this.space = space;\n    });\n    __publicField(_assertThisInitialized(_this), \"update\", function () {\n      console.warn(\"THREE.TransformControls: update function has no more functionality and therefore has been deprecated.\");\n    });\n    __publicField(_assertThisInitialized(_this), \"connect\", function (domElement) {\n      if (domElement === document) {\n        console.error('THREE.OrbitControls: \"document\" should not be used as the target \"domElement\". Please use \"renderer.domElement\" instead.');\n      }\n      _this.domElement = domElement;\n      _this.domElement.addEventListener(\"pointerdown\", _this.onPointerDown);\n      _this.domElement.addEventListener(\"pointermove\", _this.onPointerHover);\n      _this.domElement.ownerDocument.addEventListener(\"pointerup\", _this.onPointerUp);\n    });\n    __publicField(_assertThisInitialized(_this), \"dispose\", function () {\n      var _a, _b, _c, _d, _e, _f;\n      (_a = _this.domElement) == null ? void 0 : _a.removeEventListener(\"pointerdown\", _this.onPointerDown);\n      (_b = _this.domElement) == null ? void 0 : _b.removeEventListener(\"pointermove\", _this.onPointerHover);\n      (_d = (_c = _this.domElement) == null ? void 0 : _c.ownerDocument) == null ? void 0 : _d.removeEventListener(\"pointermove\", _this.onPointerMove);\n      (_f = (_e = _this.domElement) == null ? void 0 : _e.ownerDocument) == null ? void 0 : _f.removeEventListener(\"pointerup\", _this.onPointerUp);\n      _this.traverse(function (child) {\n        var mesh = child;\n        if (mesh.geometry) {\n          mesh.geometry.dispose();\n        }\n        if (mesh.material) {\n          mesh.material.dispose();\n        }\n      });\n    });\n    _this.domElement = domElement;\n    _this.camera = camera;\n    _this.gizmo = new TransformControlsGizmo();\n    _this.add(_this.gizmo);\n    _this.plane = new TransformControlsPlane();\n    _this.add(_this.plane);\n    var defineProperty = function defineProperty(propName, defaultValue) {\n      var propValue = defaultValue;\n      Object.defineProperty(_assertThisInitialized(_this), propName, {\n        get: function get() {\n          return propValue !== void 0 ? propValue : defaultValue;\n        },\n        set: function set(value) {\n          if (propValue !== value) {\n            propValue = value;\n            this.plane[propName] = value;\n            this.gizmo[propName] = value;\n            this.dispatchEvent({\n              type: propName + \"-changed\",\n              value: value\n            });\n            this.dispatchEvent(this.changeEvent);\n          }\n        }\n      });\n      _this[propName] = defaultValue;\n      _this.plane[propName] = defaultValue;\n      _this.gizmo[propName] = defaultValue;\n    };\n    defineProperty(\"camera\", _this.camera);\n    defineProperty(\"object\", _this.object);\n    defineProperty(\"enabled\", _this.enabled);\n    defineProperty(\"axis\", _this.axis);\n    defineProperty(\"mode\", _this.mode);\n    defineProperty(\"translationSnap\", _this.translationSnap);\n    defineProperty(\"rotationSnap\", _this.rotationSnap);\n    defineProperty(\"scaleSnap\", _this.scaleSnap);\n    defineProperty(\"space\", _this.space);\n    defineProperty(\"size\", _this.size);\n    defineProperty(\"dragging\", _this.dragging);\n    defineProperty(\"showX\", _this.showX);\n    defineProperty(\"showY\", _this.showY);\n    defineProperty(\"showZ\", _this.showZ);\n    defineProperty(\"worldPosition\", _this.worldPosition);\n    defineProperty(\"worldPositionStart\", _this.worldPositionStart);\n    defineProperty(\"worldQuaternion\", _this.worldQuaternion);\n    defineProperty(\"worldQuaternionStart\", _this.worldQuaternionStart);\n    defineProperty(\"cameraPosition\", _this.cameraPosition);\n    defineProperty(\"cameraQuaternion\", _this.cameraQuaternion);\n    defineProperty(\"pointStart\", _this.pointStart);\n    defineProperty(\"pointEnd\", _this.pointEnd);\n    defineProperty(\"rotationAxis\", _this.rotationAxis);\n    defineProperty(\"rotationAngle\", _this.rotationAngle);\n    defineProperty(\"eye\", _this.eye);\n    if (domElement !== void 0) _this.connect(domElement);\n    return _this;\n  }\n  return _createClass(TransformControls);\n}(Object3D);\nvar TransformControlsGizmo = /*#__PURE__*/function (_Object3D2) {\n  _inherits(TransformControlsGizmo, _Object3D2);\n  var _super2 = _createSuper(TransformControlsGizmo);\n  function TransformControlsGizmo() {\n    var _thisSuper2, _this2;\n    _classCallCheck(this, TransformControlsGizmo);\n    _this2 = _super2.call(this);\n    __publicField(_assertThisInitialized(_this2), \"isTransformControlsGizmo\", true);\n    __publicField(_assertThisInitialized(_this2), \"type\", \"TransformControlsGizmo\");\n    __publicField(_assertThisInitialized(_this2), \"tempVector\", new Vector3(0, 0, 0));\n    __publicField(_assertThisInitialized(_this2), \"tempEuler\", new Euler());\n    __publicField(_assertThisInitialized(_this2), \"alignVector\", new Vector3(0, 1, 0));\n    __publicField(_assertThisInitialized(_this2), \"zeroVector\", new Vector3(0, 0, 0));\n    __publicField(_assertThisInitialized(_this2), \"lookAtMatrix\", new Matrix4());\n    __publicField(_assertThisInitialized(_this2), \"tempQuaternion\", new Quaternion());\n    __publicField(_assertThisInitialized(_this2), \"tempQuaternion2\", new Quaternion());\n    __publicField(_assertThisInitialized(_this2), \"identityQuaternion\", new Quaternion());\n    __publicField(_assertThisInitialized(_this2), \"unitX\", new Vector3(1, 0, 0));\n    __publicField(_assertThisInitialized(_this2), \"unitY\", new Vector3(0, 1, 0));\n    __publicField(_assertThisInitialized(_this2), \"unitZ\", new Vector3(0, 0, 1));\n    __publicField(_assertThisInitialized(_this2), \"gizmo\");\n    __publicField(_assertThisInitialized(_this2), \"picker\");\n    __publicField(_assertThisInitialized(_this2), \"helper\");\n    // these are set from parent class TransformControls\n    __publicField(_assertThisInitialized(_this2), \"rotationAxis\", new Vector3());\n    __publicField(_assertThisInitialized(_this2), \"cameraPosition\", new Vector3());\n    __publicField(_assertThisInitialized(_this2), \"worldPositionStart\", new Vector3());\n    __publicField(_assertThisInitialized(_this2), \"worldQuaternionStart\", new Quaternion());\n    __publicField(_assertThisInitialized(_this2), \"worldPosition\", new Vector3());\n    __publicField(_assertThisInitialized(_this2), \"worldQuaternion\", new Quaternion());\n    __publicField(_assertThisInitialized(_this2), \"eye\", new Vector3());\n    __publicField(_assertThisInitialized(_this2), \"camera\", null);\n    __publicField(_assertThisInitialized(_this2), \"enabled\", true);\n    __publicField(_assertThisInitialized(_this2), \"axis\", null);\n    __publicField(_assertThisInitialized(_this2), \"mode\", \"translate\");\n    __publicField(_assertThisInitialized(_this2), \"space\", \"world\");\n    __publicField(_assertThisInitialized(_this2), \"size\", 1);\n    __publicField(_assertThisInitialized(_this2), \"dragging\", false);\n    __publicField(_assertThisInitialized(_this2), \"showX\", true);\n    __publicField(_assertThisInitialized(_this2), \"showY\", true);\n    __publicField(_assertThisInitialized(_this2), \"showZ\", true);\n    // updateMatrixWorld will update transformations and appearance of individual handles\n    __publicField(_assertThisInitialized(_this2), \"updateMatrixWorld\", function () {\n      var space = _this2.space;\n      if (_this2.mode === \"scale\") {\n        space = \"local\";\n      }\n      var quaternion = space === \"local\" ? _this2.worldQuaternion : _this2.identityQuaternion;\n      _this2.gizmo[\"translate\"].visible = _this2.mode === \"translate\";\n      _this2.gizmo[\"rotate\"].visible = _this2.mode === \"rotate\";\n      _this2.gizmo[\"scale\"].visible = _this2.mode === \"scale\";\n      _this2.helper[\"translate\"].visible = _this2.mode === \"translate\";\n      _this2.helper[\"rotate\"].visible = _this2.mode === \"rotate\";\n      _this2.helper[\"scale\"].visible = _this2.mode === \"scale\";\n      var handles = [];\n      handles = handles.concat(_this2.picker[_this2.mode].children);\n      handles = handles.concat(_this2.gizmo[_this2.mode].children);\n      handles = handles.concat(_this2.helper[_this2.mode].children);\n      var _loop = function _loop() {\n        var handle = handles[i];\n        handle.visible = true;\n        handle.rotation.set(0, 0, 0);\n        handle.position.copy(_this2.worldPosition);\n        var factor;\n        if (_this2.camera.isOrthographicCamera) {\n          factor = (_this2.camera.top - _this2.camera.bottom) / _this2.camera.zoom;\n        } else {\n          factor = _this2.worldPosition.distanceTo(_this2.cameraPosition) * Math.min(1.9 * Math.tan(Math.PI * _this2.camera.fov / 360) / _this2.camera.zoom, 7);\n        }\n        handle.scale.set(1, 1, 1).multiplyScalar(factor * _this2.size / 7);\n        if (handle.tag === \"helper\") {\n          handle.visible = false;\n          if (handle.name === \"AXIS\") {\n            handle.position.copy(_this2.worldPositionStart);\n            handle.visible = !!_this2.axis;\n            if (_this2.axis === \"X\") {\n              _this2.tempQuaternion.setFromEuler(_this2.tempEuler.set(0, 0, 0));\n              handle.quaternion.copy(quaternion).multiply(_this2.tempQuaternion);\n              if (Math.abs(_this2.alignVector.copy(_this2.unitX).applyQuaternion(quaternion).dot(_this2.eye)) > 0.9) {\n                handle.visible = false;\n              }\n            }\n            if (_this2.axis === \"Y\") {\n              _this2.tempQuaternion.setFromEuler(_this2.tempEuler.set(0, 0, Math.PI / 2));\n              handle.quaternion.copy(quaternion).multiply(_this2.tempQuaternion);\n              if (Math.abs(_this2.alignVector.copy(_this2.unitY).applyQuaternion(quaternion).dot(_this2.eye)) > 0.9) {\n                handle.visible = false;\n              }\n            }\n            if (_this2.axis === \"Z\") {\n              _this2.tempQuaternion.setFromEuler(_this2.tempEuler.set(0, Math.PI / 2, 0));\n              handle.quaternion.copy(quaternion).multiply(_this2.tempQuaternion);\n              if (Math.abs(_this2.alignVector.copy(_this2.unitZ).applyQuaternion(quaternion).dot(_this2.eye)) > 0.9) {\n                handle.visible = false;\n              }\n            }\n            if (_this2.axis === \"XYZE\") {\n              _this2.tempQuaternion.setFromEuler(_this2.tempEuler.set(0, Math.PI / 2, 0));\n              _this2.alignVector.copy(_this2.rotationAxis);\n              handle.quaternion.setFromRotationMatrix(_this2.lookAtMatrix.lookAt(_this2.zeroVector, _this2.alignVector, _this2.unitY));\n              handle.quaternion.multiply(_this2.tempQuaternion);\n              handle.visible = _this2.dragging;\n            }\n            if (_this2.axis === \"E\") {\n              handle.visible = false;\n            }\n          } else if (handle.name === \"START\") {\n            handle.position.copy(_this2.worldPositionStart);\n            handle.visible = _this2.dragging;\n          } else if (handle.name === \"END\") {\n            handle.position.copy(_this2.worldPosition);\n            handle.visible = _this2.dragging;\n          } else if (handle.name === \"DELTA\") {\n            handle.position.copy(_this2.worldPositionStart);\n            handle.quaternion.copy(_this2.worldQuaternionStart);\n            _this2.tempVector.set(1e-10, 1e-10, 1e-10).add(_this2.worldPositionStart).sub(_this2.worldPosition).multiplyScalar(-1);\n            _this2.tempVector.applyQuaternion(_this2.worldQuaternionStart.clone().invert());\n            handle.scale.copy(_this2.tempVector);\n            handle.visible = _this2.dragging;\n          } else {\n            handle.quaternion.copy(quaternion);\n            if (_this2.dragging) {\n              handle.position.copy(_this2.worldPositionStart);\n            } else {\n              handle.position.copy(_this2.worldPosition);\n            }\n            if (_this2.axis) {\n              handle.visible = _this2.axis.search(handle.name) !== -1;\n            }\n          }\n          return 1; // continue\n        }\n        handle.quaternion.copy(quaternion);\n        if (_this2.mode === \"translate\" || _this2.mode === \"scale\") {\n          var AXIS_HIDE_TRESHOLD = 0.99;\n          var PLANE_HIDE_TRESHOLD = 0.2;\n          var AXIS_FLIP_TRESHOLD = 0;\n          if (handle.name === \"X\" || handle.name === \"XYZX\") {\n            if (Math.abs(_this2.alignVector.copy(_this2.unitX).applyQuaternion(quaternion).dot(_this2.eye)) > AXIS_HIDE_TRESHOLD) {\n              handle.scale.set(1e-10, 1e-10, 1e-10);\n              handle.visible = false;\n            }\n          }\n          if (handle.name === \"Y\" || handle.name === \"XYZY\") {\n            if (Math.abs(_this2.alignVector.copy(_this2.unitY).applyQuaternion(quaternion).dot(_this2.eye)) > AXIS_HIDE_TRESHOLD) {\n              handle.scale.set(1e-10, 1e-10, 1e-10);\n              handle.visible = false;\n            }\n          }\n          if (handle.name === \"Z\" || handle.name === \"XYZZ\") {\n            if (Math.abs(_this2.alignVector.copy(_this2.unitZ).applyQuaternion(quaternion).dot(_this2.eye)) > AXIS_HIDE_TRESHOLD) {\n              handle.scale.set(1e-10, 1e-10, 1e-10);\n              handle.visible = false;\n            }\n          }\n          if (handle.name === \"XY\") {\n            if (Math.abs(_this2.alignVector.copy(_this2.unitZ).applyQuaternion(quaternion).dot(_this2.eye)) < PLANE_HIDE_TRESHOLD) {\n              handle.scale.set(1e-10, 1e-10, 1e-10);\n              handle.visible = false;\n            }\n          }\n          if (handle.name === \"YZ\") {\n            if (Math.abs(_this2.alignVector.copy(_this2.unitX).applyQuaternion(quaternion).dot(_this2.eye)) < PLANE_HIDE_TRESHOLD) {\n              handle.scale.set(1e-10, 1e-10, 1e-10);\n              handle.visible = false;\n            }\n          }\n          if (handle.name === \"XZ\") {\n            if (Math.abs(_this2.alignVector.copy(_this2.unitY).applyQuaternion(quaternion).dot(_this2.eye)) < PLANE_HIDE_TRESHOLD) {\n              handle.scale.set(1e-10, 1e-10, 1e-10);\n              handle.visible = false;\n            }\n          }\n          if (handle.name.search(\"X\") !== -1) {\n            if (_this2.alignVector.copy(_this2.unitX).applyQuaternion(quaternion).dot(_this2.eye) < AXIS_FLIP_TRESHOLD) {\n              if (handle.tag === \"fwd\") {\n                handle.visible = false;\n              } else {\n                handle.scale.x *= -1;\n              }\n            } else if (handle.tag === \"bwd\") {\n              handle.visible = false;\n            }\n          }\n          if (handle.name.search(\"Y\") !== -1) {\n            if (_this2.alignVector.copy(_this2.unitY).applyQuaternion(quaternion).dot(_this2.eye) < AXIS_FLIP_TRESHOLD) {\n              if (handle.tag === \"fwd\") {\n                handle.visible = false;\n              } else {\n                handle.scale.y *= -1;\n              }\n            } else if (handle.tag === \"bwd\") {\n              handle.visible = false;\n            }\n          }\n          if (handle.name.search(\"Z\") !== -1) {\n            if (_this2.alignVector.copy(_this2.unitZ).applyQuaternion(quaternion).dot(_this2.eye) < AXIS_FLIP_TRESHOLD) {\n              if (handle.tag === \"fwd\") {\n                handle.visible = false;\n              } else {\n                handle.scale.z *= -1;\n              }\n            } else if (handle.tag === \"bwd\") {\n              handle.visible = false;\n            }\n          }\n        } else if (_this2.mode === \"rotate\") {\n          _this2.tempQuaternion2.copy(quaternion);\n          _this2.alignVector.copy(_this2.eye).applyQuaternion(_this2.tempQuaternion.copy(quaternion).invert());\n          if (handle.name.search(\"E\") !== -1) {\n            handle.quaternion.setFromRotationMatrix(_this2.lookAtMatrix.lookAt(_this2.eye, _this2.zeroVector, _this2.unitY));\n          }\n          if (handle.name === \"X\") {\n            _this2.tempQuaternion.setFromAxisAngle(_this2.unitX, Math.atan2(-_this2.alignVector.y, _this2.alignVector.z));\n            _this2.tempQuaternion.multiplyQuaternions(_this2.tempQuaternion2, _this2.tempQuaternion);\n            handle.quaternion.copy(_this2.tempQuaternion);\n          }\n          if (handle.name === \"Y\") {\n            _this2.tempQuaternion.setFromAxisAngle(_this2.unitY, Math.atan2(_this2.alignVector.x, _this2.alignVector.z));\n            _this2.tempQuaternion.multiplyQuaternions(_this2.tempQuaternion2, _this2.tempQuaternion);\n            handle.quaternion.copy(_this2.tempQuaternion);\n          }\n          if (handle.name === \"Z\") {\n            _this2.tempQuaternion.setFromAxisAngle(_this2.unitZ, Math.atan2(_this2.alignVector.y, _this2.alignVector.x));\n            _this2.tempQuaternion.multiplyQuaternions(_this2.tempQuaternion2, _this2.tempQuaternion);\n            handle.quaternion.copy(_this2.tempQuaternion);\n          }\n        }\n        handle.visible = handle.visible && (handle.name.indexOf(\"X\") === -1 || _this2.showX);\n        handle.visible = handle.visible && (handle.name.indexOf(\"Y\") === -1 || _this2.showY);\n        handle.visible = handle.visible && (handle.name.indexOf(\"Z\") === -1 || _this2.showZ);\n        handle.visible = handle.visible && (handle.name.indexOf(\"E\") === -1 || _this2.showX && _this2.showY && _this2.showZ);\n        handle.material.tempOpacity = handle.material.tempOpacity || handle.material.opacity;\n        handle.material.tempColor = handle.material.tempColor || handle.material.color.clone();\n        handle.material.color.copy(handle.material.tempColor);\n        handle.material.opacity = handle.material.tempOpacity;\n        if (!_this2.enabled) {\n          handle.material.opacity *= 0.5;\n          handle.material.color.lerp(new Color(1, 1, 1), 0.5);\n        } else if (_this2.axis) {\n          if (handle.name === _this2.axis) {\n            handle.material.opacity = 1;\n            handle.material.color.lerp(new Color(1, 1, 1), 0.5);\n          } else if (_this2.axis.split(\"\").some(function (a) {\n            return handle.name === a;\n          })) {\n            handle.material.opacity = 1;\n            handle.material.color.lerp(new Color(1, 1, 1), 0.5);\n          } else {\n            handle.material.opacity *= 0.25;\n            handle.material.color.lerp(new Color(1, 1, 1), 0.5);\n          }\n        }\n      };\n      for (var i = 0; i < handles.length; i++) {\n        if (_loop()) continue;\n      }\n      _get((_thisSuper2 = _assertThisInitialized(_this2), _getPrototypeOf(TransformControlsGizmo.prototype)), \"updateMatrixWorld\", _thisSuper2).call(_thisSuper2);\n    });\n    var gizmoMaterial = new MeshBasicMaterial({\n      depthTest: false,\n      depthWrite: false,\n      transparent: true,\n      side: DoubleSide,\n      fog: false,\n      toneMapped: false\n    });\n    var gizmoLineMaterial = new LineBasicMaterial({\n      depthTest: false,\n      depthWrite: false,\n      transparent: true,\n      linewidth: 1,\n      fog: false,\n      toneMapped: false\n    });\n    var matInvisible = gizmoMaterial.clone();\n    matInvisible.opacity = 0.15;\n    var matHelper = gizmoMaterial.clone();\n    matHelper.opacity = 0.33;\n    var matRed = gizmoMaterial.clone();\n    matRed.color.set(16711680);\n    var matGreen = gizmoMaterial.clone();\n    matGreen.color.set(65280);\n    var matBlue = gizmoMaterial.clone();\n    matBlue.color.set(255);\n    var matWhiteTransparent = gizmoMaterial.clone();\n    matWhiteTransparent.opacity = 0.25;\n    var matYellowTransparent = matWhiteTransparent.clone();\n    matYellowTransparent.color.set(16776960);\n    var matCyanTransparent = matWhiteTransparent.clone();\n    matCyanTransparent.color.set(65535);\n    var matMagentaTransparent = matWhiteTransparent.clone();\n    matMagentaTransparent.color.set(16711935);\n    var matYellow = gizmoMaterial.clone();\n    matYellow.color.set(16776960);\n    var matLineRed = gizmoLineMaterial.clone();\n    matLineRed.color.set(16711680);\n    var matLineGreen = gizmoLineMaterial.clone();\n    matLineGreen.color.set(65280);\n    var matLineBlue = gizmoLineMaterial.clone();\n    matLineBlue.color.set(255);\n    var matLineCyan = gizmoLineMaterial.clone();\n    matLineCyan.color.set(65535);\n    var matLineMagenta = gizmoLineMaterial.clone();\n    matLineMagenta.color.set(16711935);\n    var matLineYellow = gizmoLineMaterial.clone();\n    matLineYellow.color.set(16776960);\n    var matLineGray = gizmoLineMaterial.clone();\n    matLineGray.color.set(7895160);\n    var matLineYellowTransparent = matLineYellow.clone();\n    matLineYellowTransparent.opacity = 0.25;\n    var arrowGeometry = new CylinderGeometry(0, 0.05, 0.2, 12, 1, false);\n    var scaleHandleGeometry = new BoxGeometry(0.125, 0.125, 0.125);\n    var lineGeometry = new BufferGeometry();\n    lineGeometry.setAttribute(\"position\", new Float32BufferAttribute([0, 0, 0, 1, 0, 0], 3));\n    var CircleGeometry = function CircleGeometry(radius, arc) {\n      var geometry = new BufferGeometry();\n      var vertices = [];\n      for (var i = 0; i <= 64 * arc; ++i) {\n        vertices.push(0, Math.cos(i / 32 * Math.PI) * radius, Math.sin(i / 32 * Math.PI) * radius);\n      }\n      geometry.setAttribute(\"position\", new Float32BufferAttribute(vertices, 3));\n      return geometry;\n    };\n    var TranslateHelperGeometry = function TranslateHelperGeometry() {\n      var geometry = new BufferGeometry();\n      geometry.setAttribute(\"position\", new Float32BufferAttribute([0, 0, 0, 1, 1, 1], 3));\n      return geometry;\n    };\n    var gizmoTranslate = {\n      X: [[new Mesh(arrowGeometry, matRed), [1, 0, 0], [0, 0, -Math.PI / 2], null, \"fwd\"], [new Mesh(arrowGeometry, matRed), [1, 0, 0], [0, 0, Math.PI / 2], null, \"bwd\"], [new Line(lineGeometry, matLineRed)]],\n      Y: [[new Mesh(arrowGeometry, matGreen), [0, 1, 0], null, null, \"fwd\"], [new Mesh(arrowGeometry, matGreen), [0, 1, 0], [Math.PI, 0, 0], null, \"bwd\"], [new Line(lineGeometry, matLineGreen), null, [0, 0, Math.PI / 2]]],\n      Z: [[new Mesh(arrowGeometry, matBlue), [0, 0, 1], [Math.PI / 2, 0, 0], null, \"fwd\"], [new Mesh(arrowGeometry, matBlue), [0, 0, 1], [-Math.PI / 2, 0, 0], null, \"bwd\"], [new Line(lineGeometry, matLineBlue), null, [0, -Math.PI / 2, 0]]],\n      XYZ: [[new Mesh(new OctahedronGeometry(0.1, 0), matWhiteTransparent.clone()), [0, 0, 0], [0, 0, 0]]],\n      XY: [[new Mesh(new PlaneGeometry(0.295, 0.295), matYellowTransparent.clone()), [0.15, 0.15, 0]], [new Line(lineGeometry, matLineYellow), [0.18, 0.3, 0], null, [0.125, 1, 1]], [new Line(lineGeometry, matLineYellow), [0.3, 0.18, 0], [0, 0, Math.PI / 2], [0.125, 1, 1]]],\n      YZ: [[new Mesh(new PlaneGeometry(0.295, 0.295), matCyanTransparent.clone()), [0, 0.15, 0.15], [0, Math.PI / 2, 0]], [new Line(lineGeometry, matLineCyan), [0, 0.18, 0.3], [0, 0, Math.PI / 2], [0.125, 1, 1]], [new Line(lineGeometry, matLineCyan), [0, 0.3, 0.18], [0, -Math.PI / 2, 0], [0.125, 1, 1]]],\n      XZ: [[new Mesh(new PlaneGeometry(0.295, 0.295), matMagentaTransparent.clone()), [0.15, 0, 0.15], [-Math.PI / 2, 0, 0]], [new Line(lineGeometry, matLineMagenta), [0.18, 0, 0.3], null, [0.125, 1, 1]], [new Line(lineGeometry, matLineMagenta), [0.3, 0, 0.18], [0, -Math.PI / 2, 0], [0.125, 1, 1]]]\n    };\n    var pickerTranslate = {\n      X: [[new Mesh(new CylinderGeometry(0.2, 0, 1, 4, 1, false), matInvisible), [0.6, 0, 0], [0, 0, -Math.PI / 2]]],\n      Y: [[new Mesh(new CylinderGeometry(0.2, 0, 1, 4, 1, false), matInvisible), [0, 0.6, 0]]],\n      Z: [[new Mesh(new CylinderGeometry(0.2, 0, 1, 4, 1, false), matInvisible), [0, 0, 0.6], [Math.PI / 2, 0, 0]]],\n      XYZ: [[new Mesh(new OctahedronGeometry(0.2, 0), matInvisible)]],\n      XY: [[new Mesh(new PlaneGeometry(0.4, 0.4), matInvisible), [0.2, 0.2, 0]]],\n      YZ: [[new Mesh(new PlaneGeometry(0.4, 0.4), matInvisible), [0, 0.2, 0.2], [0, Math.PI / 2, 0]]],\n      XZ: [[new Mesh(new PlaneGeometry(0.4, 0.4), matInvisible), [0.2, 0, 0.2], [-Math.PI / 2, 0, 0]]]\n    };\n    var helperTranslate = {\n      START: [[new Mesh(new OctahedronGeometry(0.01, 2), matHelper), null, null, null, \"helper\"]],\n      END: [[new Mesh(new OctahedronGeometry(0.01, 2), matHelper), null, null, null, \"helper\"]],\n      DELTA: [[new Line(TranslateHelperGeometry(), matHelper), null, null, null, \"helper\"]],\n      X: [[new Line(lineGeometry, matHelper.clone()), [-1e3, 0, 0], null, [1e6, 1, 1], \"helper\"]],\n      Y: [[new Line(lineGeometry, matHelper.clone()), [0, -1e3, 0], [0, 0, Math.PI / 2], [1e6, 1, 1], \"helper\"]],\n      Z: [[new Line(lineGeometry, matHelper.clone()), [0, 0, -1e3], [0, -Math.PI / 2, 0], [1e6, 1, 1], \"helper\"]]\n    };\n    var gizmoRotate = {\n      X: [[new Line(CircleGeometry(1, 0.5), matLineRed)], [new Mesh(new OctahedronGeometry(0.04, 0), matRed), [0, 0, 0.99], null, [1, 3, 1]]],\n      Y: [[new Line(CircleGeometry(1, 0.5), matLineGreen), null, [0, 0, -Math.PI / 2]], [new Mesh(new OctahedronGeometry(0.04, 0), matGreen), [0, 0, 0.99], null, [3, 1, 1]]],\n      Z: [[new Line(CircleGeometry(1, 0.5), matLineBlue), null, [0, Math.PI / 2, 0]], [new Mesh(new OctahedronGeometry(0.04, 0), matBlue), [0.99, 0, 0], null, [1, 3, 1]]],\n      E: [[new Line(CircleGeometry(1.25, 1), matLineYellowTransparent), null, [0, Math.PI / 2, 0]], [new Mesh(new CylinderGeometry(0.03, 0, 0.15, 4, 1, false), matLineYellowTransparent), [1.17, 0, 0], [0, 0, -Math.PI / 2], [1, 1, 1e-3]], [new Mesh(new CylinderGeometry(0.03, 0, 0.15, 4, 1, false), matLineYellowTransparent), [-1.17, 0, 0], [0, 0, Math.PI / 2], [1, 1, 1e-3]], [new Mesh(new CylinderGeometry(0.03, 0, 0.15, 4, 1, false), matLineYellowTransparent), [0, -1.17, 0], [Math.PI, 0, 0], [1, 1, 1e-3]], [new Mesh(new CylinderGeometry(0.03, 0, 0.15, 4, 1, false), matLineYellowTransparent), [0, 1.17, 0], [0, 0, 0], [1, 1, 1e-3]]],\n      XYZE: [[new Line(CircleGeometry(1, 1), matLineGray), null, [0, Math.PI / 2, 0]]]\n    };\n    var helperRotate = {\n      AXIS: [[new Line(lineGeometry, matHelper.clone()), [-1e3, 0, 0], null, [1e6, 1, 1], \"helper\"]]\n    };\n    var pickerRotate = {\n      X: [[new Mesh(new TorusGeometry(1, 0.1, 4, 24), matInvisible), [0, 0, 0], [0, -Math.PI / 2, -Math.PI / 2]]],\n      Y: [[new Mesh(new TorusGeometry(1, 0.1, 4, 24), matInvisible), [0, 0, 0], [Math.PI / 2, 0, 0]]],\n      Z: [[new Mesh(new TorusGeometry(1, 0.1, 4, 24), matInvisible), [0, 0, 0], [0, 0, -Math.PI / 2]]],\n      E: [[new Mesh(new TorusGeometry(1.25, 0.1, 2, 24), matInvisible)]],\n      XYZE: [[new Mesh(new SphereGeometry(0.7, 10, 8), matInvisible)]]\n    };\n    var gizmoScale = {\n      X: [[new Mesh(scaleHandleGeometry, matRed), [0.8, 0, 0], [0, 0, -Math.PI / 2]], [new Line(lineGeometry, matLineRed), null, null, [0.8, 1, 1]]],\n      Y: [[new Mesh(scaleHandleGeometry, matGreen), [0, 0.8, 0]], [new Line(lineGeometry, matLineGreen), null, [0, 0, Math.PI / 2], [0.8, 1, 1]]],\n      Z: [[new Mesh(scaleHandleGeometry, matBlue), [0, 0, 0.8], [Math.PI / 2, 0, 0]], [new Line(lineGeometry, matLineBlue), null, [0, -Math.PI / 2, 0], [0.8, 1, 1]]],\n      XY: [[new Mesh(scaleHandleGeometry, matYellowTransparent), [0.85, 0.85, 0], null, [2, 2, 0.2]], [new Line(lineGeometry, matLineYellow), [0.855, 0.98, 0], null, [0.125, 1, 1]], [new Line(lineGeometry, matLineYellow), [0.98, 0.855, 0], [0, 0, Math.PI / 2], [0.125, 1, 1]]],\n      YZ: [[new Mesh(scaleHandleGeometry, matCyanTransparent), [0, 0.85, 0.85], null, [0.2, 2, 2]], [new Line(lineGeometry, matLineCyan), [0, 0.855, 0.98], [0, 0, Math.PI / 2], [0.125, 1, 1]], [new Line(lineGeometry, matLineCyan), [0, 0.98, 0.855], [0, -Math.PI / 2, 0], [0.125, 1, 1]]],\n      XZ: [[new Mesh(scaleHandleGeometry, matMagentaTransparent), [0.85, 0, 0.85], null, [2, 0.2, 2]], [new Line(lineGeometry, matLineMagenta), [0.855, 0, 0.98], null, [0.125, 1, 1]], [new Line(lineGeometry, matLineMagenta), [0.98, 0, 0.855], [0, -Math.PI / 2, 0], [0.125, 1, 1]]],\n      XYZX: [[new Mesh(new BoxGeometry(0.125, 0.125, 0.125), matWhiteTransparent.clone()), [1.1, 0, 0]]],\n      XYZY: [[new Mesh(new BoxGeometry(0.125, 0.125, 0.125), matWhiteTransparent.clone()), [0, 1.1, 0]]],\n      XYZZ: [[new Mesh(new BoxGeometry(0.125, 0.125, 0.125), matWhiteTransparent.clone()), [0, 0, 1.1]]]\n    };\n    var pickerScale = {\n      X: [[new Mesh(new CylinderGeometry(0.2, 0, 0.8, 4, 1, false), matInvisible), [0.5, 0, 0], [0, 0, -Math.PI / 2]]],\n      Y: [[new Mesh(new CylinderGeometry(0.2, 0, 0.8, 4, 1, false), matInvisible), [0, 0.5, 0]]],\n      Z: [[new Mesh(new CylinderGeometry(0.2, 0, 0.8, 4, 1, false), matInvisible), [0, 0, 0.5], [Math.PI / 2, 0, 0]]],\n      XY: [[new Mesh(scaleHandleGeometry, matInvisible), [0.85, 0.85, 0], null, [3, 3, 0.2]]],\n      YZ: [[new Mesh(scaleHandleGeometry, matInvisible), [0, 0.85, 0.85], null, [0.2, 3, 3]]],\n      XZ: [[new Mesh(scaleHandleGeometry, matInvisible), [0.85, 0, 0.85], null, [3, 0.2, 3]]],\n      XYZX: [[new Mesh(new BoxGeometry(0.2, 0.2, 0.2), matInvisible), [1.1, 0, 0]]],\n      XYZY: [[new Mesh(new BoxGeometry(0.2, 0.2, 0.2), matInvisible), [0, 1.1, 0]]],\n      XYZZ: [[new Mesh(new BoxGeometry(0.2, 0.2, 0.2), matInvisible), [0, 0, 1.1]]]\n    };\n    var helperScale = {\n      X: [[new Line(lineGeometry, matHelper.clone()), [-1e3, 0, 0], null, [1e6, 1, 1], \"helper\"]],\n      Y: [[new Line(lineGeometry, matHelper.clone()), [0, -1e3, 0], [0, 0, Math.PI / 2], [1e6, 1, 1], \"helper\"]],\n      Z: [[new Line(lineGeometry, matHelper.clone()), [0, 0, -1e3], [0, -Math.PI / 2, 0], [1e6, 1, 1], \"helper\"]]\n    };\n    var setupGizmo = function setupGizmo(gizmoMap) {\n      var gizmo = new Object3D();\n      for (var name in gizmoMap) {\n        for (var i = gizmoMap[name].length; i--;) {\n          var object = gizmoMap[name][i][0].clone();\n          var position = gizmoMap[name][i][1];\n          var rotation = gizmoMap[name][i][2];\n          var scale = gizmoMap[name][i][3];\n          var tag = gizmoMap[name][i][4];\n          object.name = name;\n          object.tag = tag;\n          if (position) {\n            object.position.set(position[0], position[1], position[2]);\n          }\n          if (rotation) {\n            object.rotation.set(rotation[0], rotation[1], rotation[2]);\n          }\n          if (scale) {\n            object.scale.set(scale[0], scale[1], scale[2]);\n          }\n          object.updateMatrix();\n          var tempGeometry = object.geometry.clone();\n          tempGeometry.applyMatrix4(object.matrix);\n          object.geometry = tempGeometry;\n          object.renderOrder = Infinity;\n          object.position.set(0, 0, 0);\n          object.rotation.set(0, 0, 0);\n          object.scale.set(1, 1, 1);\n          gizmo.add(object);\n        }\n      }\n      return gizmo;\n    };\n    _this2.gizmo = {};\n    _this2.picker = {};\n    _this2.helper = {};\n    _this2.add(_this2.gizmo[\"translate\"] = setupGizmo(gizmoTranslate));\n    _this2.add(_this2.gizmo[\"rotate\"] = setupGizmo(gizmoRotate));\n    _this2.add(_this2.gizmo[\"scale\"] = setupGizmo(gizmoScale));\n    _this2.add(_this2.picker[\"translate\"] = setupGizmo(pickerTranslate));\n    _this2.add(_this2.picker[\"rotate\"] = setupGizmo(pickerRotate));\n    _this2.add(_this2.picker[\"scale\"] = setupGizmo(pickerScale));\n    _this2.add(_this2.helper[\"translate\"] = setupGizmo(helperTranslate));\n    _this2.add(_this2.helper[\"rotate\"] = setupGizmo(helperRotate));\n    _this2.add(_this2.helper[\"scale\"] = setupGizmo(helperScale));\n    _this2.picker[\"translate\"].visible = false;\n    _this2.picker[\"rotate\"].visible = false;\n    _this2.picker[\"scale\"].visible = false;\n    return _this2;\n  }\n  return _createClass(TransformControlsGizmo);\n}(Object3D);\nvar TransformControlsPlane = /*#__PURE__*/function (_Mesh) {\n  _inherits(TransformControlsPlane, _Mesh);\n  var _super3 = _createSuper(TransformControlsPlane);\n  function TransformControlsPlane() {\n    var _thisSuper3, _this3;\n    _classCallCheck(this, TransformControlsPlane);\n    _this3 = _super3.call(this, new PlaneGeometry(1e5, 1e5, 2, 2), new MeshBasicMaterial({\n      visible: false,\n      wireframe: true,\n      side: DoubleSide,\n      transparent: true,\n      opacity: 0.1,\n      toneMapped: false\n    }));\n    __publicField(_assertThisInitialized(_this3), \"isTransformControlsPlane\", true);\n    __publicField(_assertThisInitialized(_this3), \"type\", \"TransformControlsPlane\");\n    __publicField(_assertThisInitialized(_this3), \"unitX\", new Vector3(1, 0, 0));\n    __publicField(_assertThisInitialized(_this3), \"unitY\", new Vector3(0, 1, 0));\n    __publicField(_assertThisInitialized(_this3), \"unitZ\", new Vector3(0, 0, 1));\n    __publicField(_assertThisInitialized(_this3), \"tempVector\", new Vector3());\n    __publicField(_assertThisInitialized(_this3), \"dirVector\", new Vector3());\n    __publicField(_assertThisInitialized(_this3), \"alignVector\", new Vector3());\n    __publicField(_assertThisInitialized(_this3), \"tempMatrix\", new Matrix4());\n    __publicField(_assertThisInitialized(_this3), \"identityQuaternion\", new Quaternion());\n    // these are set from parent class TransformControls\n    __publicField(_assertThisInitialized(_this3), \"cameraQuaternion\", new Quaternion());\n    __publicField(_assertThisInitialized(_this3), \"worldPosition\", new Vector3());\n    __publicField(_assertThisInitialized(_this3), \"worldQuaternion\", new Quaternion());\n    __publicField(_assertThisInitialized(_this3), \"eye\", new Vector3());\n    __publicField(_assertThisInitialized(_this3), \"axis\", null);\n    __publicField(_assertThisInitialized(_this3), \"mode\", \"translate\");\n    __publicField(_assertThisInitialized(_this3), \"space\", \"world\");\n    __publicField(_assertThisInitialized(_this3), \"updateMatrixWorld\", function () {\n      var space = _this3.space;\n      _this3.position.copy(_this3.worldPosition);\n      if (_this3.mode === \"scale\") space = \"local\";\n      _this3.unitX.set(1, 0, 0).applyQuaternion(space === \"local\" ? _this3.worldQuaternion : _this3.identityQuaternion);\n      _this3.unitY.set(0, 1, 0).applyQuaternion(space === \"local\" ? _this3.worldQuaternion : _this3.identityQuaternion);\n      _this3.unitZ.set(0, 0, 1).applyQuaternion(space === \"local\" ? _this3.worldQuaternion : _this3.identityQuaternion);\n      _this3.alignVector.copy(_this3.unitY);\n      switch (_this3.mode) {\n        case \"translate\":\n        case \"scale\":\n          switch (_this3.axis) {\n            case \"X\":\n              _this3.alignVector.copy(_this3.eye).cross(_this3.unitX);\n              _this3.dirVector.copy(_this3.unitX).cross(_this3.alignVector);\n              break;\n            case \"Y\":\n              _this3.alignVector.copy(_this3.eye).cross(_this3.unitY);\n              _this3.dirVector.copy(_this3.unitY).cross(_this3.alignVector);\n              break;\n            case \"Z\":\n              _this3.alignVector.copy(_this3.eye).cross(_this3.unitZ);\n              _this3.dirVector.copy(_this3.unitZ).cross(_this3.alignVector);\n              break;\n            case \"XY\":\n              _this3.dirVector.copy(_this3.unitZ);\n              break;\n            case \"YZ\":\n              _this3.dirVector.copy(_this3.unitX);\n              break;\n            case \"XZ\":\n              _this3.alignVector.copy(_this3.unitZ);\n              _this3.dirVector.copy(_this3.unitY);\n              break;\n            case \"XYZ\":\n            case \"E\":\n              _this3.dirVector.set(0, 0, 0);\n              break;\n          }\n          break;\n        case \"rotate\":\n        default:\n          _this3.dirVector.set(0, 0, 0);\n      }\n      if (_this3.dirVector.length() === 0) {\n        _this3.quaternion.copy(_this3.cameraQuaternion);\n      } else {\n        _this3.tempMatrix.lookAt(_this3.tempVector.set(0, 0, 0), _this3.dirVector, _this3.alignVector);\n        _this3.quaternion.setFromRotationMatrix(_this3.tempMatrix);\n      }\n      _get((_thisSuper3 = _assertThisInitialized(_this3), _getPrototypeOf(TransformControlsPlane.prototype)), \"updateMatrixWorld\", _thisSuper3).call(_thisSuper3);\n    });\n    return _this3;\n  }\n  return _createClass(TransformControlsPlane);\n}(Mesh);\nexport { TransformControls, TransformControlsGizmo, TransformControlsPlane };","map":{"version":3,"names":["TransformControls","_Object3D","_inherits","_super","_createSuper","camera","domElement","_thisSuper","_this","_classCallCheck","call","__publicField","_assertThisInitialized","Raycaster","Vector3","Quaternion","X","Y","Z","type","mode","object","raycaster","includeInvisible","allIntersections","intersectObject","i","length","visible","axis","enabled","dragging","position","copy","positionStart","quaternion","quaternionStart","scale","scaleStart","dispatchEvent","changeEvent","objectChangeEvent","pointStart","pointEnd","updateMatrixWorld","parent","console","error","matrixWorld","decompose","parentPosition","parentQuaternion","parentScale","worldPosition","worldQuaternion","worldScale","parentQuaternionInv","invert","worldQuaternionInv","cameraPosition","cameraQuaternion","cameraScale","eye","sub","normalize","_get","_getPrototypeOf","prototype","pointer","setFromCamera","intersect","intersectObjectWithRay","gizmo","picker","name","button","planeIntersect","plane","space","snap","rotationSnap","rotation","x","Math","round","y","z","worldPositionStart","worldQuaternionStart","worldScaleStart","point","mouseDownEvent","offset","applyQuaternion","indexOf","divide","add","translationSnap","tempQuaternion","search","tempVector","setFromMatrixPosition","d","dot","tempVector2","set","multiply","scaleSnap","ROTATION_SPEED","distanceTo","rotationAxis","rotationAngle","angleTo","startNorm","endNorm","cross","unit","setFromAxisAngle","mouseUpEvent","event","_a","ownerDocument","pointerLockElement","changedTouches","rect","getBoundingClientRect","clientX","left","width","clientY","top","height","pointerType","pointerHover","getPointer","style","touchAction","addEventListener","onPointerMove","pointerDown","pointerMove","removeEventListener","pointerUp","size","warn","document","onPointerDown","onPointerHover","onPointerUp","_b","_d","_c","_f","_e","traverse","child","mesh","geometry","dispose","material","TransformControlsGizmo","TransformControlsPlane","defineProperty","propName","defaultValue","propValue","Object","get","value","showX","showY","showZ","connect","_createClass","Object3D","_Object3D2","_super2","_thisSuper2","_this2","Euler","Matrix4","identityQuaternion","helper","handles","concat","children","_loop","handle","factor","isOrthographicCamera","bottom","zoom","min","tan","PI","fov","multiplyScalar","tag","setFromEuler","tempEuler","abs","alignVector","unitX","unitY","unitZ","setFromRotationMatrix","lookAtMatrix","lookAt","zeroVector","clone","AXIS_HIDE_TRESHOLD","PLANE_HIDE_TRESHOLD","AXIS_FLIP_TRESHOLD","tempQuaternion2","atan2","multiplyQuaternions","tempOpacity","opacity","tempColor","color","lerp","Color","split","some","a","gizmoMaterial","MeshBasicMaterial","depthTest","depthWrite","transparent","side","DoubleSide","fog","toneMapped","gizmoLineMaterial","LineBasicMaterial","linewidth","matInvisible","matHelper","matRed","matGreen","matBlue","matWhiteTransparent","matYellowTransparent","matCyanTransparent","matMagentaTransparent","matYellow","matLineRed","matLineGreen","matLineBlue","matLineCyan","matLineMagenta","matLineYellow","matLineGray","matLineYellowTransparent","arrowGeometry","CylinderGeometry","scaleHandleGeometry","BoxGeometry","lineGeometry","BufferGeometry","setAttribute","Float32BufferAttribute","CircleGeometry","radius","arc","vertices","push","cos","sin","TranslateHelperGeometry","gizmoTranslate","Mesh","Line","XYZ","OctahedronGeometry","XY","PlaneGeometry","YZ","XZ","pickerTranslate","helperTranslate","START","END","DELTA","gizmoRotate","E","XYZE","helperRotate","AXIS","pickerRotate","TorusGeometry","SphereGeometry","gizmoScale","XYZX","XYZY","XYZZ","pickerScale","helperScale","setupGizmo","gizmoMap","updateMatrix","tempGeometry","applyMatrix4","matrix","renderOrder","Infinity","_Mesh","_super3","_thisSuper3","_this3","wireframe","dirVector","tempMatrix"],"sources":["C:\\Users\\Nayyu\\Desktop\\skibidai-public-build\\node_modules\\src\\controls\\TransformControls.ts"],"sourcesContent":["import {\n  BoxGeometry,\n  BufferGeometry,\n  Color,\n  CylinderGeometry,\n  DoubleSide,\n  Euler,\n  Float32BufferAttribute,\n  Line,\n  LineBasicMaterial,\n  Material,\n  Matrix4,\n  Mesh,\n  MeshBasicMaterial,\n  Object3D,\n  OctahedronGeometry,\n  OrthographicCamera,\n  PerspectiveCamera,\n  PlaneGeometry,\n  Quaternion,\n  Raycaster,\n  SphereGeometry,\n  Intersection,\n  TorusGeometry,\n  Vector3,\n  Camera,\n  Vector2,\n} from 'three'\n\nexport interface TransformControlsPointerObject {\n  x: number\n  y: number\n  button: number\n}\n\nclass TransformControls<TCamera extends Camera = Camera> extends Object3D {\n  public readonly isTransformControls = true\n\n  public visible = false\n\n  private domElement: HTMLElement | undefined\n\n  private raycaster = new Raycaster()\n\n  private gizmo: TransformControlsGizmo\n  private plane: TransformControlsPlane\n\n  private tempVector = new Vector3()\n  private tempVector2 = new Vector3()\n  private tempQuaternion = new Quaternion()\n  private unit = {\n    X: new Vector3(1, 0, 0),\n    Y: new Vector3(0, 1, 0),\n    Z: new Vector3(0, 0, 1),\n  }\n\n  private pointStart = new Vector3()\n  private pointEnd = new Vector3()\n  private offset = new Vector3()\n  private rotationAxis = new Vector3()\n  private startNorm = new Vector3()\n  private endNorm = new Vector3()\n  private rotationAngle = 0\n\n  private cameraPosition = new Vector3()\n  private cameraQuaternion = new Quaternion()\n  private cameraScale = new Vector3()\n\n  private parentPosition = new Vector3()\n  private parentQuaternion = new Quaternion()\n  private parentQuaternionInv = new Quaternion()\n  private parentScale = new Vector3()\n\n  private worldPositionStart = new Vector3()\n  private worldQuaternionStart = new Quaternion()\n  private worldScaleStart = new Vector3()\n\n  private worldPosition = new Vector3()\n  private worldQuaternion = new Quaternion()\n  private worldQuaternionInv = new Quaternion()\n  private worldScale = new Vector3()\n\n  private eye = new Vector3()\n\n  private positionStart = new Vector3()\n  private quaternionStart = new Quaternion()\n  private scaleStart = new Vector3()\n\n  private camera: TCamera\n  private object: Object3D | undefined\n  private enabled = true\n  private axis: string | null = null\n  private mode: 'translate' | 'rotate' | 'scale' = 'translate'\n  private translationSnap: number | null = null\n  private rotationSnap: number | null = null\n  private scaleSnap: number | null = null\n  private space = 'world'\n  private size = 1\n  private dragging = false\n  private showX = true\n  private showY = true\n  private showZ = true\n\n  // events\n  private changeEvent = { type: 'change' }\n  private mouseDownEvent = { type: 'mouseDown', mode: this.mode }\n  private mouseUpEvent = { type: 'mouseUp', mode: this.mode }\n  private objectChangeEvent = { type: 'objectChange' }\n\n  constructor(camera: TCamera, domElement: HTMLElement | undefined) {\n    super()\n\n    this.domElement = domElement\n    this.camera = camera\n\n    this.gizmo = new TransformControlsGizmo()\n    this.add(this.gizmo)\n\n    this.plane = new TransformControlsPlane()\n    this.add(this.plane)\n\n    // Defined getter, setter and store for a property\n    const defineProperty = <TValue>(propName: string, defaultValue: TValue): void => {\n      let propValue = defaultValue\n\n      Object.defineProperty(this, propName, {\n        get: function () {\n          return propValue !== undefined ? propValue : defaultValue\n        },\n\n        set: function (value) {\n          if (propValue !== value) {\n            propValue = value\n            this.plane[propName] = value\n            this.gizmo[propName] = value\n\n            this.dispatchEvent({ type: propName + '-changed', value: value })\n            this.dispatchEvent(this.changeEvent)\n          }\n        },\n      })\n\n      //@ts-ignore\n      this[propName] = defaultValue\n      // @ts-ignore\n      this.plane[propName] = defaultValue\n      // @ts-ignore\n      this.gizmo[propName] = defaultValue\n    }\n\n    defineProperty('camera', this.camera)\n    defineProperty('object', this.object)\n    defineProperty('enabled', this.enabled)\n    defineProperty('axis', this.axis)\n    defineProperty('mode', this.mode)\n    defineProperty('translationSnap', this.translationSnap)\n    defineProperty('rotationSnap', this.rotationSnap)\n    defineProperty('scaleSnap', this.scaleSnap)\n    defineProperty('space', this.space)\n    defineProperty('size', this.size)\n    defineProperty('dragging', this.dragging)\n    defineProperty('showX', this.showX)\n    defineProperty('showY', this.showY)\n    defineProperty('showZ', this.showZ)\n    defineProperty('worldPosition', this.worldPosition)\n    defineProperty('worldPositionStart', this.worldPositionStart)\n    defineProperty('worldQuaternion', this.worldQuaternion)\n    defineProperty('worldQuaternionStart', this.worldQuaternionStart)\n    defineProperty('cameraPosition', this.cameraPosition)\n    defineProperty('cameraQuaternion', this.cameraQuaternion)\n    defineProperty('pointStart', this.pointStart)\n    defineProperty('pointEnd', this.pointEnd)\n    defineProperty('rotationAxis', this.rotationAxis)\n    defineProperty('rotationAngle', this.rotationAngle)\n    defineProperty('eye', this.eye)\n\n    // connect events\n    if (domElement !== undefined) this.connect(domElement)\n  }\n\n  private intersectObjectWithRay = (\n    object: Object3D,\n    raycaster: Raycaster,\n    includeInvisible?: boolean,\n  ): false | Intersection => {\n    const allIntersections = raycaster.intersectObject(object, true)\n\n    for (let i = 0; i < allIntersections.length; i++) {\n      if (allIntersections[i].object.visible || includeInvisible) {\n        return allIntersections[i]\n      }\n    }\n\n    return false\n  }\n\n  // Set current object\n  public attach = (object: Object3D): this => {\n    this.object = object\n    this.visible = true\n\n    return this\n  }\n\n  // Detatch from object\n  public detach = (): this => {\n    this.object = undefined\n    this.visible = false\n    this.axis = null\n\n    return this\n  }\n\n  // Reset\n  public reset = (): this => {\n    if (!this.enabled) return this\n\n    if (this.dragging) {\n      if (this.object !== undefined) {\n        this.object.position.copy(this.positionStart)\n        this.object.quaternion.copy(this.quaternionStart)\n        this.object.scale.copy(this.scaleStart)\n        // @ts-ignore\n        this.dispatchEvent(this.changeEvent)\n        // @ts-ignore\n        this.dispatchEvent(this.objectChangeEvent)\n        this.pointStart.copy(this.pointEnd)\n      }\n    }\n\n    return this\n  }\n\n  public updateMatrixWorld = (): void => {\n    if (this.object !== undefined) {\n      this.object.updateMatrixWorld()\n\n      if (this.object.parent === null) {\n        console.error('TransformControls: The attached 3D object must be a part of the scene graph.')\n      } else {\n        this.object.parent.matrixWorld.decompose(this.parentPosition, this.parentQuaternion, this.parentScale)\n      }\n\n      this.object.matrixWorld.decompose(this.worldPosition, this.worldQuaternion, this.worldScale)\n\n      this.parentQuaternionInv.copy(this.parentQuaternion).invert()\n      this.worldQuaternionInv.copy(this.worldQuaternion).invert()\n    }\n\n    this.camera.updateMatrixWorld()\n    this.camera.matrixWorld.decompose(this.cameraPosition, this.cameraQuaternion, this.cameraScale)\n\n    this.eye.copy(this.cameraPosition).sub(this.worldPosition).normalize()\n\n    super.updateMatrixWorld()\n  }\n\n  private pointerHover = (pointer: TransformControlsPointerObject): void => {\n    if (this.object === undefined || this.dragging === true) return\n\n    this.raycaster.setFromCamera((pointer as unknown) as Vector2, this.camera)\n\n    const intersect = this.intersectObjectWithRay(this.gizmo.picker[this.mode], this.raycaster)\n\n    if (intersect) {\n      this.axis = intersect.object.name\n    } else {\n      this.axis = null\n    }\n  }\n\n  private pointerDown = (pointer: TransformControlsPointerObject): void => {\n    if (this.object === undefined || this.dragging === true || pointer.button !== 0) return\n\n    if (this.axis !== null) {\n      this.raycaster.setFromCamera((pointer as unknown) as Vector2, this.camera)\n\n      const planeIntersect = this.intersectObjectWithRay(this.plane, this.raycaster, true)\n\n      if (planeIntersect) {\n        let space = this.space\n\n        if (this.mode === 'scale') {\n          space = 'local'\n        } else if (this.axis === 'E' || this.axis === 'XYZE' || this.axis === 'XYZ') {\n          space = 'world'\n        }\n\n        if (space === 'local' && this.mode === 'rotate') {\n          const snap = this.rotationSnap\n\n          if (this.axis === 'X' && snap) this.object.rotation.x = Math.round(this.object.rotation.x / snap) * snap\n          if (this.axis === 'Y' && snap) this.object.rotation.y = Math.round(this.object.rotation.y / snap) * snap\n          if (this.axis === 'Z' && snap) this.object.rotation.z = Math.round(this.object.rotation.z / snap) * snap\n        }\n\n        this.object.updateMatrixWorld()\n\n        if (this.object.parent) {\n          this.object.parent.updateMatrixWorld()\n        }\n\n        this.positionStart.copy(this.object.position)\n        this.quaternionStart.copy(this.object.quaternion)\n        this.scaleStart.copy(this.object.scale)\n\n        this.object.matrixWorld.decompose(this.worldPositionStart, this.worldQuaternionStart, this.worldScaleStart)\n\n        this.pointStart.copy(planeIntersect.point).sub(this.worldPositionStart)\n      }\n\n      this.dragging = true\n      this.mouseDownEvent.mode = this.mode\n      // @ts-ignore\n      this.dispatchEvent(this.mouseDownEvent)\n    }\n  }\n\n  private pointerMove = (pointer: TransformControlsPointerObject): void => {\n    const axis = this.axis\n    const mode = this.mode\n    const object = this.object\n    let space = this.space\n\n    if (mode === 'scale') {\n      space = 'local'\n    } else if (axis === 'E' || axis === 'XYZE' || axis === 'XYZ') {\n      space = 'world'\n    }\n\n    if (object === undefined || axis === null || this.dragging === false || pointer.button !== -1) return\n\n    this.raycaster.setFromCamera((pointer as unknown) as Vector2, this.camera)\n\n    const planeIntersect = this.intersectObjectWithRay(this.plane, this.raycaster, true)\n\n    if (!planeIntersect) return\n\n    this.pointEnd.copy(planeIntersect.point).sub(this.worldPositionStart)\n\n    if (mode === 'translate') {\n      // Apply translate\n\n      this.offset.copy(this.pointEnd).sub(this.pointStart)\n\n      if (space === 'local' && axis !== 'XYZ') {\n        this.offset.applyQuaternion(this.worldQuaternionInv)\n      }\n\n      if (axis.indexOf('X') === -1) this.offset.x = 0\n      if (axis.indexOf('Y') === -1) this.offset.y = 0\n      if (axis.indexOf('Z') === -1) this.offset.z = 0\n\n      if (space === 'local' && axis !== 'XYZ') {\n        this.offset.applyQuaternion(this.quaternionStart).divide(this.parentScale)\n      } else {\n        this.offset.applyQuaternion(this.parentQuaternionInv).divide(this.parentScale)\n      }\n\n      object.position.copy(this.offset).add(this.positionStart)\n\n      // Apply translation snap\n\n      if (this.translationSnap) {\n        if (space === 'local') {\n          object.position.applyQuaternion(this.tempQuaternion.copy(this.quaternionStart).invert())\n\n          if (axis.search('X') !== -1) {\n            object.position.x = Math.round(object.position.x / this.translationSnap) * this.translationSnap\n          }\n\n          if (axis.search('Y') !== -1) {\n            object.position.y = Math.round(object.position.y / this.translationSnap) * this.translationSnap\n          }\n\n          if (axis.search('Z') !== -1) {\n            object.position.z = Math.round(object.position.z / this.translationSnap) * this.translationSnap\n          }\n\n          object.position.applyQuaternion(this.quaternionStart)\n        }\n\n        if (space === 'world') {\n          if (object.parent) {\n            object.position.add(this.tempVector.setFromMatrixPosition(object.parent.matrixWorld))\n          }\n\n          if (axis.search('X') !== -1) {\n            object.position.x = Math.round(object.position.x / this.translationSnap) * this.translationSnap\n          }\n\n          if (axis.search('Y') !== -1) {\n            object.position.y = Math.round(object.position.y / this.translationSnap) * this.translationSnap\n          }\n\n          if (axis.search('Z') !== -1) {\n            object.position.z = Math.round(object.position.z / this.translationSnap) * this.translationSnap\n          }\n\n          if (object.parent) {\n            object.position.sub(this.tempVector.setFromMatrixPosition(object.parent.matrixWorld))\n          }\n        }\n      }\n    } else if (mode === 'scale') {\n      if (axis.search('XYZ') !== -1) {\n        let d = this.pointEnd.length() / this.pointStart.length()\n\n        if (this.pointEnd.dot(this.pointStart) < 0) d *= -1\n\n        this.tempVector2.set(d, d, d)\n      } else {\n        this.tempVector.copy(this.pointStart)\n        this.tempVector2.copy(this.pointEnd)\n\n        this.tempVector.applyQuaternion(this.worldQuaternionInv)\n        this.tempVector2.applyQuaternion(this.worldQuaternionInv)\n\n        this.tempVector2.divide(this.tempVector)\n\n        if (axis.search('X') === -1) {\n          this.tempVector2.x = 1\n        }\n\n        if (axis.search('Y') === -1) {\n          this.tempVector2.y = 1\n        }\n\n        if (axis.search('Z') === -1) {\n          this.tempVector2.z = 1\n        }\n      }\n\n      // Apply scale\n\n      object.scale.copy(this.scaleStart).multiply(this.tempVector2)\n\n      if (this.scaleSnap && this.object) {\n        if (axis.search('X') !== -1) {\n          this.object.scale.x = Math.round(object.scale.x / this.scaleSnap) * this.scaleSnap || this.scaleSnap\n        }\n\n        if (axis.search('Y') !== -1) {\n          object.scale.y = Math.round(object.scale.y / this.scaleSnap) * this.scaleSnap || this.scaleSnap\n        }\n\n        if (axis.search('Z') !== -1) {\n          object.scale.z = Math.round(object.scale.z / this.scaleSnap) * this.scaleSnap || this.scaleSnap\n        }\n      }\n    } else if (mode === 'rotate') {\n      this.offset.copy(this.pointEnd).sub(this.pointStart)\n\n      const ROTATION_SPEED =\n        20 / this.worldPosition.distanceTo(this.tempVector.setFromMatrixPosition(this.camera.matrixWorld))\n\n      if (axis === 'E') {\n        this.rotationAxis.copy(this.eye)\n        this.rotationAngle = this.pointEnd.angleTo(this.pointStart)\n\n        this.startNorm.copy(this.pointStart).normalize()\n        this.endNorm.copy(this.pointEnd).normalize()\n\n        this.rotationAngle *= this.endNorm.cross(this.startNorm).dot(this.eye) < 0 ? 1 : -1\n      } else if (axis === 'XYZE') {\n        this.rotationAxis.copy(this.offset).cross(this.eye).normalize()\n        this.rotationAngle = this.offset.dot(this.tempVector.copy(this.rotationAxis).cross(this.eye)) * ROTATION_SPEED\n      } else if (axis === 'X' || axis === 'Y' || axis === 'Z') {\n        this.rotationAxis.copy(this.unit[axis])\n\n        this.tempVector.copy(this.unit[axis])\n\n        if (space === 'local') {\n          this.tempVector.applyQuaternion(this.worldQuaternion)\n        }\n\n        this.rotationAngle = this.offset.dot(this.tempVector.cross(this.eye).normalize()) * ROTATION_SPEED\n      }\n\n      // Apply rotation snap\n\n      if (this.rotationSnap) {\n        this.rotationAngle = Math.round(this.rotationAngle / this.rotationSnap) * this.rotationSnap\n      }\n\n      // Apply rotate\n      if (space === 'local' && axis !== 'E' && axis !== 'XYZE') {\n        object.quaternion.copy(this.quaternionStart)\n        object.quaternion\n          .multiply(this.tempQuaternion.setFromAxisAngle(this.rotationAxis, this.rotationAngle))\n          .normalize()\n      } else {\n        this.rotationAxis.applyQuaternion(this.parentQuaternionInv)\n        object.quaternion.copy(this.tempQuaternion.setFromAxisAngle(this.rotationAxis, this.rotationAngle))\n        object.quaternion.multiply(this.quaternionStart).normalize()\n      }\n    }\n\n    // @ts-ignore\n    this.dispatchEvent(this.changeEvent)\n    // @ts-ignore\n    this.dispatchEvent(this.objectChangeEvent)\n  }\n\n  private pointerUp = (pointer: TransformControlsPointerObject): void => {\n    if (pointer.button !== 0) return\n\n    if (this.dragging && this.axis !== null) {\n      this.mouseUpEvent.mode = this.mode\n      // @ts-ignore\n      this.dispatchEvent(this.mouseUpEvent)\n    }\n\n    this.dragging = false\n    this.axis = null\n  }\n\n  private getPointer = (event: Event): TransformControlsPointerObject => {\n    if (this.domElement && this.domElement.ownerDocument?.pointerLockElement) {\n      return {\n        x: 0,\n        y: 0,\n        button: (event as MouseEvent).button,\n      }\n    } else {\n      const pointer = (event as TouchEvent).changedTouches\n        ? (event as TouchEvent).changedTouches[0]\n        : (event as MouseEvent)\n\n      const rect = this.domElement!.getBoundingClientRect()\n\n      return {\n        x: ((pointer.clientX - rect.left) / rect.width) * 2 - 1,\n        y: (-(pointer.clientY - rect.top) / rect.height) * 2 + 1,\n        button: (event as MouseEvent).button,\n      }\n    }\n  }\n\n  private onPointerHover = (event: Event): void => {\n    if (!this.enabled) return\n\n    switch ((event as PointerEvent).pointerType) {\n      case 'mouse':\n      case 'pen':\n        this.pointerHover(this.getPointer(event))\n        break\n    }\n  }\n\n  private onPointerDown = (event: Event): void => {\n    if (!this.enabled || !this.domElement) return\n\n    this.domElement.style.touchAction = 'none' // disable touch scroll\n    this.domElement.ownerDocument.addEventListener('pointermove', this.onPointerMove)\n    this.pointerHover(this.getPointer(event))\n    this.pointerDown(this.getPointer(event))\n  }\n\n  private onPointerMove = (event: Event): void => {\n    if (!this.enabled) return\n\n    this.pointerMove(this.getPointer(event))\n  }\n\n  private onPointerUp = (event: Event): void => {\n    if (!this.enabled || !this.domElement) return\n\n    this.domElement.style.touchAction! = ''\n    this.domElement.ownerDocument.removeEventListener('pointermove', this.onPointerMove)\n\n    this.pointerUp(this.getPointer(event))\n  }\n\n  public getMode = (): TransformControls['mode'] => this.mode\n\n  public setMode = (mode: TransformControls['mode']): void => {\n    this.mode = mode\n  }\n\n  public setTranslationSnap = (translationSnap: number): void => {\n    this.translationSnap = translationSnap\n  }\n\n  public setRotationSnap = (rotationSnap: number): void => {\n    this.rotationSnap = rotationSnap\n  }\n\n  public setScaleSnap = (scaleSnap: number): void => {\n    this.scaleSnap = scaleSnap\n  }\n\n  public setSize = (size: number): void => {\n    this.size = size\n  }\n\n  public setSpace = (space: string): void => {\n    this.space = space\n  }\n\n  public update = (): void => {\n    console.warn(\n      'THREE.TransformControls: update function has no more functionality and therefore has been deprecated.',\n    )\n  }\n\n  public connect = (domElement: HTMLElement): void => {\n    if ((domElement as any) === document) {\n      console.error(\n        'THREE.OrbitControls: \"document\" should not be used as the target \"domElement\". Please use \"renderer.domElement\" instead.',\n      )\n    }\n    this.domElement = domElement\n\n    this.domElement.addEventListener('pointerdown', this.onPointerDown)\n    this.domElement.addEventListener('pointermove', this.onPointerHover)\n    this.domElement.ownerDocument.addEventListener('pointerup', this.onPointerUp)\n  }\n\n  public dispose = (): void => {\n    this.domElement?.removeEventListener('pointerdown', this.onPointerDown)\n    this.domElement?.removeEventListener('pointermove', this.onPointerHover)\n    this.domElement?.ownerDocument?.removeEventListener('pointermove', this.onPointerMove)\n    this.domElement?.ownerDocument?.removeEventListener('pointerup', this.onPointerUp)\n\n    this.traverse((child) => {\n      const mesh = child as Mesh<BufferGeometry, Material>\n      if (mesh.geometry) {\n        mesh.geometry.dispose()\n      }\n      if (mesh.material) {\n        mesh.material.dispose()\n      }\n    })\n  }\n}\n\ntype TransformControlsGizmoPrivateGizmos = {\n  ['translate']: Object3D\n  ['scale']: Object3D\n  ['rotate']: Object3D\n  ['visible']: boolean\n}\n\nclass TransformControlsGizmo extends Object3D {\n  private isTransformControlsGizmo = true\n  public type = 'TransformControlsGizmo'\n\n  private tempVector = new Vector3(0, 0, 0)\n  private tempEuler = new Euler()\n  private alignVector = new Vector3(0, 1, 0)\n  private zeroVector = new Vector3(0, 0, 0)\n  private lookAtMatrix = new Matrix4()\n  private tempQuaternion = new Quaternion()\n  private tempQuaternion2 = new Quaternion()\n  private identityQuaternion = new Quaternion()\n\n  private unitX = new Vector3(1, 0, 0)\n  private unitY = new Vector3(0, 1, 0)\n  private unitZ = new Vector3(0, 0, 1)\n\n  private gizmo: TransformControlsGizmoPrivateGizmos\n  public picker: TransformControlsGizmoPrivateGizmos\n  private helper: TransformControlsGizmoPrivateGizmos\n\n  // these are set from parent class TransformControls\n  private rotationAxis = new Vector3()\n\n  private cameraPosition = new Vector3()\n\n  private worldPositionStart = new Vector3()\n  private worldQuaternionStart = new Quaternion()\n\n  private worldPosition = new Vector3()\n  private worldQuaternion = new Quaternion()\n\n  private eye = new Vector3()\n\n  private camera: PerspectiveCamera | OrthographicCamera = null!\n  private enabled = true\n  private axis: string | null = null\n  private mode: 'translate' | 'rotate' | 'scale' = 'translate'\n  private space = 'world'\n  private size = 1\n  private dragging = false\n  private showX = true\n  private showY = true\n  private showZ = true\n\n  constructor() {\n    super()\n\n    const gizmoMaterial = new MeshBasicMaterial({\n      depthTest: false,\n      depthWrite: false,\n      transparent: true,\n      side: DoubleSide,\n      fog: false,\n      toneMapped: false,\n    })\n\n    const gizmoLineMaterial = new LineBasicMaterial({\n      depthTest: false,\n      depthWrite: false,\n      transparent: true,\n      linewidth: 1,\n      fog: false,\n      toneMapped: false,\n    })\n\n    // Make unique material for each axis/color\n\n    const matInvisible = gizmoMaterial.clone()\n    matInvisible.opacity = 0.15\n\n    const matHelper = gizmoMaterial.clone()\n    matHelper.opacity = 0.33\n\n    const matRed = gizmoMaterial.clone() as MeshBasicMaterial\n    matRed.color.set(0xff0000)\n\n    const matGreen = gizmoMaterial.clone() as MeshBasicMaterial\n    matGreen.color.set(0x00ff00)\n\n    const matBlue = gizmoMaterial.clone() as MeshBasicMaterial\n    matBlue.color.set(0x0000ff)\n\n    const matWhiteTransparent = gizmoMaterial.clone() as MeshBasicMaterial\n    matWhiteTransparent.opacity = 0.25\n\n    const matYellowTransparent = matWhiteTransparent.clone() as MeshBasicMaterial\n    matYellowTransparent.color.set(0xffff00)\n\n    const matCyanTransparent = matWhiteTransparent.clone() as MeshBasicMaterial\n    matCyanTransparent.color.set(0x00ffff)\n\n    const matMagentaTransparent = matWhiteTransparent.clone() as MeshBasicMaterial\n    matMagentaTransparent.color.set(0xff00ff)\n\n    const matYellow = gizmoMaterial.clone() as MeshBasicMaterial\n    matYellow.color.set(0xffff00)\n\n    const matLineRed = gizmoLineMaterial.clone() as LineBasicMaterial\n    matLineRed.color.set(0xff0000)\n\n    const matLineGreen = gizmoLineMaterial.clone() as LineBasicMaterial\n    matLineGreen.color.set(0x00ff00)\n\n    const matLineBlue = gizmoLineMaterial.clone() as LineBasicMaterial\n    matLineBlue.color.set(0x0000ff)\n\n    const matLineCyan = gizmoLineMaterial.clone() as LineBasicMaterial\n    matLineCyan.color.set(0x00ffff)\n\n    const matLineMagenta = gizmoLineMaterial.clone() as LineBasicMaterial\n    matLineMagenta.color.set(0xff00ff)\n\n    const matLineYellow = gizmoLineMaterial.clone() as LineBasicMaterial\n    matLineYellow.color.set(0xffff00)\n\n    const matLineGray = gizmoLineMaterial.clone() as LineBasicMaterial\n    matLineGray.color.set(0x787878)\n\n    const matLineYellowTransparent = matLineYellow.clone() as LineBasicMaterial\n    matLineYellowTransparent.opacity = 0.25\n\n    // reusable geometry\n\n    const arrowGeometry = new CylinderGeometry(0, 0.05, 0.2, 12, 1, false)\n\n    const scaleHandleGeometry = new BoxGeometry(0.125, 0.125, 0.125)\n\n    const lineGeometry = new BufferGeometry()\n    lineGeometry.setAttribute('position', new Float32BufferAttribute([0, 0, 0, 1, 0, 0], 3))\n\n    const CircleGeometry = (radius: number, arc: number): BufferGeometry => {\n      const geometry = new BufferGeometry()\n      const vertices = []\n\n      for (let i = 0; i <= 64 * arc; ++i) {\n        vertices.push(0, Math.cos((i / 32) * Math.PI) * radius, Math.sin((i / 32) * Math.PI) * radius)\n      }\n\n      geometry.setAttribute('position', new Float32BufferAttribute(vertices, 3))\n\n      return geometry\n    }\n\n    // Special geometry for transform helper. If scaled with position vector it spans from [0,0,0] to position\n\n    const TranslateHelperGeometry = (): BufferGeometry => {\n      const geometry = new BufferGeometry()\n\n      geometry.setAttribute('position', new Float32BufferAttribute([0, 0, 0, 1, 1, 1], 3))\n\n      return geometry\n    }\n\n    // Gizmo definitions - custom hierarchy definitions for setupGizmo() function\n\n    const gizmoTranslate = {\n      X: [\n        [new Mesh(arrowGeometry, matRed), [1, 0, 0], [0, 0, -Math.PI / 2], null, 'fwd'],\n        [new Mesh(arrowGeometry, matRed), [1, 0, 0], [0, 0, Math.PI / 2], null, 'bwd'],\n        [new Line(lineGeometry, matLineRed)],\n      ],\n      Y: [\n        [new Mesh(arrowGeometry, matGreen), [0, 1, 0], null, null, 'fwd'],\n        [new Mesh(arrowGeometry, matGreen), [0, 1, 0], [Math.PI, 0, 0], null, 'bwd'],\n        [new Line(lineGeometry, matLineGreen), null, [0, 0, Math.PI / 2]],\n      ],\n      Z: [\n        [new Mesh(arrowGeometry, matBlue), [0, 0, 1], [Math.PI / 2, 0, 0], null, 'fwd'],\n        [new Mesh(arrowGeometry, matBlue), [0, 0, 1], [-Math.PI / 2, 0, 0], null, 'bwd'],\n        [new Line(lineGeometry, matLineBlue), null, [0, -Math.PI / 2, 0]],\n      ],\n      XYZ: [[new Mesh(new OctahedronGeometry(0.1, 0), matWhiteTransparent.clone()), [0, 0, 0], [0, 0, 0]]],\n      XY: [\n        [new Mesh(new PlaneGeometry(0.295, 0.295), matYellowTransparent.clone()), [0.15, 0.15, 0]],\n        [new Line(lineGeometry, matLineYellow), [0.18, 0.3, 0], null, [0.125, 1, 1]],\n        [new Line(lineGeometry, matLineYellow), [0.3, 0.18, 0], [0, 0, Math.PI / 2], [0.125, 1, 1]],\n      ],\n      YZ: [\n        [new Mesh(new PlaneGeometry(0.295, 0.295), matCyanTransparent.clone()), [0, 0.15, 0.15], [0, Math.PI / 2, 0]],\n        [new Line(lineGeometry, matLineCyan), [0, 0.18, 0.3], [0, 0, Math.PI / 2], [0.125, 1, 1]],\n        [new Line(lineGeometry, matLineCyan), [0, 0.3, 0.18], [0, -Math.PI / 2, 0], [0.125, 1, 1]],\n      ],\n      XZ: [\n        [\n          new Mesh(new PlaneGeometry(0.295, 0.295), matMagentaTransparent.clone()),\n          [0.15, 0, 0.15],\n          [-Math.PI / 2, 0, 0],\n        ],\n        [new Line(lineGeometry, matLineMagenta), [0.18, 0, 0.3], null, [0.125, 1, 1]],\n        [new Line(lineGeometry, matLineMagenta), [0.3, 0, 0.18], [0, -Math.PI / 2, 0], [0.125, 1, 1]],\n      ],\n    }\n\n    const pickerTranslate = {\n      X: [[new Mesh(new CylinderGeometry(0.2, 0, 1, 4, 1, false), matInvisible), [0.6, 0, 0], [0, 0, -Math.PI / 2]]],\n      Y: [[new Mesh(new CylinderGeometry(0.2, 0, 1, 4, 1, false), matInvisible), [0, 0.6, 0]]],\n      Z: [[new Mesh(new CylinderGeometry(0.2, 0, 1, 4, 1, false), matInvisible), [0, 0, 0.6], [Math.PI / 2, 0, 0]]],\n      XYZ: [[new Mesh(new OctahedronGeometry(0.2, 0), matInvisible)]],\n      XY: [[new Mesh(new PlaneGeometry(0.4, 0.4), matInvisible), [0.2, 0.2, 0]]],\n      YZ: [[new Mesh(new PlaneGeometry(0.4, 0.4), matInvisible), [0, 0.2, 0.2], [0, Math.PI / 2, 0]]],\n      XZ: [[new Mesh(new PlaneGeometry(0.4, 0.4), matInvisible), [0.2, 0, 0.2], [-Math.PI / 2, 0, 0]]],\n    }\n\n    const helperTranslate = {\n      START: [[new Mesh(new OctahedronGeometry(0.01, 2), matHelper), null, null, null, 'helper']],\n      END: [[new Mesh(new OctahedronGeometry(0.01, 2), matHelper), null, null, null, 'helper']],\n      DELTA: [[new Line(TranslateHelperGeometry(), matHelper), null, null, null, 'helper']],\n      X: [[new Line(lineGeometry, matHelper.clone()), [-1e3, 0, 0], null, [1e6, 1, 1], 'helper']],\n      Y: [[new Line(lineGeometry, matHelper.clone()), [0, -1e3, 0], [0, 0, Math.PI / 2], [1e6, 1, 1], 'helper']],\n      Z: [[new Line(lineGeometry, matHelper.clone()), [0, 0, -1e3], [0, -Math.PI / 2, 0], [1e6, 1, 1], 'helper']],\n    }\n\n    const gizmoRotate = {\n      X: [\n        [new Line(CircleGeometry(1, 0.5), matLineRed)],\n        [new Mesh(new OctahedronGeometry(0.04, 0), matRed), [0, 0, 0.99], null, [1, 3, 1]],\n      ],\n      Y: [\n        [new Line(CircleGeometry(1, 0.5), matLineGreen), null, [0, 0, -Math.PI / 2]],\n        [new Mesh(new OctahedronGeometry(0.04, 0), matGreen), [0, 0, 0.99], null, [3, 1, 1]],\n      ],\n      Z: [\n        [new Line(CircleGeometry(1, 0.5), matLineBlue), null, [0, Math.PI / 2, 0]],\n        [new Mesh(new OctahedronGeometry(0.04, 0), matBlue), [0.99, 0, 0], null, [1, 3, 1]],\n      ],\n      E: [\n        [new Line(CircleGeometry(1.25, 1), matLineYellowTransparent), null, [0, Math.PI / 2, 0]],\n        [\n          new Mesh(new CylinderGeometry(0.03, 0, 0.15, 4, 1, false), matLineYellowTransparent),\n          [1.17, 0, 0],\n          [0, 0, -Math.PI / 2],\n          [1, 1, 0.001],\n        ],\n        [\n          new Mesh(new CylinderGeometry(0.03, 0, 0.15, 4, 1, false), matLineYellowTransparent),\n          [-1.17, 0, 0],\n          [0, 0, Math.PI / 2],\n          [1, 1, 0.001],\n        ],\n        [\n          new Mesh(new CylinderGeometry(0.03, 0, 0.15, 4, 1, false), matLineYellowTransparent),\n          [0, -1.17, 0],\n          [Math.PI, 0, 0],\n          [1, 1, 0.001],\n        ],\n        [\n          new Mesh(new CylinderGeometry(0.03, 0, 0.15, 4, 1, false), matLineYellowTransparent),\n          [0, 1.17, 0],\n          [0, 0, 0],\n          [1, 1, 0.001],\n        ],\n      ],\n      XYZE: [[new Line(CircleGeometry(1, 1), matLineGray), null, [0, Math.PI / 2, 0]]],\n    }\n\n    const helperRotate = {\n      AXIS: [[new Line(lineGeometry, matHelper.clone()), [-1e3, 0, 0], null, [1e6, 1, 1], 'helper']],\n    }\n\n    const pickerRotate = {\n      X: [[new Mesh(new TorusGeometry(1, 0.1, 4, 24), matInvisible), [0, 0, 0], [0, -Math.PI / 2, -Math.PI / 2]]],\n      Y: [[new Mesh(new TorusGeometry(1, 0.1, 4, 24), matInvisible), [0, 0, 0], [Math.PI / 2, 0, 0]]],\n      Z: [[new Mesh(new TorusGeometry(1, 0.1, 4, 24), matInvisible), [0, 0, 0], [0, 0, -Math.PI / 2]]],\n      E: [[new Mesh(new TorusGeometry(1.25, 0.1, 2, 24), matInvisible)]],\n      XYZE: [[new Mesh(new SphereGeometry(0.7, 10, 8), matInvisible)]],\n    }\n\n    const gizmoScale = {\n      X: [\n        [new Mesh(scaleHandleGeometry, matRed), [0.8, 0, 0], [0, 0, -Math.PI / 2]],\n        [new Line(lineGeometry, matLineRed), null, null, [0.8, 1, 1]],\n      ],\n      Y: [\n        [new Mesh(scaleHandleGeometry, matGreen), [0, 0.8, 0]],\n        [new Line(lineGeometry, matLineGreen), null, [0, 0, Math.PI / 2], [0.8, 1, 1]],\n      ],\n      Z: [\n        [new Mesh(scaleHandleGeometry, matBlue), [0, 0, 0.8], [Math.PI / 2, 0, 0]],\n        [new Line(lineGeometry, matLineBlue), null, [0, -Math.PI / 2, 0], [0.8, 1, 1]],\n      ],\n      XY: [\n        [new Mesh(scaleHandleGeometry, matYellowTransparent), [0.85, 0.85, 0], null, [2, 2, 0.2]],\n        [new Line(lineGeometry, matLineYellow), [0.855, 0.98, 0], null, [0.125, 1, 1]],\n        [new Line(lineGeometry, matLineYellow), [0.98, 0.855, 0], [0, 0, Math.PI / 2], [0.125, 1, 1]],\n      ],\n      YZ: [\n        [new Mesh(scaleHandleGeometry, matCyanTransparent), [0, 0.85, 0.85], null, [0.2, 2, 2]],\n        [new Line(lineGeometry, matLineCyan), [0, 0.855, 0.98], [0, 0, Math.PI / 2], [0.125, 1, 1]],\n        [new Line(lineGeometry, matLineCyan), [0, 0.98, 0.855], [0, -Math.PI / 2, 0], [0.125, 1, 1]],\n      ],\n      XZ: [\n        [new Mesh(scaleHandleGeometry, matMagentaTransparent), [0.85, 0, 0.85], null, [2, 0.2, 2]],\n        [new Line(lineGeometry, matLineMagenta), [0.855, 0, 0.98], null, [0.125, 1, 1]],\n        [new Line(lineGeometry, matLineMagenta), [0.98, 0, 0.855], [0, -Math.PI / 2, 0], [0.125, 1, 1]],\n      ],\n      XYZX: [[new Mesh(new BoxGeometry(0.125, 0.125, 0.125), matWhiteTransparent.clone()), [1.1, 0, 0]]],\n      XYZY: [[new Mesh(new BoxGeometry(0.125, 0.125, 0.125), matWhiteTransparent.clone()), [0, 1.1, 0]]],\n      XYZZ: [[new Mesh(new BoxGeometry(0.125, 0.125, 0.125), matWhiteTransparent.clone()), [0, 0, 1.1]]],\n    }\n\n    const pickerScale = {\n      X: [[new Mesh(new CylinderGeometry(0.2, 0, 0.8, 4, 1, false), matInvisible), [0.5, 0, 0], [0, 0, -Math.PI / 2]]],\n      Y: [[new Mesh(new CylinderGeometry(0.2, 0, 0.8, 4, 1, false), matInvisible), [0, 0.5, 0]]],\n      Z: [[new Mesh(new CylinderGeometry(0.2, 0, 0.8, 4, 1, false), matInvisible), [0, 0, 0.5], [Math.PI / 2, 0, 0]]],\n      XY: [[new Mesh(scaleHandleGeometry, matInvisible), [0.85, 0.85, 0], null, [3, 3, 0.2]]],\n      YZ: [[new Mesh(scaleHandleGeometry, matInvisible), [0, 0.85, 0.85], null, [0.2, 3, 3]]],\n      XZ: [[new Mesh(scaleHandleGeometry, matInvisible), [0.85, 0, 0.85], null, [3, 0.2, 3]]],\n      XYZX: [[new Mesh(new BoxGeometry(0.2, 0.2, 0.2), matInvisible), [1.1, 0, 0]]],\n      XYZY: [[new Mesh(new BoxGeometry(0.2, 0.2, 0.2), matInvisible), [0, 1.1, 0]]],\n      XYZZ: [[new Mesh(new BoxGeometry(0.2, 0.2, 0.2), matInvisible), [0, 0, 1.1]]],\n    }\n\n    const helperScale = {\n      X: [[new Line(lineGeometry, matHelper.clone()), [-1e3, 0, 0], null, [1e6, 1, 1], 'helper']],\n      Y: [[new Line(lineGeometry, matHelper.clone()), [0, -1e3, 0], [0, 0, Math.PI / 2], [1e6, 1, 1], 'helper']],\n      Z: [[new Line(lineGeometry, matHelper.clone()), [0, 0, -1e3], [0, -Math.PI / 2, 0], [1e6, 1, 1], 'helper']],\n    }\n\n    // Creates an Object3D with gizmos described in custom hierarchy definition.\n    // this is nearly impossible to Type so i'm leaving it\n    const setupGizmo = (gizmoMap: any): Object3D => {\n      const gizmo = new Object3D()\n\n      for (let name in gizmoMap) {\n        for (let i = gizmoMap[name].length; i--; ) {\n          const object = gizmoMap[name][i][0].clone() as Mesh\n          const position = gizmoMap[name][i][1]\n          const rotation = gizmoMap[name][i][2]\n          const scale = gizmoMap[name][i][3]\n          const tag = gizmoMap[name][i][4]\n\n          // name and tag properties are essential for picking and updating logic.\n          object.name = name\n          // @ts-ignore\n          object.tag = tag\n\n          if (position) {\n            object.position.set(position[0], position[1], position[2])\n          }\n\n          if (rotation) {\n            object.rotation.set(rotation[0], rotation[1], rotation[2])\n          }\n\n          if (scale) {\n            object.scale.set(scale[0], scale[1], scale[2])\n          }\n\n          object.updateMatrix()\n\n          const tempGeometry = object.geometry.clone()\n          tempGeometry.applyMatrix4(object.matrix)\n          object.geometry = tempGeometry\n          object.renderOrder = Infinity\n\n          object.position.set(0, 0, 0)\n          object.rotation.set(0, 0, 0)\n          object.scale.set(1, 1, 1)\n\n          gizmo.add(object)\n        }\n      }\n\n      return gizmo\n    }\n\n    this.gizmo = {} as TransformControlsGizmoPrivateGizmos\n    this.picker = {} as TransformControlsGizmoPrivateGizmos\n    this.helper = {} as TransformControlsGizmoPrivateGizmos\n\n    this.add((this.gizmo['translate'] = setupGizmo(gizmoTranslate)))\n    this.add((this.gizmo['rotate'] = setupGizmo(gizmoRotate)))\n    this.add((this.gizmo['scale'] = setupGizmo(gizmoScale)))\n    this.add((this.picker['translate'] = setupGizmo(pickerTranslate)))\n    this.add((this.picker['rotate'] = setupGizmo(pickerRotate)))\n    this.add((this.picker['scale'] = setupGizmo(pickerScale)))\n    this.add((this.helper['translate'] = setupGizmo(helperTranslate)))\n    this.add((this.helper['rotate'] = setupGizmo(helperRotate)))\n    this.add((this.helper['scale'] = setupGizmo(helperScale)))\n\n    // Pickers should be hidden always\n\n    this.picker['translate'].visible = false\n    this.picker['rotate'].visible = false\n    this.picker['scale'].visible = false\n  }\n\n  // updateMatrixWorld will update transformations and appearance of individual handles\n  public updateMatrixWorld = (): void => {\n    let space = this.space\n\n    if (this.mode === 'scale') {\n      space = 'local' // scale always oriented to local rotation\n    }\n\n    const quaternion = space === 'local' ? this.worldQuaternion : this.identityQuaternion\n\n    // Show only gizmos for current transform mode\n\n    this.gizmo['translate'].visible = this.mode === 'translate'\n    this.gizmo['rotate'].visible = this.mode === 'rotate'\n    this.gizmo['scale'].visible = this.mode === 'scale'\n\n    this.helper['translate'].visible = this.mode === 'translate'\n    this.helper['rotate'].visible = this.mode === 'rotate'\n    this.helper['scale'].visible = this.mode === 'scale'\n\n    let handles: Array<Object3D & { tag?: string }> = []\n    handles = handles.concat(this.picker[this.mode].children)\n    handles = handles.concat(this.gizmo[this.mode].children)\n    handles = handles.concat(this.helper[this.mode].children)\n\n    for (let i = 0; i < handles.length; i++) {\n      const handle = handles[i]\n\n      // hide aligned to camera\n\n      handle.visible = true\n      handle.rotation.set(0, 0, 0)\n      handle.position.copy(this.worldPosition)\n\n      let factor\n\n      if ((this.camera as OrthographicCamera).isOrthographicCamera) {\n        factor =\n          ((this.camera as OrthographicCamera).top - (this.camera as OrthographicCamera).bottom) /\n          (this.camera as OrthographicCamera).zoom\n      } else {\n        factor =\n          this.worldPosition.distanceTo(this.cameraPosition) *\n          Math.min((1.9 * Math.tan((Math.PI * (this.camera as PerspectiveCamera).fov) / 360)) / this.camera.zoom, 7)\n      }\n\n      handle.scale.set(1, 1, 1).multiplyScalar((factor * this.size) / 7)\n\n      // TODO: simplify helpers and consider decoupling from gizmo\n\n      if (handle.tag === 'helper') {\n        handle.visible = false\n\n        if (handle.name === 'AXIS') {\n          handle.position.copy(this.worldPositionStart)\n          handle.visible = !!this.axis\n\n          if (this.axis === 'X') {\n            this.tempQuaternion.setFromEuler(this.tempEuler.set(0, 0, 0))\n            handle.quaternion.copy(quaternion).multiply(this.tempQuaternion)\n\n            if (Math.abs(this.alignVector.copy(this.unitX).applyQuaternion(quaternion).dot(this.eye)) > 0.9) {\n              handle.visible = false\n            }\n          }\n\n          if (this.axis === 'Y') {\n            this.tempQuaternion.setFromEuler(this.tempEuler.set(0, 0, Math.PI / 2))\n            handle.quaternion.copy(quaternion).multiply(this.tempQuaternion)\n\n            if (Math.abs(this.alignVector.copy(this.unitY).applyQuaternion(quaternion).dot(this.eye)) > 0.9) {\n              handle.visible = false\n            }\n          }\n\n          if (this.axis === 'Z') {\n            this.tempQuaternion.setFromEuler(this.tempEuler.set(0, Math.PI / 2, 0))\n            handle.quaternion.copy(quaternion).multiply(this.tempQuaternion)\n\n            if (Math.abs(this.alignVector.copy(this.unitZ).applyQuaternion(quaternion).dot(this.eye)) > 0.9) {\n              handle.visible = false\n            }\n          }\n\n          if (this.axis === 'XYZE') {\n            this.tempQuaternion.setFromEuler(this.tempEuler.set(0, Math.PI / 2, 0))\n            this.alignVector.copy(this.rotationAxis)\n            handle.quaternion.setFromRotationMatrix(\n              this.lookAtMatrix.lookAt(this.zeroVector, this.alignVector, this.unitY),\n            )\n            handle.quaternion.multiply(this.tempQuaternion)\n            handle.visible = this.dragging\n          }\n\n          if (this.axis === 'E') {\n            handle.visible = false\n          }\n        } else if (handle.name === 'START') {\n          handle.position.copy(this.worldPositionStart)\n          handle.visible = this.dragging\n        } else if (handle.name === 'END') {\n          handle.position.copy(this.worldPosition)\n          handle.visible = this.dragging\n        } else if (handle.name === 'DELTA') {\n          handle.position.copy(this.worldPositionStart)\n          handle.quaternion.copy(this.worldQuaternionStart)\n          this.tempVector\n            .set(1e-10, 1e-10, 1e-10)\n            .add(this.worldPositionStart)\n            .sub(this.worldPosition)\n            .multiplyScalar(-1)\n          this.tempVector.applyQuaternion(this.worldQuaternionStart.clone().invert())\n          handle.scale.copy(this.tempVector)\n          handle.visible = this.dragging\n        } else {\n          handle.quaternion.copy(quaternion)\n\n          if (this.dragging) {\n            handle.position.copy(this.worldPositionStart)\n          } else {\n            handle.position.copy(this.worldPosition)\n          }\n\n          if (this.axis) {\n            handle.visible = this.axis.search(handle.name) !== -1\n          }\n        }\n\n        // If updating helper, skip rest of the loop\n        continue\n      }\n\n      // Align handles to current local or world rotation\n\n      handle.quaternion.copy(quaternion)\n\n      if (this.mode === 'translate' || this.mode === 'scale') {\n        // Hide translate and scale axis facing the camera\n\n        const AXIS_HIDE_TRESHOLD = 0.99\n        const PLANE_HIDE_TRESHOLD = 0.2\n        const AXIS_FLIP_TRESHOLD = 0.0\n\n        if (handle.name === 'X' || handle.name === 'XYZX') {\n          if (\n            Math.abs(this.alignVector.copy(this.unitX).applyQuaternion(quaternion).dot(this.eye)) > AXIS_HIDE_TRESHOLD\n          ) {\n            handle.scale.set(1e-10, 1e-10, 1e-10)\n            handle.visible = false\n          }\n        }\n\n        if (handle.name === 'Y' || handle.name === 'XYZY') {\n          if (\n            Math.abs(this.alignVector.copy(this.unitY).applyQuaternion(quaternion).dot(this.eye)) > AXIS_HIDE_TRESHOLD\n          ) {\n            handle.scale.set(1e-10, 1e-10, 1e-10)\n            handle.visible = false\n          }\n        }\n\n        if (handle.name === 'Z' || handle.name === 'XYZZ') {\n          if (\n            Math.abs(this.alignVector.copy(this.unitZ).applyQuaternion(quaternion).dot(this.eye)) > AXIS_HIDE_TRESHOLD\n          ) {\n            handle.scale.set(1e-10, 1e-10, 1e-10)\n            handle.visible = false\n          }\n        }\n\n        if (handle.name === 'XY') {\n          if (\n            Math.abs(this.alignVector.copy(this.unitZ).applyQuaternion(quaternion).dot(this.eye)) < PLANE_HIDE_TRESHOLD\n          ) {\n            handle.scale.set(1e-10, 1e-10, 1e-10)\n            handle.visible = false\n          }\n        }\n\n        if (handle.name === 'YZ') {\n          if (\n            Math.abs(this.alignVector.copy(this.unitX).applyQuaternion(quaternion).dot(this.eye)) < PLANE_HIDE_TRESHOLD\n          ) {\n            handle.scale.set(1e-10, 1e-10, 1e-10)\n            handle.visible = false\n          }\n        }\n\n        if (handle.name === 'XZ') {\n          if (\n            Math.abs(this.alignVector.copy(this.unitY).applyQuaternion(quaternion).dot(this.eye)) < PLANE_HIDE_TRESHOLD\n          ) {\n            handle.scale.set(1e-10, 1e-10, 1e-10)\n            handle.visible = false\n          }\n        }\n\n        // Flip translate and scale axis ocluded behind another axis\n\n        if (handle.name.search('X') !== -1) {\n          if (this.alignVector.copy(this.unitX).applyQuaternion(quaternion).dot(this.eye) < AXIS_FLIP_TRESHOLD) {\n            if (handle.tag === 'fwd') {\n              handle.visible = false\n            } else {\n              handle.scale.x *= -1\n            }\n          } else if (handle.tag === 'bwd') {\n            handle.visible = false\n          }\n        }\n\n        if (handle.name.search('Y') !== -1) {\n          if (this.alignVector.copy(this.unitY).applyQuaternion(quaternion).dot(this.eye) < AXIS_FLIP_TRESHOLD) {\n            if (handle.tag === 'fwd') {\n              handle.visible = false\n            } else {\n              handle.scale.y *= -1\n            }\n          } else if (handle.tag === 'bwd') {\n            handle.visible = false\n          }\n        }\n\n        if (handle.name.search('Z') !== -1) {\n          if (this.alignVector.copy(this.unitZ).applyQuaternion(quaternion).dot(this.eye) < AXIS_FLIP_TRESHOLD) {\n            if (handle.tag === 'fwd') {\n              handle.visible = false\n            } else {\n              handle.scale.z *= -1\n            }\n          } else if (handle.tag === 'bwd') {\n            handle.visible = false\n          }\n        }\n      } else if (this.mode === 'rotate') {\n        // Align handles to current local or world rotation\n\n        this.tempQuaternion2.copy(quaternion)\n        this.alignVector.copy(this.eye).applyQuaternion(this.tempQuaternion.copy(quaternion).invert())\n\n        if (handle.name.search('E') !== -1) {\n          handle.quaternion.setFromRotationMatrix(this.lookAtMatrix.lookAt(this.eye, this.zeroVector, this.unitY))\n        }\n\n        if (handle.name === 'X') {\n          this.tempQuaternion.setFromAxisAngle(this.unitX, Math.atan2(-this.alignVector.y, this.alignVector.z))\n          this.tempQuaternion.multiplyQuaternions(this.tempQuaternion2, this.tempQuaternion)\n          handle.quaternion.copy(this.tempQuaternion)\n        }\n\n        if (handle.name === 'Y') {\n          this.tempQuaternion.setFromAxisAngle(this.unitY, Math.atan2(this.alignVector.x, this.alignVector.z))\n          this.tempQuaternion.multiplyQuaternions(this.tempQuaternion2, this.tempQuaternion)\n          handle.quaternion.copy(this.tempQuaternion)\n        }\n\n        if (handle.name === 'Z') {\n          this.tempQuaternion.setFromAxisAngle(this.unitZ, Math.atan2(this.alignVector.y, this.alignVector.x))\n          this.tempQuaternion.multiplyQuaternions(this.tempQuaternion2, this.tempQuaternion)\n          handle.quaternion.copy(this.tempQuaternion)\n        }\n      }\n\n      // Hide disabled axes\n      handle.visible = handle.visible && (handle.name.indexOf('X') === -1 || this.showX)\n      handle.visible = handle.visible && (handle.name.indexOf('Y') === -1 || this.showY)\n      handle.visible = handle.visible && (handle.name.indexOf('Z') === -1 || this.showZ)\n      handle.visible = handle.visible && (handle.name.indexOf('E') === -1 || (this.showX && this.showY && this.showZ))\n\n      // highlight selected axis\n\n      //@ts-ignore\n      handle.material.tempOpacity = handle.material.tempOpacity || handle.material.opacity\n      //@ts-ignore\n      handle.material.tempColor = handle.material.tempColor || handle.material.color.clone()\n      //@ts-ignore\n      handle.material.color.copy(handle.material.tempColor)\n      //@ts-ignore\n      handle.material.opacity = handle.material.tempOpacity\n\n      if (!this.enabled) {\n        //@ts-ignore\n        handle.material.opacity *= 0.5\n        //@ts-ignore\n        handle.material.color.lerp(new Color(1, 1, 1), 0.5)\n      } else if (this.axis) {\n        if (handle.name === this.axis) {\n          //@ts-ignore\n          handle.material.opacity = 1.0\n          //@ts-ignore\n          handle.material.color.lerp(new Color(1, 1, 1), 0.5)\n        } else if (\n          this.axis.split('').some(function (a) {\n            return handle.name === a\n          })\n        ) {\n          //@ts-ignore\n          handle.material.opacity = 1.0\n          //@ts-ignore\n          handle.material.color.lerp(new Color(1, 1, 1), 0.5)\n        } else {\n          //@ts-ignore\n          handle.material.opacity *= 0.25\n          //@ts-ignore\n          handle.material.color.lerp(new Color(1, 1, 1), 0.5)\n        }\n      }\n    }\n\n    super.updateMatrixWorld()\n  }\n}\n\nclass TransformControlsPlane extends Mesh<PlaneGeometry, MeshBasicMaterial> {\n  private isTransformControlsPlane = true\n  public type = 'TransformControlsPlane'\n\n  constructor() {\n    super(\n      new PlaneGeometry(100000, 100000, 2, 2),\n      new MeshBasicMaterial({\n        visible: false,\n        wireframe: true,\n        side: DoubleSide,\n        transparent: true,\n        opacity: 0.1,\n        toneMapped: false,\n      }),\n    )\n  }\n\n  private unitX = new Vector3(1, 0, 0)\n  private unitY = new Vector3(0, 1, 0)\n  private unitZ = new Vector3(0, 0, 1)\n\n  private tempVector = new Vector3()\n  private dirVector = new Vector3()\n  private alignVector = new Vector3()\n  private tempMatrix = new Matrix4()\n  private identityQuaternion = new Quaternion()\n\n  // these are set from parent class TransformControls\n  private cameraQuaternion = new Quaternion()\n\n  private worldPosition = new Vector3()\n  private worldQuaternion = new Quaternion()\n\n  private eye = new Vector3()\n\n  private axis: string | null = null\n  private mode: 'translate' | 'rotate' | 'scale' = 'translate'\n  private space = 'world'\n\n  public updateMatrixWorld = (): void => {\n    let space = this.space\n\n    this.position.copy(this.worldPosition)\n\n    if (this.mode === 'scale') space = 'local' // scale always oriented to local rotation\n\n    this.unitX.set(1, 0, 0).applyQuaternion(space === 'local' ? this.worldQuaternion : this.identityQuaternion)\n    this.unitY.set(0, 1, 0).applyQuaternion(space === 'local' ? this.worldQuaternion : this.identityQuaternion)\n    this.unitZ.set(0, 0, 1).applyQuaternion(space === 'local' ? this.worldQuaternion : this.identityQuaternion)\n\n    // Align the plane for current transform mode, axis and space.\n\n    this.alignVector.copy(this.unitY)\n\n    switch (this.mode) {\n      case 'translate':\n      case 'scale':\n        switch (this.axis) {\n          case 'X':\n            this.alignVector.copy(this.eye).cross(this.unitX)\n            this.dirVector.copy(this.unitX).cross(this.alignVector)\n            break\n          case 'Y':\n            this.alignVector.copy(this.eye).cross(this.unitY)\n            this.dirVector.copy(this.unitY).cross(this.alignVector)\n            break\n          case 'Z':\n            this.alignVector.copy(this.eye).cross(this.unitZ)\n            this.dirVector.copy(this.unitZ).cross(this.alignVector)\n            break\n          case 'XY':\n            this.dirVector.copy(this.unitZ)\n            break\n          case 'YZ':\n            this.dirVector.copy(this.unitX)\n            break\n          case 'XZ':\n            this.alignVector.copy(this.unitZ)\n            this.dirVector.copy(this.unitY)\n            break\n          case 'XYZ':\n          case 'E':\n            this.dirVector.set(0, 0, 0)\n            break\n        }\n\n        break\n      case 'rotate':\n      default:\n        // special case for rotate\n        this.dirVector.set(0, 0, 0)\n    }\n\n    if (this.dirVector.length() === 0) {\n      // If in rotate mode, make the plane parallel to camera\n      this.quaternion.copy(this.cameraQuaternion)\n    } else {\n      this.tempMatrix.lookAt(this.tempVector.set(0, 0, 0), this.dirVector, this.alignVector)\n\n      this.quaternion.setFromRotationMatrix(this.tempMatrix)\n    }\n\n    super.updateMatrixWorld()\n  }\n}\n\nexport { TransformControls, TransformControlsGizmo, TransformControlsPlane }\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}