{"ast":null,"code":"import _classCallCheck from \"C:/Users/Nayyu/Desktop/skibidai-public-build/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Nayyu/Desktop/skibidai-public-build/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"C:/Users/Nayyu/Desktop/skibidai-public-build/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"C:/Users/Nayyu/Desktop/skibidai-public-build/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"C:/Users/Nayyu/Desktop/skibidai-public-build/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/Nayyu/Desktop/skibidai-public-build/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { LineSegmentsGeometry } from \"./LineSegmentsGeometry.js\";\nvar LineGeometry = /*#__PURE__*/function (_LineSegmentsGeometry) {\n  _inherits(LineGeometry, _LineSegmentsGeometry);\n  var _super = _createSuper(LineGeometry);\n  function LineGeometry() {\n    var _this;\n    _classCallCheck(this, LineGeometry);\n    _this = _super.call(this);\n    _this.isLineGeometry = true;\n    _this.type = \"LineGeometry\";\n    return _this;\n  }\n  _createClass(LineGeometry, [{\n    key: \"setPositions\",\n    value: function setPositions(array) {\n      var length = array.length - 3;\n      var points = new Float32Array(2 * length);\n      for (var i = 0; i < length; i += 3) {\n        points[2 * i] = array[i];\n        points[2 * i + 1] = array[i + 1];\n        points[2 * i + 2] = array[i + 2];\n        points[2 * i + 3] = array[i + 3];\n        points[2 * i + 4] = array[i + 4];\n        points[2 * i + 5] = array[i + 5];\n      }\n      _get(_getPrototypeOf(LineGeometry.prototype), \"setPositions\", this).call(this, points);\n      return this;\n    }\n  }, {\n    key: \"setColors\",\n    value: function setColors(array) {\n      var itemSize = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 3;\n      var length = array.length - itemSize;\n      var colors = new Float32Array(2 * length);\n      if (itemSize === 3) {\n        for (var i = 0; i < length; i += itemSize) {\n          colors[2 * i] = array[i];\n          colors[2 * i + 1] = array[i + 1];\n          colors[2 * i + 2] = array[i + 2];\n          colors[2 * i + 3] = array[i + 3];\n          colors[2 * i + 4] = array[i + 4];\n          colors[2 * i + 5] = array[i + 5];\n        }\n      } else {\n        for (var _i = 0; _i < length; _i += itemSize) {\n          colors[2 * _i] = array[_i];\n          colors[2 * _i + 1] = array[_i + 1];\n          colors[2 * _i + 2] = array[_i + 2];\n          colors[2 * _i + 3] = array[_i + 3];\n          colors[2 * _i + 4] = array[_i + 4];\n          colors[2 * _i + 5] = array[_i + 5];\n          colors[2 * _i + 6] = array[_i + 6];\n          colors[2 * _i + 7] = array[_i + 7];\n        }\n      }\n      _get(_getPrototypeOf(LineGeometry.prototype), \"setColors\", this).call(this, colors, itemSize);\n      return this;\n    }\n  }, {\n    key: \"fromLine\",\n    value: function fromLine(line) {\n      var geometry = line.geometry;\n      this.setPositions(geometry.attributes.position.array);\n      return this;\n    }\n  }]);\n  return LineGeometry;\n}(LineSegmentsGeometry);\nexport { LineGeometry };","map":{"version":3,"names":["LineGeometry","_LineSegmentsGeometry","_inherits","_super","_createSuper","_this","_classCallCheck","call","isLineGeometry","type","_createClass","key","value","setPositions","array","length","points","Float32Array","i","_get","_getPrototypeOf","prototype","setColors","itemSize","arguments","undefined","colors","fromLine","line","geometry","attributes","position","LineSegmentsGeometry"],"sources":["C:\\Users\\Nayyu\\Desktop\\skibidai-public-build\\node_modules\\src\\lines\\LineGeometry.js"],"sourcesContent":["import { LineSegmentsGeometry } from '../lines/LineSegmentsGeometry'\n\nclass LineGeometry extends LineSegmentsGeometry {\n  constructor() {\n    super()\n\n    this.isLineGeometry = true\n\n    this.type = 'LineGeometry'\n  }\n\n  setPositions(array) {\n    // converts [ x1, y1, z1,  x2, y2, z2, ... ] to pairs format\n\n    const length = array.length - 3\n    const points = new Float32Array(2 * length)\n\n    for (let i = 0; i < length; i += 3) {\n      points[2 * i] = array[i]\n      points[2 * i + 1] = array[i + 1]\n      points[2 * i + 2] = array[i + 2]\n\n      points[2 * i + 3] = array[i + 3]\n      points[2 * i + 4] = array[i + 4]\n      points[2 * i + 5] = array[i + 5]\n    }\n\n    super.setPositions(points)\n\n    return this\n  }\n\n  setColors(array, itemSize = 3) {\n    // converts [ r1, g1, b1, (a1),  r2, g2, b2, (a2), ... ] to pairs format\n\n    const length = array.length - itemSize\n    const colors = new Float32Array(2 * length)\n\n    if (itemSize === 3) {\n      for (let i = 0; i < length; i += itemSize) {\n        colors[2 * i] = array[i]\n        colors[2 * i + 1] = array[i + 1]\n        colors[2 * i + 2] = array[i + 2]\n\n        colors[2 * i + 3] = array[i + 3]\n        colors[2 * i + 4] = array[i + 4]\n        colors[2 * i + 5] = array[i + 5]\n      }\n    } else {\n      for (let i = 0; i < length; i += itemSize) {\n        colors[2 * i] = array[i]\n        colors[2 * i + 1] = array[i + 1]\n        colors[2 * i + 2] = array[i + 2]\n        colors[2 * i + 3] = array[i + 3]\n\n        colors[2 * i + 4] = array[i + 4]\n        colors[2 * i + 5] = array[i + 5]\n        colors[2 * i + 6] = array[i + 6]\n        colors[2 * i + 7] = array[i + 7]\n      }\n    }\n\n    super.setColors(colors, itemSize)\n\n    return this\n  }\n\n  fromLine(line) {\n    const geometry = line.geometry\n\n    this.setPositions(geometry.attributes.position.array) // assumes non-indexed\n\n    // set colors, maybe\n\n    return this\n  }\n}\n\nexport { LineGeometry }\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}