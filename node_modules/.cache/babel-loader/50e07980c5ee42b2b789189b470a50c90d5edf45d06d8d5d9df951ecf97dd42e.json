{"ast":null,"code":"import _classCallCheck from \"C:/Users/Nayyu/Desktop/skibidai-public-build/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Nayyu/Desktop/skibidai-public-build/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"C:/Users/Nayyu/Desktop/skibidai-public-build/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"C:/Users/Nayyu/Desktop/skibidai-public-build/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/Nayyu/Desktop/skibidai-public-build/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nvar __defProp = Object.defineProperty;\nvar __defNormalProp = function __defNormalProp(obj, key, value) {\n  return key in obj ? __defProp(obj, key, {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: value\n  }) : obj[key] = value;\n};\nvar __publicField = function __publicField(obj, key, value) {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nimport { Pass, FullScreenQuad } from \"./Pass.js\";\nimport { UniformsUtils, ShaderMaterial } from \"three\";\nimport { FilmShader } from \"../shaders/FilmShader.js\";\nvar FilmPass = /*#__PURE__*/function (_Pass) {\n  _inherits(FilmPass, _Pass);\n  var _super = _createSuper(FilmPass);\n  function FilmPass(noiseIntensity, scanlinesIntensity, scanlinesCount, grayscale) {\n    var _this;\n    _classCallCheck(this, FilmPass);\n    _this = _super.call(this);\n    __publicField(_assertThisInitialized(_this), \"material\");\n    __publicField(_assertThisInitialized(_this), \"fsQuad\");\n    __publicField(_assertThisInitialized(_this), \"uniforms\");\n    if (FilmShader === void 0) console.error(\"THREE.FilmPass relies on FilmShader\");\n    var shader = FilmShader;\n    _this.uniforms = UniformsUtils.clone(shader.uniforms);\n    _this.material = new ShaderMaterial({\n      uniforms: _this.uniforms,\n      vertexShader: shader.vertexShader,\n      fragmentShader: shader.fragmentShader\n    });\n    if (grayscale !== void 0) _this.uniforms.grayscale.value = grayscale;\n    if (noiseIntensity !== void 0) _this.uniforms.nIntensity.value = noiseIntensity;\n    if (scanlinesIntensity !== void 0) _this.uniforms.sIntensity.value = scanlinesIntensity;\n    if (scanlinesCount !== void 0) _this.uniforms.sCount.value = scanlinesCount;\n    _this.fsQuad = new FullScreenQuad(_this.material);\n    return _this;\n  }\n  _createClass(FilmPass, [{\n    key: \"render\",\n    value: function render(renderer, writeBuffer, readBuffer, deltaTime) {\n      this.uniforms[\"tDiffuse\"].value = readBuffer.texture;\n      this.uniforms[\"time\"].value += deltaTime;\n      if (this.renderToScreen) {\n        renderer.setRenderTarget(null);\n        this.fsQuad.render(renderer);\n      } else {\n        renderer.setRenderTarget(writeBuffer);\n        if (this.clear) renderer.clear();\n        this.fsQuad.render(renderer);\n      }\n    }\n  }]);\n  return FilmPass;\n}(Pass);\nexport { FilmPass };","map":{"version":3,"names":["FilmPass","_Pass","_inherits","_super","_createSuper","noiseIntensity","scanlinesIntensity","scanlinesCount","grayscale","_this","_classCallCheck","call","__publicField","_assertThisInitialized","FilmShader","console","error","shader","uniforms","UniformsUtils","clone","material","ShaderMaterial","vertexShader","fragmentShader","value","nIntensity","sIntensity","sCount","fsQuad","FullScreenQuad","_createClass","key","render","renderer","writeBuffer","readBuffer","deltaTime","texture","renderToScreen","setRenderTarget","clear","Pass"],"sources":["C:\\Users\\Nayyu\\Desktop\\skibidai-public-build\\node_modules\\src\\postprocessing\\FilmPass.ts"],"sourcesContent":["import { Pass, FullScreenQuad } from './Pass'\nimport { IUniform, ShaderMaterial, UniformsUtils, WebGLRenderer, WebGLRenderTarget } from 'three'\nimport { FilmShader } from '../shaders/FilmShader'\n\nclass FilmPass extends Pass {\n  public material: ShaderMaterial\n  public fsQuad: FullScreenQuad\n\n  public uniforms: Record<keyof typeof FilmShader['uniforms'], IUniform<any>>\n\n  constructor(noiseIntensity?: number, scanlinesIntensity?: number, scanlinesCount?: number, grayscale?: boolean) {\n    super()\n\n    if (FilmShader === undefined) console.error('THREE.FilmPass relies on FilmShader')\n\n    const shader = FilmShader\n\n    this.uniforms = UniformsUtils.clone(shader.uniforms)\n\n    this.material = new ShaderMaterial({\n      uniforms: this.uniforms,\n      vertexShader: shader.vertexShader,\n      fragmentShader: shader.fragmentShader,\n    })\n\n    if (grayscale !== undefined) this.uniforms.grayscale.value = grayscale\n    if (noiseIntensity !== undefined) this.uniforms.nIntensity.value = noiseIntensity\n    if (scanlinesIntensity !== undefined) this.uniforms.sIntensity.value = scanlinesIntensity\n    if (scanlinesCount !== undefined) this.uniforms.sCount.value = scanlinesCount\n\n    this.fsQuad = new FullScreenQuad(this.material)\n  }\n\n  public render(\n    renderer: WebGLRenderer,\n    writeBuffer: WebGLRenderTarget,\n    readBuffer: WebGLRenderTarget,\n    deltaTime: number,\n  ): void {\n    this.uniforms['tDiffuse'].value = readBuffer.texture\n    this.uniforms['time'].value += deltaTime\n\n    if (this.renderToScreen) {\n      renderer.setRenderTarget(null)\n      this.fsQuad.render(renderer)\n    } else {\n      renderer.setRenderTarget(writeBuffer)\n      if (this.clear) renderer.clear()\n      this.fsQuad.render(renderer)\n    }\n  }\n}\n\nexport { FilmPass }\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;IAIMA,QAAA,0BAAAC,KAAA;EAAAC,SAAA,CAAAF,QAAA,EAAAC,KAAA;EAAA,IAAAE,MAAA,GAAAC,YAAA,CAAAJ,QAAA;EAMJ,SAAAA,SAAYK,cAAA,EAAyBC,kBAAA,EAA6BC,cAAA,EAAyBC,SAAA,EAAqB;IAAA,IAAAC,KAAA;IAAAC,eAAA,OAAAV,QAAA;IACxGS,KAAA,GAAAN,MAAA,CAAAQ,IAAA;IANDC,aAAA,CAAAC,sBAAA,CAAAJ,KAAA;IACAG,aAAA,CAAAC,sBAAA,CAAAJ,KAAA;IAEAG,aAAA,CAAAC,sBAAA,CAAAJ,KAAA;IAKL,IAAIK,UAAA,KAAe,QAAWC,OAAA,CAAQC,KAAA,CAAM,qCAAqC;IAEjF,IAAMC,MAAA,GAASH,UAAA;IAEfL,KAAA,CAAKS,QAAA,GAAWC,aAAA,CAAcC,KAAA,CAAMH,MAAA,CAAOC,QAAQ;IAE9CT,KAAA,CAAAY,QAAA,GAAW,IAAIC,cAAA,CAAe;MACjCJ,QAAA,EAAUT,KAAA,CAAKS,QAAA;MACfK,YAAA,EAAcN,MAAA,CAAOM,YAAA;MACrBC,cAAA,EAAgBP,MAAA,CAAOO;IAAA,CACxB;IAED,IAAIhB,SAAA,KAAc,QAAgBC,KAAA,CAAAS,QAAA,CAASV,SAAA,CAAUiB,KAAA,GAAQjB,SAAA;IAC7D,IAAIH,cAAA,KAAmB,QAAgBI,KAAA,CAAAS,QAAA,CAASQ,UAAA,CAAWD,KAAA,GAAQpB,cAAA;IACnE,IAAIC,kBAAA,KAAuB,QAAgBG,KAAA,CAAAS,QAAA,CAASS,UAAA,CAAWF,KAAA,GAAQnB,kBAAA;IACvE,IAAIC,cAAA,KAAmB,QAAgBE,KAAA,CAAAS,QAAA,CAASU,MAAA,CAAOH,KAAA,GAAQlB,cAAA;IAE/DE,KAAA,CAAKoB,MAAA,GAAS,IAAIC,cAAA,CAAerB,KAAA,CAAKY,QAAQ;IAAA,OAAAZ,KAAA;EAChD;EAAAsB,YAAA,CAAA/B,QAAA;IAAAgC,GAAA;IAAAP,KAAA,EAEO,SAAAQ,OACLC,QAAA,EACAC,WAAA,EACAC,UAAA,EACAC,SAAA,EACM;MACN,KAAKnB,QAAA,CAAS,UAAU,EAAEO,KAAA,GAAQW,UAAA,CAAWE,OAAA;MACxC,KAAApB,QAAA,CAAS,MAAM,EAAEO,KAAA,IAASY,SAAA;MAE/B,IAAI,KAAKE,cAAA,EAAgB;QACvBL,QAAA,CAASM,eAAA,CAAgB,IAAI;QACxB,KAAAX,MAAA,CAAOI,MAAA,CAAOC,QAAQ;MAAA,OACtB;QACLA,QAAA,CAASM,eAAA,CAAgBL,WAAW;QACpC,IAAI,KAAKM,KAAA,EAAOP,QAAA,CAASO,KAAA,CAAM;QAC1B,KAAAZ,MAAA,CAAOI,MAAA,CAAOC,QAAQ;MAC7B;IACF;EAAA;EAAA,OAAAlC,QAAA;AAAA,EA9CqB0C,IAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}