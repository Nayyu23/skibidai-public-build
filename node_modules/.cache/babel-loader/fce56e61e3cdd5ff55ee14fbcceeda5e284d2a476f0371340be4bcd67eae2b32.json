{"ast":null,"code":"import _createClass from \"C:/Users/Nayyu/Desktop/skibidai-public-build/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"C:/Users/Nayyu/Desktop/skibidai-public-build/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _inherits from \"C:/Users/Nayyu/Desktop/skibidai-public-build/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/Nayyu/Desktop/skibidai-public-build/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nvar __defProp = Object.defineProperty;\nvar __defNormalProp = function __defNormalProp(obj, key, value) {\n  return key in obj ? __defProp(obj, key, {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: value\n  }) : obj[key] = value;\n};\nvar __publicField = function __publicField(obj, key, value) {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nimport { BufferGeometry, InterleavedBuffer, InterleavedBufferAttribute, Mesh, MeshBasicMaterial, Vector3, DataTexture, RGBAFormat, NearestFilter, ClampToEdgeWrapping, RawShaderMaterial, Color, Vector2, AdditiveBlending, Box2, Vector4 } from \"three\";\nvar geometry = new BufferGeometry();\nvar float32Array = new Float32Array([-1, -1, 0, 0, 0, 1, -1, 0, 1, 0, 1, 1, 0, 1, 1, -1, 1, 0, 0, 1]);\nvar interleavedBuffer = new InterleavedBuffer(float32Array, 5);\ngeometry.setIndex([0, 1, 2, 0, 2, 3]);\ngeometry.setAttribute(\"position\", new InterleavedBufferAttribute(interleavedBuffer, 3, 0, false));\ngeometry.setAttribute(\"uv\", new InterleavedBufferAttribute(interleavedBuffer, 2, 3, false));\nvar _Lensflare = /*#__PURE__*/function (_Mesh) {\n  _inherits(_Lensflare, _Mesh);\n  var _super = _createSuper(_Lensflare);\n  function _Lensflare() {\n    var _this;\n    _classCallCheck(this, _Lensflare);\n    _this = _super.call(this, _Lensflare.Geometry, new MeshBasicMaterial({\n      opacity: 0,\n      transparent: true\n    }));\n    _this.isLensflare = true;\n    _this.type = \"Lensflare\";\n    _this.frustumCulled = false;\n    _this.renderOrder = Infinity;\n    var positionScreen = new Vector3();\n    var positionView = new Vector3();\n    var tempMap = new DataTexture(new Uint8Array(16 * 16 * 3), 16, 16, RGBAFormat);\n    tempMap.minFilter = NearestFilter;\n    tempMap.magFilter = NearestFilter;\n    tempMap.wrapS = ClampToEdgeWrapping;\n    tempMap.wrapT = ClampToEdgeWrapping;\n    var occlusionMap = new DataTexture(new Uint8Array(16 * 16 * 3), 16, 16, RGBAFormat);\n    occlusionMap.minFilter = NearestFilter;\n    occlusionMap.magFilter = NearestFilter;\n    occlusionMap.wrapS = ClampToEdgeWrapping;\n    occlusionMap.wrapT = ClampToEdgeWrapping;\n    var geometry2 = _Lensflare.Geometry;\n    var material1a = new RawShaderMaterial({\n      uniforms: {\n        scale: {\n          value: null\n        },\n        screenPosition: {\n          value: null\n        }\n      },\n      vertexShader: /* glsl */\"\\n\\n\\t\\t\\t\\tprecision highp float;\\n\\n\\t\\t\\t\\tuniform vec3 screenPosition;\\n\\t\\t\\t\\tuniform vec2 scale;\\n\\n\\t\\t\\t\\tattribute vec3 position;\\n\\n\\t\\t\\t\\tvoid main() {\\n\\n\\t\\t\\t\\t\\tgl_Position = vec4( position.xy * scale + screenPosition.xy, screenPosition.z, 1.0 );\\n\\n\\t\\t\\t\\t}\",\n      fragmentShader: /* glsl */\"\\n\\n\\t\\t\\t\\tprecision highp float;\\n\\n\\t\\t\\t\\tvoid main() {\\n\\n\\t\\t\\t\\t\\tgl_FragColor = vec4( 1.0, 0.0, 1.0, 1.0 );\\n\\n\\t\\t\\t\\t}\",\n      depthTest: true,\n      depthWrite: false,\n      transparent: false\n    });\n    var material1b = new RawShaderMaterial({\n      uniforms: {\n        map: {\n          value: tempMap\n        },\n        scale: {\n          value: null\n        },\n        screenPosition: {\n          value: null\n        }\n      },\n      vertexShader: /* glsl */\"\\n\\n\\t\\t\\t\\tprecision highp float;\\n\\n\\t\\t\\t\\tuniform vec3 screenPosition;\\n\\t\\t\\t\\tuniform vec2 scale;\\n\\n\\t\\t\\t\\tattribute vec3 position;\\n\\t\\t\\t\\tattribute vec2 uv;\\n\\n\\t\\t\\t\\tvarying vec2 vUV;\\n\\n\\t\\t\\t\\tvoid main() {\\n\\n\\t\\t\\t\\t\\tvUV = uv;\\n\\n\\t\\t\\t\\t\\tgl_Position = vec4( position.xy * scale + screenPosition.xy, screenPosition.z, 1.0 );\\n\\n\\t\\t\\t\\t}\",\n      fragmentShader: /* glsl */\"\\n\\n\\t\\t\\t\\tprecision highp float;\\n\\n\\t\\t\\t\\tuniform sampler2D map;\\n\\n\\t\\t\\t\\tvarying vec2 vUV;\\n\\n\\t\\t\\t\\tvoid main() {\\n\\n\\t\\t\\t\\t\\tgl_FragColor = texture2D( map, vUV );\\n\\n\\t\\t\\t\\t}\",\n      depthTest: false,\n      depthWrite: false,\n      transparent: false\n    });\n    var mesh1 = new Mesh(geometry2, material1a);\n    var elements = [];\n    var shader = LensflareElement.Shader;\n    var material2 = new RawShaderMaterial({\n      uniforms: {\n        map: {\n          value: null\n        },\n        occlusionMap: {\n          value: occlusionMap\n        },\n        color: {\n          value: new Color(16777215)\n        },\n        scale: {\n          value: new Vector2()\n        },\n        screenPosition: {\n          value: new Vector3()\n        }\n      },\n      vertexShader: shader.vertexShader,\n      fragmentShader: shader.fragmentShader,\n      blending: AdditiveBlending,\n      transparent: true,\n      depthWrite: false\n    });\n    var mesh2 = new Mesh(geometry2, material2);\n    _this.addElement = function (element) {\n      elements.push(element);\n    };\n    var scale = new Vector2();\n    var screenPositionPixels = new Vector2();\n    var validArea = new Box2();\n    var viewport = new Vector4();\n    _this.onBeforeRender = function (renderer, scene, camera) {\n      renderer.getCurrentViewport(viewport);\n      var invAspect = viewport.w / viewport.z;\n      var halfViewportWidth = viewport.z / 2;\n      var halfViewportHeight = viewport.w / 2;\n      var size = 16 / viewport.w;\n      scale.set(size * invAspect, size);\n      validArea.min.set(viewport.x, viewport.y);\n      validArea.max.set(viewport.x + (viewport.z - 16), viewport.y + (viewport.w - 16));\n      positionView.setFromMatrixPosition(this.matrixWorld);\n      positionView.applyMatrix4(camera.matrixWorldInverse);\n      if (positionView.z > 0) return;\n      positionScreen.copy(positionView).applyMatrix4(camera.projectionMatrix);\n      screenPositionPixels.x = viewport.x + positionScreen.x * halfViewportWidth + halfViewportWidth - 8;\n      screenPositionPixels.y = viewport.y + positionScreen.y * halfViewportHeight + halfViewportHeight - 8;\n      if (validArea.containsPoint(screenPositionPixels)) {\n        renderer.copyFramebufferToTexture(screenPositionPixels, tempMap);\n        var uniforms = material1a.uniforms;\n        uniforms[\"scale\"].value = scale;\n        uniforms[\"screenPosition\"].value = positionScreen;\n        renderer.renderBufferDirect(camera, null, geometry2, material1a, mesh1, null);\n        renderer.copyFramebufferToTexture(screenPositionPixels, occlusionMap);\n        uniforms = material1b.uniforms;\n        uniforms[\"scale\"].value = scale;\n        uniforms[\"screenPosition\"].value = positionScreen;\n        renderer.renderBufferDirect(camera, null, geometry2, material1b, mesh1, null);\n        var vecX = -positionScreen.x * 2;\n        var vecY = -positionScreen.y * 2;\n        for (var i = 0, l = elements.length; i < l; i++) {\n          var element = elements[i];\n          var uniforms2 = material2.uniforms;\n          uniforms2[\"color\"].value.copy(element.color);\n          uniforms2[\"map\"].value = element.texture;\n          uniforms2[\"screenPosition\"].value.x = positionScreen.x + vecX * element.distance;\n          uniforms2[\"screenPosition\"].value.y = positionScreen.y + vecY * element.distance;\n          size = element.size / viewport.w;\n          var invAspect2 = viewport.w / viewport.z;\n          uniforms2[\"scale\"].value.set(size * invAspect2, size);\n          material2.uniformsNeedUpdate = true;\n          renderer.renderBufferDirect(camera, null, geometry2, material2, mesh2, null);\n        }\n      }\n    };\n    _this.dispose = function () {\n      material1a.dispose();\n      material1b.dispose();\n      material2.dispose();\n      tempMap.dispose();\n      occlusionMap.dispose();\n      for (var i = 0, l = elements.length; i < l; i++) {\n        elements[i].texture.dispose();\n      }\n    };\n    return _this;\n  }\n  return _createClass(_Lensflare);\n}(Mesh);\nvar Lensflare = _Lensflare;\n__publicField(Lensflare, \"Geometry\", geometry);\nvar LensflareElement = /*#__PURE__*/_createClass(function LensflareElement(texture) {\n  var size = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n  var distance = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  var color = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : new Color(16777215);\n  _classCallCheck(this, LensflareElement);\n  this.texture = texture;\n  this.size = size;\n  this.distance = distance;\n  this.color = color;\n});\n__publicField(LensflareElement, \"Shader\", {\n  uniforms: {\n    map: {\n      value: null\n    },\n    occlusionMap: {\n      value: null\n    },\n    color: {\n      value: null\n    },\n    scale: {\n      value: null\n    },\n    screenPosition: {\n      value: null\n    }\n  },\n  vertexShader: /* glsl */\"\\n\\n\\t\\tprecision highp float;\\n\\n\\t\\tuniform vec3 screenPosition;\\n\\t\\tuniform vec2 scale;\\n\\n\\t\\tuniform sampler2D occlusionMap;\\n\\n\\t\\tattribute vec3 position;\\n\\t\\tattribute vec2 uv;\\n\\n\\t\\tvarying vec2 vUV;\\n\\t\\tvarying float vVisibility;\\n\\n\\t\\tvoid main() {\\n\\n\\t\\t\\tvUV = uv;\\n\\n\\t\\t\\tvec2 pos = position.xy;\\n\\n\\t\\t\\tvec4 visibility = texture2D( occlusionMap, vec2( 0.1, 0.1 ) );\\n\\t\\t\\tvisibility += texture2D( occlusionMap, vec2( 0.5, 0.1 ) );\\n\\t\\t\\tvisibility += texture2D( occlusionMap, vec2( 0.9, 0.1 ) );\\n\\t\\t\\tvisibility += texture2D( occlusionMap, vec2( 0.9, 0.5 ) );\\n\\t\\t\\tvisibility += texture2D( occlusionMap, vec2( 0.9, 0.9 ) );\\n\\t\\t\\tvisibility += texture2D( occlusionMap, vec2( 0.5, 0.9 ) );\\n\\t\\t\\tvisibility += texture2D( occlusionMap, vec2( 0.1, 0.9 ) );\\n\\t\\t\\tvisibility += texture2D( occlusionMap, vec2( 0.1, 0.5 ) );\\n\\t\\t\\tvisibility += texture2D( occlusionMap, vec2( 0.5, 0.5 ) );\\n\\n\\t\\t\\tvVisibility =        visibility.r / 9.0;\\n\\t\\t\\tvVisibility *= 1.0 - visibility.g / 9.0;\\n\\t\\t\\tvVisibility *=       visibility.b / 9.0;\\n\\n\\t\\t\\tgl_Position = vec4( ( pos * scale + screenPosition.xy ).xy, screenPosition.z, 1.0 );\\n\\n\\t\\t}\",\n  fragmentShader: /* glsl */\"\\n\\n\\t\\tprecision highp float;\\n\\n\\t\\tuniform sampler2D map;\\n\\t\\tuniform vec3 color;\\n\\n\\t\\tvarying vec2 vUV;\\n\\t\\tvarying float vVisibility;\\n\\n\\t\\tvoid main() {\\n\\n\\t\\t\\tvec4 texture = texture2D( map, vUV );\\n\\t\\t\\ttexture.a *= vVisibility;\\n\\t\\t\\tgl_FragColor = texture;\\n\\t\\t\\tgl_FragColor.rgb *= color;\\n\\n\\t\\t}\"\n});\nexport { Lensflare, LensflareElement };","map":{"version":3,"names":["geometry","BufferGeometry","float32Array","Float32Array","interleavedBuffer","InterleavedBuffer","setIndex","setAttribute","InterleavedBufferAttribute","_Lensflare","_Mesh","_inherits","_super","_createSuper","_this","_classCallCheck","call","Geometry","MeshBasicMaterial","opacity","transparent","isLensflare","type","frustumCulled","renderOrder","Infinity","positionScreen","Vector3","positionView","tempMap","DataTexture","Uint8Array","RGBAFormat","minFilter","NearestFilter","magFilter","wrapS","ClampToEdgeWrapping","wrapT","occlusionMap","geometry2","material1a","RawShaderMaterial","uniforms","scale","value","screenPosition","vertexShader","fragmentShader","depthTest","depthWrite","material1b","map","mesh1","Mesh","elements","shader","LensflareElement","Shader","material2","color","Color","Vector2","blending","AdditiveBlending","mesh2","addElement","element","push","screenPositionPixels","validArea","Box2","viewport","Vector4","onBeforeRender","renderer","scene","camera","getCurrentViewport","invAspect","w","z","halfViewportWidth","halfViewportHeight","size","set","min","x","y","max","setFromMatrixPosition","matrixWorld","applyMatrix4","matrixWorldInverse","copy","projectionMatrix","containsPoint","copyFramebufferToTexture","renderBufferDirect","vecX","vecY","i","l","length","uniforms2","texture","distance","invAspect2","uniformsNeedUpdate","dispose","_createClass","Lensflare","__publicField","arguments","undefined"],"sources":["C:\\Users\\Nayyu\\Desktop\\skibidai-public-build\\node_modules\\src\\objects\\Lensflare.js"],"sourcesContent":["import {\n  AdditiveBlending,\n  Box2,\n  BufferGeometry,\n  ClampToEdgeWrapping,\n  Color,\n  DataTexture,\n  InterleavedBuffer,\n  InterleavedBufferAttribute,\n  Mesh,\n  MeshBasicMaterial,\n  NearestFilter,\n  RGBAFormat,\n  RawShaderMaterial,\n  Vector2,\n  Vector3,\n  Vector4,\n} from 'three'\n\nconst geometry = new BufferGeometry()\n\nconst float32Array = new Float32Array([-1, -1, 0, 0, 0, 1, -1, 0, 1, 0, 1, 1, 0, 1, 1, -1, 1, 0, 0, 1])\n\nconst interleavedBuffer = new InterleavedBuffer(float32Array, 5)\n\ngeometry.setIndex([0, 1, 2, 0, 2, 3])\ngeometry.setAttribute('position', new InterleavedBufferAttribute(interleavedBuffer, 3, 0, false))\ngeometry.setAttribute('uv', new InterleavedBufferAttribute(interleavedBuffer, 2, 3, false))\n\nclass Lensflare extends Mesh {\n  static Geometry = geometry\n\n  constructor() {\n    super(Lensflare.Geometry, new MeshBasicMaterial({ opacity: 0, transparent: true }))\n\n    this.isLensflare = true\n\n    this.type = 'Lensflare'\n    this.frustumCulled = false\n    this.renderOrder = Infinity\n\n    //\n\n    const positionScreen = new Vector3()\n    const positionView = new Vector3()\n\n    // textures\n    const tempMap = new DataTexture(new Uint8Array(16 * 16 * 3), 16, 16, RGBAFormat)\n    tempMap.minFilter = NearestFilter\n    tempMap.magFilter = NearestFilter\n    tempMap.wrapS = ClampToEdgeWrapping\n    tempMap.wrapT = ClampToEdgeWrapping\n\n    const occlusionMap = new DataTexture(new Uint8Array(16 * 16 * 3), 16, 16, RGBAFormat)\n    occlusionMap.minFilter = NearestFilter\n    occlusionMap.magFilter = NearestFilter\n    occlusionMap.wrapS = ClampToEdgeWrapping\n    occlusionMap.wrapT = ClampToEdgeWrapping\n\n    // material\n\n    const geometry = Lensflare.Geometry\n\n    const material1a = new RawShaderMaterial({\n      uniforms: {\n        scale: { value: null },\n        screenPosition: { value: null },\n      },\n      vertexShader: /* glsl */ `\n\n\t\t\t\tprecision highp float;\n\n\t\t\t\tuniform vec3 screenPosition;\n\t\t\t\tuniform vec2 scale;\n\n\t\t\t\tattribute vec3 position;\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tgl_Position = vec4( position.xy * scale + screenPosition.xy, screenPosition.z, 1.0 );\n\n\t\t\t\t}`,\n\n      fragmentShader: /* glsl */ `\n\n\t\t\t\tprecision highp float;\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tgl_FragColor = vec4( 1.0, 0.0, 1.0, 1.0 );\n\n\t\t\t\t}`,\n      depthTest: true,\n      depthWrite: false,\n      transparent: false,\n    })\n\n    const material1b = new RawShaderMaterial({\n      uniforms: {\n        map: { value: tempMap },\n        scale: { value: null },\n        screenPosition: { value: null },\n      },\n      vertexShader: /* glsl */ `\n\n\t\t\t\tprecision highp float;\n\n\t\t\t\tuniform vec3 screenPosition;\n\t\t\t\tuniform vec2 scale;\n\n\t\t\t\tattribute vec3 position;\n\t\t\t\tattribute vec2 uv;\n\n\t\t\t\tvarying vec2 vUV;\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tvUV = uv;\n\n\t\t\t\t\tgl_Position = vec4( position.xy * scale + screenPosition.xy, screenPosition.z, 1.0 );\n\n\t\t\t\t}`,\n\n      fragmentShader: /* glsl */ `\n\n\t\t\t\tprecision highp float;\n\n\t\t\t\tuniform sampler2D map;\n\n\t\t\t\tvarying vec2 vUV;\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tgl_FragColor = texture2D( map, vUV );\n\n\t\t\t\t}`,\n      depthTest: false,\n      depthWrite: false,\n      transparent: false,\n    })\n\n    // the following object is used for occlusionMap generation\n\n    const mesh1 = new Mesh(geometry, material1a)\n\n    //\n\n    const elements = []\n\n    const shader = LensflareElement.Shader\n\n    const material2 = new RawShaderMaterial({\n      uniforms: {\n        map: { value: null },\n        occlusionMap: { value: occlusionMap },\n        color: { value: new Color(0xffffff) },\n        scale: { value: new Vector2() },\n        screenPosition: { value: new Vector3() },\n      },\n      vertexShader: shader.vertexShader,\n      fragmentShader: shader.fragmentShader,\n      blending: AdditiveBlending,\n      transparent: true,\n      depthWrite: false,\n    })\n\n    const mesh2 = new Mesh(geometry, material2)\n\n    this.addElement = function (element) {\n      elements.push(element)\n    }\n\n    //\n\n    const scale = new Vector2()\n    const screenPositionPixels = new Vector2()\n    const validArea = new Box2()\n    const viewport = new Vector4()\n\n    this.onBeforeRender = function (renderer, scene, camera) {\n      renderer.getCurrentViewport(viewport)\n\n      const invAspect = viewport.w / viewport.z\n      const halfViewportWidth = viewport.z / 2.0\n      const halfViewportHeight = viewport.w / 2.0\n\n      let size = 16 / viewport.w\n      scale.set(size * invAspect, size)\n\n      validArea.min.set(viewport.x, viewport.y)\n      validArea.max.set(viewport.x + (viewport.z - 16), viewport.y + (viewport.w - 16))\n\n      // calculate position in screen space\n\n      positionView.setFromMatrixPosition(this.matrixWorld)\n      positionView.applyMatrix4(camera.matrixWorldInverse)\n\n      if (positionView.z > 0) return // lensflare is behind the camera\n\n      positionScreen.copy(positionView).applyMatrix4(camera.projectionMatrix)\n\n      // horizontal and vertical coordinate of the lower left corner of the pixels to copy\n\n      screenPositionPixels.x = viewport.x + positionScreen.x * halfViewportWidth + halfViewportWidth - 8\n      screenPositionPixels.y = viewport.y + positionScreen.y * halfViewportHeight + halfViewportHeight - 8\n\n      // screen cull\n\n      if (validArea.containsPoint(screenPositionPixels)) {\n        // save current RGB to temp texture\n\n        renderer.copyFramebufferToTexture(screenPositionPixels, tempMap)\n\n        // render pink quad\n\n        let uniforms = material1a.uniforms\n        uniforms['scale'].value = scale\n        uniforms['screenPosition'].value = positionScreen\n\n        renderer.renderBufferDirect(camera, null, geometry, material1a, mesh1, null)\n\n        // copy result to occlusionMap\n\n        renderer.copyFramebufferToTexture(screenPositionPixels, occlusionMap)\n\n        // restore graphics\n\n        uniforms = material1b.uniforms\n        uniforms['scale'].value = scale\n        uniforms['screenPosition'].value = positionScreen\n\n        renderer.renderBufferDirect(camera, null, geometry, material1b, mesh1, null)\n\n        // render elements\n\n        const vecX = -positionScreen.x * 2\n        const vecY = -positionScreen.y * 2\n\n        for (let i = 0, l = elements.length; i < l; i++) {\n          const element = elements[i]\n\n          const uniforms = material2.uniforms\n\n          uniforms['color'].value.copy(element.color)\n          uniforms['map'].value = element.texture\n          uniforms['screenPosition'].value.x = positionScreen.x + vecX * element.distance\n          uniforms['screenPosition'].value.y = positionScreen.y + vecY * element.distance\n\n          size = element.size / viewport.w\n          const invAspect = viewport.w / viewport.z\n\n          uniforms['scale'].value.set(size * invAspect, size)\n\n          material2.uniformsNeedUpdate = true\n\n          renderer.renderBufferDirect(camera, null, geometry, material2, mesh2, null)\n        }\n      }\n    }\n\n    this.dispose = function () {\n      material1a.dispose()\n      material1b.dispose()\n      material2.dispose()\n\n      tempMap.dispose()\n      occlusionMap.dispose()\n\n      for (let i = 0, l = elements.length; i < l; i++) {\n        elements[i].texture.dispose()\n      }\n    }\n  }\n}\n\n//\n\nclass LensflareElement {\n  static Shader = {\n    uniforms: {\n      map: { value: null },\n      occlusionMap: { value: null },\n      color: { value: null },\n      scale: { value: null },\n      screenPosition: { value: null },\n    },\n\n    vertexShader: /* glsl */ `\n\n\t\tprecision highp float;\n\n\t\tuniform vec3 screenPosition;\n\t\tuniform vec2 scale;\n\n\t\tuniform sampler2D occlusionMap;\n\n\t\tattribute vec3 position;\n\t\tattribute vec2 uv;\n\n\t\tvarying vec2 vUV;\n\t\tvarying float vVisibility;\n\n\t\tvoid main() {\n\n\t\t\tvUV = uv;\n\n\t\t\tvec2 pos = position.xy;\n\n\t\t\tvec4 visibility = texture2D( occlusionMap, vec2( 0.1, 0.1 ) );\n\t\t\tvisibility += texture2D( occlusionMap, vec2( 0.5, 0.1 ) );\n\t\t\tvisibility += texture2D( occlusionMap, vec2( 0.9, 0.1 ) );\n\t\t\tvisibility += texture2D( occlusionMap, vec2( 0.9, 0.5 ) );\n\t\t\tvisibility += texture2D( occlusionMap, vec2( 0.9, 0.9 ) );\n\t\t\tvisibility += texture2D( occlusionMap, vec2( 0.5, 0.9 ) );\n\t\t\tvisibility += texture2D( occlusionMap, vec2( 0.1, 0.9 ) );\n\t\t\tvisibility += texture2D( occlusionMap, vec2( 0.1, 0.5 ) );\n\t\t\tvisibility += texture2D( occlusionMap, vec2( 0.5, 0.5 ) );\n\n\t\t\tvVisibility =        visibility.r / 9.0;\n\t\t\tvVisibility *= 1.0 - visibility.g / 9.0;\n\t\t\tvVisibility *=       visibility.b / 9.0;\n\n\t\t\tgl_Position = vec4( ( pos * scale + screenPosition.xy ).xy, screenPosition.z, 1.0 );\n\n\t\t}`,\n\n    fragmentShader: /* glsl */ `\n\n\t\tprecision highp float;\n\n\t\tuniform sampler2D map;\n\t\tuniform vec3 color;\n\n\t\tvarying vec2 vUV;\n\t\tvarying float vVisibility;\n\n\t\tvoid main() {\n\n\t\t\tvec4 texture = texture2D( map, vUV );\n\t\t\ttexture.a *= vVisibility;\n\t\t\tgl_FragColor = texture;\n\t\t\tgl_FragColor.rgb *= color;\n\n\t\t}`,\n  }\n\n  constructor(texture, size = 1, distance = 0, color = new Color(0xffffff)) {\n    this.texture = texture\n    this.size = size\n    this.distance = distance\n    this.color = color\n  }\n}\n\nexport { Lensflare, LensflareElement }\n"],"mappings":";;;;;;;;;;;;;;;;;;AAmBA,IAAMA,QAAA,GAAW,IAAIC,cAAA,CAAgB;AAErC,IAAMC,YAAA,GAAe,IAAIC,YAAA,CAAa,CAAC,IAAI,IAAI,GAAG,GAAG,GAAG,GAAG,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,GAAG,GAAG,GAAG,CAAC,CAAC;AAEtG,IAAMC,iBAAA,GAAoB,IAAIC,iBAAA,CAAkBH,YAAA,EAAc,CAAC;AAE/DF,QAAA,CAASM,QAAA,CAAS,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC;AACpCN,QAAA,CAASO,YAAA,CAAa,YAAY,IAAIC,0BAAA,CAA2BJ,iBAAA,EAAmB,GAAG,GAAG,KAAK,CAAC;AAChGJ,QAAA,CAASO,YAAA,CAAa,MAAM,IAAIC,0BAAA,CAA2BJ,iBAAA,EAAmB,GAAG,GAAG,KAAK,CAAC;AAE1F,IAAMK,UAAA,0BAAAC,KAAA;EAAAC,SAAA,CAAAF,UAAA,EAAAC,KAAA;EAAA,IAAAE,MAAA,GAAAC,YAAA,CAAAJ,UAAA;EAGJ,SAAAA,WAAA,EAAc;IAAA,IAAAK,KAAA;IAAAC,eAAA,OAAAN,UAAA;IACZK,KAAA,GAAAF,MAAA,CAAAI,IAAA,OAAMP,UAAA,CAAUQ,QAAA,EAAU,IAAIC,iBAAA,CAAkB;MAAEC,OAAA,EAAS;MAAGC,WAAA,EAAa;IAAI,CAAE,CAAC;IAElFN,KAAA,CAAKO,WAAA,GAAc;IAEnBP,KAAA,CAAKQ,IAAA,GAAO;IACZR,KAAA,CAAKS,aAAA,GAAgB;IACrBT,KAAA,CAAKU,WAAA,GAAcC,QAAA;IAInB,IAAMC,cAAA,GAAiB,IAAIC,OAAA,CAAS;IACpC,IAAMC,YAAA,GAAe,IAAID,OAAA,CAAS;IAGlC,IAAME,OAAA,GAAU,IAAIC,WAAA,CAAY,IAAIC,UAAA,CAAW,KAAK,KAAK,CAAC,GAAG,IAAI,IAAIC,UAAU;IAC/EH,OAAA,CAAQI,SAAA,GAAYC,aAAA;IACpBL,OAAA,CAAQM,SAAA,GAAYD,aAAA;IACpBL,OAAA,CAAQO,KAAA,GAAQC,mBAAA;IAChBR,OAAA,CAAQS,KAAA,GAAQD,mBAAA;IAEhB,IAAME,YAAA,GAAe,IAAIT,WAAA,CAAY,IAAIC,UAAA,CAAW,KAAK,KAAK,CAAC,GAAG,IAAI,IAAIC,UAAU;IACpFO,YAAA,CAAaN,SAAA,GAAYC,aAAA;IACzBK,YAAA,CAAaJ,SAAA,GAAYD,aAAA;IACzBK,YAAA,CAAaH,KAAA,GAAQC,mBAAA;IACrBE,YAAA,CAAaD,KAAA,GAAQD,mBAAA;IAIrB,IAAMG,SAAA,GAAW/B,UAAA,CAAUQ,QAAA;IAE3B,IAAMwB,UAAA,GAAa,IAAIC,iBAAA,CAAkB;MACvCC,QAAA,EAAU;QACRC,KAAA,EAAO;UAAEC,KAAA,EAAO;QAAM;QACtBC,cAAA,EAAgB;UAAED,KAAA,EAAO;QAAM;MAChC;MACDE,YAAA,kSAAyB;MAezBC,cAAA,8IAA2B;MAS3BC,SAAA,EAAW;MACXC,UAAA,EAAY;MACZ9B,WAAA,EAAa;IACnB,CAAK;IAED,IAAM+B,UAAA,GAAa,IAAIT,iBAAA,CAAkB;MACvCC,QAAA,EAAU;QACRS,GAAA,EAAK;UAAEP,KAAA,EAAOhB;QAAS;QACvBe,KAAA,EAAO;UAAEC,KAAA,EAAO;QAAM;QACtBC,cAAA,EAAgB;UAAED,KAAA,EAAO;QAAM;MAChC;MACDE,YAAA,kXAAyB;MAoBzBC,cAAA,wMAA2B;MAa3BC,SAAA,EAAW;MACXC,UAAA,EAAY;MACZ9B,WAAA,EAAa;IACnB,CAAK;IAID,IAAMiC,KAAA,GAAQ,IAAIC,IAAA,CAAKd,SAAA,EAAUC,UAAU;IAI3C,IAAMc,QAAA,GAAW,EAAE;IAEnB,IAAMC,MAAA,GAASC,gBAAA,CAAiBC,MAAA;IAEhC,IAAMC,SAAA,GAAY,IAAIjB,iBAAA,CAAkB;MACtCC,QAAA,EAAU;QACRS,GAAA,EAAK;UAAEP,KAAA,EAAO;QAAM;QACpBN,YAAA,EAAc;UAAEM,KAAA,EAAON;QAAc;QACrCqB,KAAA,EAAO;UAAEf,KAAA,EAAO,IAAIgB,KAAA,CAAM,QAAQ;QAAG;QACrCjB,KAAA,EAAO;UAAEC,KAAA,EAAO,IAAIiB,OAAA;QAAW;QAC/BhB,cAAA,EAAgB;UAAED,KAAA,EAAO,IAAIlB,OAAA;QAAW;MACzC;MACDoB,YAAA,EAAcS,MAAA,CAAOT,YAAA;MACrBC,cAAA,EAAgBQ,MAAA,CAAOR,cAAA;MACvBe,QAAA,EAAUC,gBAAA;MACV5C,WAAA,EAAa;MACb8B,UAAA,EAAY;IAClB,CAAK;IAED,IAAMe,KAAA,GAAQ,IAAIX,IAAA,CAAKd,SAAA,EAAUmB,SAAS;IAE1C7C,KAAA,CAAKoD,UAAA,GAAa,UAAUC,OAAA,EAAS;MACnCZ,QAAA,CAASa,IAAA,CAAKD,OAAO;IACtB;IAID,IAAMvB,KAAA,GAAQ,IAAIkB,OAAA,CAAS;IAC3B,IAAMO,oBAAA,GAAuB,IAAIP,OAAA,CAAS;IAC1C,IAAMQ,SAAA,GAAY,IAAIC,IAAA,CAAM;IAC5B,IAAMC,QAAA,GAAW,IAAIC,OAAA,CAAS;IAE9B3D,KAAA,CAAK4D,cAAA,GAAiB,UAAUC,QAAA,EAAUC,KAAA,EAAOC,MAAA,EAAQ;MACvDF,QAAA,CAASG,kBAAA,CAAmBN,QAAQ;MAEpC,IAAMO,SAAA,GAAYP,QAAA,CAASQ,CAAA,GAAIR,QAAA,CAASS,CAAA;MACxC,IAAMC,iBAAA,GAAoBV,QAAA,CAASS,CAAA,GAAI;MACvC,IAAME,kBAAA,GAAqBX,QAAA,CAASQ,CAAA,GAAI;MAExC,IAAII,IAAA,GAAO,KAAKZ,QAAA,CAASQ,CAAA;MACzBpC,KAAA,CAAMyC,GAAA,CAAID,IAAA,GAAOL,SAAA,EAAWK,IAAI;MAEhCd,SAAA,CAAUgB,GAAA,CAAID,GAAA,CAAIb,QAAA,CAASe,CAAA,EAAGf,QAAA,CAASgB,CAAC;MACxClB,SAAA,CAAUmB,GAAA,CAAIJ,GAAA,CAAIb,QAAA,CAASe,CAAA,IAAKf,QAAA,CAASS,CAAA,GAAI,KAAKT,QAAA,CAASgB,CAAA,IAAKhB,QAAA,CAASQ,CAAA,GAAI,GAAG;MAIhFpD,YAAA,CAAa8D,qBAAA,CAAsB,KAAKC,WAAW;MACnD/D,YAAA,CAAagE,YAAA,CAAaf,MAAA,CAAOgB,kBAAkB;MAEnD,IAAIjE,YAAA,CAAaqD,CAAA,GAAI,GAAG;MAExBvD,cAAA,CAAeoE,IAAA,CAAKlE,YAAY,EAAEgE,YAAA,CAAaf,MAAA,CAAOkB,gBAAgB;MAItE1B,oBAAA,CAAqBkB,CAAA,GAAIf,QAAA,CAASe,CAAA,GAAI7D,cAAA,CAAe6D,CAAA,GAAIL,iBAAA,GAAoBA,iBAAA,GAAoB;MACjGb,oBAAA,CAAqBmB,CAAA,GAAIhB,QAAA,CAASgB,CAAA,GAAI9D,cAAA,CAAe8D,CAAA,GAAIL,kBAAA,GAAqBA,kBAAA,GAAqB;MAInG,IAAIb,SAAA,CAAU0B,aAAA,CAAc3B,oBAAoB,GAAG;QAGjDM,QAAA,CAASsB,wBAAA,CAAyB5B,oBAAA,EAAsBxC,OAAO;QAI/D,IAAIc,QAAA,GAAWF,UAAA,CAAWE,QAAA;QAC1BA,QAAA,CAAS,OAAO,EAAEE,KAAA,GAAQD,KAAA;QAC1BD,QAAA,CAAS,gBAAgB,EAAEE,KAAA,GAAQnB,cAAA;QAEnCiD,QAAA,CAASuB,kBAAA,CAAmBrB,MAAA,EAAQ,MAAMrC,SAAA,EAAUC,UAAA,EAAYY,KAAA,EAAO,IAAI;QAI3EsB,QAAA,CAASsB,wBAAA,CAAyB5B,oBAAA,EAAsB9B,YAAY;QAIpEI,QAAA,GAAWQ,UAAA,CAAWR,QAAA;QACtBA,QAAA,CAAS,OAAO,EAAEE,KAAA,GAAQD,KAAA;QAC1BD,QAAA,CAAS,gBAAgB,EAAEE,KAAA,GAAQnB,cAAA;QAEnCiD,QAAA,CAASuB,kBAAA,CAAmBrB,MAAA,EAAQ,MAAMrC,SAAA,EAAUW,UAAA,EAAYE,KAAA,EAAO,IAAI;QAI3E,IAAM8C,IAAA,GAAO,CAACzE,cAAA,CAAe6D,CAAA,GAAI;QACjC,IAAMa,IAAA,GAAO,CAAC1E,cAAA,CAAe8D,CAAA,GAAI;QAEjC,SAASa,CAAA,GAAI,GAAGC,CAAA,GAAI/C,QAAA,CAASgD,MAAA,EAAQF,CAAA,GAAIC,CAAA,EAAGD,CAAA,IAAK;UAC/C,IAAMlC,OAAA,GAAUZ,QAAA,CAAS8C,CAAC;UAE1B,IAAMG,SAAA,GAAW7C,SAAA,CAAUhB,QAAA;UAE3B6D,SAAA,CAAS,OAAO,EAAE3D,KAAA,CAAMiD,IAAA,CAAK3B,OAAA,CAAQP,KAAK;UAC1C4C,SAAA,CAAS,KAAK,EAAE3D,KAAA,GAAQsB,OAAA,CAAQsC,OAAA;UAChCD,SAAA,CAAS,gBAAgB,EAAE3D,KAAA,CAAM0C,CAAA,GAAI7D,cAAA,CAAe6D,CAAA,GAAIY,IAAA,GAAOhC,OAAA,CAAQuC,QAAA;UACvEF,SAAA,CAAS,gBAAgB,EAAE3D,KAAA,CAAM2C,CAAA,GAAI9D,cAAA,CAAe8D,CAAA,GAAIY,IAAA,GAAOjC,OAAA,CAAQuC,QAAA;UAEvEtB,IAAA,GAAOjB,OAAA,CAAQiB,IAAA,GAAOZ,QAAA,CAASQ,CAAA;UAC/B,IAAM2B,UAAA,GAAYnC,QAAA,CAASQ,CAAA,GAAIR,QAAA,CAASS,CAAA;UAExCuB,SAAA,CAAS,OAAO,EAAE3D,KAAA,CAAMwC,GAAA,CAAID,IAAA,GAAOuB,UAAA,EAAWvB,IAAI;UAElDzB,SAAA,CAAUiD,kBAAA,GAAqB;UAE/BjC,QAAA,CAASuB,kBAAA,CAAmBrB,MAAA,EAAQ,MAAMrC,SAAA,EAAUmB,SAAA,EAAWM,KAAA,EAAO,IAAI;QAC3E;MACF;IACF;IAEDnD,KAAA,CAAK+F,OAAA,GAAU,YAAY;MACzBpE,UAAA,CAAWoE,OAAA,CAAS;MACpB1D,UAAA,CAAW0D,OAAA,CAAS;MACpBlD,SAAA,CAAUkD,OAAA,CAAS;MAEnBhF,OAAA,CAAQgF,OAAA,CAAS;MACjBtE,YAAA,CAAasE,OAAA,CAAS;MAEtB,SAASR,CAAA,GAAI,GAAGC,CAAA,GAAI/C,QAAA,CAASgD,MAAA,EAAQF,CAAA,GAAIC,CAAA,EAAGD,CAAA,IAAK;QAC/C9C,QAAA,CAAS8C,CAAC,EAAEI,OAAA,CAAQI,OAAA,CAAS;MAC9B;IACF;IAAA,OAAA/F,KAAA;EACF;EAAA,OAAAgG,YAAA,CAAArG,UAAA;AAAA,EAnPqB6C,IAAA,CAoPxB;AApPA,IAAMyD,SAAA,GAANtG,UAAA;AACEuG,aAAA,CADID,SAAA,EACG,YAAW/G,QAAA;AAAA,IAuPdyD,gBAAA,gBAAAqD,YAAA,CAqEJ,SAAArD,iBAAYgD,OAAA,EAA8D;EAAA,IAArDrB,IAAA,GAAA6B,SAAA,CAAAV,MAAA,QAAAU,SAAA,QAAAC,SAAA,GAAAD,SAAA,MAAO;EAAA,IAAGP,QAAA,GAAAO,SAAA,CAAAV,MAAA,QAAAU,SAAA,QAAAC,SAAA,GAAAD,SAAA,MAAW;EAAA,IAAGrD,KAAA,GAAAqD,SAAA,CAAAV,MAAA,QAAAU,SAAA,QAAAC,SAAA,GAAAD,SAAA,MAAQ,IAAIpD,KAAA,CAAM,QAAQ;EAAA9C,eAAA,OAAA0C,gBAAA;EACrE,KAAKgD,OAAA,GAAUA,OAAA;EACf,KAAKrB,IAAA,GAAOA,IAAA;EACZ,KAAKsB,QAAA,GAAWA,QAAA;EAChB,KAAK9C,KAAA,GAAQA,KAAA;AACd;AAzEDoD,aAAA,CADIvD,gBAAA,EACG,UAAS;EACdd,QAAA,EAAU;IACRS,GAAA,EAAK;MAAEP,KAAA,EAAO;IAAM;IACpBN,YAAA,EAAc;MAAEM,KAAA,EAAO;IAAM;IAC7Be,KAAA,EAAO;MAAEf,KAAA,EAAO;IAAM;IACtBD,KAAA,EAAO;MAAEC,KAAA,EAAO;IAAM;IACtBC,cAAA,EAAgB;MAAED,KAAA,EAAO;IAAM;EAChC;EAEDE,YAAA,2pCAAyB;EAuCzBC,cAAA;AAkBD"},"metadata":{},"sourceType":"module","externalDependencies":[]}