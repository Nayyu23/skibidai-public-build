{"ast":null,"code":"import _slicedToArray from \"C:/Users/Nayyu/Desktop/skibidai-public-build/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _classCallCheck from \"C:/Users/Nayyu/Desktop/skibidai-public-build/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Nayyu/Desktop/skibidai-public-build/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"C:/Users/Nayyu/Desktop/skibidai-public-build/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/Nayyu/Desktop/skibidai-public-build/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { Loader, FileLoader, MeshStandardMaterial, Color, TextureLoader, Object3D, Matrix4, BufferGeometryLoader, DirectionalLight, PointLight, RectAreaLight, Vector3, SpotLight, CanvasTexture, LinearFilter, ClampToEdgeWrapping, SpriteMaterial, Sprite, LineBasicMaterial, Line, Mesh, PointsMaterial, Points } from \"three\";\nvar _taskCache = /* @__PURE__ */new WeakMap();\nvar Rhino3dmLoader = /*#__PURE__*/function (_Loader) {\n  _inherits(Rhino3dmLoader, _Loader);\n  var _super = _createSuper(Rhino3dmLoader);\n  function Rhino3dmLoader(manager) {\n    var _this;\n    _classCallCheck(this, Rhino3dmLoader);\n    _this = _super.call(this, manager);\n    _this.libraryPath = \"\";\n    _this.libraryPending = null;\n    _this.libraryBinary = null;\n    _this.libraryConfig = {};\n    _this.url = \"\";\n    _this.workerLimit = 4;\n    _this.workerPool = [];\n    _this.workerNextTaskID = 1;\n    _this.workerSourceURL = \"\";\n    _this.workerConfig = {};\n    _this.materials = [];\n    return _this;\n  }\n  _createClass(Rhino3dmLoader, [{\n    key: \"setLibraryPath\",\n    value: function setLibraryPath(path) {\n      this.libraryPath = path;\n      return this;\n    }\n  }, {\n    key: \"setWorkerLimit\",\n    value: function setWorkerLimit(workerLimit) {\n      this.workerLimit = workerLimit;\n      return this;\n    }\n  }, {\n    key: \"load\",\n    value: function load(url, onLoad, onProgress, onError) {\n      var _this2 = this;\n      var loader = new FileLoader(this.manager);\n      loader.setPath(this.path);\n      loader.setResponseType(\"arraybuffer\");\n      loader.setRequestHeader(this.requestHeader);\n      this.url = url;\n      loader.load(url, function (buffer) {\n        if (_taskCache.has(buffer)) {\n          var cachedTask = _taskCache.get(buffer);\n          return cachedTask.promise.then(onLoad).catch(onError);\n        }\n        _this2.decodeObjects(buffer, url).then(onLoad).catch(onError);\n      }, onProgress, onError);\n    }\n  }, {\n    key: \"debug\",\n    value: function debug() {\n      console.log(\"Task load: \", this.workerPool.map(function (worker) {\n        return worker._taskLoad;\n      }));\n    }\n  }, {\n    key: \"decodeObjects\",\n    value: function decodeObjects(buffer, url) {\n      var _this3 = this;\n      var worker;\n      var taskID;\n      var taskCost = buffer.byteLength;\n      var objectPending = this._getWorker(taskCost).then(function (_worker) {\n        worker = _worker;\n        taskID = _this3.workerNextTaskID++;\n        return new Promise(function (resolve, reject) {\n          worker._callbacks[taskID] = {\n            resolve: resolve,\n            reject: reject\n          };\n          worker.postMessage({\n            type: \"decode\",\n            id: taskID,\n            buffer: buffer\n          }, [buffer]);\n        });\n      }).then(function (message) {\n        return _this3._createGeometry(message.data);\n      });\n      objectPending.catch(function () {\n        return true;\n      }).then(function () {\n        if (worker && taskID) {\n          _this3._releaseTask(worker, taskID);\n        }\n      });\n      _taskCache.set(buffer, {\n        url: url,\n        promise: objectPending\n      });\n      return objectPending;\n    }\n  }, {\n    key: \"parse\",\n    value: function parse(data, onLoad, onError) {\n      this.decodeObjects(data, \"\").then(onLoad).catch(onError);\n    }\n  }, {\n    key: \"_compareMaterials\",\n    value: function _compareMaterials(material) {\n      var mat = {};\n      mat.name = material.name;\n      mat.color = {};\n      mat.color.r = material.color.r;\n      mat.color.g = material.color.g;\n      mat.color.b = material.color.b;\n      mat.type = material.type;\n      for (var i = 0; i < this.materials.length; i++) {\n        var m = this.materials[i];\n        var _mat = {};\n        _mat.name = m.name;\n        _mat.color = {};\n        _mat.color.r = m.color.r;\n        _mat.color.g = m.color.g;\n        _mat.color.b = m.color.b;\n        _mat.type = m.type;\n        if (JSON.stringify(mat) === JSON.stringify(_mat)) {\n          return m;\n        }\n      }\n      this.materials.push(material);\n      return material;\n    }\n  }, {\n    key: \"_createMaterial\",\n    value: function _createMaterial(material) {\n      if (material === void 0) {\n        return new MeshStandardMaterial({\n          color: new Color(1, 1, 1),\n          metalness: 0.8,\n          name: \"default\",\n          side: 2\n        });\n      }\n      var _diffuseColor = material.diffuseColor;\n      var diffusecolor = new Color(_diffuseColor.r / 255, _diffuseColor.g / 255, _diffuseColor.b / 255);\n      if (_diffuseColor.r === 0 && _diffuseColor.g === 0 && _diffuseColor.b === 0) {\n        diffusecolor.r = 1;\n        diffusecolor.g = 1;\n        diffusecolor.b = 1;\n      }\n      var mat = new MeshStandardMaterial({\n        color: diffusecolor,\n        name: material.name,\n        side: 2,\n        transparent: material.transparency > 0 ? true : false,\n        opacity: 1 - material.transparency\n      });\n      var textureLoader = new TextureLoader();\n      for (var i = 0; i < material.textures.length; i++) {\n        var texture = material.textures[i];\n        if (texture.image !== null) {\n          var map = textureLoader.load(texture.image);\n          switch (texture.type) {\n            case \"Diffuse\":\n              mat.map = map;\n              break;\n            case \"Bump\":\n              mat.bumpMap = map;\n              break;\n            case \"Transparency\":\n              mat.alphaMap = map;\n              mat.transparent = true;\n              break;\n            case \"Emap\":\n              mat.envMap = map;\n              break;\n          }\n        }\n      }\n      return mat;\n    }\n  }, {\n    key: \"_createGeometry\",\n    value: function _createGeometry(data) {\n      var object = new Object3D();\n      var instanceDefinitionObjects = [];\n      var instanceDefinitions = [];\n      var instanceReferences = [];\n      object.userData[\"layers\"] = data.layers;\n      object.userData[\"groups\"] = data.groups;\n      object.userData[\"settings\"] = data.settings;\n      object.userData[\"objectType\"] = \"File3dm\";\n      object.userData[\"materials\"] = null;\n      object.name = this.url;\n      var objects = data.objects;\n      var materials = data.materials;\n      for (var i = 0; i < objects.length; i++) {\n        var obj = objects[i];\n        var attributes = obj.attributes;\n        switch (obj.objectType) {\n          case \"InstanceDefinition\":\n            instanceDefinitions.push(obj);\n            break;\n          case \"InstanceReference\":\n            instanceReferences.push(obj);\n            break;\n          default:\n            var _object = void 0;\n            if (attributes.materialIndex >= 0) {\n              var rMaterial = materials[attributes.materialIndex];\n              var material = this._createMaterial(rMaterial);\n              material = this._compareMaterials(material);\n              _object = this._createObject(obj, material);\n            } else {\n              var _material2 = this._createMaterial();\n              _object = this._createObject(obj, _material2);\n            }\n            if (_object === void 0) {\n              continue;\n            }\n            var layer = data.layers[attributes.layerIndex];\n            _object.visible = layer ? data.layers[attributes.layerIndex].visible : true;\n            if (attributes.isInstanceDefinitionObject) {\n              instanceDefinitionObjects.push(_object);\n            } else {\n              object.add(_object);\n            }\n            break;\n        }\n      }\n      for (var _i = 0; _i < instanceDefinitions.length; _i++) {\n        var iDef = instanceDefinitions[_i];\n        objects = [];\n        for (var j = 0; j < iDef.attributes.objectIds.length; j++) {\n          var objId = iDef.attributes.objectIds[j];\n          for (var p = 0; p < instanceDefinitionObjects.length; p++) {\n            var idoId = instanceDefinitionObjects[p].userData.attributes.id;\n            if (objId === idoId) {\n              objects.push(instanceDefinitionObjects[p]);\n            }\n          }\n        }\n        for (var _j = 0; _j < instanceReferences.length; _j++) {\n          var iRef = instanceReferences[_j];\n          if (iRef.geometry.parentIdefId === iDef.attributes.id) {\n            var iRefObject = new Object3D();\n            var xf = iRef.geometry.xform.array;\n            var matrix = new Matrix4();\n            matrix.set(xf[0], xf[1], xf[2], xf[3], xf[4], xf[5], xf[6], xf[7], xf[8], xf[9], xf[10], xf[11], xf[12], xf[13], xf[14], xf[15]);\n            iRefObject.applyMatrix4(matrix);\n            for (var _p = 0; _p < objects.length; _p++) {\n              iRefObject.add(objects[_p].clone(true));\n            }\n            object.add(iRefObject);\n          }\n        }\n      }\n      object.userData[\"materials\"] = this.materials;\n      return object;\n    }\n  }, {\n    key: \"_createObject\",\n    value: function _createObject(obj, mat) {\n      var loader = new BufferGeometryLoader();\n      var attributes = obj.attributes;\n      var geometry, material, _color, color;\n      switch (obj.objectType) {\n        case \"Point\":\n        case \"PointSet\":\n          geometry = loader.parse(obj.geometry);\n          if (geometry.attributes.hasOwnProperty(\"color\")) {\n            material = new PointsMaterial({\n              vertexColors: true,\n              sizeAttenuation: false,\n              size: 2\n            });\n          } else {\n            _color = attributes.drawColor;\n            color = new Color(_color.r / 255, _color.g / 255, _color.b / 255);\n            material = new PointsMaterial({\n              color: color,\n              sizeAttenuation: false,\n              size: 2\n            });\n          }\n          material = this._compareMaterials(material);\n          var points = new Points(geometry, material);\n          points.userData[\"attributes\"] = attributes;\n          points.userData[\"objectType\"] = obj.objectType;\n          if (attributes.name) {\n            points.name = attributes.name;\n          }\n          return points;\n        case \"Mesh\":\n        case \"Extrusion\":\n        case \"SubD\":\n        case \"Brep\":\n          if (obj.geometry === null) return;\n          geometry = loader.parse(obj.geometry);\n          if (geometry.attributes.hasOwnProperty(\"color\")) {\n            mat.vertexColors = true;\n          }\n          if (mat === null) {\n            mat = this._createMaterial();\n            mat = this._compareMaterials(mat);\n          }\n          var mesh = new Mesh(geometry, mat);\n          mesh.castShadow = attributes.castsShadows;\n          mesh.receiveShadow = attributes.receivesShadows;\n          mesh.userData[\"attributes\"] = attributes;\n          mesh.userData[\"objectType\"] = obj.objectType;\n          if (attributes.name) {\n            mesh.name = attributes.name;\n          }\n          return mesh;\n        case \"Curve\":\n          geometry = loader.parse(obj.geometry);\n          _color = attributes.drawColor;\n          color = new Color(_color.r / 255, _color.g / 255, _color.b / 255);\n          material = new LineBasicMaterial({\n            color: color\n          });\n          material = this._compareMaterials(material);\n          var lines = new Line(geometry, material);\n          lines.userData[\"attributes\"] = attributes;\n          lines.userData[\"objectType\"] = obj.objectType;\n          if (attributes.name) {\n            lines.name = attributes.name;\n          }\n          return lines;\n        case \"TextDot\":\n          geometry = obj.geometry;\n          var ctx = document.createElement(\"canvas\").getContext(\"2d\");\n          var font = \"\".concat(geometry.fontHeight, \"px \").concat(geometry.fontFace);\n          ctx.font = font;\n          var width = ctx.measureText(geometry.text).width + 10;\n          var height = geometry.fontHeight + 10;\n          var r = window.devicePixelRatio;\n          ctx.canvas.width = width * r;\n          ctx.canvas.height = height * r;\n          ctx.canvas.style.width = width + \"px\";\n          ctx.canvas.style.height = height + \"px\";\n          ctx.setTransform(r, 0, 0, r, 0, 0);\n          ctx.font = font;\n          ctx.textBaseline = \"middle\";\n          ctx.textAlign = \"center\";\n          color = attributes.drawColor;\n          ctx.fillStyle = \"rgba(\".concat(color.r, \",\").concat(color.g, \",\").concat(color.b, \",\").concat(color.a, \")\");\n          ctx.fillRect(0, 0, width, height);\n          ctx.fillStyle = \"white\";\n          ctx.fillText(geometry.text, width / 2, height / 2);\n          var texture = new CanvasTexture(ctx.canvas);\n          texture.minFilter = LinearFilter;\n          texture.wrapS = ClampToEdgeWrapping;\n          texture.wrapT = ClampToEdgeWrapping;\n          material = new SpriteMaterial({\n            map: texture,\n            depthTest: false\n          });\n          var sprite = new Sprite(material);\n          sprite.position.set(geometry.point[0], geometry.point[1], geometry.point[2]);\n          sprite.scale.set(width / 10, height / 10, 1);\n          sprite.userData[\"attributes\"] = attributes;\n          sprite.userData[\"objectType\"] = obj.objectType;\n          if (attributes.name) {\n            sprite.name = attributes.name;\n          }\n          return sprite;\n        case \"Light\":\n          geometry = obj.geometry;\n          var light;\n          if (geometry.isDirectionalLight) {\n            light = new DirectionalLight();\n            light.castShadow = attributes.castsShadows;\n            light.position.set(geometry.location[0], geometry.location[1], geometry.location[2]);\n            light.target.position.set(geometry.direction[0], geometry.direction[1], geometry.direction[2]);\n            light.shadow.normalBias = 0.1;\n          } else if (geometry.isPointLight) {\n            light = new PointLight();\n            light.castShadow = attributes.castsShadows;\n            light.position.set(geometry.location[0], geometry.location[1], geometry.location[2]);\n            light.shadow.normalBias = 0.1;\n          } else if (geometry.isRectangularLight) {\n            light = new RectAreaLight();\n            var width2 = Math.abs(geometry.width[2]);\n            var height2 = Math.abs(geometry.length[0]);\n            light.position.set(geometry.location[0] - height2 / 2, geometry.location[1], geometry.location[2] - width2 / 2);\n            light.height = height2;\n            light.width = width2;\n            light.lookAt(new Vector3(geometry.direction[0], geometry.direction[1], geometry.direction[2]));\n          } else if (geometry.isSpotLight) {\n            light = new SpotLight();\n            light.castShadow = attributes.castsShadows;\n            light.position.set(geometry.location[0], geometry.location[1], geometry.location[2]);\n            light.target.position.set(geometry.direction[0], geometry.direction[1], geometry.direction[2]);\n            light.angle = geometry.spotAngleRadians;\n            light.shadow.normalBias = 0.1;\n          } else if (geometry.isLinearLight) {\n            console.warn(\"THREE.3DMLoader:  No conversion exists for linear lights.\");\n            return;\n          }\n          if (light) {\n            light.intensity = geometry.intensity;\n            _color = geometry.diffuse;\n            color = new Color(_color.r / 255, _color.g / 255, _color.b / 255);\n            light.color = color;\n            light.userData[\"attributes\"] = attributes;\n            light.userData[\"objectType\"] = obj.objectType;\n          }\n          return light;\n      }\n    }\n  }, {\n    key: \"_initLibrary\",\n    value: function _initLibrary() {\n      var _this4 = this;\n      if (!this.libraryPending) {\n        var jsLoader = new FileLoader(this.manager);\n        jsLoader.setPath(this.libraryPath);\n        var jsContent = new Promise(function (resolve, reject) {\n          jsLoader.load(\"rhino3dm.js\", resolve, void 0, reject);\n        });\n        var binaryLoader = new FileLoader(this.manager);\n        binaryLoader.setPath(this.libraryPath);\n        binaryLoader.setResponseType(\"arraybuffer\");\n        var binaryContent = new Promise(function (resolve, reject) {\n          binaryLoader.load(\"rhino3dm.wasm\", resolve, void 0, reject);\n        });\n        this.libraryPending = Promise.all([jsContent, binaryContent]).then(function (_ref) {\n          var _ref2 = _slicedToArray(_ref, 2),\n            jsContent2 = _ref2[0],\n            binaryContent2 = _ref2[1];\n          _this4.libraryConfig.wasmBinary = binaryContent2;\n          var fn = Rhino3dmWorker.toString();\n          var body = [\"/* rhino3dm.js */\", jsContent2, \"/* worker */\", fn.substring(fn.indexOf(\"{\") + 1, fn.lastIndexOf(\"}\"))].join(\"\\n\");\n          _this4.workerSourceURL = URL.createObjectURL(new Blob([body]));\n        });\n      }\n      return this.libraryPending;\n    }\n  }, {\n    key: \"_getWorker\",\n    value: function _getWorker(taskCost) {\n      var _this5 = this;\n      return this._initLibrary().then(function () {\n        if (_this5.workerPool.length < _this5.workerLimit) {\n          var worker2 = new Worker(_this5.workerSourceURL);\n          worker2._callbacks = {};\n          worker2._taskCosts = {};\n          worker2._taskLoad = 0;\n          worker2.postMessage({\n            type: \"init\",\n            libraryConfig: _this5.libraryConfig\n          });\n          worker2.onmessage = function (e) {\n            var message = e.data;\n            switch (message.type) {\n              case \"decode\":\n                worker2._callbacks[message.id].resolve(message);\n                break;\n              case \"error\":\n                worker2._callbacks[message.id].reject(message);\n                break;\n              default:\n                console.error('THREE.Rhino3dmLoader: Unexpected message, \"' + message.type + '\"');\n            }\n          };\n          _this5.workerPool.push(worker2);\n        } else {\n          _this5.workerPool.sort(function (a, b) {\n            return a._taskLoad > b._taskLoad ? -1 : 1;\n          });\n        }\n        var worker = _this5.workerPool[_this5.workerPool.length - 1];\n        worker._taskLoad += taskCost;\n        return worker;\n      });\n    }\n  }, {\n    key: \"_releaseTask\",\n    value: function _releaseTask(worker, taskID) {\n      worker._taskLoad -= worker._taskCosts[taskID];\n      delete worker._callbacks[taskID];\n      delete worker._taskCosts[taskID];\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      for (var i = 0; i < this.workerPool.length; ++i) {\n        this.workerPool[i].terminate();\n      }\n      this.workerPool.length = 0;\n      return this;\n    }\n  }]);\n  return Rhino3dmLoader;\n}(Loader);\nfunction Rhino3dmWorker() {\n  var libraryPending;\n  var libraryConfig;\n  var rhino;\n  onmessage = function onmessage(e) {\n    var message = e.data;\n    switch (message.type) {\n      case \"init\":\n        libraryConfig = message.libraryConfig;\n        var wasmBinary = libraryConfig.wasmBinary;\n        var RhinoModule;\n        libraryPending = new Promise(function (resolve) {\n          RhinoModule = {\n            wasmBinary: wasmBinary,\n            onRuntimeInitialized: resolve\n          };\n          rhino3dm(RhinoModule);\n        }).then(function () {\n          rhino = RhinoModule;\n        });\n        break;\n      case \"decode\":\n        var buffer = message.buffer;\n        libraryPending.then(function () {\n          var data = decodeObjects(rhino, buffer);\n          self.postMessage({\n            type: \"decode\",\n            id: message.id,\n            data: data\n          });\n        });\n        break;\n    }\n  };\n  function decodeObjects(rhino2, buffer) {\n    var arr = new Uint8Array(buffer);\n    var doc = rhino2.File3dm.fromByteArray(arr);\n    var objects = [];\n    var materials = [];\n    var layers = [];\n    var views = [];\n    var namedViews = [];\n    var groups = [];\n    var objs = doc.objects();\n    var cnt = objs.count;\n    for (var i = 0; i < cnt; i++) {\n      var _object = objs.get(i);\n      var object = extractObjectData(_object, doc);\n      _object.delete();\n      if (object) {\n        objects.push(object);\n      }\n    }\n    for (var _i2 = 0; _i2 < doc.instanceDefinitions().count(); _i2++) {\n      var idef = doc.instanceDefinitions().get(_i2);\n      var idefAttributes = extractProperties(idef);\n      idefAttributes.objectIds = idef.getObjectIds();\n      objects.push({\n        geometry: null,\n        attributes: idefAttributes,\n        objectType: \"InstanceDefinition\"\n      });\n    }\n    var textureTypes = [\n    // rhino.TextureType.Bitmap,\n    rhino2.TextureType.Diffuse, rhino2.TextureType.Bump, rhino2.TextureType.Transparency, rhino2.TextureType.Opacity, rhino2.TextureType.Emap];\n    var pbrTextureTypes = [rhino2.TextureType.PBR_BaseColor, rhino2.TextureType.PBR_Subsurface, rhino2.TextureType.PBR_SubsurfaceScattering, rhino2.TextureType.PBR_SubsurfaceScatteringRadius, rhino2.TextureType.PBR_Metallic, rhino2.TextureType.PBR_Specular, rhino2.TextureType.PBR_SpecularTint, rhino2.TextureType.PBR_Roughness, rhino2.TextureType.PBR_Anisotropic, rhino2.TextureType.PBR_Anisotropic_Rotation, rhino2.TextureType.PBR_Sheen, rhino2.TextureType.PBR_SheenTint, rhino2.TextureType.PBR_Clearcoat, rhino2.TextureType.PBR_ClearcoatBump, rhino2.TextureType.PBR_ClearcoatRoughness, rhino2.TextureType.PBR_OpacityIor, rhino2.TextureType.PBR_OpacityRoughness, rhino2.TextureType.PBR_Emission, rhino2.TextureType.PBR_AmbientOcclusion, rhino2.TextureType.PBR_Displacement];\n    for (var _i3 = 0; _i3 < doc.materials().count(); _i3++) {\n      var _material = doc.materials().get(_i3);\n      var _pbrMaterial = _material.physicallyBased();\n      var material = extractProperties(_material);\n      var textures = [];\n      for (var j = 0; j < textureTypes.length; j++) {\n        var _texture = _material.getTexture(textureTypes[j]);\n        if (_texture) {\n          var textureType = textureTypes[j].constructor.name;\n          textureType = textureType.substring(12, textureType.length);\n          var texture = {\n            type: textureType\n          };\n          var image = doc.getEmbeddedFileAsBase64(_texture.fileName);\n          if (image) {\n            texture.image = \"data:image/png;base64,\" + image;\n          } else {\n            console.warn(\"THREE.3DMLoader: Image for \".concat(textureType, \" texture not embedded in file.\"));\n            texture.image = null;\n          }\n          textures.push(texture);\n          _texture.delete();\n        }\n      }\n      material.textures = textures;\n      if (_pbrMaterial.supported) {\n        console.log(\"pbr true\");\n        for (var _j2 = 0; _j2 < pbrTextureTypes.length; _j2++) {\n          var _texture2 = _material.getTexture(textureTypes[_j2]);\n          if (_texture2) {\n            var _image = doc.getEmbeddedFileAsBase64(_texture2.fileName);\n            var _textureType = textureTypes[_j2].constructor.name;\n            _textureType = _textureType.substring(12, _textureType.length);\n            var _texture3 = {\n              type: _textureType,\n              image: \"data:image/png;base64,\" + _image\n            };\n            textures.push(_texture3);\n            _texture2.delete();\n          }\n        }\n        var pbMaterialProperties = extractProperties(_material.physicallyBased());\n        material = Object.assign(pbMaterialProperties, material);\n      }\n      materials.push(material);\n      _material.delete();\n      _pbrMaterial.delete();\n    }\n    for (var _i4 = 0; _i4 < doc.layers().count(); _i4++) {\n      var _layer = doc.layers().get(_i4);\n      var layer = extractProperties(_layer);\n      layers.push(layer);\n      _layer.delete();\n    }\n    for (var _i5 = 0; _i5 < doc.views().count(); _i5++) {\n      var _view = doc.views().get(_i5);\n      var view = extractProperties(_view);\n      views.push(view);\n      _view.delete();\n    }\n    for (var _i6 = 0; _i6 < doc.namedViews().count(); _i6++) {\n      var _namedView = doc.namedViews().get(_i6);\n      var namedView = extractProperties(_namedView);\n      namedViews.push(namedView);\n      _namedView.delete();\n    }\n    for (var _i7 = 0; _i7 < doc.groups().count(); _i7++) {\n      var _group = doc.groups().get(_i7);\n      var group = extractProperties(_group);\n      groups.push(group);\n      _group.delete();\n    }\n    var settings = extractProperties(doc.settings());\n    doc.delete();\n    return {\n      objects: objects,\n      materials: materials,\n      layers: layers,\n      views: views,\n      namedViews: namedViews,\n      groups: groups,\n      settings: settings\n    };\n  }\n  function extractObjectData(object, doc) {\n    var _geometry = object.geometry();\n    var _attributes = object.attributes();\n    var objectType = _geometry.objectType;\n    var geometry, attributes, position, data, mesh;\n    switch (objectType) {\n      case rhino.ObjectType.Curve:\n        var pts = curveToPoints(_geometry, 100);\n        position = {};\n        attributes = {};\n        data = {};\n        position.itemSize = 3;\n        position.type = \"Float32Array\";\n        position.array = [];\n        for (var j = 0; j < pts.length; j++) {\n          position.array.push(pts[j][0]);\n          position.array.push(pts[j][1]);\n          position.array.push(pts[j][2]);\n        }\n        attributes.position = position;\n        data.attributes = attributes;\n        geometry = {\n          data: data\n        };\n        break;\n      case rhino.ObjectType.Point:\n        var pt = _geometry.location;\n        position = {};\n        var color = {};\n        attributes = {};\n        data = {};\n        position.itemSize = 3;\n        position.type = \"Float32Array\";\n        position.array = [pt[0], pt[1], pt[2]];\n        var _color = _attributes.drawColor(doc);\n        color.itemSize = 3;\n        color.type = \"Float32Array\";\n        color.array = [_color.r / 255, _color.g / 255, _color.b / 255];\n        attributes.position = position;\n        attributes.color = color;\n        data.attributes = attributes;\n        geometry = {\n          data: data\n        };\n        break;\n      case rhino.ObjectType.PointSet:\n      case rhino.ObjectType.Mesh:\n        geometry = _geometry.toThreejsJSON();\n        break;\n      case rhino.ObjectType.Brep:\n        var faces = _geometry.faces();\n        mesh = new rhino.Mesh();\n        for (var faceIndex = 0; faceIndex < faces.count; faceIndex++) {\n          var face = faces.get(faceIndex);\n          var _mesh = face.getMesh(rhino.MeshType.Any);\n          if (_mesh) {\n            mesh.append(_mesh);\n            _mesh.delete();\n          }\n          face.delete();\n        }\n        if (mesh.faces().count > 0) {\n          mesh.compact();\n          geometry = mesh.toThreejsJSON();\n          faces.delete();\n        }\n        mesh.delete();\n        break;\n      case rhino.ObjectType.Extrusion:\n        mesh = _geometry.getMesh(rhino.MeshType.Any);\n        if (mesh) {\n          geometry = mesh.toThreejsJSON();\n          mesh.delete();\n        }\n        break;\n      case rhino.ObjectType.TextDot:\n        geometry = extractProperties(_geometry);\n        break;\n      case rhino.ObjectType.Light:\n        geometry = extractProperties(_geometry);\n        break;\n      case rhino.ObjectType.InstanceReference:\n        geometry = extractProperties(_geometry);\n        geometry.xform = extractProperties(_geometry.xform);\n        geometry.xform.array = _geometry.xform.toFloatArray(true);\n        break;\n      case rhino.ObjectType.SubD:\n        _geometry.subdivide(3);\n        mesh = rhino.Mesh.createFromSubDControlNet(_geometry);\n        if (mesh) {\n          geometry = mesh.toThreejsJSON();\n          mesh.delete();\n        }\n        break;\n      default:\n        console.warn(\"THREE.3DMLoader: TODO: Implement \".concat(objectType.constructor.name));\n        break;\n    }\n    if (geometry) {\n      attributes = extractProperties(_attributes);\n      attributes.geometry = extractProperties(_geometry);\n      if (_attributes.groupCount > 0) {\n        attributes.groupIds = _attributes.getGroupList();\n      }\n      if (_attributes.userStringCount > 0) {\n        attributes.userStrings = _attributes.getUserStrings();\n      }\n      if (_geometry.userStringCount > 0) {\n        attributes.geometry.userStrings = _geometry.getUserStrings();\n      }\n      attributes.drawColor = _attributes.drawColor(doc);\n      objectType = objectType.constructor.name;\n      objectType = objectType.substring(11, objectType.length);\n      return {\n        geometry: geometry,\n        attributes: attributes,\n        objectType: objectType\n      };\n    } else {\n      console.warn(\"THREE.3DMLoader: \".concat(objectType.constructor.name, \" has no associated mesh geometry.\"));\n    }\n  }\n  function extractProperties(object) {\n    var result = {};\n    for (var property in object) {\n      var value = object[property];\n      if (typeof value !== \"function\") {\n        if (typeof value === \"object\" && value !== null && value.hasOwnProperty(\"constructor\")) {\n          result[property] = {\n            name: value.constructor.name,\n            value: value.value\n          };\n        } else {\n          result[property] = value;\n        }\n      }\n    }\n    return result;\n  }\n  function curveToPoints(curve, pointLimit) {\n    var pointCount = pointLimit;\n    var rc = [];\n    var ts = [];\n    if (curve instanceof rhino.LineCurve) {\n      return [curve.pointAtStart, curve.pointAtEnd];\n    }\n    if (curve instanceof rhino.PolylineCurve) {\n      pointCount = curve.pointCount;\n      for (var i = 0; i < pointCount; i++) {\n        rc.push(curve.point(i));\n      }\n      return rc;\n    }\n    if (curve instanceof rhino.PolyCurve) {\n      var segmentCount = curve.segmentCount;\n      for (var _i8 = 0; _i8 < segmentCount; _i8++) {\n        var segment = curve.segmentCurve(_i8);\n        var segmentArray = curveToPoints(segment, pointCount);\n        rc = rc.concat(segmentArray);\n        segment.delete();\n      }\n      return rc;\n    }\n    if (curve instanceof rhino.ArcCurve) {\n      pointCount = Math.floor(curve.angleDegrees / 5);\n      pointCount = pointCount < 2 ? 2 : pointCount;\n    }\n    if (curve instanceof rhino.NurbsCurve && curve.degree === 1) {\n      var pLine = curve.tryGetPolyline();\n      for (var _i9 = 0; _i9 < pLine.count; _i9++) {\n        rc.push(pLine.get(_i9));\n      }\n      pLine.delete();\n      return rc;\n    }\n    var domain = curve.domain;\n    var divisions = pointCount - 1;\n    for (var j = 0; j < pointCount; j++) {\n      var t = domain[0] + j / divisions * (domain[1] - domain[0]);\n      if (t === domain[0] || t === domain[1]) {\n        ts.push(t);\n        continue;\n      }\n      var tan = curve.tangentAt(t);\n      var prevTan = curve.tangentAt(ts.slice(-1)[0]);\n      var tS = tan[0] * tan[0] + tan[1] * tan[1] + tan[2] * tan[2];\n      var ptS = prevTan[0] * prevTan[0] + prevTan[1] * prevTan[1] + prevTan[2] * prevTan[2];\n      var denominator = Math.sqrt(tS * ptS);\n      var angle = void 0;\n      if (denominator === 0) {\n        angle = Math.PI / 2;\n      } else {\n        var theta = (tan.x * prevTan.x + tan.y * prevTan.y + tan.z * prevTan.z) / denominator;\n        angle = Math.acos(Math.max(-1, Math.min(1, theta)));\n      }\n      if (angle < 0.1) continue;\n      ts.push(t);\n    }\n    rc = ts.map(function (t) {\n      return curve.pointAt(t);\n    });\n    return rc;\n  }\n}\nexport { Rhino3dmLoader };","map":{"version":3,"names":["_taskCache","WeakMap","Rhino3dmLoader","_Loader","_inherits","_super","_createSuper","manager","_this","_classCallCheck","call","libraryPath","libraryPending","libraryBinary","libraryConfig","url","workerLimit","workerPool","workerNextTaskID","workerSourceURL","workerConfig","materials","_createClass","key","value","setLibraryPath","path","setWorkerLimit","load","onLoad","onProgress","onError","_this2","loader","FileLoader","setPath","setResponseType","setRequestHeader","requestHeader","buffer","has","cachedTask","get","promise","then","catch","decodeObjects","debug","console","log","map","worker","_taskLoad","_this3","taskID","taskCost","byteLength","objectPending","_getWorker","_worker","Promise","resolve","reject","_callbacks","postMessage","type","id","message","_createGeometry","data","_releaseTask","set","parse","_compareMaterials","material","mat","name","color","r","g","b","i","length","m","_mat","JSON","stringify","push","_createMaterial","MeshStandardMaterial","Color","metalness","side","_diffuseColor","diffuseColor","diffusecolor","transparent","transparency","opacity","textureLoader","TextureLoader","textures","texture","image","bumpMap","alphaMap","envMap","object","Object3D","instanceDefinitionObjects","instanceDefinitions","instanceReferences","userData","layers","groups","settings","objects","obj","attributes","objectType","_object","materialIndex","rMaterial","_createObject","layer","layerIndex","visible","isInstanceDefinitionObject","add","iDef","j","objectIds","objId","p","idoId","iRef","geometry","parentIdefId","iRefObject","xf","xform","array","matrix","Matrix4","applyMatrix4","clone","BufferGeometryLoader","_color","hasOwnProperty","PointsMaterial","vertexColors","sizeAttenuation","size","drawColor","points","Points","mesh","Mesh","castShadow","castsShadows","receiveShadow","receivesShadows","LineBasicMaterial","lines","Line","ctx","document","createElement","getContext","font","concat","fontHeight","fontFace","width","measureText","text","height","window","devicePixelRatio","canvas","style","setTransform","textBaseline","textAlign","fillStyle","a","fillRect","fillText","CanvasTexture","minFilter","LinearFilter","wrapS","ClampToEdgeWrapping","wrapT","SpriteMaterial","depthTest","sprite","Sprite","position","point","scale","light","isDirectionalLight","DirectionalLight","location","target","direction","shadow","normalBias","isPointLight","PointLight","isRectangularLight","RectAreaLight","width2","Math","abs","height2","lookAt","Vector3","isSpotLight","SpotLight","angle","spotAngleRadians","isLinearLight","warn","intensity","diffuse","_initLibrary","_this4","jsLoader","jsContent","binaryLoader","binaryContent","all","_ref","_ref2","_slicedToArray","jsContent2","binaryContent2","wasmBinary","fn","Rhino3dmWorker","toString","body","substring","indexOf","lastIndexOf","join","URL","createObjectURL","Blob","_this5","worker2","Worker","_taskCosts","onmessage","e","error","sort","dispose","terminate","Loader","rhino","RhinoModule","onRuntimeInitialized","rhino3dm","self","rhino2","arr","Uint8Array","doc","File3dm","fromByteArray","views","namedViews","objs","cnt","count","extractObjectData","delete","idef","idefAttributes","extractProperties","getObjectIds","textureTypes","TextureType","Diffuse","Bump","Transparency","Opacity","Emap","pbrTextureTypes","PBR_BaseColor","PBR_Subsurface","PBR_SubsurfaceScattering","PBR_SubsurfaceScatteringRadius","PBR_Metallic","PBR_Specular","PBR_SpecularTint","PBR_Roughness","PBR_Anisotropic","PBR_Anisotropic_Rotation","PBR_Sheen","PBR_SheenTint","PBR_Clearcoat","PBR_ClearcoatBump","PBR_ClearcoatRoughness","PBR_OpacityIor","PBR_OpacityRoughness","PBR_Emission","PBR_AmbientOcclusion","PBR_Displacement","_material","_pbrMaterial","physicallyBased","_texture","getTexture","textureType","constructor","getEmbeddedFileAsBase64","fileName","supported","pbMaterialProperties","Object","assign","_layer","_view","view","_namedView","namedView","_group","group","_geometry","_attributes","ObjectType","Curve","pts","curveToPoints","itemSize","Point","pt","PointSet","toThreejsJSON","Brep","faces","faceIndex","face","_mesh","getMesh","MeshType","Any","append","compact","Extrusion","TextDot","Light","InstanceReference","toFloatArray","SubD","subdivide","createFromSubDControlNet","groupCount","groupIds","getGroupList","userStringCount","userStrings","getUserStrings","result","property","curve","pointLimit","pointCount","rc","ts","LineCurve","pointAtStart","pointAtEnd","PolylineCurve","PolyCurve","segmentCount","segment","segmentCurve","segmentArray","ArcCurve","floor","angleDegrees","NurbsCurve","degree","pLine","tryGetPolyline","domain","divisions","t","tan","tangentAt","prevTan","slice","tS","ptS","denominator","sqrt","PI","theta","x","y","z","acos","max","min","pointAt"],"sources":["C:\\Users\\Nayyu\\Desktop\\skibidai-public-build\\node_modules\\src\\loaders\\3DMLoader.js"],"sourcesContent":["import {\n  BufferGeometryLoader,\n  FileLoader,\n  Loader,\n  Object3D,\n  MeshStandardMaterial,\n  Mesh,\n  Color,\n  Points,\n  PointsMaterial,\n  Line,\n  LineBasicMaterial,\n  Matrix4,\n  DirectionalLight,\n  PointLight,\n  SpotLight,\n  RectAreaLight,\n  Vector3,\n  Sprite,\n  SpriteMaterial,\n  CanvasTexture,\n  LinearFilter,\n  ClampToEdgeWrapping,\n  TextureLoader,\n} from 'three'\n\nconst _taskCache = new WeakMap()\n\nclass Rhino3dmLoader extends Loader {\n  constructor(manager) {\n    super(manager)\n\n    this.libraryPath = ''\n    this.libraryPending = null\n    this.libraryBinary = null\n    this.libraryConfig = {}\n\n    this.url = ''\n\n    this.workerLimit = 4\n    this.workerPool = []\n    this.workerNextTaskID = 1\n    this.workerSourceURL = ''\n    this.workerConfig = {}\n\n    this.materials = []\n  }\n\n  setLibraryPath(path) {\n    this.libraryPath = path\n\n    return this\n  }\n\n  setWorkerLimit(workerLimit) {\n    this.workerLimit = workerLimit\n\n    return this\n  }\n\n  load(url, onLoad, onProgress, onError) {\n    const loader = new FileLoader(this.manager)\n\n    loader.setPath(this.path)\n    loader.setResponseType('arraybuffer')\n    loader.setRequestHeader(this.requestHeader)\n\n    this.url = url\n\n    loader.load(\n      url,\n      (buffer) => {\n        // Check for an existing task using this buffer. A transferred buffer cannot be transferred\n        // again from this thread.\n        if (_taskCache.has(buffer)) {\n          const cachedTask = _taskCache.get(buffer)\n\n          return cachedTask.promise.then(onLoad).catch(onError)\n        }\n\n        this.decodeObjects(buffer, url).then(onLoad).catch(onError)\n      },\n      onProgress,\n      onError,\n    )\n  }\n\n  debug() {\n    console.log(\n      'Task load: ',\n      this.workerPool.map((worker) => worker._taskLoad),\n    )\n  }\n\n  decodeObjects(buffer, url) {\n    let worker\n    let taskID\n\n    const taskCost = buffer.byteLength\n\n    const objectPending = this._getWorker(taskCost)\n      .then((_worker) => {\n        worker = _worker\n        taskID = this.workerNextTaskID++ //hmmm\n\n        return new Promise((resolve, reject) => {\n          worker._callbacks[taskID] = { resolve, reject }\n\n          worker.postMessage({ type: 'decode', id: taskID, buffer }, [buffer])\n\n          //this.debug();\n        })\n      })\n      .then((message) => this._createGeometry(message.data))\n\n    // Remove task from the task list.\n    // Note: replaced '.finally()' with '.catch().then()' block - iOS 11 support (#19416)\n    objectPending\n      .catch(() => true)\n      .then(() => {\n        if (worker && taskID) {\n          this._releaseTask(worker, taskID)\n\n          //this.debug();\n        }\n      })\n\n    // Cache the task result.\n    _taskCache.set(buffer, {\n      url: url,\n      promise: objectPending,\n    })\n\n    return objectPending\n  }\n\n  parse(data, onLoad, onError) {\n    this.decodeObjects(data, '').then(onLoad).catch(onError)\n  }\n\n  _compareMaterials(material) {\n    const mat = {}\n    mat.name = material.name\n    mat.color = {}\n    mat.color.r = material.color.r\n    mat.color.g = material.color.g\n    mat.color.b = material.color.b\n    mat.type = material.type\n\n    for (let i = 0; i < this.materials.length; i++) {\n      const m = this.materials[i]\n      const _mat = {}\n      _mat.name = m.name\n      _mat.color = {}\n      _mat.color.r = m.color.r\n      _mat.color.g = m.color.g\n      _mat.color.b = m.color.b\n      _mat.type = m.type\n\n      if (JSON.stringify(mat) === JSON.stringify(_mat)) {\n        return m\n      }\n    }\n\n    this.materials.push(material)\n\n    return material\n  }\n\n  _createMaterial(material) {\n    if (material === undefined) {\n      return new MeshStandardMaterial({\n        color: new Color(1, 1, 1),\n        metalness: 0.8,\n        name: 'default',\n        side: 2,\n      })\n    }\n\n    const _diffuseColor = material.diffuseColor\n\n    const diffusecolor = new Color(_diffuseColor.r / 255.0, _diffuseColor.g / 255.0, _diffuseColor.b / 255.0)\n\n    if (_diffuseColor.r === 0 && _diffuseColor.g === 0 && _diffuseColor.b === 0) {\n      diffusecolor.r = 1\n      diffusecolor.g = 1\n      diffusecolor.b = 1\n    }\n\n    // console.log( material );\n\n    const mat = new MeshStandardMaterial({\n      color: diffusecolor,\n      name: material.name,\n      side: 2,\n      transparent: material.transparency > 0 ? true : false,\n      opacity: 1.0 - material.transparency,\n    })\n\n    const textureLoader = new TextureLoader()\n\n    for (let i = 0; i < material.textures.length; i++) {\n      const texture = material.textures[i]\n\n      if (texture.image !== null) {\n        const map = textureLoader.load(texture.image)\n\n        switch (texture.type) {\n          case 'Diffuse':\n            mat.map = map\n\n            break\n\n          case 'Bump':\n            mat.bumpMap = map\n\n            break\n\n          case 'Transparency':\n            mat.alphaMap = map\n            mat.transparent = true\n\n            break\n\n          case 'Emap':\n            mat.envMap = map\n\n            break\n        }\n      }\n    }\n\n    return mat\n  }\n\n  _createGeometry(data) {\n    // console.log(data);\n\n    const object = new Object3D()\n    const instanceDefinitionObjects = []\n    const instanceDefinitions = []\n    const instanceReferences = []\n\n    object.userData['layers'] = data.layers\n    object.userData['groups'] = data.groups\n    object.userData['settings'] = data.settings\n    object.userData['objectType'] = 'File3dm'\n    object.userData['materials'] = null\n    object.name = this.url\n\n    let objects = data.objects\n    const materials = data.materials\n\n    for (let i = 0; i < objects.length; i++) {\n      const obj = objects[i]\n      const attributes = obj.attributes\n\n      switch (obj.objectType) {\n        case 'InstanceDefinition':\n          instanceDefinitions.push(obj)\n\n          break\n\n        case 'InstanceReference':\n          instanceReferences.push(obj)\n\n          break\n\n        default:\n          let _object\n\n          if (attributes.materialIndex >= 0) {\n            const rMaterial = materials[attributes.materialIndex]\n            let material = this._createMaterial(rMaterial)\n            material = this._compareMaterials(material)\n            _object = this._createObject(obj, material)\n          } else {\n            const material = this._createMaterial()\n            _object = this._createObject(obj, material)\n          }\n\n          if (_object === undefined) {\n            continue\n          }\n\n          const layer = data.layers[attributes.layerIndex]\n\n          _object.visible = layer ? data.layers[attributes.layerIndex].visible : true\n\n          if (attributes.isInstanceDefinitionObject) {\n            instanceDefinitionObjects.push(_object)\n          } else {\n            object.add(_object)\n          }\n\n          break\n      }\n    }\n\n    for (let i = 0; i < instanceDefinitions.length; i++) {\n      const iDef = instanceDefinitions[i]\n\n      objects = []\n\n      for (let j = 0; j < iDef.attributes.objectIds.length; j++) {\n        const objId = iDef.attributes.objectIds[j]\n\n        for (let p = 0; p < instanceDefinitionObjects.length; p++) {\n          const idoId = instanceDefinitionObjects[p].userData.attributes.id\n\n          if (objId === idoId) {\n            objects.push(instanceDefinitionObjects[p])\n          }\n        }\n      }\n\n      // Currently clones geometry and does not take advantage of instancing\n\n      for (let j = 0; j < instanceReferences.length; j++) {\n        const iRef = instanceReferences[j]\n\n        if (iRef.geometry.parentIdefId === iDef.attributes.id) {\n          const iRefObject = new Object3D()\n          const xf = iRef.geometry.xform.array\n\n          const matrix = new Matrix4()\n          matrix.set(\n            xf[0],\n            xf[1],\n            xf[2],\n            xf[3],\n            xf[4],\n            xf[5],\n            xf[6],\n            xf[7],\n            xf[8],\n            xf[9],\n            xf[10],\n            xf[11],\n            xf[12],\n            xf[13],\n            xf[14],\n            xf[15],\n          )\n\n          iRefObject.applyMatrix4(matrix)\n\n          for (let p = 0; p < objects.length; p++) {\n            iRefObject.add(objects[p].clone(true))\n          }\n\n          object.add(iRefObject)\n        }\n      }\n    }\n\n    object.userData['materials'] = this.materials\n    return object\n  }\n\n  _createObject(obj, mat) {\n    const loader = new BufferGeometryLoader()\n\n    const attributes = obj.attributes\n\n    let geometry, material, _color, color\n\n    switch (obj.objectType) {\n      case 'Point':\n      case 'PointSet':\n        geometry = loader.parse(obj.geometry)\n\n        if (geometry.attributes.hasOwnProperty('color')) {\n          material = new PointsMaterial({ vertexColors: true, sizeAttenuation: false, size: 2 })\n        } else {\n          _color = attributes.drawColor\n          color = new Color(_color.r / 255.0, _color.g / 255.0, _color.b / 255.0)\n          material = new PointsMaterial({ color: color, sizeAttenuation: false, size: 2 })\n        }\n\n        material = this._compareMaterials(material)\n\n        const points = new Points(geometry, material)\n        points.userData['attributes'] = attributes\n        points.userData['objectType'] = obj.objectType\n\n        if (attributes.name) {\n          points.name = attributes.name\n        }\n\n        return points\n\n      case 'Mesh':\n      case 'Extrusion':\n      case 'SubD':\n      case 'Brep':\n        if (obj.geometry === null) return\n\n        geometry = loader.parse(obj.geometry)\n\n        if (geometry.attributes.hasOwnProperty('color')) {\n          mat.vertexColors = true\n        }\n\n        if (mat === null) {\n          mat = this._createMaterial()\n          mat = this._compareMaterials(mat)\n        }\n\n        const mesh = new Mesh(geometry, mat)\n        mesh.castShadow = attributes.castsShadows\n        mesh.receiveShadow = attributes.receivesShadows\n        mesh.userData['attributes'] = attributes\n        mesh.userData['objectType'] = obj.objectType\n\n        if (attributes.name) {\n          mesh.name = attributes.name\n        }\n\n        return mesh\n\n      case 'Curve':\n        geometry = loader.parse(obj.geometry)\n\n        _color = attributes.drawColor\n        color = new Color(_color.r / 255.0, _color.g / 255.0, _color.b / 255.0)\n\n        material = new LineBasicMaterial({ color: color })\n        material = this._compareMaterials(material)\n\n        const lines = new Line(geometry, material)\n        lines.userData['attributes'] = attributes\n        lines.userData['objectType'] = obj.objectType\n\n        if (attributes.name) {\n          lines.name = attributes.name\n        }\n\n        return lines\n\n      case 'TextDot':\n        geometry = obj.geometry\n\n        const ctx = document.createElement('canvas').getContext('2d')\n        const font = `${geometry.fontHeight}px ${geometry.fontFace}`\n        ctx.font = font\n        const width = ctx.measureText(geometry.text).width + 10\n        const height = geometry.fontHeight + 10\n\n        const r = window.devicePixelRatio\n\n        ctx.canvas.width = width * r\n        ctx.canvas.height = height * r\n        ctx.canvas.style.width = width + 'px'\n        ctx.canvas.style.height = height + 'px'\n        ctx.setTransform(r, 0, 0, r, 0, 0)\n\n        ctx.font = font\n        ctx.textBaseline = 'middle'\n        ctx.textAlign = 'center'\n        color = attributes.drawColor\n        ctx.fillStyle = `rgba(${color.r},${color.g},${color.b},${color.a})`\n        ctx.fillRect(0, 0, width, height)\n        ctx.fillStyle = 'white'\n        ctx.fillText(geometry.text, width / 2, height / 2)\n\n        const texture = new CanvasTexture(ctx.canvas)\n        texture.minFilter = LinearFilter\n        texture.wrapS = ClampToEdgeWrapping\n        texture.wrapT = ClampToEdgeWrapping\n\n        material = new SpriteMaterial({ map: texture, depthTest: false })\n        const sprite = new Sprite(material)\n        sprite.position.set(geometry.point[0], geometry.point[1], geometry.point[2])\n        sprite.scale.set(width / 10, height / 10, 1.0)\n\n        sprite.userData['attributes'] = attributes\n        sprite.userData['objectType'] = obj.objectType\n\n        if (attributes.name) {\n          sprite.name = attributes.name\n        }\n\n        return sprite\n\n      case 'Light':\n        geometry = obj.geometry\n\n        let light\n\n        if (geometry.isDirectionalLight) {\n          light = new DirectionalLight()\n          light.castShadow = attributes.castsShadows\n          light.position.set(geometry.location[0], geometry.location[1], geometry.location[2])\n          light.target.position.set(geometry.direction[0], geometry.direction[1], geometry.direction[2])\n          light.shadow.normalBias = 0.1\n        } else if (geometry.isPointLight) {\n          light = new PointLight()\n          light.castShadow = attributes.castsShadows\n          light.position.set(geometry.location[0], geometry.location[1], geometry.location[2])\n          light.shadow.normalBias = 0.1\n        } else if (geometry.isRectangularLight) {\n          light = new RectAreaLight()\n\n          const width = Math.abs(geometry.width[2])\n          const height = Math.abs(geometry.length[0])\n\n          light.position.set(geometry.location[0] - height / 2, geometry.location[1], geometry.location[2] - width / 2)\n\n          light.height = height\n          light.width = width\n\n          light.lookAt(new Vector3(geometry.direction[0], geometry.direction[1], geometry.direction[2]))\n        } else if (geometry.isSpotLight) {\n          light = new SpotLight()\n          light.castShadow = attributes.castsShadows\n          light.position.set(geometry.location[0], geometry.location[1], geometry.location[2])\n          light.target.position.set(geometry.direction[0], geometry.direction[1], geometry.direction[2])\n          light.angle = geometry.spotAngleRadians\n          light.shadow.normalBias = 0.1\n        } else if (geometry.isLinearLight) {\n          console.warn('THREE.3DMLoader:  No conversion exists for linear lights.')\n\n          return\n        }\n\n        if (light) {\n          light.intensity = geometry.intensity\n          _color = geometry.diffuse\n          color = new Color(_color.r / 255.0, _color.g / 255.0, _color.b / 255.0)\n          light.color = color\n          light.userData['attributes'] = attributes\n          light.userData['objectType'] = obj.objectType\n        }\n\n        return light\n    }\n  }\n\n  _initLibrary() {\n    if (!this.libraryPending) {\n      // Load rhino3dm wrapper.\n      const jsLoader = new FileLoader(this.manager)\n      jsLoader.setPath(this.libraryPath)\n      const jsContent = new Promise((resolve, reject) => {\n        jsLoader.load('rhino3dm.js', resolve, undefined, reject)\n      })\n\n      // Load rhino3dm WASM binary.\n      const binaryLoader = new FileLoader(this.manager)\n      binaryLoader.setPath(this.libraryPath)\n      binaryLoader.setResponseType('arraybuffer')\n      const binaryContent = new Promise((resolve, reject) => {\n        binaryLoader.load('rhino3dm.wasm', resolve, undefined, reject)\n      })\n\n      this.libraryPending = Promise.all([jsContent, binaryContent]).then(([jsContent, binaryContent]) => {\n        //this.libraryBinary = binaryContent;\n        this.libraryConfig.wasmBinary = binaryContent\n\n        const fn = Rhino3dmWorker.toString()\n\n        const body = [\n          '/* rhino3dm.js */',\n          jsContent,\n          '/* worker */',\n          fn.substring(fn.indexOf('{') + 1, fn.lastIndexOf('}')),\n        ].join('\\n')\n\n        this.workerSourceURL = URL.createObjectURL(new Blob([body]))\n      })\n    }\n\n    return this.libraryPending\n  }\n\n  _getWorker(taskCost) {\n    return this._initLibrary().then(() => {\n      if (this.workerPool.length < this.workerLimit) {\n        const worker = new Worker(this.workerSourceURL)\n\n        worker._callbacks = {}\n        worker._taskCosts = {}\n        worker._taskLoad = 0\n\n        worker.postMessage({\n          type: 'init',\n          libraryConfig: this.libraryConfig,\n        })\n\n        worker.onmessage = function (e) {\n          const message = e.data\n\n          switch (message.type) {\n            case 'decode':\n              worker._callbacks[message.id].resolve(message)\n              break\n\n            case 'error':\n              worker._callbacks[message.id].reject(message)\n              break\n\n            default:\n              console.error('THREE.Rhino3dmLoader: Unexpected message, \"' + message.type + '\"')\n          }\n        }\n\n        this.workerPool.push(worker)\n      } else {\n        this.workerPool.sort(function (a, b) {\n          return a._taskLoad > b._taskLoad ? -1 : 1\n        })\n      }\n\n      const worker = this.workerPool[this.workerPool.length - 1]\n\n      worker._taskLoad += taskCost\n\n      return worker\n    })\n  }\n\n  _releaseTask(worker, taskID) {\n    worker._taskLoad -= worker._taskCosts[taskID]\n    delete worker._callbacks[taskID]\n    delete worker._taskCosts[taskID]\n  }\n\n  dispose() {\n    for (let i = 0; i < this.workerPool.length; ++i) {\n      this.workerPool[i].terminate()\n    }\n\n    this.workerPool.length = 0\n\n    return this\n  }\n}\n\n/* WEB WORKER */\n\nfunction Rhino3dmWorker() {\n  let libraryPending\n  let libraryConfig\n  let rhino\n\n  onmessage = function (e) {\n    const message = e.data\n\n    switch (message.type) {\n      case 'init':\n        libraryConfig = message.libraryConfig\n        const wasmBinary = libraryConfig.wasmBinary\n        let RhinoModule\n        libraryPending = new Promise(function (resolve) {\n          /* Like Basis Loader */\n          RhinoModule = { wasmBinary, onRuntimeInitialized: resolve }\n\n          rhino3dm(RhinoModule)\n        }).then(() => {\n          rhino = RhinoModule\n        })\n\n        break\n\n      case 'decode':\n        const buffer = message.buffer\n        libraryPending.then(() => {\n          const data = decodeObjects(rhino, buffer)\n\n          self.postMessage({ type: 'decode', id: message.id, data })\n        })\n\n        break\n    }\n  }\n\n  function decodeObjects(rhino, buffer) {\n    const arr = new Uint8Array(buffer)\n    const doc = rhino.File3dm.fromByteArray(arr)\n\n    const objects = []\n    const materials = []\n    const layers = []\n    const views = []\n    const namedViews = []\n    const groups = []\n\n    //Handle objects\n\n    const objs = doc.objects()\n    const cnt = objs.count\n\n    for (let i = 0; i < cnt; i++) {\n      const _object = objs.get(i)\n\n      const object = extractObjectData(_object, doc)\n\n      _object.delete()\n\n      if (object) {\n        objects.push(object)\n      }\n    }\n\n    // Handle instance definitions\n    // console.log( `Instance Definitions Count: ${doc.instanceDefinitions().count()}` );\n\n    for (let i = 0; i < doc.instanceDefinitions().count(); i++) {\n      const idef = doc.instanceDefinitions().get(i)\n      const idefAttributes = extractProperties(idef)\n      idefAttributes.objectIds = idef.getObjectIds()\n\n      objects.push({ geometry: null, attributes: idefAttributes, objectType: 'InstanceDefinition' })\n    }\n\n    // Handle materials\n\n    const textureTypes = [\n      // rhino.TextureType.Bitmap,\n      rhino.TextureType.Diffuse,\n      rhino.TextureType.Bump,\n      rhino.TextureType.Transparency,\n      rhino.TextureType.Opacity,\n      rhino.TextureType.Emap,\n    ]\n\n    const pbrTextureTypes = [\n      rhino.TextureType.PBR_BaseColor,\n      rhino.TextureType.PBR_Subsurface,\n      rhino.TextureType.PBR_SubsurfaceScattering,\n      rhino.TextureType.PBR_SubsurfaceScatteringRadius,\n      rhino.TextureType.PBR_Metallic,\n      rhino.TextureType.PBR_Specular,\n      rhino.TextureType.PBR_SpecularTint,\n      rhino.TextureType.PBR_Roughness,\n      rhino.TextureType.PBR_Anisotropic,\n      rhino.TextureType.PBR_Anisotropic_Rotation,\n      rhino.TextureType.PBR_Sheen,\n      rhino.TextureType.PBR_SheenTint,\n      rhino.TextureType.PBR_Clearcoat,\n      rhino.TextureType.PBR_ClearcoatBump,\n      rhino.TextureType.PBR_ClearcoatRoughness,\n      rhino.TextureType.PBR_OpacityIor,\n      rhino.TextureType.PBR_OpacityRoughness,\n      rhino.TextureType.PBR_Emission,\n      rhino.TextureType.PBR_AmbientOcclusion,\n      rhino.TextureType.PBR_Displacement,\n    ]\n\n    for (let i = 0; i < doc.materials().count(); i++) {\n      const _material = doc.materials().get(i)\n      const _pbrMaterial = _material.physicallyBased()\n\n      let material = extractProperties(_material)\n\n      const textures = []\n\n      for (let j = 0; j < textureTypes.length; j++) {\n        const _texture = _material.getTexture(textureTypes[j])\n        if (_texture) {\n          let textureType = textureTypes[j].constructor.name\n          textureType = textureType.substring(12, textureType.length)\n          const texture = { type: textureType }\n\n          const image = doc.getEmbeddedFileAsBase64(_texture.fileName)\n\n          if (image) {\n            texture.image = 'data:image/png;base64,' + image\n          } else {\n            console.warn(`THREE.3DMLoader: Image for ${textureType} texture not embedded in file.`)\n            texture.image = null\n          }\n\n          textures.push(texture)\n\n          _texture.delete()\n        }\n      }\n\n      material.textures = textures\n\n      if (_pbrMaterial.supported) {\n        console.log('pbr true')\n\n        for (let j = 0; j < pbrTextureTypes.length; j++) {\n          const _texture = _material.getTexture(textureTypes[j])\n          if (_texture) {\n            const image = doc.getEmbeddedFileAsBase64(_texture.fileName)\n            let textureType = textureTypes[j].constructor.name\n            textureType = textureType.substring(12, textureType.length)\n            const texture = { type: textureType, image: 'data:image/png;base64,' + image }\n            textures.push(texture)\n\n            _texture.delete()\n          }\n        }\n\n        const pbMaterialProperties = extractProperties(_material.physicallyBased())\n\n        material = Object.assign(pbMaterialProperties, material)\n      }\n\n      materials.push(material)\n\n      _material.delete()\n      _pbrMaterial.delete()\n    }\n\n    // Handle layers\n\n    for (let i = 0; i < doc.layers().count(); i++) {\n      const _layer = doc.layers().get(i)\n      const layer = extractProperties(_layer)\n\n      layers.push(layer)\n\n      _layer.delete()\n    }\n\n    // Handle views\n\n    for (let i = 0; i < doc.views().count(); i++) {\n      const _view = doc.views().get(i)\n      const view = extractProperties(_view)\n\n      views.push(view)\n\n      _view.delete()\n    }\n\n    // Handle named views\n\n    for (let i = 0; i < doc.namedViews().count(); i++) {\n      const _namedView = doc.namedViews().get(i)\n      const namedView = extractProperties(_namedView)\n\n      namedViews.push(namedView)\n\n      _namedView.delete()\n    }\n\n    // Handle groups\n\n    for (let i = 0; i < doc.groups().count(); i++) {\n      const _group = doc.groups().get(i)\n      const group = extractProperties(_group)\n\n      groups.push(group)\n\n      _group.delete()\n    }\n\n    // Handle settings\n\n    const settings = extractProperties(doc.settings())\n\n    //TODO: Handle other document stuff like dimstyles, instance definitions, bitmaps etc.\n\n    // Handle dimstyles\n    // console.log( `Dimstyle Count: ${doc.dimstyles().count()}` );\n\n    // Handle bitmaps\n    // console.log( `Bitmap Count: ${doc.bitmaps().count()}` );\n\n    // Handle strings -- this seems to be broken at the moment in rhino3dm\n    // console.log( `Document Strings Count: ${doc.strings().count()}` );\n\n    /*\n\t\tfor( var i = 0; i < doc.strings().count(); i++ ){\n\n\t\t\tvar _string= doc.strings().get( i );\n\n\t\t\tconsole.log(_string);\n\t\t\tvar string = extractProperties( _group );\n\n\t\t\tstrings.push( string );\n\n\t\t\t_string.delete();\n\n\t\t}\n\t\t*/\n\n    doc.delete()\n\n    return { objects, materials, layers, views, namedViews, groups, settings }\n  }\n\n  function extractObjectData(object, doc) {\n    const _geometry = object.geometry()\n    const _attributes = object.attributes()\n    let objectType = _geometry.objectType\n    let geometry, attributes, position, data, mesh\n\n    // skip instance definition objects\n    //if( _attributes.isInstanceDefinitionObject ) { continue; }\n\n    // TODO: handle other geometry types\n    switch (objectType) {\n      case rhino.ObjectType.Curve:\n        const pts = curveToPoints(_geometry, 100)\n\n        position = {}\n        attributes = {}\n        data = {}\n\n        position.itemSize = 3\n        position.type = 'Float32Array'\n        position.array = []\n\n        for (let j = 0; j < pts.length; j++) {\n          position.array.push(pts[j][0])\n          position.array.push(pts[j][1])\n          position.array.push(pts[j][2])\n        }\n\n        attributes.position = position\n        data.attributes = attributes\n\n        geometry = { data }\n\n        break\n\n      case rhino.ObjectType.Point:\n        const pt = _geometry.location\n\n        position = {}\n        const color = {}\n        attributes = {}\n        data = {}\n\n        position.itemSize = 3\n        position.type = 'Float32Array'\n        position.array = [pt[0], pt[1], pt[2]]\n\n        const _color = _attributes.drawColor(doc)\n\n        color.itemSize = 3\n        color.type = 'Float32Array'\n        color.array = [_color.r / 255.0, _color.g / 255.0, _color.b / 255.0]\n\n        attributes.position = position\n        attributes.color = color\n        data.attributes = attributes\n\n        geometry = { data }\n\n        break\n\n      case rhino.ObjectType.PointSet:\n      case rhino.ObjectType.Mesh:\n        geometry = _geometry.toThreejsJSON()\n\n        break\n\n      case rhino.ObjectType.Brep:\n        const faces = _geometry.faces()\n        mesh = new rhino.Mesh()\n\n        for (let faceIndex = 0; faceIndex < faces.count; faceIndex++) {\n          const face = faces.get(faceIndex)\n          const _mesh = face.getMesh(rhino.MeshType.Any)\n\n          if (_mesh) {\n            mesh.append(_mesh)\n            _mesh.delete()\n          }\n\n          face.delete()\n        }\n\n        if (mesh.faces().count > 0) {\n          mesh.compact()\n          geometry = mesh.toThreejsJSON()\n          faces.delete()\n        }\n\n        mesh.delete()\n\n        break\n\n      case rhino.ObjectType.Extrusion:\n        mesh = _geometry.getMesh(rhino.MeshType.Any)\n\n        if (mesh) {\n          geometry = mesh.toThreejsJSON()\n          mesh.delete()\n        }\n\n        break\n\n      case rhino.ObjectType.TextDot:\n        geometry = extractProperties(_geometry)\n\n        break\n\n      case rhino.ObjectType.Light:\n        geometry = extractProperties(_geometry)\n\n        break\n\n      case rhino.ObjectType.InstanceReference:\n        geometry = extractProperties(_geometry)\n        geometry.xform = extractProperties(_geometry.xform)\n        geometry.xform.array = _geometry.xform.toFloatArray(true)\n\n        break\n\n      case rhino.ObjectType.SubD:\n        // TODO: precalculate resulting vertices and faces and warn on excessive results\n        _geometry.subdivide(3)\n        mesh = rhino.Mesh.createFromSubDControlNet(_geometry)\n        if (mesh) {\n          geometry = mesh.toThreejsJSON()\n          mesh.delete()\n        }\n\n        break\n\n      /*\n\t\t\t\tcase rhino.ObjectType.Annotation:\n\t\t\t\tcase rhino.ObjectType.Hatch:\n\t\t\t\tcase rhino.ObjectType.ClipPlane:\n\t\t\t\t*/\n\n      default:\n        console.warn(`THREE.3DMLoader: TODO: Implement ${objectType.constructor.name}`)\n        break\n    }\n\n    if (geometry) {\n      attributes = extractProperties(_attributes)\n      attributes.geometry = extractProperties(_geometry)\n\n      if (_attributes.groupCount > 0) {\n        attributes.groupIds = _attributes.getGroupList()\n      }\n\n      if (_attributes.userStringCount > 0) {\n        attributes.userStrings = _attributes.getUserStrings()\n      }\n\n      if (_geometry.userStringCount > 0) {\n        attributes.geometry.userStrings = _geometry.getUserStrings()\n      }\n\n      attributes.drawColor = _attributes.drawColor(doc)\n\n      objectType = objectType.constructor.name\n      objectType = objectType.substring(11, objectType.length)\n\n      return { geometry, attributes, objectType }\n    } else {\n      console.warn(`THREE.3DMLoader: ${objectType.constructor.name} has no associated mesh geometry.`)\n    }\n  }\n\n  function extractProperties(object) {\n    const result = {}\n\n    for (const property in object) {\n      const value = object[property]\n\n      if (typeof value !== 'function') {\n        if (typeof value === 'object' && value !== null && value.hasOwnProperty('constructor')) {\n          result[property] = { name: value.constructor.name, value: value.value }\n        } else {\n          result[property] = value\n        }\n      } else {\n        // these are functions that could be called to extract more data.\n        //console.log( `${property}: ${object[ property ].constructor.name}` );\n      }\n    }\n\n    return result\n  }\n\n  function curveToPoints(curve, pointLimit) {\n    let pointCount = pointLimit\n    let rc = []\n    const ts = []\n\n    if (curve instanceof rhino.LineCurve) {\n      return [curve.pointAtStart, curve.pointAtEnd]\n    }\n\n    if (curve instanceof rhino.PolylineCurve) {\n      pointCount = curve.pointCount\n      for (let i = 0; i < pointCount; i++) {\n        rc.push(curve.point(i))\n      }\n\n      return rc\n    }\n\n    if (curve instanceof rhino.PolyCurve) {\n      const segmentCount = curve.segmentCount\n\n      for (let i = 0; i < segmentCount; i++) {\n        const segment = curve.segmentCurve(i)\n        const segmentArray = curveToPoints(segment, pointCount)\n        rc = rc.concat(segmentArray)\n        segment.delete()\n      }\n\n      return rc\n    }\n\n    if (curve instanceof rhino.ArcCurve) {\n      pointCount = Math.floor(curve.angleDegrees / 5)\n      pointCount = pointCount < 2 ? 2 : pointCount\n      // alternative to this hardcoded version: https://stackoverflow.com/a/18499923/2179399\n    }\n\n    if (curve instanceof rhino.NurbsCurve && curve.degree === 1) {\n      const pLine = curve.tryGetPolyline()\n\n      for (let i = 0; i < pLine.count; i++) {\n        rc.push(pLine.get(i))\n      }\n\n      pLine.delete()\n\n      return rc\n    }\n\n    const domain = curve.domain\n    const divisions = pointCount - 1.0\n\n    for (let j = 0; j < pointCount; j++) {\n      const t = domain[0] + (j / divisions) * (domain[1] - domain[0])\n\n      if (t === domain[0] || t === domain[1]) {\n        ts.push(t)\n        continue\n      }\n\n      const tan = curve.tangentAt(t)\n      const prevTan = curve.tangentAt(ts.slice(-1)[0])\n\n      // Duplicated from THREE.Vector3\n      // How to pass imports to worker?\n\n      const tS = tan[0] * tan[0] + tan[1] * tan[1] + tan[2] * tan[2]\n      const ptS = prevTan[0] * prevTan[0] + prevTan[1] * prevTan[1] + prevTan[2] * prevTan[2]\n\n      const denominator = Math.sqrt(tS * ptS)\n\n      let angle\n\n      if (denominator === 0) {\n        angle = Math.PI / 2\n      } else {\n        const theta = (tan.x * prevTan.x + tan.y * prevTan.y + tan.z * prevTan.z) / denominator\n        angle = Math.acos(Math.max(-1, Math.min(1, theta)))\n      }\n\n      if (angle < 0.1) continue\n\n      ts.push(t)\n    }\n\n    rc = ts.map((t) => curve.pointAt(t))\n    return rc\n  }\n}\n\nexport { Rhino3dmLoader }\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}