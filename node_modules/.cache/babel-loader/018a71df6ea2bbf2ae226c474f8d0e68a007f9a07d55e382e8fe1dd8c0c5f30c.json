{"ast":null,"code":"import _classCallCheck from \"C:/Users/Nayyu/Desktop/skibidai-public-build/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Nayyu/Desktop/skibidai-public-build/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"C:/Users/Nayyu/Desktop/skibidai-public-build/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/Nayyu/Desktop/skibidai-public-build/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { Loader, FileLoader, BufferGeometry, BufferAttribute, Vector3, Float32BufferAttribute } from \"three\";\nimport { decodeText } from \"../_polyfill/LoaderUtils.js\";\nvar STLLoader = /*#__PURE__*/function (_Loader) {\n  _inherits(STLLoader, _Loader);\n  var _super = _createSuper(STLLoader);\n  function STLLoader(manager) {\n    _classCallCheck(this, STLLoader);\n    return _super.call(this, manager);\n  }\n  _createClass(STLLoader, [{\n    key: \"load\",\n    value: function load(url, onLoad, onProgress, onError) {\n      var scope = this;\n      var loader = new FileLoader(this.manager);\n      loader.setPath(this.path);\n      loader.setResponseType(\"arraybuffer\");\n      loader.setRequestHeader(this.requestHeader);\n      loader.setWithCredentials(this.withCredentials);\n      loader.load(url, function (text) {\n        try {\n          onLoad(scope.parse(text));\n        } catch (e) {\n          if (onError) {\n            onError(e);\n          } else {\n            console.error(e);\n          }\n          scope.manager.itemError(url);\n        }\n      }, onProgress, onError);\n    }\n  }, {\n    key: \"parse\",\n    value: function parse(data) {\n      function isBinary(data2) {\n        var reader = new DataView(data2);\n        var face_size = 32 / 8 * 3 + 32 / 8 * 3 * 3 + 16 / 8;\n        var n_faces = reader.getUint32(80, true);\n        var expect = 80 + 32 / 8 + n_faces * face_size;\n        if (expect === reader.byteLength) {\n          return true;\n        }\n        var solid = [115, 111, 108, 105, 100];\n        for (var off = 0; off < 5; off++) {\n          if (matchDataViewAt(solid, reader, off)) return false;\n        }\n        return true;\n      }\n      function matchDataViewAt(query, reader, offset) {\n        for (var i = 0, il = query.length; i < il; i++) {\n          if (query[i] !== reader.getUint8(offset + i, false)) return false;\n        }\n        return true;\n      }\n      function parseBinary(data2) {\n        var reader = new DataView(data2);\n        var faces = reader.getUint32(80, true);\n        var r,\n          g,\n          b,\n          hasColors = false,\n          colors;\n        var defaultR, defaultG, defaultB, alpha;\n        for (var index = 0; index < 80 - 10; index++) {\n          if (reader.getUint32(index, false) == 1129270351 && reader.getUint8(index + 4) == 82 && reader.getUint8(index + 5) == 61) {\n            hasColors = true;\n            colors = new Float32Array(faces * 3 * 3);\n            defaultR = reader.getUint8(index + 6) / 255;\n            defaultG = reader.getUint8(index + 7) / 255;\n            defaultB = reader.getUint8(index + 8) / 255;\n            alpha = reader.getUint8(index + 9) / 255;\n          }\n        }\n        var dataOffset = 84;\n        var faceLength = 12 * 4 + 2;\n        var geometry = new BufferGeometry();\n        var vertices = new Float32Array(faces * 3 * 3);\n        var normals = new Float32Array(faces * 3 * 3);\n        for (var face = 0; face < faces; face++) {\n          var start = dataOffset + face * faceLength;\n          var normalX = reader.getFloat32(start, true);\n          var normalY = reader.getFloat32(start + 4, true);\n          var normalZ = reader.getFloat32(start + 8, true);\n          if (hasColors) {\n            var packedColor = reader.getUint16(start + 48, true);\n            if ((packedColor & 32768) === 0) {\n              r = (packedColor & 31) / 31;\n              g = (packedColor >> 5 & 31) / 31;\n              b = (packedColor >> 10 & 31) / 31;\n            } else {\n              r = defaultR;\n              g = defaultG;\n              b = defaultB;\n            }\n          }\n          for (var i = 1; i <= 3; i++) {\n            var vertexstart = start + i * 12;\n            var componentIdx = face * 3 * 3 + (i - 1) * 3;\n            vertices[componentIdx] = reader.getFloat32(vertexstart, true);\n            vertices[componentIdx + 1] = reader.getFloat32(vertexstart + 4, true);\n            vertices[componentIdx + 2] = reader.getFloat32(vertexstart + 8, true);\n            normals[componentIdx] = normalX;\n            normals[componentIdx + 1] = normalY;\n            normals[componentIdx + 2] = normalZ;\n            if (hasColors) {\n              colors[componentIdx] = r;\n              colors[componentIdx + 1] = g;\n              colors[componentIdx + 2] = b;\n            }\n          }\n        }\n        geometry.setAttribute(\"position\", new BufferAttribute(vertices, 3));\n        geometry.setAttribute(\"normal\", new BufferAttribute(normals, 3));\n        if (hasColors) {\n          geometry.setAttribute(\"color\", new BufferAttribute(colors, 3));\n          geometry.hasColors = true;\n          geometry.alpha = alpha;\n        }\n        return geometry;\n      }\n      function parseASCII(data2) {\n        var geometry = new BufferGeometry();\n        var patternSolid = /solid([\\s\\S]*?)endsolid/g;\n        var patternFace = /facet([\\s\\S]*?)endfacet/g;\n        var faceCounter = 0;\n        var patternFloat = /[\\s]+([+-]?(?:\\d*)(?:\\.\\d*)?(?:[eE][+-]?\\d+)?)/.source;\n        var patternVertex = new RegExp(\"vertex\" + patternFloat + patternFloat + patternFloat, \"g\");\n        var patternNormal = new RegExp(\"normal\" + patternFloat + patternFloat + patternFloat, \"g\");\n        var vertices = [];\n        var normals = [];\n        var normal = new Vector3();\n        var result;\n        var groupCount = 0;\n        var startVertex = 0;\n        var endVertex = 0;\n        while ((result = patternSolid.exec(data2)) !== null) {\n          startVertex = endVertex;\n          var solid = result[0];\n          while ((result = patternFace.exec(solid)) !== null) {\n            var vertexCountPerFace = 0;\n            var normalCountPerFace = 0;\n            var text = result[0];\n            while ((result = patternNormal.exec(text)) !== null) {\n              normal.x = parseFloat(result[1]);\n              normal.y = parseFloat(result[2]);\n              normal.z = parseFloat(result[3]);\n              normalCountPerFace++;\n            }\n            while ((result = patternVertex.exec(text)) !== null) {\n              vertices.push(parseFloat(result[1]), parseFloat(result[2]), parseFloat(result[3]));\n              normals.push(normal.x, normal.y, normal.z);\n              vertexCountPerFace++;\n              endVertex++;\n            }\n            if (normalCountPerFace !== 1) {\n              console.error(\"THREE.STLLoader: Something isn't right with the normal of face number \" + faceCounter);\n            }\n            if (vertexCountPerFace !== 3) {\n              console.error(\"THREE.STLLoader: Something isn't right with the vertices of face number \" + faceCounter);\n            }\n            faceCounter++;\n          }\n          var start = startVertex;\n          var count = endVertex - startVertex;\n          geometry.addGroup(start, count, groupCount);\n          groupCount++;\n        }\n        geometry.setAttribute(\"position\", new Float32BufferAttribute(vertices, 3));\n        geometry.setAttribute(\"normal\", new Float32BufferAttribute(normals, 3));\n        return geometry;\n      }\n      function ensureString(buffer) {\n        if (typeof buffer !== \"string\") {\n          return decodeText(new Uint8Array(buffer));\n        }\n        return buffer;\n      }\n      function ensureBinary(buffer) {\n        if (typeof buffer === \"string\") {\n          var array_buffer = new Uint8Array(buffer.length);\n          for (var i = 0; i < buffer.length; i++) {\n            array_buffer[i] = buffer.charCodeAt(i) & 255;\n          }\n          return array_buffer.buffer || array_buffer;\n        } else {\n          return buffer;\n        }\n      }\n      var binData = ensureBinary(data);\n      return isBinary(binData) ? parseBinary(binData) : parseASCII(ensureString(data));\n    }\n  }]);\n  return STLLoader;\n}(Loader);\nexport { STLLoader };","map":{"version":3,"names":["STLLoader","_Loader","_inherits","_super","_createSuper","manager","_classCallCheck","call","_createClass","key","value","load","url","onLoad","onProgress","onError","scope","loader","FileLoader","setPath","path","setResponseType","setRequestHeader","requestHeader","setWithCredentials","withCredentials","text","parse","e","console","error","itemError","data","isBinary","data2","reader","DataView","face_size","n_faces","getUint32","expect","byteLength","solid","off","matchDataViewAt","query","offset","i","il","length","getUint8","parseBinary","faces","r","g","b","hasColors","colors","defaultR","defaultG","defaultB","alpha","index","Float32Array","dataOffset","faceLength","geometry","BufferGeometry","vertices","normals","face","start","normalX","getFloat32","normalY","normalZ","packedColor","getUint16","vertexstart","componentIdx","setAttribute","BufferAttribute","parseASCII","patternSolid","patternFace","faceCounter","patternFloat","source","patternVertex","RegExp","patternNormal","normal","Vector3","result","groupCount","startVertex","endVertex","exec","vertexCountPerFace","normalCountPerFace","x","parseFloat","y","z","push","count","addGroup","Float32BufferAttribute","ensureString","buffer","decodeText","Uint8Array","ensureBinary","array_buffer","charCodeAt","binData","Loader"],"sources":["C:\\Users\\Nayyu\\Desktop\\skibidai-public-build\\node_modules\\src\\loaders\\STLLoader.js"],"sourcesContent":["import {\n  BufferAttribute,\n  BufferGeometry,\n  FileLoader,\n  Float32BufferAttribute,\n  Loader,\n  LoaderUtils,\n  Vector3,\n} from 'three'\nimport { decodeText } from '../_polyfill/LoaderUtils'\n\n/**\n * Description: A THREE loader for STL ASCII files, as created by Solidworks and other CAD programs.\n *\n * Supports both binary and ASCII encoded files, with automatic detection of type.\n *\n * The loader returns a non-indexed buffer geometry.\n *\n * Limitations:\n *  Binary decoding supports \"Magics\" color format (http://en.wikipedia.org/wiki/STL_(file_format)#Color_in_binary_STL).\n *  There is perhaps some question as to how valid it is to always assume little-endian-ness.\n *  ASCII decoding assumes file is UTF-8.\n *\n * Usage:\n *  const loader = new STLLoader();\n *  loader.load( './models/stl/slotted_disk.stl', function ( geometry ) {\n *    scene.add( new THREE.Mesh( geometry ) );\n *  });\n *\n * For binary STLs geometry might contain colors for vertices. To use it:\n *  // use the same code to load STL as above\n *  if (geometry.hasColors) {\n *    material = new THREE.MeshPhongMaterial({ opacity: geometry.alpha, vertexColors: true });\n *  } else { .... }\n *  const mesh = new THREE.Mesh( geometry, material );\n *\n * For ASCII STLs containing multiple solids, each solid is assigned to a different group.\n * Groups can be used to assign a different color by defining an array of materials with the same length of\n * geometry.groups and passing it to the Mesh constructor:\n *\n * const mesh = new THREE.Mesh( geometry, material );\n *\n * For example:\n *\n *  const materials = [];\n *  const nGeometryGroups = geometry.groups.length;\n *\n *  const colorMap = ...; // Some logic to index colors.\n *\n *  for (let i = 0; i < nGeometryGroups; i++) {\n *\n *\t\tconst material = new THREE.MeshPhongMaterial({\n *\t\t\tcolor: colorMap[i],\n *\t\t\twireframe: false\n *\t\t});\n *\n *  }\n *\n *  materials.push(material);\n *  const mesh = new THREE.Mesh(geometry, materials);\n */\n\nclass STLLoader extends Loader {\n  constructor(manager) {\n    super(manager)\n  }\n\n  load(url, onLoad, onProgress, onError) {\n    const scope = this\n\n    const loader = new FileLoader(this.manager)\n    loader.setPath(this.path)\n    loader.setResponseType('arraybuffer')\n    loader.setRequestHeader(this.requestHeader)\n    loader.setWithCredentials(this.withCredentials)\n\n    loader.load(\n      url,\n      function (text) {\n        try {\n          onLoad(scope.parse(text))\n        } catch (e) {\n          if (onError) {\n            onError(e)\n          } else {\n            console.error(e)\n          }\n\n          scope.manager.itemError(url)\n        }\n      },\n      onProgress,\n      onError,\n    )\n  }\n\n  parse(data) {\n    function isBinary(data) {\n      const reader = new DataView(data)\n      const face_size = (32 / 8) * 3 + (32 / 8) * 3 * 3 + 16 / 8\n      const n_faces = reader.getUint32(80, true)\n      const expect = 80 + 32 / 8 + n_faces * face_size\n\n      if (expect === reader.byteLength) {\n        return true\n      }\n\n      // An ASCII STL data must begin with 'solid ' as the first six bytes.\n      // However, ASCII STLs lacking the SPACE after the 'd' are known to be\n      // plentiful.  So, check the first 5 bytes for 'solid'.\n\n      // Several encodings, such as UTF-8, precede the text with up to 5 bytes:\n      // https://en.wikipedia.org/wiki/Byte_order_mark#Byte_order_marks_by_encoding\n      // Search for \"solid\" to start anywhere after those prefixes.\n\n      // US-ASCII ordinal values for 's', 'o', 'l', 'i', 'd'\n\n      const solid = [115, 111, 108, 105, 100]\n\n      for (let off = 0; off < 5; off++) {\n        // If \"solid\" text is matched to the current offset, declare it to be an ASCII STL.\n\n        if (matchDataViewAt(solid, reader, off)) return false\n      }\n\n      // Couldn't find \"solid\" text at the beginning; it is binary STL.\n\n      return true\n    }\n\n    function matchDataViewAt(query, reader, offset) {\n      // Check if each byte in query matches the corresponding byte from the current offset\n\n      for (let i = 0, il = query.length; i < il; i++) {\n        if (query[i] !== reader.getUint8(offset + i, false)) return false\n      }\n\n      return true\n    }\n\n    function parseBinary(data) {\n      const reader = new DataView(data)\n      const faces = reader.getUint32(80, true)\n\n      let r,\n        g,\n        b,\n        hasColors = false,\n        colors\n      let defaultR, defaultG, defaultB, alpha\n\n      // process STL header\n      // check for default color in header (\"COLOR=rgba\" sequence).\n\n      for (let index = 0; index < 80 - 10; index++) {\n        if (\n          reader.getUint32(index, false) == 0x434f4c4f /*COLO*/ &&\n          reader.getUint8(index + 4) == 0x52 /*'R'*/ &&\n          reader.getUint8(index + 5) == 0x3d /*'='*/\n        ) {\n          hasColors = true\n          colors = new Float32Array(faces * 3 * 3)\n\n          defaultR = reader.getUint8(index + 6) / 255\n          defaultG = reader.getUint8(index + 7) / 255\n          defaultB = reader.getUint8(index + 8) / 255\n          alpha = reader.getUint8(index + 9) / 255\n        }\n      }\n\n      const dataOffset = 84\n      const faceLength = 12 * 4 + 2\n\n      const geometry = new BufferGeometry()\n\n      const vertices = new Float32Array(faces * 3 * 3)\n      const normals = new Float32Array(faces * 3 * 3)\n\n      for (let face = 0; face < faces; face++) {\n        const start = dataOffset + face * faceLength\n        const normalX = reader.getFloat32(start, true)\n        const normalY = reader.getFloat32(start + 4, true)\n        const normalZ = reader.getFloat32(start + 8, true)\n\n        if (hasColors) {\n          const packedColor = reader.getUint16(start + 48, true)\n\n          if ((packedColor & 0x8000) === 0) {\n            // facet has its own unique color\n\n            r = (packedColor & 0x1f) / 31\n            g = ((packedColor >> 5) & 0x1f) / 31\n            b = ((packedColor >> 10) & 0x1f) / 31\n          } else {\n            r = defaultR\n            g = defaultG\n            b = defaultB\n          }\n        }\n\n        for (let i = 1; i <= 3; i++) {\n          const vertexstart = start + i * 12\n          const componentIdx = face * 3 * 3 + (i - 1) * 3\n\n          vertices[componentIdx] = reader.getFloat32(vertexstart, true)\n          vertices[componentIdx + 1] = reader.getFloat32(vertexstart + 4, true)\n          vertices[componentIdx + 2] = reader.getFloat32(vertexstart + 8, true)\n\n          normals[componentIdx] = normalX\n          normals[componentIdx + 1] = normalY\n          normals[componentIdx + 2] = normalZ\n\n          if (hasColors) {\n            colors[componentIdx] = r\n            colors[componentIdx + 1] = g\n            colors[componentIdx + 2] = b\n          }\n        }\n      }\n\n      geometry.setAttribute('position', new BufferAttribute(vertices, 3))\n      geometry.setAttribute('normal', new BufferAttribute(normals, 3))\n\n      if (hasColors) {\n        geometry.setAttribute('color', new BufferAttribute(colors, 3))\n        geometry.hasColors = true\n        geometry.alpha = alpha\n      }\n\n      return geometry\n    }\n\n    function parseASCII(data) {\n      const geometry = new BufferGeometry()\n      const patternSolid = /solid([\\s\\S]*?)endsolid/g\n      const patternFace = /facet([\\s\\S]*?)endfacet/g\n      let faceCounter = 0\n\n      const patternFloat = /[\\s]+([+-]?(?:\\d*)(?:\\.\\d*)?(?:[eE][+-]?\\d+)?)/.source\n      const patternVertex = new RegExp('vertex' + patternFloat + patternFloat + patternFloat, 'g')\n      const patternNormal = new RegExp('normal' + patternFloat + patternFloat + patternFloat, 'g')\n\n      const vertices = []\n      const normals = []\n\n      const normal = new Vector3()\n\n      let result\n\n      let groupCount = 0\n      let startVertex = 0\n      let endVertex = 0\n\n      while ((result = patternSolid.exec(data)) !== null) {\n        startVertex = endVertex\n\n        const solid = result[0]\n\n        while ((result = patternFace.exec(solid)) !== null) {\n          let vertexCountPerFace = 0\n          let normalCountPerFace = 0\n\n          const text = result[0]\n\n          while ((result = patternNormal.exec(text)) !== null) {\n            normal.x = parseFloat(result[1])\n            normal.y = parseFloat(result[2])\n            normal.z = parseFloat(result[3])\n            normalCountPerFace++\n          }\n\n          while ((result = patternVertex.exec(text)) !== null) {\n            vertices.push(parseFloat(result[1]), parseFloat(result[2]), parseFloat(result[3]))\n            normals.push(normal.x, normal.y, normal.z)\n            vertexCountPerFace++\n            endVertex++\n          }\n\n          // every face have to own ONE valid normal\n\n          if (normalCountPerFace !== 1) {\n            console.error(\"THREE.STLLoader: Something isn't right with the normal of face number \" + faceCounter)\n          }\n\n          // each face have to own THREE valid vertices\n\n          if (vertexCountPerFace !== 3) {\n            console.error(\"THREE.STLLoader: Something isn't right with the vertices of face number \" + faceCounter)\n          }\n\n          faceCounter++\n        }\n\n        const start = startVertex\n        const count = endVertex - startVertex\n\n        geometry.addGroup(start, count, groupCount)\n        groupCount++\n      }\n\n      geometry.setAttribute('position', new Float32BufferAttribute(vertices, 3))\n      geometry.setAttribute('normal', new Float32BufferAttribute(normals, 3))\n\n      return geometry\n    }\n\n    function ensureString(buffer) {\n      if (typeof buffer !== 'string') {\n        return decodeText(new Uint8Array(buffer))\n      }\n\n      return buffer\n    }\n\n    function ensureBinary(buffer) {\n      if (typeof buffer === 'string') {\n        const array_buffer = new Uint8Array(buffer.length)\n        for (let i = 0; i < buffer.length; i++) {\n          array_buffer[i] = buffer.charCodeAt(i) & 0xff // implicitly assumes little-endian\n        }\n\n        return array_buffer.buffer || array_buffer\n      } else {\n        return buffer\n      }\n    }\n\n    // start\n\n    const binData = ensureBinary(data)\n\n    return isBinary(binData) ? parseBinary(binData) : parseASCII(ensureString(data))\n  }\n}\n\nexport { STLLoader }\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}