{"ast":null,"code":"import _createClass from \"C:/Users/Nayyu/Desktop/skibidai-public-build/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"C:/Users/Nayyu/Desktop/skibidai-public-build/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport { OrthographicCamera, Scene, StereoCamera, WebGLRenderTarget, ShaderMaterial, REVISION, Mesh, PlaneGeometry, LinearFilter, NearestFilter, RGBAFormat } from \"three\";\nvar ParallaxBarrierEffect = /*#__PURE__*/_createClass(function ParallaxBarrierEffect(renderer) {\n  _classCallCheck(this, ParallaxBarrierEffect);\n  var _camera = new OrthographicCamera(-1, 1, 1, -1, 0, 1);\n  var _scene = new Scene();\n  var _stereo = new StereoCamera();\n  var _params = {\n    minFilter: LinearFilter,\n    magFilter: NearestFilter,\n    format: RGBAFormat\n  };\n  var _renderTargetL = new WebGLRenderTarget(512, 512, _params);\n  var _renderTargetR = new WebGLRenderTarget(512, 512, _params);\n  var _material = new ShaderMaterial({\n    uniforms: {\n      mapLeft: {\n        value: _renderTargetL.texture\n      },\n      mapRight: {\n        value: _renderTargetR.texture\n      }\n    },\n    vertexShader: [\"varying vec2 vUv;\", \"void main() {\", \"\tvUv = vec2( uv.x, uv.y );\", \"\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\", \"}\"].join(\"\\n\"),\n    fragmentShader: [\"uniform sampler2D mapLeft;\", \"uniform sampler2D mapRight;\", \"varying vec2 vUv;\", \"void main() {\", \"\tvec2 uv = vUv;\", \"\tif ( ( mod( gl_FragCoord.y, 2.0 ) ) > 1.00 ) {\", \"\t\tgl_FragColor = texture2D( mapLeft, uv );\", \"\t} else {\", \"\t\tgl_FragColor = texture2D( mapRight, uv );\", \"\t}\", \"\t#include <tonemapping_fragment>\", \"\\t#include <\".concat(parseInt(REVISION.replace(/\\D+/g, \"\")) >= 154 ? \"colorspace_fragment\" : \"encodings_fragment\", \">\"), \"}\"].join(\"\\n\")\n  });\n  var mesh = new Mesh(new PlaneGeometry(2, 2), _material);\n  _scene.add(mesh);\n  this.setSize = function (width, height) {\n    renderer.setSize(width, height);\n    var pixelRatio = renderer.getPixelRatio();\n    _renderTargetL.setSize(width * pixelRatio, height * pixelRatio);\n    _renderTargetR.setSize(width * pixelRatio, height * pixelRatio);\n  };\n  this.render = function (scene, camera) {\n    if (scene.matrixWorldAutoUpdate === true) scene.updateMatrixWorld();\n    if (camera.parent === null && camera.matrixWorldAutoUpdate === true) camera.updateMatrixWorld();\n    _stereo.update(camera);\n    renderer.setRenderTarget(_renderTargetL);\n    renderer.clear();\n    renderer.render(scene, _stereo.cameraL);\n    renderer.setRenderTarget(_renderTargetR);\n    renderer.clear();\n    renderer.render(scene, _stereo.cameraR);\n    renderer.setRenderTarget(null);\n    renderer.render(_scene, _camera);\n  };\n});\nexport { ParallaxBarrierEffect };","map":{"version":3,"names":["ParallaxBarrierEffect","_createClass","renderer","_classCallCheck","_camera","OrthographicCamera","_scene","Scene","_stereo","StereoCamera","_params","minFilter","LinearFilter","magFilter","NearestFilter","format","RGBAFormat","_renderTargetL","WebGLRenderTarget","_renderTargetR","_material","ShaderMaterial","uniforms","mapLeft","value","texture","mapRight","vertexShader","join","fragmentShader","concat","parseInt","REVISION","replace","mesh","Mesh","PlaneGeometry","add","setSize","width","height","pixelRatio","getPixelRatio","render","scene","camera","matrixWorldAutoUpdate","updateMatrixWorld","parent","update","setRenderTarget","clear","cameraL","cameraR"],"sources":["C:\\Users\\Nayyu\\Desktop\\skibidai-public-build\\node_modules\\src\\effects\\ParallaxBarrierEffect.js"],"sourcesContent":["import {\n  LinearFilter,\n  Mesh,\n  NearestFilter,\n  OrthographicCamera,\n  PlaneGeometry,\n  RGBAFormat,\n  Scene,\n  ShaderMaterial,\n  StereoCamera,\n  WebGLRenderTarget,\n  REVISION,\n} from 'three'\n\nclass ParallaxBarrierEffect {\n  constructor(renderer) {\n    const _camera = new OrthographicCamera(-1, 1, 1, -1, 0, 1)\n\n    const _scene = new Scene()\n\n    const _stereo = new StereoCamera()\n\n    const _params = { minFilter: LinearFilter, magFilter: NearestFilter, format: RGBAFormat }\n\n    const _renderTargetL = new WebGLRenderTarget(512, 512, _params)\n    const _renderTargetR = new WebGLRenderTarget(512, 512, _params)\n\n    const _material = new ShaderMaterial({\n      uniforms: {\n        mapLeft: { value: _renderTargetL.texture },\n        mapRight: { value: _renderTargetR.texture },\n      },\n\n      vertexShader: [\n        'varying vec2 vUv;',\n\n        'void main() {',\n\n        '\tvUv = vec2( uv.x, uv.y );',\n        '\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',\n\n        '}',\n      ].join('\\n'),\n\n      fragmentShader: [\n        'uniform sampler2D mapLeft;',\n        'uniform sampler2D mapRight;',\n        'varying vec2 vUv;',\n\n        'void main() {',\n\n        '\tvec2 uv = vUv;',\n\n        '\tif ( ( mod( gl_FragCoord.y, 2.0 ) ) > 1.00 ) {',\n\n        '\t\tgl_FragColor = texture2D( mapLeft, uv );',\n\n        '\t} else {',\n\n        '\t\tgl_FragColor = texture2D( mapRight, uv );',\n\n        '\t}',\n\n        '\t#include <tonemapping_fragment>',\n        `\t#include <${parseInt(REVISION.replace(/\\D+/g, '')) >= 154 ? 'colorspace_fragment' : 'encodings_fragment'}>`,\n\n        '}',\n      ].join('\\n'),\n    })\n\n    const mesh = new Mesh(new PlaneGeometry(2, 2), _material)\n    _scene.add(mesh)\n\n    this.setSize = function (width, height) {\n      renderer.setSize(width, height)\n\n      const pixelRatio = renderer.getPixelRatio()\n\n      _renderTargetL.setSize(width * pixelRatio, height * pixelRatio)\n      _renderTargetR.setSize(width * pixelRatio, height * pixelRatio)\n    }\n\n    this.render = function (scene, camera) {\n      if (scene.matrixWorldAutoUpdate === true) scene.updateMatrixWorld()\n\n      if (camera.parent === null && camera.matrixWorldAutoUpdate === true) camera.updateMatrixWorld()\n\n      _stereo.update(camera)\n\n      renderer.setRenderTarget(_renderTargetL)\n      renderer.clear()\n      renderer.render(scene, _stereo.cameraL)\n\n      renderer.setRenderTarget(_renderTargetR)\n      renderer.clear()\n      renderer.render(scene, _stereo.cameraR)\n\n      renderer.setRenderTarget(null)\n      renderer.render(_scene, _camera)\n    }\n  }\n}\n\nexport { ParallaxBarrierEffect }\n"],"mappings":";;;IAcMA,qBAAA,gBAAAC,YAAA,CACJ,SAAAD,sBAAYE,QAAA,EAAU;EAAAC,eAAA,OAAAH,qBAAA;EACpB,IAAMI,OAAA,GAAU,IAAIC,kBAAA,CAAmB,IAAI,GAAG,GAAG,IAAI,GAAG,CAAC;EAEzD,IAAMC,MAAA,GAAS,IAAIC,KAAA,CAAO;EAE1B,IAAMC,OAAA,GAAU,IAAIC,YAAA,CAAc;EAElC,IAAMC,OAAA,GAAU;IAAEC,SAAA,EAAWC,YAAA;IAAcC,SAAA,EAAWC,aAAA;IAAeC,MAAA,EAAQC;EAAY;EAEzF,IAAMC,cAAA,GAAiB,IAAIC,iBAAA,CAAkB,KAAK,KAAKR,OAAO;EAC9D,IAAMS,cAAA,GAAiB,IAAID,iBAAA,CAAkB,KAAK,KAAKR,OAAO;EAE9D,IAAMU,SAAA,GAAY,IAAIC,cAAA,CAAe;IACnCC,QAAA,EAAU;MACRC,OAAA,EAAS;QAAEC,KAAA,EAAOP,cAAA,CAAeQ;MAAS;MAC1CC,QAAA,EAAU;QAAEF,KAAA,EAAOL,cAAA,CAAeM;MAAS;IAC5C;IAEDE,YAAA,EAAc,CACZ,qBAEA,iBAEA,8BACA,8EAEA,IACR,CAAQC,IAAA,CAAK,IAAI;IAEXC,cAAA,EAAgB,CACd,8BACA,+BACA,qBAEA,iBAEA,mBAEA,mDAEA,8CAEA,aAEA,+CAEA,MAEA,mDAAAC,MAAA,CACcC,QAAA,CAASC,QAAA,CAASC,OAAA,CAAQ,QAAQ,EAAE,CAAC,KAAK,MAAM,wBAAwB,4BAEtF,IACR,CAAQL,IAAA,CAAK,IAAI;EACjB,CAAK;EAED,IAAMM,IAAA,GAAO,IAAIC,IAAA,CAAK,IAAIC,aAAA,CAAc,GAAG,CAAC,GAAGhB,SAAS;EACxDd,MAAA,CAAO+B,GAAA,CAAIH,IAAI;EAEf,KAAKI,OAAA,GAAU,UAAUC,KAAA,EAAOC,MAAA,EAAQ;IACtCtC,QAAA,CAASoC,OAAA,CAAQC,KAAA,EAAOC,MAAM;IAE9B,IAAMC,UAAA,GAAavC,QAAA,CAASwC,aAAA,CAAe;IAE3CzB,cAAA,CAAeqB,OAAA,CAAQC,KAAA,GAAQE,UAAA,EAAYD,MAAA,GAASC,UAAU;IAC9DtB,cAAA,CAAemB,OAAA,CAAQC,KAAA,GAAQE,UAAA,EAAYD,MAAA,GAASC,UAAU;EAC/D;EAED,KAAKE,MAAA,GAAS,UAAUC,KAAA,EAAOC,MAAA,EAAQ;IACrC,IAAID,KAAA,CAAME,qBAAA,KAA0B,MAAMF,KAAA,CAAMG,iBAAA,CAAmB;IAEnE,IAAIF,MAAA,CAAOG,MAAA,KAAW,QAAQH,MAAA,CAAOC,qBAAA,KAA0B,MAAMD,MAAA,CAAOE,iBAAA,CAAmB;IAE/FvC,OAAA,CAAQyC,MAAA,CAAOJ,MAAM;IAErB3C,QAAA,CAASgD,eAAA,CAAgBjC,cAAc;IACvCf,QAAA,CAASiD,KAAA,CAAO;IAChBjD,QAAA,CAASyC,MAAA,CAAOC,KAAA,EAAOpC,OAAA,CAAQ4C,OAAO;IAEtClD,QAAA,CAASgD,eAAA,CAAgB/B,cAAc;IACvCjB,QAAA,CAASiD,KAAA,CAAO;IAChBjD,QAAA,CAASyC,MAAA,CAAOC,KAAA,EAAOpC,OAAA,CAAQ6C,OAAO;IAEtCnD,QAAA,CAASgD,eAAA,CAAgB,IAAI;IAC7BhD,QAAA,CAASyC,MAAA,CAAOrC,MAAA,EAAQF,OAAO;EAChC;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}