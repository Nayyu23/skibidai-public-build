{"ast":null,"code":"import _classCallCheck from \"C:/Users/Nayyu/Desktop/skibidai-public-build/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Nayyu/Desktop/skibidai-public-build/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"C:/Users/Nayyu/Desktop/skibidai-public-build/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _get from \"C:/Users/Nayyu/Desktop/skibidai-public-build/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"C:/Users/Nayyu/Desktop/skibidai-public-build/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"C:/Users/Nayyu/Desktop/skibidai-public-build/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/Nayyu/Desktop/skibidai-public-build/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nvar __defProp = Object.defineProperty;\nvar __defNormalProp = function __defNormalProp(obj, key, value) {\n  return key in obj ? __defProp(obj, key, {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: value\n  }) : obj[key] = value;\n};\nvar __publicField = function __publicField(obj, key, value) {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nimport { Object3D, Sphere, Box3 } from \"three\";\nimport { XRHandMeshModel } from \"./XRHandMeshModel.js\";\nvar TOUCH_RADIUS = 0.01;\nvar POINTING_JOINT = \"index-finger-tip\";\nvar OculusHandModel = /*#__PURE__*/function (_Object3D) {\n  _inherits(OculusHandModel, _Object3D);\n  var _super = _createSuper(OculusHandModel);\n  function OculusHandModel(controller, leftModelPath, rightModelPath) {\n    var _this;\n    _classCallCheck(this, OculusHandModel);\n    _this = _super.call(this);\n    __publicField(_assertThisInitialized(_this), \"controller\");\n    __publicField(_assertThisInitialized(_this), \"motionController\");\n    __publicField(_assertThisInitialized(_this), \"envMap\");\n    __publicField(_assertThisInitialized(_this), \"mesh\");\n    __publicField(_assertThisInitialized(_this), \"xrInputSource\");\n    _this.controller = controller;\n    _this.motionController = null;\n    _this.envMap = null;\n    _this.mesh = null;\n    _this.xrInputSource = null;\n    controller.addEventListener(\"connected\", function (event) {\n      var xrInputSource = event.data;\n      if (xrInputSource.hand && !_this.motionController) {\n        _this.xrInputSource = xrInputSource;\n        _this.motionController = new XRHandMeshModel(_assertThisInitialized(_this), controller, void 0, xrInputSource.handedness, xrInputSource.handedness === \"left\" ? leftModelPath : rightModelPath);\n      }\n    });\n    controller.addEventListener(\"disconnected\", function () {\n      _this.dispose();\n    });\n    return _this;\n  }\n  _createClass(OculusHandModel, [{\n    key: \"updateMatrixWorld\",\n    value: function updateMatrixWorld(force) {\n      _get(_getPrototypeOf(OculusHandModel.prototype), \"updateMatrixWorld\", this).call(this, force);\n      if (this.motionController) {\n        this.motionController.updateMesh();\n      }\n    }\n  }, {\n    key: \"getPointerPosition\",\n    value: function getPointerPosition() {\n      var indexFingerTip = this.controller.joints[POINTING_JOINT];\n      if (indexFingerTip) {\n        return indexFingerTip.position;\n      } else {\n        return null;\n      }\n    }\n  }, {\n    key: \"intersectBoxObject\",\n    value: function intersectBoxObject(boxObject) {\n      var pointerPosition = this.getPointerPosition();\n      if (pointerPosition) {\n        var indexSphere = new Sphere(pointerPosition, TOUCH_RADIUS);\n        var box = new Box3().setFromObject(boxObject);\n        return indexSphere.intersectsBox(box);\n      } else {\n        return false;\n      }\n    }\n  }, {\n    key: \"checkButton\",\n    value: function checkButton(button) {\n      if (this.intersectBoxObject(button)) {\n        button.onPress();\n      } else {\n        button.onClear();\n      }\n      if (button.isPressed()) {\n        button.whilePressed();\n      }\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      this.clear();\n      this.motionController = null;\n    }\n  }]);\n  return OculusHandModel;\n}(Object3D);\nexport { OculusHandModel };","map":{"version":3,"names":["TOUCH_RADIUS","POINTING_JOINT","OculusHandModel","_Object3D","_inherits","_super","_createSuper","controller","leftModelPath","rightModelPath","_this","_classCallCheck","call","__publicField","_assertThisInitialized","motionController","envMap","mesh","xrInputSource","addEventListener","event","data","hand","XRHandMeshModel","handedness","dispose","_createClass","key","value","updateMatrixWorld","force","_get","_getPrototypeOf","prototype","updateMesh","getPointerPosition","indexFingerTip","joints","position","intersectBoxObject","boxObject","pointerPosition","indexSphere","Sphere","box","Box3","setFromObject","intersectsBox","checkButton","button","onPress","onClear","isPressed","whilePressed","clear","Object3D"],"sources":["C:\\Users\\Nayyu\\Desktop\\skibidai-public-build\\node_modules\\src\\webxr\\OculusHandModel.ts"],"sourcesContent":["import { Object3D, Sphere, Box3, Mesh, Texture, Vector3 } from 'three'\nimport { XRHandMeshModel } from './XRHandMeshModel'\n\nconst TOUCH_RADIUS = 0.01\nconst POINTING_JOINT = 'index-finger-tip'\n\nexport interface XRButton extends Object3D {\n  onPress(): void\n  onClear(): void\n  isPressed(): boolean\n  whilePressed(): void\n}\n\nclass OculusHandModel extends Object3D {\n  controller: Object3D\n  motionController: XRHandMeshModel | null\n  envMap: Texture | null\n  mesh: Mesh | null\n  xrInputSource: XRInputSource | null\n\n  constructor(controller: Object3D, leftModelPath?: string, rightModelPath?: string) {\n    super()\n\n    this.controller = controller\n    this.motionController = null\n    this.envMap = null\n\n    this.mesh = null\n    this.xrInputSource = null\n\n    controller.addEventListener('connected', (event) => {\n      const xrInputSource = (event as any).data\n\n      if (xrInputSource.hand && !this.motionController) {\n        this.xrInputSource = xrInputSource\n\n        this.motionController = new XRHandMeshModel(\n          this,\n          controller,\n          undefined,\n          xrInputSource.handedness,\n          xrInputSource.handedness === 'left' ? leftModelPath : rightModelPath,\n        )\n      }\n    })\n\n    controller.addEventListener('disconnected', () => {\n      this.dispose()\n    })\n  }\n\n  updateMatrixWorld(force?: boolean): void {\n    super.updateMatrixWorld(force)\n\n    if (this.motionController) {\n      this.motionController.updateMesh()\n    }\n  }\n\n  getPointerPosition(): Vector3 | null {\n    // @ts-ignore XRController needs to extend Group\n    const indexFingerTip = this.controller.joints[POINTING_JOINT]\n    if (indexFingerTip) {\n      return indexFingerTip.position\n    } else {\n      return null\n    }\n  }\n\n  intersectBoxObject(boxObject: Object3D): boolean {\n    const pointerPosition = this.getPointerPosition()\n    if (pointerPosition) {\n      const indexSphere = new Sphere(pointerPosition, TOUCH_RADIUS)\n      const box = new Box3().setFromObject(boxObject)\n      return indexSphere.intersectsBox(box)\n    } else {\n      return false\n    }\n  }\n\n  checkButton(button: XRButton): void {\n    if (this.intersectBoxObject(button)) {\n      button.onPress()\n    } else {\n      button.onClear()\n    }\n\n    if (button.isPressed()) {\n      button.whilePressed()\n    }\n  }\n\n  dispose(): void {\n    this.clear()\n    this.motionController = null\n  }\n}\n\nexport { OculusHandModel }\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}