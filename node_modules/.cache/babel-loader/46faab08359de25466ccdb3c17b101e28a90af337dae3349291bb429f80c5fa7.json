{"ast":null,"code":"import _classCallCheck from \"C:/Users/Nayyu/Desktop/skibidai-public-build/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Nayyu/Desktop/skibidai-public-build/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"C:/Users/Nayyu/Desktop/skibidai-public-build/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/Nayyu/Desktop/skibidai-public-build/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { Loader, FileLoader, Vector3, DataTexture, UnsignedByteType, LinearFilter, ClampToEdgeWrapping } from \"three\";\nimport { Data3DTexture } from \"../_polyfill/Data3DTexture.js\";\nvar LUTCubeLoader = /*#__PURE__*/function (_Loader) {\n  _inherits(LUTCubeLoader, _Loader);\n  var _super = _createSuper(LUTCubeLoader);\n  function LUTCubeLoader() {\n    _classCallCheck(this, LUTCubeLoader);\n    return _super.apply(this, arguments);\n  }\n  _createClass(LUTCubeLoader, [{\n    key: \"load\",\n    value: function load(url, onLoad, onProgress, onError) {\n      var _this = this;\n      var loader = new FileLoader(this.manager);\n      loader.setPath(this.path);\n      loader.setResponseType(\"text\");\n      loader.load(url, function (text) {\n        try {\n          onLoad(_this.parse(text));\n        } catch (e) {\n          if (onError) {\n            onError(e);\n          } else {\n            console.error(e);\n          }\n          _this.manager.itemError(url);\n        }\n      }, onProgress, onError);\n    }\n  }, {\n    key: \"parse\",\n    value: function parse(str) {\n      str = str.replace(/^#.*?(\\n|\\r)/gm, \"\").replace(/^\\s*?(\\n|\\r)/gm, \"\").trim();\n      var title = null;\n      var size = null;\n      var domainMin = new Vector3(0, 0, 0);\n      var domainMax = new Vector3(1, 1, 1);\n      var lines = str.split(/[\\n\\r]+/g);\n      var data = null;\n      var currIndex = 0;\n      for (var i = 0, l = lines.length; i < l; i++) {\n        var line = lines[i].trim();\n        var split = line.split(/\\s/g);\n        switch (split[0]) {\n          case \"TITLE\":\n            title = line.substring(7, line.length - 1);\n            break;\n          case \"LUT_3D_SIZE\":\n            var sizeToken = split[1];\n            size = parseFloat(sizeToken);\n            data = new Uint8Array(size * size * size * 4);\n            break;\n          case \"DOMAIN_MIN\":\n            domainMin.x = parseFloat(split[1]);\n            domainMin.y = parseFloat(split[2]);\n            domainMin.z = parseFloat(split[3]);\n            break;\n          case \"DOMAIN_MAX\":\n            domainMax.x = parseFloat(split[1]);\n            domainMax.y = parseFloat(split[2]);\n            domainMax.z = parseFloat(split[3]);\n            break;\n          default:\n            var r = parseFloat(split[0]);\n            var g = parseFloat(split[1]);\n            var b = parseFloat(split[2]);\n            if (r > 1 || r < 0 || g > 1 || g < 0 || b > 1 || b < 0) {\n              throw new Error(\"LUTCubeLoader : Non normalized values not supported.\");\n            }\n            data[currIndex + 0] = r * 255;\n            data[currIndex + 1] = g * 255;\n            data[currIndex + 2] = b * 255;\n            data[currIndex + 3] = 255;\n            currIndex += 4;\n        }\n      }\n      var texture = new DataTexture();\n      texture.image.data = data;\n      texture.image.width = size;\n      texture.image.height = size * size;\n      texture.type = UnsignedByteType;\n      texture.magFilter = LinearFilter;\n      texture.minFilter = LinearFilter;\n      texture.wrapS = ClampToEdgeWrapping;\n      texture.wrapT = ClampToEdgeWrapping;\n      texture.generateMipmaps = false;\n      texture.needsUpdate = true;\n      var texture3D = new Data3DTexture();\n      texture3D.image.data = data;\n      texture3D.image.width = size;\n      texture3D.image.height = size;\n      texture3D.image.depth = size;\n      texture3D.type = UnsignedByteType;\n      texture3D.magFilter = LinearFilter;\n      texture3D.minFilter = LinearFilter;\n      texture3D.wrapS = ClampToEdgeWrapping;\n      texture3D.wrapT = ClampToEdgeWrapping;\n      texture3D.wrapR = ClampToEdgeWrapping;\n      texture3D.generateMipmaps = false;\n      texture3D.needsUpdate = true;\n      return {\n        title: title,\n        size: size,\n        domainMin: domainMin,\n        domainMax: domainMax,\n        texture: texture,\n        texture3D: texture3D\n      };\n    }\n  }]);\n  return LUTCubeLoader;\n}(Loader);\nexport { LUTCubeLoader };","map":{"version":3,"names":["LUTCubeLoader","_Loader","_inherits","_super","_createSuper","_classCallCheck","apply","arguments","_createClass","key","value","load","url","onLoad","onProgress","onError","_this","loader","FileLoader","manager","setPath","path","setResponseType","text","parse","e","console","error","itemError","str","replace","trim","title","size","domainMin","Vector3","domainMax","lines","split","data","currIndex","i","l","length","line","substring","sizeToken","parseFloat","Uint8Array","x","y","z","r","g","b","Error","texture","DataTexture","image","width","height","type","UnsignedByteType","magFilter","LinearFilter","minFilter","wrapS","ClampToEdgeWrapping","wrapT","generateMipmaps","needsUpdate","texture3D","Data3DTexture","depth","wrapR","Loader"],"sources":["C:\\Users\\Nayyu\\Desktop\\skibidai-public-build\\node_modules\\src\\loaders\\LUTCubeLoader.js"],"sourcesContent":["// https://wwwimages2.adobe.com/content/dam/acom/en/products/speedgrade/cc/pdfs/cube-lut-specification-1.0.pdf\n\nimport { Loader, FileLoader, Vector3, DataTexture, UnsignedByteType, ClampToEdgeWrapping, LinearFilter } from 'three'\nimport { Data3DTexture } from '../_polyfill/Data3DTexture'\n\nexport class LUTCubeLoader extends Loader {\n  load(url, onLoad, onProgress, onError) {\n    const loader = new FileLoader(this.manager)\n    loader.setPath(this.path)\n    loader.setResponseType('text')\n    loader.load(\n      url,\n      (text) => {\n        try {\n          onLoad(this.parse(text))\n        } catch (e) {\n          if (onError) {\n            onError(e)\n          } else {\n            console.error(e)\n          }\n\n          this.manager.itemError(url)\n        }\n      },\n      onProgress,\n      onError,\n    )\n  }\n\n  parse(str) {\n    // Remove empty lines and comments\n    str = str\n      .replace(/^#.*?(\\n|\\r)/gm, '')\n      .replace(/^\\s*?(\\n|\\r)/gm, '')\n      .trim()\n\n    let title = null\n    let size = null\n    const domainMin = new Vector3(0, 0, 0)\n    const domainMax = new Vector3(1, 1, 1)\n\n    const lines = str.split(/[\\n\\r]+/g)\n    let data = null\n\n    let currIndex = 0\n    for (let i = 0, l = lines.length; i < l; i++) {\n      const line = lines[i].trim()\n      const split = line.split(/\\s/g)\n\n      switch (split[0]) {\n        case 'TITLE':\n          title = line.substring(7, line.length - 1)\n          break\n        case 'LUT_3D_SIZE':\n          // TODO: A .CUBE LUT file specifies floating point values and could be represented with\n          // more precision than can be captured with Uint8Array.\n          const sizeToken = split[1]\n          size = parseFloat(sizeToken)\n          data = new Uint8Array(size * size * size * 4)\n          break\n        case 'DOMAIN_MIN':\n          domainMin.x = parseFloat(split[1])\n          domainMin.y = parseFloat(split[2])\n          domainMin.z = parseFloat(split[3])\n          break\n        case 'DOMAIN_MAX':\n          domainMax.x = parseFloat(split[1])\n          domainMax.y = parseFloat(split[2])\n          domainMax.z = parseFloat(split[3])\n          break\n        default:\n          const r = parseFloat(split[0])\n          const g = parseFloat(split[1])\n          const b = parseFloat(split[2])\n\n          if (r > 1.0 || r < 0.0 || g > 1.0 || g < 0.0 || b > 1.0 || b < 0.0) {\n            throw new Error('LUTCubeLoader : Non normalized values not supported.')\n          }\n\n          data[currIndex + 0] = r * 255\n          data[currIndex + 1] = g * 255\n          data[currIndex + 2] = b * 255\n          data[currIndex + 3] = 255\n          currIndex += 4\n      }\n    }\n\n    const texture = new DataTexture()\n    texture.image.data = data\n    texture.image.width = size\n    texture.image.height = size * size\n    texture.type = UnsignedByteType\n    texture.magFilter = LinearFilter\n    texture.minFilter = LinearFilter\n    texture.wrapS = ClampToEdgeWrapping\n    texture.wrapT = ClampToEdgeWrapping\n    texture.generateMipmaps = false\n    texture.needsUpdate = true\n\n    const texture3D = new Data3DTexture()\n    texture3D.image.data = data\n    texture3D.image.width = size\n    texture3D.image.height = size\n    texture3D.image.depth = size\n    texture3D.type = UnsignedByteType\n    texture3D.magFilter = LinearFilter\n    texture3D.minFilter = LinearFilter\n    texture3D.wrapS = ClampToEdgeWrapping\n    texture3D.wrapT = ClampToEdgeWrapping\n    texture3D.wrapR = ClampToEdgeWrapping\n    texture3D.generateMipmaps = false\n    texture3D.needsUpdate = true\n\n    return {\n      title,\n      size,\n      domainMin,\n      domainMax,\n      texture,\n      texture3D,\n    }\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}