{"ast":null,"code":"import _get from \"C:/Users/Nayyu/Desktop/skibidai-public-build/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"C:/Users/Nayyu/Desktop/skibidai-public-build/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"C:/Users/Nayyu/Desktop/skibidai-public-build/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/Nayyu/Desktop/skibidai-public-build/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _classCallCheck from \"C:/Users/Nayyu/Desktop/skibidai-public-build/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Nayyu/Desktop/skibidai-public-build/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { Vector3, Matrix4, Quaternion, Euler, Bone, Object3D, MeshBasicMaterial, Color, Mesh, BoxGeometry, SphereGeometry } from \"three\";\nimport { CapsuleGeometry } from \"../_polyfill/CapsuleGeometry.js\";\nvar MMDPhysics = /*#__PURE__*/function () {\n  /**\n   * @param {THREE.SkinnedMesh} mesh\n   * @param {Array<Object>} rigidBodyParams\n   * @param {Array<Object>} (optional) constraintParams\n   * @param {Object} params - (optional)\n   * @param {Number} params.unitStep - Default is 1 / 65.\n   * @param {Integer} params.maxStepNum - Default is 3.\n   * @param {Vector3} params.gravity - Default is ( 0, - 9.8 * 10, 0 )\n   */\n  function MMDPhysics(mesh, rigidBodyParams) {\n    var constraintParams = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n    var params = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    _classCallCheck(this, MMDPhysics);\n    if (typeof Ammo === \"undefined\") {\n      throw new Error(\"THREE.MMDPhysics: Import ammo.js https://github.com/kripken/ammo.js\");\n    }\n    this.manager = new ResourceManager();\n    this.mesh = mesh;\n    this.unitStep = params.unitStep !== void 0 ? params.unitStep : 1 / 65;\n    this.maxStepNum = params.maxStepNum !== void 0 ? params.maxStepNum : 3;\n    this.gravity = new Vector3(0, -9.8 * 10, 0);\n    if (params.gravity !== void 0) this.gravity.copy(params.gravity);\n    this.world = params.world !== void 0 ? params.world : null;\n    this.bodies = [];\n    this.constraints = [];\n    this._init(mesh, rigidBodyParams, constraintParams);\n  }\n  /**\n   * Advances Physics calculation and updates bones.\n   *\n   * @param {Number} delta - time in second\n   * @return {MMDPhysics}\n   */\n  _createClass(MMDPhysics, [{\n    key: \"update\",\n    value: function update(delta) {\n      var manager = this.manager;\n      var mesh = this.mesh;\n      var isNonDefaultScale = false;\n      var position = manager.allocThreeVector3();\n      var quaternion = manager.allocThreeQuaternion();\n      var scale = manager.allocThreeVector3();\n      mesh.matrixWorld.decompose(position, quaternion, scale);\n      if (scale.x !== 1 || scale.y !== 1 || scale.z !== 1) {\n        isNonDefaultScale = true;\n      }\n      var parent;\n      if (isNonDefaultScale) {\n        parent = mesh.parent;\n        if (parent !== null) mesh.parent = null;\n        scale.copy(this.mesh.scale);\n        mesh.scale.set(1, 1, 1);\n        mesh.updateMatrixWorld(true);\n      }\n      this._updateRigidBodies();\n      this._stepSimulation(delta);\n      this._updateBones();\n      if (isNonDefaultScale) {\n        if (parent !== null) mesh.parent = parent;\n        mesh.scale.copy(scale);\n      }\n      manager.freeThreeVector3(scale);\n      manager.freeThreeQuaternion(quaternion);\n      manager.freeThreeVector3(position);\n      return this;\n    }\n    /**\n     * Resets rigid bodies transorm to current bone's.\n     *\n     * @return {MMDPhysics}\n     */\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      for (var i = 0, il = this.bodies.length; i < il; i++) {\n        this.bodies[i].reset();\n      }\n      return this;\n    }\n    /**\n     * Warm ups Rigid bodies. Calculates cycles steps.\n     *\n     * @param {Integer} cycles\n     * @return {MMDPhysics}\n     */\n  }, {\n    key: \"warmup\",\n    value: function warmup(cycles) {\n      for (var i = 0; i < cycles; i++) {\n        this.update(1 / 60);\n      }\n      return this;\n    }\n    /**\n     * Sets gravity.\n     *\n     * @param {Vector3} gravity\n     * @return {MMDPhysicsHelper}\n     */\n  }, {\n    key: \"setGravity\",\n    value: function setGravity(gravity) {\n      this.world.setGravity(new Ammo.btVector3(gravity.x, gravity.y, gravity.z));\n      this.gravity.copy(gravity);\n      return this;\n    }\n    /**\n     * Creates MMDPhysicsHelper\n     *\n     * @return {MMDPhysicsHelper}\n     */\n  }, {\n    key: \"createHelper\",\n    value: function createHelper() {\n      return new MMDPhysicsHelper(this.mesh, this);\n    }\n    // private methods\n  }, {\n    key: \"_init\",\n    value: function _init(mesh, rigidBodyParams, constraintParams) {\n      var manager = this.manager;\n      var parent = mesh.parent;\n      if (parent !== null) mesh.parent = null;\n      var currentPosition = manager.allocThreeVector3();\n      var currentQuaternion = manager.allocThreeQuaternion();\n      var currentScale = manager.allocThreeVector3();\n      currentPosition.copy(mesh.position);\n      currentQuaternion.copy(mesh.quaternion);\n      currentScale.copy(mesh.scale);\n      mesh.position.set(0, 0, 0);\n      mesh.quaternion.set(0, 0, 0, 1);\n      mesh.scale.set(1, 1, 1);\n      mesh.updateMatrixWorld(true);\n      if (this.world === null) {\n        this.world = this._createWorld();\n        this.setGravity(this.gravity);\n      }\n      this._initRigidBodies(rigidBodyParams);\n      this._initConstraints(constraintParams);\n      if (parent !== null) mesh.parent = parent;\n      mesh.position.copy(currentPosition);\n      mesh.quaternion.copy(currentQuaternion);\n      mesh.scale.copy(currentScale);\n      mesh.updateMatrixWorld(true);\n      this.reset();\n      manager.freeThreeVector3(currentPosition);\n      manager.freeThreeQuaternion(currentQuaternion);\n      manager.freeThreeVector3(currentScale);\n    }\n  }, {\n    key: \"_createWorld\",\n    value: function _createWorld() {\n      var config = new Ammo.btDefaultCollisionConfiguration();\n      var dispatcher = new Ammo.btCollisionDispatcher(config);\n      var cache = new Ammo.btDbvtBroadphase();\n      var solver = new Ammo.btSequentialImpulseConstraintSolver();\n      var world = new Ammo.btDiscreteDynamicsWorld(dispatcher, cache, solver, config);\n      return world;\n    }\n  }, {\n    key: \"_initRigidBodies\",\n    value: function _initRigidBodies(rigidBodies) {\n      for (var i = 0, il = rigidBodies.length; i < il; i++) {\n        this.bodies.push(new RigidBody(this.mesh, this.world, rigidBodies[i], this.manager));\n      }\n    }\n  }, {\n    key: \"_initConstraints\",\n    value: function _initConstraints(constraints) {\n      for (var i = 0, il = constraints.length; i < il; i++) {\n        var params = constraints[i];\n        var bodyA = this.bodies[params.rigidBodyIndex1];\n        var bodyB = this.bodies[params.rigidBodyIndex2];\n        this.constraints.push(new Constraint(this.mesh, this.world, bodyA, bodyB, params, this.manager));\n      }\n    }\n  }, {\n    key: \"_stepSimulation\",\n    value: function _stepSimulation(delta) {\n      var unitStep = this.unitStep;\n      var stepTime = delta;\n      var maxStepNum = (delta / unitStep | 0) + 1;\n      if (stepTime < unitStep) {\n        stepTime = unitStep;\n        maxStepNum = 1;\n      }\n      if (maxStepNum > this.maxStepNum) {\n        maxStepNum = this.maxStepNum;\n      }\n      this.world.stepSimulation(stepTime, maxStepNum, unitStep);\n    }\n  }, {\n    key: \"_updateRigidBodies\",\n    value: function _updateRigidBodies() {\n      for (var i = 0, il = this.bodies.length; i < il; i++) {\n        this.bodies[i].updateFromBone();\n      }\n    }\n  }, {\n    key: \"_updateBones\",\n    value: function _updateBones() {\n      for (var i = 0, il = this.bodies.length; i < il; i++) {\n        this.bodies[i].updateBone();\n      }\n    }\n  }]);\n  return MMDPhysics;\n}();\nvar ResourceManager = /*#__PURE__*/function () {\n  function ResourceManager() {\n    _classCallCheck(this, ResourceManager);\n    this.threeVector3s = [];\n    this.threeMatrix4s = [];\n    this.threeQuaternions = [];\n    this.threeEulers = [];\n    this.transforms = [];\n    this.quaternions = [];\n    this.vector3s = [];\n  }\n  _createClass(ResourceManager, [{\n    key: \"allocThreeVector3\",\n    value: function allocThreeVector3() {\n      return this.threeVector3s.length > 0 ? this.threeVector3s.pop() : new Vector3();\n    }\n  }, {\n    key: \"freeThreeVector3\",\n    value: function freeThreeVector3(v) {\n      this.threeVector3s.push(v);\n    }\n  }, {\n    key: \"allocThreeMatrix4\",\n    value: function allocThreeMatrix4() {\n      return this.threeMatrix4s.length > 0 ? this.threeMatrix4s.pop() : new Matrix4();\n    }\n  }, {\n    key: \"freeThreeMatrix4\",\n    value: function freeThreeMatrix4(m) {\n      this.threeMatrix4s.push(m);\n    }\n  }, {\n    key: \"allocThreeQuaternion\",\n    value: function allocThreeQuaternion() {\n      return this.threeQuaternions.length > 0 ? this.threeQuaternions.pop() : new Quaternion();\n    }\n  }, {\n    key: \"freeThreeQuaternion\",\n    value: function freeThreeQuaternion(q) {\n      this.threeQuaternions.push(q);\n    }\n  }, {\n    key: \"allocThreeEuler\",\n    value: function allocThreeEuler() {\n      return this.threeEulers.length > 0 ? this.threeEulers.pop() : new Euler();\n    }\n  }, {\n    key: \"freeThreeEuler\",\n    value: function freeThreeEuler(e) {\n      this.threeEulers.push(e);\n    }\n  }, {\n    key: \"allocTransform\",\n    value: function allocTransform() {\n      return this.transforms.length > 0 ? this.transforms.pop() : new Ammo.btTransform();\n    }\n  }, {\n    key: \"freeTransform\",\n    value: function freeTransform(t) {\n      this.transforms.push(t);\n    }\n  }, {\n    key: \"allocQuaternion\",\n    value: function allocQuaternion() {\n      return this.quaternions.length > 0 ? this.quaternions.pop() : new Ammo.btQuaternion();\n    }\n  }, {\n    key: \"freeQuaternion\",\n    value: function freeQuaternion(q) {\n      this.quaternions.push(q);\n    }\n  }, {\n    key: \"allocVector3\",\n    value: function allocVector3() {\n      return this.vector3s.length > 0 ? this.vector3s.pop() : new Ammo.btVector3();\n    }\n  }, {\n    key: \"freeVector3\",\n    value: function freeVector3(v) {\n      this.vector3s.push(v);\n    }\n  }, {\n    key: \"setIdentity\",\n    value: function setIdentity(t) {\n      t.setIdentity();\n    }\n  }, {\n    key: \"getBasis\",\n    value: function getBasis(t) {\n      var q = this.allocQuaternion();\n      t.getBasis().getRotation(q);\n      return q;\n    }\n  }, {\n    key: \"getBasisAsMatrix3\",\n    value: function getBasisAsMatrix3(t) {\n      var q = this.getBasis(t);\n      var m = this.quaternionToMatrix3(q);\n      this.freeQuaternion(q);\n      return m;\n    }\n  }, {\n    key: \"getOrigin\",\n    value: function getOrigin(t) {\n      return t.getOrigin();\n    }\n  }, {\n    key: \"setOrigin\",\n    value: function setOrigin(t, v) {\n      t.getOrigin().setValue(v.x(), v.y(), v.z());\n    }\n  }, {\n    key: \"copyOrigin\",\n    value: function copyOrigin(t1, t2) {\n      var o = t2.getOrigin();\n      this.setOrigin(t1, o);\n    }\n  }, {\n    key: \"setBasis\",\n    value: function setBasis(t, q) {\n      t.setRotation(q);\n    }\n  }, {\n    key: \"setBasisFromMatrix3\",\n    value: function setBasisFromMatrix3(t, m) {\n      var q = this.matrix3ToQuaternion(m);\n      this.setBasis(t, q);\n      this.freeQuaternion(q);\n    }\n  }, {\n    key: \"setOriginFromArray3\",\n    value: function setOriginFromArray3(t, a) {\n      t.getOrigin().setValue(a[0], a[1], a[2]);\n    }\n  }, {\n    key: \"setOriginFromThreeVector3\",\n    value: function setOriginFromThreeVector3(t, v) {\n      t.getOrigin().setValue(v.x, v.y, v.z);\n    }\n  }, {\n    key: \"setBasisFromArray3\",\n    value: function setBasisFromArray3(t, a) {\n      var thQ = this.allocThreeQuaternion();\n      var thE = this.allocThreeEuler();\n      thE.set(a[0], a[1], a[2]);\n      this.setBasisFromThreeQuaternion(t, thQ.setFromEuler(thE));\n      this.freeThreeEuler(thE);\n      this.freeThreeQuaternion(thQ);\n    }\n  }, {\n    key: \"setBasisFromThreeQuaternion\",\n    value: function setBasisFromThreeQuaternion(t, a) {\n      var q = this.allocQuaternion();\n      q.setX(a.x);\n      q.setY(a.y);\n      q.setZ(a.z);\n      q.setW(a.w);\n      this.setBasis(t, q);\n      this.freeQuaternion(q);\n    }\n  }, {\n    key: \"multiplyTransforms\",\n    value: function multiplyTransforms(t1, t2) {\n      var t = this.allocTransform();\n      this.setIdentity(t);\n      var m1 = this.getBasisAsMatrix3(t1);\n      var m2 = this.getBasisAsMatrix3(t2);\n      var o1 = this.getOrigin(t1);\n      var o2 = this.getOrigin(t2);\n      var v1 = this.multiplyMatrix3ByVector3(m1, o2);\n      var v2 = this.addVector3(v1, o1);\n      this.setOrigin(t, v2);\n      var m3 = this.multiplyMatrices3(m1, m2);\n      this.setBasisFromMatrix3(t, m3);\n      this.freeVector3(v1);\n      this.freeVector3(v2);\n      return t;\n    }\n  }, {\n    key: \"inverseTransform\",\n    value: function inverseTransform(t) {\n      var t2 = this.allocTransform();\n      var m1 = this.getBasisAsMatrix3(t);\n      var o = this.getOrigin(t);\n      var m2 = this.transposeMatrix3(m1);\n      var v1 = this.negativeVector3(o);\n      var v2 = this.multiplyMatrix3ByVector3(m2, v1);\n      this.setOrigin(t2, v2);\n      this.setBasisFromMatrix3(t2, m2);\n      this.freeVector3(v1);\n      this.freeVector3(v2);\n      return t2;\n    }\n  }, {\n    key: \"multiplyMatrices3\",\n    value: function multiplyMatrices3(m1, m2) {\n      var m3 = [];\n      var v10 = this.rowOfMatrix3(m1, 0);\n      var v11 = this.rowOfMatrix3(m1, 1);\n      var v12 = this.rowOfMatrix3(m1, 2);\n      var v20 = this.columnOfMatrix3(m2, 0);\n      var v21 = this.columnOfMatrix3(m2, 1);\n      var v22 = this.columnOfMatrix3(m2, 2);\n      m3[0] = this.dotVectors3(v10, v20);\n      m3[1] = this.dotVectors3(v10, v21);\n      m3[2] = this.dotVectors3(v10, v22);\n      m3[3] = this.dotVectors3(v11, v20);\n      m3[4] = this.dotVectors3(v11, v21);\n      m3[5] = this.dotVectors3(v11, v22);\n      m3[6] = this.dotVectors3(v12, v20);\n      m3[7] = this.dotVectors3(v12, v21);\n      m3[8] = this.dotVectors3(v12, v22);\n      this.freeVector3(v10);\n      this.freeVector3(v11);\n      this.freeVector3(v12);\n      this.freeVector3(v20);\n      this.freeVector3(v21);\n      this.freeVector3(v22);\n      return m3;\n    }\n  }, {\n    key: \"addVector3\",\n    value: function addVector3(v1, v2) {\n      var v = this.allocVector3();\n      v.setValue(v1.x() + v2.x(), v1.y() + v2.y(), v1.z() + v2.z());\n      return v;\n    }\n  }, {\n    key: \"dotVectors3\",\n    value: function dotVectors3(v1, v2) {\n      return v1.x() * v2.x() + v1.y() * v2.y() + v1.z() * v2.z();\n    }\n  }, {\n    key: \"rowOfMatrix3\",\n    value: function rowOfMatrix3(m, i) {\n      var v = this.allocVector3();\n      v.setValue(m[i * 3 + 0], m[i * 3 + 1], m[i * 3 + 2]);\n      return v;\n    }\n  }, {\n    key: \"columnOfMatrix3\",\n    value: function columnOfMatrix3(m, i) {\n      var v = this.allocVector3();\n      v.setValue(m[i + 0], m[i + 3], m[i + 6]);\n      return v;\n    }\n  }, {\n    key: \"negativeVector3\",\n    value: function negativeVector3(v) {\n      var v2 = this.allocVector3();\n      v2.setValue(-v.x(), -v.y(), -v.z());\n      return v2;\n    }\n  }, {\n    key: \"multiplyMatrix3ByVector3\",\n    value: function multiplyMatrix3ByVector3(m, v) {\n      var v4 = this.allocVector3();\n      var v0 = this.rowOfMatrix3(m, 0);\n      var v1 = this.rowOfMatrix3(m, 1);\n      var v2 = this.rowOfMatrix3(m, 2);\n      var x = this.dotVectors3(v0, v);\n      var y = this.dotVectors3(v1, v);\n      var z = this.dotVectors3(v2, v);\n      v4.setValue(x, y, z);\n      this.freeVector3(v0);\n      this.freeVector3(v1);\n      this.freeVector3(v2);\n      return v4;\n    }\n  }, {\n    key: \"transposeMatrix3\",\n    value: function transposeMatrix3(m) {\n      var m2 = [];\n      m2[0] = m[0];\n      m2[1] = m[3];\n      m2[2] = m[6];\n      m2[3] = m[1];\n      m2[4] = m[4];\n      m2[5] = m[7];\n      m2[6] = m[2];\n      m2[7] = m[5];\n      m2[8] = m[8];\n      return m2;\n    }\n  }, {\n    key: \"quaternionToMatrix3\",\n    value: function quaternionToMatrix3(q) {\n      var m = [];\n      var x = q.x();\n      var y = q.y();\n      var z = q.z();\n      var w = q.w();\n      var xx = x * x;\n      var yy = y * y;\n      var zz = z * z;\n      var xy = x * y;\n      var yz = y * z;\n      var zx = z * x;\n      var xw = x * w;\n      var yw = y * w;\n      var zw = z * w;\n      m[0] = 1 - 2 * (yy + zz);\n      m[1] = 2 * (xy - zw);\n      m[2] = 2 * (zx + yw);\n      m[3] = 2 * (xy + zw);\n      m[4] = 1 - 2 * (zz + xx);\n      m[5] = 2 * (yz - xw);\n      m[6] = 2 * (zx - yw);\n      m[7] = 2 * (yz + xw);\n      m[8] = 1 - 2 * (xx + yy);\n      return m;\n    }\n  }, {\n    key: \"matrix3ToQuaternion\",\n    value: function matrix3ToQuaternion(m) {\n      var t = m[0] + m[4] + m[8];\n      var s, x, y, z, w;\n      if (t > 0) {\n        s = Math.sqrt(t + 1) * 2;\n        w = 0.25 * s;\n        x = (m[7] - m[5]) / s;\n        y = (m[2] - m[6]) / s;\n        z = (m[3] - m[1]) / s;\n      } else if (m[0] > m[4] && m[0] > m[8]) {\n        s = Math.sqrt(1 + m[0] - m[4] - m[8]) * 2;\n        w = (m[7] - m[5]) / s;\n        x = 0.25 * s;\n        y = (m[1] + m[3]) / s;\n        z = (m[2] + m[6]) / s;\n      } else if (m[4] > m[8]) {\n        s = Math.sqrt(1 + m[4] - m[0] - m[8]) * 2;\n        w = (m[2] - m[6]) / s;\n        x = (m[1] + m[3]) / s;\n        y = 0.25 * s;\n        z = (m[5] + m[7]) / s;\n      } else {\n        s = Math.sqrt(1 + m[8] - m[0] - m[4]) * 2;\n        w = (m[3] - m[1]) / s;\n        x = (m[2] + m[6]) / s;\n        y = (m[5] + m[7]) / s;\n        z = 0.25 * s;\n      }\n      var q = this.allocQuaternion();\n      q.setX(x);\n      q.setY(y);\n      q.setZ(z);\n      q.setW(w);\n      return q;\n    }\n  }]);\n  return ResourceManager;\n}();\nvar RigidBody = /*#__PURE__*/function () {\n  function RigidBody(mesh, world, params, manager) {\n    _classCallCheck(this, RigidBody);\n    this.mesh = mesh;\n    this.world = world;\n    this.params = params;\n    this.manager = manager;\n    this.body = null;\n    this.bone = null;\n    this.boneOffsetForm = null;\n    this.boneOffsetFormInverse = null;\n    this._init();\n  }\n  /**\n   * Resets rigid body transform to the current bone's.\n   *\n   * @return {RigidBody}\n   */\n  _createClass(RigidBody, [{\n    key: \"reset\",\n    value: function reset() {\n      this._setTransformFromBone();\n      return this;\n    }\n    /**\n     * Updates rigid body's transform from the current bone.\n     *\n     * @return {RidigBody}\n     */\n  }, {\n    key: \"updateFromBone\",\n    value: function updateFromBone() {\n      if (this.params.boneIndex !== -1 && this.params.type === 0) {\n        this._setTransformFromBone();\n      }\n      return this;\n    }\n    /**\n     * Updates bone from the current ridid body's transform.\n     *\n     * @return {RidigBody}\n     */\n  }, {\n    key: \"updateBone\",\n    value: function updateBone() {\n      if (this.params.type === 0 || this.params.boneIndex === -1) {\n        return this;\n      }\n      this._updateBoneRotation();\n      if (this.params.type === 1) {\n        this._updateBonePosition();\n      }\n      this.bone.updateMatrixWorld(true);\n      if (this.params.type === 2) {\n        this._setPositionFromBone();\n      }\n      return this;\n    }\n    // private methods\n  }, {\n    key: \"_init\",\n    value: function _init() {\n      function generateShape(p) {\n        switch (p.shapeType) {\n          case 0:\n            return new Ammo.btSphereShape(p.width);\n          case 1:\n            return new Ammo.btBoxShape(new Ammo.btVector3(p.width, p.height, p.depth));\n          case 2:\n            return new Ammo.btCapsuleShape(p.width, p.height);\n          default:\n            throw new Error(\"unknown shape type \" + p.shapeType);\n        }\n      }\n      var manager = this.manager;\n      var params = this.params;\n      var bones = this.mesh.skeleton.bones;\n      var bone = params.boneIndex === -1 ? new Bone() : bones[params.boneIndex];\n      var shape = generateShape(params);\n      var weight = params.type === 0 ? 0 : params.weight;\n      var localInertia = manager.allocVector3();\n      localInertia.setValue(0, 0, 0);\n      if (weight !== 0) {\n        shape.calculateLocalInertia(weight, localInertia);\n      }\n      var boneOffsetForm = manager.allocTransform();\n      manager.setIdentity(boneOffsetForm);\n      manager.setOriginFromArray3(boneOffsetForm, params.position);\n      manager.setBasisFromArray3(boneOffsetForm, params.rotation);\n      var vector = manager.allocThreeVector3();\n      var boneForm = manager.allocTransform();\n      manager.setIdentity(boneForm);\n      manager.setOriginFromThreeVector3(boneForm, bone.getWorldPosition(vector));\n      var form = manager.multiplyTransforms(boneForm, boneOffsetForm);\n      var state = new Ammo.btDefaultMotionState(form);\n      var info = new Ammo.btRigidBodyConstructionInfo(weight, state, shape, localInertia);\n      info.set_m_friction(params.friction);\n      info.set_m_restitution(params.restitution);\n      var body = new Ammo.btRigidBody(info);\n      if (params.type === 0) {\n        body.setCollisionFlags(body.getCollisionFlags() | 2);\n        body.setActivationState(4);\n      }\n      body.setDamping(params.positionDamping, params.rotationDamping);\n      body.setSleepingThresholds(0, 0);\n      this.world.addRigidBody(body, 1 << params.groupIndex, params.groupTarget);\n      this.body = body;\n      this.bone = bone;\n      this.boneOffsetForm = boneOffsetForm;\n      this.boneOffsetFormInverse = manager.inverseTransform(boneOffsetForm);\n      manager.freeVector3(localInertia);\n      manager.freeTransform(form);\n      manager.freeTransform(boneForm);\n      manager.freeThreeVector3(vector);\n    }\n  }, {\n    key: \"_getBoneTransform\",\n    value: function _getBoneTransform() {\n      var manager = this.manager;\n      var p = manager.allocThreeVector3();\n      var q = manager.allocThreeQuaternion();\n      var s = manager.allocThreeVector3();\n      this.bone.matrixWorld.decompose(p, q, s);\n      var tr = manager.allocTransform();\n      manager.setOriginFromThreeVector3(tr, p);\n      manager.setBasisFromThreeQuaternion(tr, q);\n      var form = manager.multiplyTransforms(tr, this.boneOffsetForm);\n      manager.freeTransform(tr);\n      manager.freeThreeVector3(s);\n      manager.freeThreeQuaternion(q);\n      manager.freeThreeVector3(p);\n      return form;\n    }\n  }, {\n    key: \"_getWorldTransformForBone\",\n    value: function _getWorldTransformForBone() {\n      var manager = this.manager;\n      var tr = this.body.getCenterOfMassTransform();\n      return manager.multiplyTransforms(tr, this.boneOffsetFormInverse);\n    }\n  }, {\n    key: \"_setTransformFromBone\",\n    value: function _setTransformFromBone() {\n      var manager = this.manager;\n      var form = this._getBoneTransform();\n      this.body.setCenterOfMassTransform(form);\n      this.body.getMotionState().setWorldTransform(form);\n      manager.freeTransform(form);\n    }\n  }, {\n    key: \"_setPositionFromBone\",\n    value: function _setPositionFromBone() {\n      var manager = this.manager;\n      var form = this._getBoneTransform();\n      var tr = manager.allocTransform();\n      this.body.getMotionState().getWorldTransform(tr);\n      manager.copyOrigin(tr, form);\n      this.body.setCenterOfMassTransform(tr);\n      this.body.getMotionState().setWorldTransform(tr);\n      manager.freeTransform(tr);\n      manager.freeTransform(form);\n    }\n  }, {\n    key: \"_updateBoneRotation\",\n    value: function _updateBoneRotation() {\n      var manager = this.manager;\n      var tr = this._getWorldTransformForBone();\n      var q = manager.getBasis(tr);\n      var thQ = manager.allocThreeQuaternion();\n      var thQ2 = manager.allocThreeQuaternion();\n      var thQ3 = manager.allocThreeQuaternion();\n      thQ.set(q.x(), q.y(), q.z(), q.w());\n      thQ2.setFromRotationMatrix(this.bone.matrixWorld);\n      thQ2.conjugate();\n      thQ2.multiply(thQ);\n      thQ3.setFromRotationMatrix(this.bone.matrix);\n      this.bone.quaternion.copy(thQ2.multiply(thQ3).normalize());\n      manager.freeThreeQuaternion(thQ);\n      manager.freeThreeQuaternion(thQ2);\n      manager.freeThreeQuaternion(thQ3);\n      manager.freeQuaternion(q);\n      manager.freeTransform(tr);\n    }\n  }, {\n    key: \"_updateBonePosition\",\n    value: function _updateBonePosition() {\n      var manager = this.manager;\n      var tr = this._getWorldTransformForBone();\n      var thV = manager.allocThreeVector3();\n      var o = manager.getOrigin(tr);\n      thV.set(o.x(), o.y(), o.z());\n      if (this.bone.parent) {\n        this.bone.parent.worldToLocal(thV);\n      }\n      this.bone.position.copy(thV);\n      manager.freeThreeVector3(thV);\n      manager.freeTransform(tr);\n    }\n  }]);\n  return RigidBody;\n}();\nvar Constraint = /*#__PURE__*/function () {\n  /**\n   * @param {THREE.SkinnedMesh} mesh\n   * @param {Ammo.btDiscreteDynamicsWorld} world\n   * @param {RigidBody} bodyA\n   * @param {RigidBody} bodyB\n   * @param {Object} params\n   * @param {ResourceManager} manager\n   */\n  function Constraint(mesh, world, bodyA, bodyB, params, manager) {\n    _classCallCheck(this, Constraint);\n    this.mesh = mesh;\n    this.world = world;\n    this.bodyA = bodyA;\n    this.bodyB = bodyB;\n    this.params = params;\n    this.manager = manager;\n    this.constraint = null;\n    this._init();\n  }\n  // private method\n  _createClass(Constraint, [{\n    key: \"_init\",\n    value: function _init() {\n      var manager = this.manager;\n      var params = this.params;\n      var bodyA = this.bodyA;\n      var bodyB = this.bodyB;\n      var form = manager.allocTransform();\n      manager.setIdentity(form);\n      manager.setOriginFromArray3(form, params.position);\n      manager.setBasisFromArray3(form, params.rotation);\n      var formA = manager.allocTransform();\n      var formB = manager.allocTransform();\n      bodyA.body.getMotionState().getWorldTransform(formA);\n      bodyB.body.getMotionState().getWorldTransform(formB);\n      var formInverseA = manager.inverseTransform(formA);\n      var formInverseB = manager.inverseTransform(formB);\n      var formA2 = manager.multiplyTransforms(formInverseA, form);\n      var formB2 = manager.multiplyTransforms(formInverseB, form);\n      var constraint = new Ammo.btGeneric6DofSpringConstraint(bodyA.body, bodyB.body, formA2, formB2, true);\n      var lll = manager.allocVector3();\n      var lul = manager.allocVector3();\n      var all = manager.allocVector3();\n      var aul = manager.allocVector3();\n      lll.setValue(params.translationLimitation1[0], params.translationLimitation1[1], params.translationLimitation1[2]);\n      lul.setValue(params.translationLimitation2[0], params.translationLimitation2[1], params.translationLimitation2[2]);\n      all.setValue(params.rotationLimitation1[0], params.rotationLimitation1[1], params.rotationLimitation1[2]);\n      aul.setValue(params.rotationLimitation2[0], params.rotationLimitation2[1], params.rotationLimitation2[2]);\n      constraint.setLinearLowerLimit(lll);\n      constraint.setLinearUpperLimit(lul);\n      constraint.setAngularLowerLimit(all);\n      constraint.setAngularUpperLimit(aul);\n      for (var i = 0; i < 3; i++) {\n        if (params.springPosition[i] !== 0) {\n          constraint.enableSpring(i, true);\n          constraint.setStiffness(i, params.springPosition[i]);\n        }\n      }\n      for (var _i = 0; _i < 3; _i++) {\n        if (params.springRotation[_i] !== 0) {\n          constraint.enableSpring(_i + 3, true);\n          constraint.setStiffness(_i + 3, params.springRotation[_i]);\n        }\n      }\n      if (constraint.setParam !== void 0) {\n        for (var _i2 = 0; _i2 < 6; _i2++) {\n          constraint.setParam(2, 0.475, _i2);\n        }\n      }\n      this.world.addConstraint(constraint, true);\n      this.constraint = constraint;\n      manager.freeTransform(form);\n      manager.freeTransform(formA);\n      manager.freeTransform(formB);\n      manager.freeTransform(formInverseA);\n      manager.freeTransform(formInverseB);\n      manager.freeTransform(formA2);\n      manager.freeTransform(formB2);\n      manager.freeVector3(lll);\n      manager.freeVector3(lul);\n      manager.freeVector3(all);\n      manager.freeVector3(aul);\n    }\n  }]);\n  return Constraint;\n}();\nvar _position = new Vector3();\nvar _quaternion = new Quaternion();\nvar _scale = new Vector3();\nvar _matrixWorldInv = new Matrix4();\nvar MMDPhysicsHelper = /*#__PURE__*/function (_Object3D) {\n  _inherits(MMDPhysicsHelper, _Object3D);\n  var _super = _createSuper(MMDPhysicsHelper);\n  /**\n   * Visualize Rigid bodies\n   *\n   * @param {THREE.SkinnedMesh} mesh\n   * @param {Physics} physics\n   */\n  function MMDPhysicsHelper(mesh, physics) {\n    var _this;\n    _classCallCheck(this, MMDPhysicsHelper);\n    _this = _super.call(this);\n    _this.root = mesh;\n    _this.physics = physics;\n    _this.matrix.copy(mesh.matrixWorld);\n    _this.matrixAutoUpdate = false;\n    _this.materials = [];\n    _this.materials.push(new MeshBasicMaterial({\n      color: new Color(16746632),\n      wireframe: true,\n      depthTest: false,\n      depthWrite: false,\n      opacity: 0.25,\n      transparent: true\n    }));\n    _this.materials.push(new MeshBasicMaterial({\n      color: new Color(8978312),\n      wireframe: true,\n      depthTest: false,\n      depthWrite: false,\n      opacity: 0.25,\n      transparent: true\n    }));\n    _this.materials.push(new MeshBasicMaterial({\n      color: new Color(8947967),\n      wireframe: true,\n      depthTest: false,\n      depthWrite: false,\n      opacity: 0.25,\n      transparent: true\n    }));\n    _this._init();\n    return _this;\n  }\n  /**\n   * Frees the GPU-related resources allocated by this instance. Call this method whenever this instance is no longer used in your app.\n   */\n  _createClass(MMDPhysicsHelper, [{\n    key: \"dispose\",\n    value: function dispose() {\n      var materials = this.materials;\n      var children = this.children;\n      for (var i = 0; i < materials.length; i++) {\n        materials[i].dispose();\n      }\n      for (var _i3 = 0; _i3 < children.length; _i3++) {\n        var child = children[_i3];\n        if (child.isMesh) child.geometry.dispose();\n      }\n    }\n    /**\n     * Updates Rigid Bodies visualization.\n     */\n  }, {\n    key: \"updateMatrixWorld\",\n    value: function updateMatrixWorld(force) {\n      var mesh = this.root;\n      if (this.visible) {\n        var bodies = this.physics.bodies;\n        _matrixWorldInv.copy(mesh.matrixWorld).decompose(_position, _quaternion, _scale).compose(_position, _quaternion, _scale.set(1, 1, 1)).invert();\n        for (var i = 0, il = bodies.length; i < il; i++) {\n          var body = bodies[i].body;\n          var child = this.children[i];\n          var tr = body.getCenterOfMassTransform();\n          var origin = tr.getOrigin();\n          var rotation = tr.getRotation();\n          child.position.set(origin.x(), origin.y(), origin.z()).applyMatrix4(_matrixWorldInv);\n          child.quaternion.setFromRotationMatrix(_matrixWorldInv).multiply(_quaternion.set(rotation.x(), rotation.y(), rotation.z(), rotation.w()));\n        }\n      }\n      this.matrix.copy(mesh.matrixWorld).decompose(_position, _quaternion, _scale).compose(_position, _quaternion, _scale.set(1, 1, 1));\n      _get(_getPrototypeOf(MMDPhysicsHelper.prototype), \"updateMatrixWorld\", this).call(this, force);\n    }\n    // private method\n  }, {\n    key: \"_init\",\n    value: function _init() {\n      var bodies = this.physics.bodies;\n      function createGeometry(param2) {\n        switch (param2.shapeType) {\n          case 0:\n            return new SphereGeometry(param2.width, 16, 8);\n          case 1:\n            return new BoxGeometry(param2.width * 2, param2.height * 2, param2.depth * 2, 8, 8, 8);\n          case 2:\n            return new CapsuleGeometry(param2.width, param2.height, 8, 16);\n          default:\n            return null;\n        }\n      }\n      for (var i = 0, il = bodies.length; i < il; i++) {\n        var param = bodies[i].params;\n        this.add(new Mesh(createGeometry(param), this.materials[param.type]));\n      }\n    }\n  }]);\n  return MMDPhysicsHelper;\n}(Object3D);\nexport { MMDPhysics };","map":{"version":3,"names":["MMDPhysics","mesh","rigidBodyParams","constraintParams","arguments","length","undefined","params","_classCallCheck","Ammo","Error","manager","ResourceManager","unitStep","maxStepNum","gravity","Vector3","copy","world","bodies","constraints","_init","_createClass","key","value","update","delta","isNonDefaultScale","position","allocThreeVector3","quaternion","allocThreeQuaternion","scale","matrixWorld","decompose","x","y","z","parent","set","updateMatrixWorld","_updateRigidBodies","_stepSimulation","_updateBones","freeThreeVector3","freeThreeQuaternion","reset","i","il","warmup","cycles","setGravity","btVector3","createHelper","MMDPhysicsHelper","currentPosition","currentQuaternion","currentScale","_createWorld","_initRigidBodies","_initConstraints","config","btDefaultCollisionConfiguration","dispatcher","btCollisionDispatcher","cache","btDbvtBroadphase","solver","btSequentialImpulseConstraintSolver","btDiscreteDynamicsWorld","rigidBodies","push","RigidBody","bodyA","rigidBodyIndex1","bodyB","rigidBodyIndex2","Constraint","stepTime","stepSimulation","updateFromBone","updateBone","threeVector3s","threeMatrix4s","threeQuaternions","threeEulers","transforms","quaternions","vector3s","pop","v","allocThreeMatrix4","Matrix4","freeThreeMatrix4","m","Quaternion","q","allocThreeEuler","Euler","freeThreeEuler","e","allocTransform","btTransform","freeTransform","t","allocQuaternion","btQuaternion","freeQuaternion","allocVector3","freeVector3","setIdentity","getBasis","getRotation","getBasisAsMatrix3","quaternionToMatrix3","getOrigin","setOrigin","setValue","copyOrigin","t1","t2","o","setBasis","setRotation","setBasisFromMatrix3","matrix3ToQuaternion","setOriginFromArray3","a","setOriginFromThreeVector3","setBasisFromArray3","thQ","thE","setBasisFromThreeQuaternion","setFromEuler","setX","setY","setZ","setW","w","multiplyTransforms","m1","m2","o1","o2","v1","multiplyMatrix3ByVector3","v2","addVector3","m3","multiplyMatrices3","inverseTransform","transposeMatrix3","negativeVector3","v10","rowOfMatrix3","v11","v12","v20","columnOfMatrix3","v21","v22","dotVectors3","v4","v0","xx","yy","zz","xy","yz","zx","xw","yw","zw","s","Math","sqrt","body","bone","boneOffsetForm","boneOffsetFormInverse","_setTransformFromBone","boneIndex","type","_updateBoneRotation","_updateBonePosition","_setPositionFromBone","generateShape","p","shapeType","btSphereShape","width","btBoxShape","height","depth","btCapsuleShape","bones","skeleton","Bone","shape","weight","localInertia","calculateLocalInertia","rotation","vector","boneForm","getWorldPosition","form","state","btDefaultMotionState","info","btRigidBodyConstructionInfo","set_m_friction","friction","set_m_restitution","restitution","btRigidBody","setCollisionFlags","getCollisionFlags","setActivationState","setDamping","positionDamping","rotationDamping","setSleepingThresholds","addRigidBody","groupIndex","groupTarget","_getBoneTransform","tr","_getWorldTransformForBone","getCenterOfMassTransform","setCenterOfMassTransform","getMotionState","setWorldTransform","getWorldTransform","thQ2","thQ3","setFromRotationMatrix","conjugate","multiply","matrix","normalize","thV","worldToLocal","constraint","formA","formB","formInverseA","formInverseB","formA2","formB2","btGeneric6DofSpringConstraint","lll","lul","all","aul","translationLimitation1","translationLimitation2","rotationLimitation1","rotationLimitation2","setLinearLowerLimit","setLinearUpperLimit","setAngularLowerLimit","setAngularUpperLimit","springPosition","enableSpring","setStiffness","springRotation","setParam","addConstraint","_position","_quaternion","_scale","_matrixWorldInv","_Object3D","_inherits","_super","_createSuper","physics","_this","call","root","matrixAutoUpdate","materials","MeshBasicMaterial","color","Color","wireframe","depthTest","depthWrite","opacity","transparent","dispose","children","child","isMesh","geometry","force","visible","compose","invert","origin","applyMatrix4","_get","_getPrototypeOf","prototype","createGeometry","param2","SphereGeometry","BoxGeometry","CapsuleGeometry","param","add","Mesh","Object3D"],"sources":["C:\\Users\\Nayyu\\Desktop\\skibidai-public-build\\node_modules\\src\\animation\\MMDPhysics.js"],"sourcesContent":["import {\n  Bone,\n  BoxGeometry,\n  Color,\n  Euler,\n  Matrix4,\n  Mesh,\n  MeshBasicMaterial,\n  Object3D,\n  Quaternion,\n  SphereGeometry,\n  Vector3,\n} from 'three'\nimport { CapsuleGeometry } from '../_polyfill/CapsuleGeometry'\n\n/**\n * Dependencies\n *  - Ammo.js https://github.com/kripken/ammo.js\n *\n * MMDPhysics calculates physics with Ammo(Bullet based JavaScript Physics engine)\n * for MMD model loaded by MMDLoader.\n *\n * TODO\n *  - Physics in Worker\n */\n\n/* global Ammo */\n\nclass MMDPhysics {\n  /**\n   * @param {THREE.SkinnedMesh} mesh\n   * @param {Array<Object>} rigidBodyParams\n   * @param {Array<Object>} (optional) constraintParams\n   * @param {Object} params - (optional)\n   * @param {Number} params.unitStep - Default is 1 / 65.\n   * @param {Integer} params.maxStepNum - Default is 3.\n   * @param {Vector3} params.gravity - Default is ( 0, - 9.8 * 10, 0 )\n   */\n  constructor(mesh, rigidBodyParams, constraintParams = [], params = {}) {\n    if (typeof Ammo === 'undefined') {\n      throw new Error('THREE.MMDPhysics: Import ammo.js https://github.com/kripken/ammo.js')\n    }\n\n    this.manager = new ResourceManager()\n\n    this.mesh = mesh\n\n    /*\n     * I don't know why but 1/60 unitStep easily breaks models\n     * so I set it 1/65 so far.\n     * Don't set too small unitStep because\n     * the smaller unitStep can make the performance worse.\n     */\n    this.unitStep = params.unitStep !== undefined ? params.unitStep : 1 / 65\n    this.maxStepNum = params.maxStepNum !== undefined ? params.maxStepNum : 3\n    this.gravity = new Vector3(0, -9.8 * 10, 0)\n\n    if (params.gravity !== undefined) this.gravity.copy(params.gravity)\n\n    this.world = params.world !== undefined ? params.world : null // experimental\n\n    this.bodies = []\n    this.constraints = []\n\n    this._init(mesh, rigidBodyParams, constraintParams)\n  }\n\n  /**\n   * Advances Physics calculation and updates bones.\n   *\n   * @param {Number} delta - time in second\n   * @return {MMDPhysics}\n   */\n  update(delta) {\n    const manager = this.manager\n    const mesh = this.mesh\n\n    // rigid bodies and constrains are for\n    // mesh's world scale (1, 1, 1).\n    // Convert to (1, 1, 1) if it isn't.\n\n    let isNonDefaultScale = false\n\n    const position = manager.allocThreeVector3()\n    const quaternion = manager.allocThreeQuaternion()\n    const scale = manager.allocThreeVector3()\n\n    mesh.matrixWorld.decompose(position, quaternion, scale)\n\n    if (scale.x !== 1 || scale.y !== 1 || scale.z !== 1) {\n      isNonDefaultScale = true\n    }\n\n    let parent\n\n    if (isNonDefaultScale) {\n      parent = mesh.parent\n\n      if (parent !== null) mesh.parent = null\n\n      scale.copy(this.mesh.scale)\n\n      mesh.scale.set(1, 1, 1)\n      mesh.updateMatrixWorld(true)\n    }\n\n    // calculate physics and update bones\n\n    this._updateRigidBodies()\n    this._stepSimulation(delta)\n    this._updateBones()\n\n    // restore mesh if converted above\n\n    if (isNonDefaultScale) {\n      if (parent !== null) mesh.parent = parent\n\n      mesh.scale.copy(scale)\n    }\n\n    manager.freeThreeVector3(scale)\n    manager.freeThreeQuaternion(quaternion)\n    manager.freeThreeVector3(position)\n\n    return this\n  }\n\n  /**\n   * Resets rigid bodies transorm to current bone's.\n   *\n   * @return {MMDPhysics}\n   */\n  reset() {\n    for (let i = 0, il = this.bodies.length; i < il; i++) {\n      this.bodies[i].reset()\n    }\n\n    return this\n  }\n\n  /**\n   * Warm ups Rigid bodies. Calculates cycles steps.\n   *\n   * @param {Integer} cycles\n   * @return {MMDPhysics}\n   */\n  warmup(cycles) {\n    for (let i = 0; i < cycles; i++) {\n      this.update(1 / 60)\n    }\n\n    return this\n  }\n\n  /**\n   * Sets gravity.\n   *\n   * @param {Vector3} gravity\n   * @return {MMDPhysicsHelper}\n   */\n  setGravity(gravity) {\n    this.world.setGravity(new Ammo.btVector3(gravity.x, gravity.y, gravity.z))\n    this.gravity.copy(gravity)\n\n    return this\n  }\n\n  /**\n   * Creates MMDPhysicsHelper\n   *\n   * @return {MMDPhysicsHelper}\n   */\n  createHelper() {\n    return new MMDPhysicsHelper(this.mesh, this)\n  }\n\n  // private methods\n\n  _init(mesh, rigidBodyParams, constraintParams) {\n    const manager = this.manager\n\n    // rigid body/constraint parameters are for\n    // mesh's default world transform as position(0, 0, 0),\n    // quaternion(0, 0, 0, 1) and scale(0, 0, 0)\n\n    const parent = mesh.parent\n\n    if (parent !== null) mesh.parent = null\n\n    const currentPosition = manager.allocThreeVector3()\n    const currentQuaternion = manager.allocThreeQuaternion()\n    const currentScale = manager.allocThreeVector3()\n\n    currentPosition.copy(mesh.position)\n    currentQuaternion.copy(mesh.quaternion)\n    currentScale.copy(mesh.scale)\n\n    mesh.position.set(0, 0, 0)\n    mesh.quaternion.set(0, 0, 0, 1)\n    mesh.scale.set(1, 1, 1)\n\n    mesh.updateMatrixWorld(true)\n\n    if (this.world === null) {\n      this.world = this._createWorld()\n      this.setGravity(this.gravity)\n    }\n\n    this._initRigidBodies(rigidBodyParams)\n    this._initConstraints(constraintParams)\n\n    if (parent !== null) mesh.parent = parent\n\n    mesh.position.copy(currentPosition)\n    mesh.quaternion.copy(currentQuaternion)\n    mesh.scale.copy(currentScale)\n\n    mesh.updateMatrixWorld(true)\n\n    this.reset()\n\n    manager.freeThreeVector3(currentPosition)\n    manager.freeThreeQuaternion(currentQuaternion)\n    manager.freeThreeVector3(currentScale)\n  }\n\n  _createWorld() {\n    const config = new Ammo.btDefaultCollisionConfiguration()\n    const dispatcher = new Ammo.btCollisionDispatcher(config)\n    const cache = new Ammo.btDbvtBroadphase()\n    const solver = new Ammo.btSequentialImpulseConstraintSolver()\n    const world = new Ammo.btDiscreteDynamicsWorld(dispatcher, cache, solver, config)\n    return world\n  }\n\n  _initRigidBodies(rigidBodies) {\n    for (let i = 0, il = rigidBodies.length; i < il; i++) {\n      this.bodies.push(new RigidBody(this.mesh, this.world, rigidBodies[i], this.manager))\n    }\n  }\n\n  _initConstraints(constraints) {\n    for (let i = 0, il = constraints.length; i < il; i++) {\n      const params = constraints[i]\n      const bodyA = this.bodies[params.rigidBodyIndex1]\n      const bodyB = this.bodies[params.rigidBodyIndex2]\n      this.constraints.push(new Constraint(this.mesh, this.world, bodyA, bodyB, params, this.manager))\n    }\n  }\n\n  _stepSimulation(delta) {\n    const unitStep = this.unitStep\n    let stepTime = delta\n    let maxStepNum = ((delta / unitStep) | 0) + 1\n\n    if (stepTime < unitStep) {\n      stepTime = unitStep\n      maxStepNum = 1\n    }\n\n    if (maxStepNum > this.maxStepNum) {\n      maxStepNum = this.maxStepNum\n    }\n\n    this.world.stepSimulation(stepTime, maxStepNum, unitStep)\n  }\n\n  _updateRigidBodies() {\n    for (let i = 0, il = this.bodies.length; i < il; i++) {\n      this.bodies[i].updateFromBone()\n    }\n  }\n\n  _updateBones() {\n    for (let i = 0, il = this.bodies.length; i < il; i++) {\n      this.bodies[i].updateBone()\n    }\n  }\n}\n\n/**\n * This manager's responsibilies are\n *\n * 1. manage Ammo.js and Three.js object resources and\n *    improve the performance and the memory consumption by\n *    reusing objects.\n *\n * 2. provide simple Ammo object operations.\n */\nclass ResourceManager {\n  constructor() {\n    // for Three.js\n    this.threeVector3s = []\n    this.threeMatrix4s = []\n    this.threeQuaternions = []\n    this.threeEulers = []\n\n    // for Ammo.js\n    this.transforms = []\n    this.quaternions = []\n    this.vector3s = []\n  }\n\n  allocThreeVector3() {\n    return this.threeVector3s.length > 0 ? this.threeVector3s.pop() : new Vector3()\n  }\n\n  freeThreeVector3(v) {\n    this.threeVector3s.push(v)\n  }\n\n  allocThreeMatrix4() {\n    return this.threeMatrix4s.length > 0 ? this.threeMatrix4s.pop() : new Matrix4()\n  }\n\n  freeThreeMatrix4(m) {\n    this.threeMatrix4s.push(m)\n  }\n\n  allocThreeQuaternion() {\n    return this.threeQuaternions.length > 0 ? this.threeQuaternions.pop() : new Quaternion()\n  }\n\n  freeThreeQuaternion(q) {\n    this.threeQuaternions.push(q)\n  }\n\n  allocThreeEuler() {\n    return this.threeEulers.length > 0 ? this.threeEulers.pop() : new Euler()\n  }\n\n  freeThreeEuler(e) {\n    this.threeEulers.push(e)\n  }\n\n  allocTransform() {\n    return this.transforms.length > 0 ? this.transforms.pop() : new Ammo.btTransform()\n  }\n\n  freeTransform(t) {\n    this.transforms.push(t)\n  }\n\n  allocQuaternion() {\n    return this.quaternions.length > 0 ? this.quaternions.pop() : new Ammo.btQuaternion()\n  }\n\n  freeQuaternion(q) {\n    this.quaternions.push(q)\n  }\n\n  allocVector3() {\n    return this.vector3s.length > 0 ? this.vector3s.pop() : new Ammo.btVector3()\n  }\n\n  freeVector3(v) {\n    this.vector3s.push(v)\n  }\n\n  setIdentity(t) {\n    t.setIdentity()\n  }\n\n  getBasis(t) {\n    var q = this.allocQuaternion()\n    t.getBasis().getRotation(q)\n    return q\n  }\n\n  getBasisAsMatrix3(t) {\n    var q = this.getBasis(t)\n    var m = this.quaternionToMatrix3(q)\n    this.freeQuaternion(q)\n    return m\n  }\n\n  getOrigin(t) {\n    return t.getOrigin()\n  }\n\n  setOrigin(t, v) {\n    t.getOrigin().setValue(v.x(), v.y(), v.z())\n  }\n\n  copyOrigin(t1, t2) {\n    var o = t2.getOrigin()\n    this.setOrigin(t1, o)\n  }\n\n  setBasis(t, q) {\n    t.setRotation(q)\n  }\n\n  setBasisFromMatrix3(t, m) {\n    var q = this.matrix3ToQuaternion(m)\n    this.setBasis(t, q)\n    this.freeQuaternion(q)\n  }\n\n  setOriginFromArray3(t, a) {\n    t.getOrigin().setValue(a[0], a[1], a[2])\n  }\n\n  setOriginFromThreeVector3(t, v) {\n    t.getOrigin().setValue(v.x, v.y, v.z)\n  }\n\n  setBasisFromArray3(t, a) {\n    var thQ = this.allocThreeQuaternion()\n    var thE = this.allocThreeEuler()\n    thE.set(a[0], a[1], a[2])\n    this.setBasisFromThreeQuaternion(t, thQ.setFromEuler(thE))\n\n    this.freeThreeEuler(thE)\n    this.freeThreeQuaternion(thQ)\n  }\n\n  setBasisFromThreeQuaternion(t, a) {\n    var q = this.allocQuaternion()\n\n    q.setX(a.x)\n    q.setY(a.y)\n    q.setZ(a.z)\n    q.setW(a.w)\n    this.setBasis(t, q)\n\n    this.freeQuaternion(q)\n  }\n\n  multiplyTransforms(t1, t2) {\n    var t = this.allocTransform()\n    this.setIdentity(t)\n\n    var m1 = this.getBasisAsMatrix3(t1)\n    var m2 = this.getBasisAsMatrix3(t2)\n\n    var o1 = this.getOrigin(t1)\n    var o2 = this.getOrigin(t2)\n\n    var v1 = this.multiplyMatrix3ByVector3(m1, o2)\n    var v2 = this.addVector3(v1, o1)\n    this.setOrigin(t, v2)\n\n    var m3 = this.multiplyMatrices3(m1, m2)\n    this.setBasisFromMatrix3(t, m3)\n\n    this.freeVector3(v1)\n    this.freeVector3(v2)\n\n    return t\n  }\n\n  inverseTransform(t) {\n    var t2 = this.allocTransform()\n\n    var m1 = this.getBasisAsMatrix3(t)\n    var o = this.getOrigin(t)\n\n    var m2 = this.transposeMatrix3(m1)\n    var v1 = this.negativeVector3(o)\n    var v2 = this.multiplyMatrix3ByVector3(m2, v1)\n\n    this.setOrigin(t2, v2)\n    this.setBasisFromMatrix3(t2, m2)\n\n    this.freeVector3(v1)\n    this.freeVector3(v2)\n\n    return t2\n  }\n\n  multiplyMatrices3(m1, m2) {\n    var m3 = []\n\n    var v10 = this.rowOfMatrix3(m1, 0)\n    var v11 = this.rowOfMatrix3(m1, 1)\n    var v12 = this.rowOfMatrix3(m1, 2)\n\n    var v20 = this.columnOfMatrix3(m2, 0)\n    var v21 = this.columnOfMatrix3(m2, 1)\n    var v22 = this.columnOfMatrix3(m2, 2)\n\n    m3[0] = this.dotVectors3(v10, v20)\n    m3[1] = this.dotVectors3(v10, v21)\n    m3[2] = this.dotVectors3(v10, v22)\n    m3[3] = this.dotVectors3(v11, v20)\n    m3[4] = this.dotVectors3(v11, v21)\n    m3[5] = this.dotVectors3(v11, v22)\n    m3[6] = this.dotVectors3(v12, v20)\n    m3[7] = this.dotVectors3(v12, v21)\n    m3[8] = this.dotVectors3(v12, v22)\n\n    this.freeVector3(v10)\n    this.freeVector3(v11)\n    this.freeVector3(v12)\n    this.freeVector3(v20)\n    this.freeVector3(v21)\n    this.freeVector3(v22)\n\n    return m3\n  }\n\n  addVector3(v1, v2) {\n    var v = this.allocVector3()\n    v.setValue(v1.x() + v2.x(), v1.y() + v2.y(), v1.z() + v2.z())\n    return v\n  }\n\n  dotVectors3(v1, v2) {\n    return v1.x() * v2.x() + v1.y() * v2.y() + v1.z() * v2.z()\n  }\n\n  rowOfMatrix3(m, i) {\n    var v = this.allocVector3()\n    v.setValue(m[i * 3 + 0], m[i * 3 + 1], m[i * 3 + 2])\n    return v\n  }\n\n  columnOfMatrix3(m, i) {\n    var v = this.allocVector3()\n    v.setValue(m[i + 0], m[i + 3], m[i + 6])\n    return v\n  }\n\n  negativeVector3(v) {\n    var v2 = this.allocVector3()\n    v2.setValue(-v.x(), -v.y(), -v.z())\n    return v2\n  }\n\n  multiplyMatrix3ByVector3(m, v) {\n    var v4 = this.allocVector3()\n\n    var v0 = this.rowOfMatrix3(m, 0)\n    var v1 = this.rowOfMatrix3(m, 1)\n    var v2 = this.rowOfMatrix3(m, 2)\n    var x = this.dotVectors3(v0, v)\n    var y = this.dotVectors3(v1, v)\n    var z = this.dotVectors3(v2, v)\n\n    v4.setValue(x, y, z)\n\n    this.freeVector3(v0)\n    this.freeVector3(v1)\n    this.freeVector3(v2)\n\n    return v4\n  }\n\n  transposeMatrix3(m) {\n    var m2 = []\n    m2[0] = m[0]\n    m2[1] = m[3]\n    m2[2] = m[6]\n    m2[3] = m[1]\n    m2[4] = m[4]\n    m2[5] = m[7]\n    m2[6] = m[2]\n    m2[7] = m[5]\n    m2[8] = m[8]\n    return m2\n  }\n\n  quaternionToMatrix3(q) {\n    var m = []\n\n    var x = q.x()\n    var y = q.y()\n    var z = q.z()\n    var w = q.w()\n\n    var xx = x * x\n    var yy = y * y\n    var zz = z * z\n\n    var xy = x * y\n    var yz = y * z\n    var zx = z * x\n\n    var xw = x * w\n    var yw = y * w\n    var zw = z * w\n\n    m[0] = 1 - 2 * (yy + zz)\n    m[1] = 2 * (xy - zw)\n    m[2] = 2 * (zx + yw)\n    m[3] = 2 * (xy + zw)\n    m[4] = 1 - 2 * (zz + xx)\n    m[5] = 2 * (yz - xw)\n    m[6] = 2 * (zx - yw)\n    m[7] = 2 * (yz + xw)\n    m[8] = 1 - 2 * (xx + yy)\n\n    return m\n  }\n\n  matrix3ToQuaternion(m) {\n    var t = m[0] + m[4] + m[8]\n    var s, x, y, z, w\n\n    if (t > 0) {\n      s = Math.sqrt(t + 1.0) * 2\n      w = 0.25 * s\n      x = (m[7] - m[5]) / s\n      y = (m[2] - m[6]) / s\n      z = (m[3] - m[1]) / s\n    } else if (m[0] > m[4] && m[0] > m[8]) {\n      s = Math.sqrt(1.0 + m[0] - m[4] - m[8]) * 2\n      w = (m[7] - m[5]) / s\n      x = 0.25 * s\n      y = (m[1] + m[3]) / s\n      z = (m[2] + m[6]) / s\n    } else if (m[4] > m[8]) {\n      s = Math.sqrt(1.0 + m[4] - m[0] - m[8]) * 2\n      w = (m[2] - m[6]) / s\n      x = (m[1] + m[3]) / s\n      y = 0.25 * s\n      z = (m[5] + m[7]) / s\n    } else {\n      s = Math.sqrt(1.0 + m[8] - m[0] - m[4]) * 2\n      w = (m[3] - m[1]) / s\n      x = (m[2] + m[6]) / s\n      y = (m[5] + m[7]) / s\n      z = 0.25 * s\n    }\n\n    var q = this.allocQuaternion()\n    q.setX(x)\n    q.setY(y)\n    q.setZ(z)\n    q.setW(w)\n    return q\n  }\n}\n\n/**\n * @param {THREE.SkinnedMesh} mesh\n * @param {Ammo.btDiscreteDynamicsWorld} world\n * @param {Object} params\n * @param {ResourceManager} manager\n */\nclass RigidBody {\n  constructor(mesh, world, params, manager) {\n    this.mesh = mesh\n    this.world = world\n    this.params = params\n    this.manager = manager\n\n    this.body = null\n    this.bone = null\n    this.boneOffsetForm = null\n    this.boneOffsetFormInverse = null\n\n    this._init()\n  }\n\n  /**\n   * Resets rigid body transform to the current bone's.\n   *\n   * @return {RigidBody}\n   */\n  reset() {\n    this._setTransformFromBone()\n    return this\n  }\n\n  /**\n   * Updates rigid body's transform from the current bone.\n   *\n   * @return {RidigBody}\n   */\n  updateFromBone() {\n    if (this.params.boneIndex !== -1 && this.params.type === 0) {\n      this._setTransformFromBone()\n    }\n\n    return this\n  }\n\n  /**\n   * Updates bone from the current ridid body's transform.\n   *\n   * @return {RidigBody}\n   */\n  updateBone() {\n    if (this.params.type === 0 || this.params.boneIndex === -1) {\n      return this\n    }\n\n    this._updateBoneRotation()\n\n    if (this.params.type === 1) {\n      this._updateBonePosition()\n    }\n\n    this.bone.updateMatrixWorld(true)\n\n    if (this.params.type === 2) {\n      this._setPositionFromBone()\n    }\n\n    return this\n  }\n\n  // private methods\n\n  _init() {\n    function generateShape(p) {\n      switch (p.shapeType) {\n        case 0:\n          return new Ammo.btSphereShape(p.width)\n\n        case 1:\n          return new Ammo.btBoxShape(new Ammo.btVector3(p.width, p.height, p.depth))\n\n        case 2:\n          return new Ammo.btCapsuleShape(p.width, p.height)\n\n        default:\n          throw new Error('unknown shape type ' + p.shapeType)\n      }\n    }\n\n    const manager = this.manager\n    const params = this.params\n    const bones = this.mesh.skeleton.bones\n    const bone = params.boneIndex === -1 ? new Bone() : bones[params.boneIndex]\n\n    const shape = generateShape(params)\n    const weight = params.type === 0 ? 0 : params.weight\n    const localInertia = manager.allocVector3()\n    localInertia.setValue(0, 0, 0)\n\n    if (weight !== 0) {\n      shape.calculateLocalInertia(weight, localInertia)\n    }\n\n    const boneOffsetForm = manager.allocTransform()\n    manager.setIdentity(boneOffsetForm)\n    manager.setOriginFromArray3(boneOffsetForm, params.position)\n    manager.setBasisFromArray3(boneOffsetForm, params.rotation)\n\n    const vector = manager.allocThreeVector3()\n    const boneForm = manager.allocTransform()\n    manager.setIdentity(boneForm)\n    manager.setOriginFromThreeVector3(boneForm, bone.getWorldPosition(vector))\n\n    const form = manager.multiplyTransforms(boneForm, boneOffsetForm)\n    const state = new Ammo.btDefaultMotionState(form)\n\n    const info = new Ammo.btRigidBodyConstructionInfo(weight, state, shape, localInertia)\n    info.set_m_friction(params.friction)\n    info.set_m_restitution(params.restitution)\n\n    const body = new Ammo.btRigidBody(info)\n\n    if (params.type === 0) {\n      body.setCollisionFlags(body.getCollisionFlags() | 2)\n\n      /*\n       * It'd be better to comment out this line though in general I should call this method\n       * because I'm not sure why but physics will be more like MMD's\n       * if I comment out.\n       */\n      body.setActivationState(4)\n    }\n\n    body.setDamping(params.positionDamping, params.rotationDamping)\n    body.setSleepingThresholds(0, 0)\n\n    this.world.addRigidBody(body, 1 << params.groupIndex, params.groupTarget)\n\n    this.body = body\n    this.bone = bone\n    this.boneOffsetForm = boneOffsetForm\n    this.boneOffsetFormInverse = manager.inverseTransform(boneOffsetForm)\n\n    manager.freeVector3(localInertia)\n    manager.freeTransform(form)\n    manager.freeTransform(boneForm)\n    manager.freeThreeVector3(vector)\n  }\n\n  _getBoneTransform() {\n    const manager = this.manager\n    const p = manager.allocThreeVector3()\n    const q = manager.allocThreeQuaternion()\n    const s = manager.allocThreeVector3()\n\n    this.bone.matrixWorld.decompose(p, q, s)\n\n    const tr = manager.allocTransform()\n    manager.setOriginFromThreeVector3(tr, p)\n    manager.setBasisFromThreeQuaternion(tr, q)\n\n    const form = manager.multiplyTransforms(tr, this.boneOffsetForm)\n\n    manager.freeTransform(tr)\n    manager.freeThreeVector3(s)\n    manager.freeThreeQuaternion(q)\n    manager.freeThreeVector3(p)\n\n    return form\n  }\n\n  _getWorldTransformForBone() {\n    const manager = this.manager\n    const tr = this.body.getCenterOfMassTransform()\n    return manager.multiplyTransforms(tr, this.boneOffsetFormInverse)\n  }\n\n  _setTransformFromBone() {\n    const manager = this.manager\n    const form = this._getBoneTransform()\n\n    // TODO: check the most appropriate way to set\n    //this.body.setWorldTransform( form );\n    this.body.setCenterOfMassTransform(form)\n    this.body.getMotionState().setWorldTransform(form)\n\n    manager.freeTransform(form)\n  }\n\n  _setPositionFromBone() {\n    const manager = this.manager\n    const form = this._getBoneTransform()\n\n    const tr = manager.allocTransform()\n    this.body.getMotionState().getWorldTransform(tr)\n    manager.copyOrigin(tr, form)\n\n    // TODO: check the most appropriate way to set\n    //this.body.setWorldTransform( tr );\n    this.body.setCenterOfMassTransform(tr)\n    this.body.getMotionState().setWorldTransform(tr)\n\n    manager.freeTransform(tr)\n    manager.freeTransform(form)\n  }\n\n  _updateBoneRotation() {\n    const manager = this.manager\n\n    const tr = this._getWorldTransformForBone()\n    const q = manager.getBasis(tr)\n\n    const thQ = manager.allocThreeQuaternion()\n    const thQ2 = manager.allocThreeQuaternion()\n    const thQ3 = manager.allocThreeQuaternion()\n\n    thQ.set(q.x(), q.y(), q.z(), q.w())\n    thQ2.setFromRotationMatrix(this.bone.matrixWorld)\n    thQ2.conjugate()\n    thQ2.multiply(thQ)\n\n    //this.bone.quaternion.multiply( thQ2 );\n\n    thQ3.setFromRotationMatrix(this.bone.matrix)\n\n    // Renormalizing quaternion here because repeatedly transforming\n    // quaternion continuously accumulates floating point error and\n    // can end up being overflow. See #15335\n    this.bone.quaternion.copy(thQ2.multiply(thQ3).normalize())\n\n    manager.freeThreeQuaternion(thQ)\n    manager.freeThreeQuaternion(thQ2)\n    manager.freeThreeQuaternion(thQ3)\n\n    manager.freeQuaternion(q)\n    manager.freeTransform(tr)\n  }\n\n  _updateBonePosition() {\n    const manager = this.manager\n\n    const tr = this._getWorldTransformForBone()\n\n    const thV = manager.allocThreeVector3()\n\n    const o = manager.getOrigin(tr)\n    thV.set(o.x(), o.y(), o.z())\n\n    if (this.bone.parent) {\n      this.bone.parent.worldToLocal(thV)\n    }\n\n    this.bone.position.copy(thV)\n\n    manager.freeThreeVector3(thV)\n\n    manager.freeTransform(tr)\n  }\n}\n\n//\n\nclass Constraint {\n  /**\n   * @param {THREE.SkinnedMesh} mesh\n   * @param {Ammo.btDiscreteDynamicsWorld} world\n   * @param {RigidBody} bodyA\n   * @param {RigidBody} bodyB\n   * @param {Object} params\n   * @param {ResourceManager} manager\n   */\n  constructor(mesh, world, bodyA, bodyB, params, manager) {\n    this.mesh = mesh\n    this.world = world\n    this.bodyA = bodyA\n    this.bodyB = bodyB\n    this.params = params\n    this.manager = manager\n\n    this.constraint = null\n\n    this._init()\n  }\n\n  // private method\n\n  _init() {\n    const manager = this.manager\n    const params = this.params\n    const bodyA = this.bodyA\n    const bodyB = this.bodyB\n\n    const form = manager.allocTransform()\n    manager.setIdentity(form)\n    manager.setOriginFromArray3(form, params.position)\n    manager.setBasisFromArray3(form, params.rotation)\n\n    const formA = manager.allocTransform()\n    const formB = manager.allocTransform()\n\n    bodyA.body.getMotionState().getWorldTransform(formA)\n    bodyB.body.getMotionState().getWorldTransform(formB)\n\n    const formInverseA = manager.inverseTransform(formA)\n    const formInverseB = manager.inverseTransform(formB)\n\n    const formA2 = manager.multiplyTransforms(formInverseA, form)\n    const formB2 = manager.multiplyTransforms(formInverseB, form)\n\n    const constraint = new Ammo.btGeneric6DofSpringConstraint(bodyA.body, bodyB.body, formA2, formB2, true)\n\n    const lll = manager.allocVector3()\n    const lul = manager.allocVector3()\n    const all = manager.allocVector3()\n    const aul = manager.allocVector3()\n\n    lll.setValue(params.translationLimitation1[0], params.translationLimitation1[1], params.translationLimitation1[2])\n    lul.setValue(params.translationLimitation2[0], params.translationLimitation2[1], params.translationLimitation2[2])\n    all.setValue(params.rotationLimitation1[0], params.rotationLimitation1[1], params.rotationLimitation1[2])\n    aul.setValue(params.rotationLimitation2[0], params.rotationLimitation2[1], params.rotationLimitation2[2])\n\n    constraint.setLinearLowerLimit(lll)\n    constraint.setLinearUpperLimit(lul)\n    constraint.setAngularLowerLimit(all)\n    constraint.setAngularUpperLimit(aul)\n\n    for (let i = 0; i < 3; i++) {\n      if (params.springPosition[i] !== 0) {\n        constraint.enableSpring(i, true)\n        constraint.setStiffness(i, params.springPosition[i])\n      }\n    }\n\n    for (let i = 0; i < 3; i++) {\n      if (params.springRotation[i] !== 0) {\n        constraint.enableSpring(i + 3, true)\n        constraint.setStiffness(i + 3, params.springRotation[i])\n      }\n    }\n\n    /*\n     * Currently(10/31/2016) official ammo.js doesn't support\n     * btGeneric6DofSpringConstraint.setParam method.\n     * You need custom ammo.js (add the method into idl) if you wanna use.\n     * By setting this parameter, physics will be more like MMD's\n     */\n    if (constraint.setParam !== undefined) {\n      for (let i = 0; i < 6; i++) {\n        constraint.setParam(2, 0.475, i)\n      }\n    }\n\n    this.world.addConstraint(constraint, true)\n    this.constraint = constraint\n\n    manager.freeTransform(form)\n    manager.freeTransform(formA)\n    manager.freeTransform(formB)\n    manager.freeTransform(formInverseA)\n    manager.freeTransform(formInverseB)\n    manager.freeTransform(formA2)\n    manager.freeTransform(formB2)\n    manager.freeVector3(lll)\n    manager.freeVector3(lul)\n    manager.freeVector3(all)\n    manager.freeVector3(aul)\n  }\n}\n\nconst _position = new Vector3()\nconst _quaternion = new Quaternion()\nconst _scale = new Vector3()\nconst _matrixWorldInv = new Matrix4()\n\nclass MMDPhysicsHelper extends Object3D {\n  /**\n   * Visualize Rigid bodies\n   *\n   * @param {THREE.SkinnedMesh} mesh\n   * @param {Physics} physics\n   */\n  constructor(mesh, physics) {\n    super()\n\n    this.root = mesh\n    this.physics = physics\n\n    this.matrix.copy(mesh.matrixWorld)\n    this.matrixAutoUpdate = false\n\n    this.materials = []\n\n    this.materials.push(\n      new MeshBasicMaterial({\n        color: new Color(0xff8888),\n        wireframe: true,\n        depthTest: false,\n        depthWrite: false,\n        opacity: 0.25,\n        transparent: true,\n      }),\n    )\n\n    this.materials.push(\n      new MeshBasicMaterial({\n        color: new Color(0x88ff88),\n        wireframe: true,\n        depthTest: false,\n        depthWrite: false,\n        opacity: 0.25,\n        transparent: true,\n      }),\n    )\n\n    this.materials.push(\n      new MeshBasicMaterial({\n        color: new Color(0x8888ff),\n        wireframe: true,\n        depthTest: false,\n        depthWrite: false,\n        opacity: 0.25,\n        transparent: true,\n      }),\n    )\n\n    this._init()\n  }\n\n  /**\n   * Frees the GPU-related resources allocated by this instance. Call this method whenever this instance is no longer used in your app.\n   */\n  dispose() {\n    const materials = this.materials\n    const children = this.children\n\n    for (let i = 0; i < materials.length; i++) {\n      materials[i].dispose()\n    }\n\n    for (let i = 0; i < children.length; i++) {\n      const child = children[i]\n\n      if (child.isMesh) child.geometry.dispose()\n    }\n  }\n\n  /**\n   * Updates Rigid Bodies visualization.\n   */\n  updateMatrixWorld(force) {\n    var mesh = this.root\n\n    if (this.visible) {\n      var bodies = this.physics.bodies\n\n      _matrixWorldInv\n        .copy(mesh.matrixWorld)\n        .decompose(_position, _quaternion, _scale)\n        .compose(_position, _quaternion, _scale.set(1, 1, 1))\n        .invert()\n\n      for (var i = 0, il = bodies.length; i < il; i++) {\n        var body = bodies[i].body\n        var child = this.children[i]\n\n        var tr = body.getCenterOfMassTransform()\n        var origin = tr.getOrigin()\n        var rotation = tr.getRotation()\n\n        child.position.set(origin.x(), origin.y(), origin.z()).applyMatrix4(_matrixWorldInv)\n\n        child.quaternion\n          .setFromRotationMatrix(_matrixWorldInv)\n          .multiply(_quaternion.set(rotation.x(), rotation.y(), rotation.z(), rotation.w()))\n      }\n    }\n\n    this.matrix\n      .copy(mesh.matrixWorld)\n      .decompose(_position, _quaternion, _scale)\n      .compose(_position, _quaternion, _scale.set(1, 1, 1))\n\n    super.updateMatrixWorld(force)\n  }\n\n  // private method\n\n  _init() {\n    var bodies = this.physics.bodies\n\n    function createGeometry(param) {\n      switch (param.shapeType) {\n        case 0:\n          return new SphereGeometry(param.width, 16, 8)\n\n        case 1:\n          return new BoxGeometry(param.width * 2, param.height * 2, param.depth * 2, 8, 8, 8)\n\n        case 2:\n          return new CapsuleGeometry(param.width, param.height, 8, 16)\n\n        default:\n          return null\n      }\n    }\n\n    for (var i = 0, il = bodies.length; i < il; i++) {\n      var param = bodies[i].params\n      this.add(new Mesh(createGeometry(param), this.materials[param.type]))\n    }\n  }\n}\n\nexport { MMDPhysics }\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}