{"ast":null,"code":"import _slicedToArray from \"C:/Users/Nayyu/Desktop/skibidai-public-build/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _objectWithoutProperties from \"C:/Users/Nayyu/Desktop/skibidai-public-build/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nvar _excluded = [\"color\", \"opacity\", \"transparent\", \"screenspace\", \"toneMapped\", \"polygonOffset\", \"polygonOffsetFactor\", \"renderOrder\", \"thickness\", \"angle\"];\nimport _extends from '@babel/runtime/helpers/esm/extends';\nimport * as THREE from 'three';\nimport * as React from 'react';\nimport { shaderMaterial } from './shaderMaterial.js';\nimport { useThree, extend, applyProps } from '@react-three/fiber';\nimport { toCreasedNormals } from 'three-stdlib';\nimport { version } from '../helpers/constants.js';\nvar OutlinesMaterial = /* @__PURE__ */shaderMaterial({\n  screenspace: false,\n  color: /* @__PURE__ */new THREE.Color('black'),\n  opacity: 1,\n  thickness: 0.05,\n  size: /* @__PURE__ */new THREE.Vector2()\n}, \"#include <common>\\n   #include <morphtarget_pars_vertex>\\n   #include <skinning_pars_vertex>\\n   uniform float thickness;\\n   uniform bool screenspace;\\n   uniform vec2 size;\\n   void main() {\\n     #if defined (USE_SKINNING)\\n\\t     #include <beginnormal_vertex>\\n       #include <morphnormal_vertex>\\n       #include <skinbase_vertex>\\n       #include <skinnormal_vertex>\\n       #include <defaultnormal_vertex>\\n     #endif\\n     #include <begin_vertex>\\n\\t   #include <morphtarget_vertex>\\n\\t   #include <skinning_vertex>\\n     #include <project_vertex>\\n     vec4 tNormal = vec4(normal, 0.0);\\n     vec4 tPosition = vec4(transformed, 1.0);\\n     #ifdef USE_INSTANCING\\n       tNormal = instanceMatrix * tNormal;\\n       tPosition = instanceMatrix * tPosition;\\n     #endif\\n     if (screenspace) {\\n       vec3 newPosition = tPosition.xyz + tNormal.xyz * thickness;\\n       gl_Position = projectionMatrix * modelViewMatrix * vec4(newPosition, 1.0); \\n     } else {\\n       vec4 clipPosition = projectionMatrix * modelViewMatrix * tPosition;\\n       vec4 clipNormal = projectionMatrix * modelViewMatrix * tNormal;\\n       vec2 offset = normalize(clipNormal.xy) * thickness / size * clipPosition.w * 2.0;\\n       clipPosition.xy += offset;\\n       gl_Position = clipPosition;\\n     }\\n   }\", \"uniform vec3 color;\\n   uniform float opacity;\\n   void main(){\\n     gl_FragColor = vec4(color, opacity);\\n     #include <tonemapping_fragment>\\n     #include <\".concat(version >= 154 ? 'colorspace_fragment' : 'encodings_fragment', \">\\n   }\"));\nfunction Outlines(_ref) {\n  var _ref$color = _ref.color,\n    color = _ref$color === void 0 ? 'black' : _ref$color,\n    _ref$opacity = _ref.opacity,\n    opacity = _ref$opacity === void 0 ? 1 : _ref$opacity,\n    _ref$transparent = _ref.transparent,\n    transparent = _ref$transparent === void 0 ? false : _ref$transparent,\n    _ref$screenspace = _ref.screenspace,\n    screenspace = _ref$screenspace === void 0 ? false : _ref$screenspace,\n    _ref$toneMapped = _ref.toneMapped,\n    toneMapped = _ref$toneMapped === void 0 ? true : _ref$toneMapped,\n    _ref$polygonOffset = _ref.polygonOffset,\n    polygonOffset = _ref$polygonOffset === void 0 ? false : _ref$polygonOffset,\n    _ref$polygonOffsetFac = _ref.polygonOffsetFactor,\n    polygonOffsetFactor = _ref$polygonOffsetFac === void 0 ? 0 : _ref$polygonOffsetFac,\n    _ref$renderOrder = _ref.renderOrder,\n    renderOrder = _ref$renderOrder === void 0 ? 0 : _ref$renderOrder,\n    _ref$thickness = _ref.thickness,\n    thickness = _ref$thickness === void 0 ? 0.05 : _ref$thickness,\n    _ref$angle = _ref.angle,\n    angle = _ref$angle === void 0 ? Math.PI : _ref$angle,\n    props = _objectWithoutProperties(_ref, _excluded);\n  var ref = React.useRef();\n  var _React$useState = React.useState(function () {\n      return new OutlinesMaterial({\n        side: THREE.BackSide\n      });\n    }),\n    _React$useState2 = _slicedToArray(_React$useState, 1),\n    material = _React$useState2[0];\n  var _useThree = useThree(),\n    gl = _useThree.gl;\n  var contextSize = gl.getDrawingBufferSize(new THREE.Vector2());\n  React.useMemo(function () {\n    return extend({\n      OutlinesMaterial: OutlinesMaterial\n    });\n  }, []);\n  var oldAngle = React.useRef(0);\n  var oldGeometry = React.useRef();\n  React.useLayoutEffect(function () {\n    var group = ref.current;\n    if (!group) return;\n    var parent = group.parent;\n    if (parent && parent.geometry) {\n      if (oldAngle.current !== angle || oldGeometry.current !== parent.geometry) {\n        var _group$children;\n        oldAngle.current = angle;\n        oldGeometry.current = parent.geometry;\n\n        // Remove old mesh\n        var mesh = (_group$children = group.children) == null ? void 0 : _group$children[0];\n        if (mesh) {\n          if (angle) mesh.geometry.dispose();\n          group.remove(mesh);\n        }\n        if (parent.skeleton) {\n          mesh = new THREE.SkinnedMesh();\n          mesh.material = material;\n          mesh.bind(parent.skeleton, parent.bindMatrix);\n          group.add(mesh);\n        } else if (parent.isInstancedMesh) {\n          mesh = new THREE.InstancedMesh(parent.geometry, material, parent.count);\n          mesh.instanceMatrix = parent.instanceMatrix;\n          group.add(mesh);\n        } else {\n          mesh = new THREE.Mesh();\n          mesh.material = material;\n          group.add(mesh);\n        }\n        mesh.geometry = angle ? toCreasedNormals(parent.geometry, angle) : parent.geometry;\n      }\n    }\n  });\n  React.useLayoutEffect(function () {\n    var group = ref.current;\n    if (!group) return;\n    var mesh = group.children[0];\n    if (mesh) {\n      mesh.renderOrder = renderOrder;\n      applyProps(mesh.material, {\n        transparent: transparent,\n        thickness: thickness,\n        color: color,\n        opacity: opacity,\n        size: contextSize,\n        screenspace: screenspace,\n        toneMapped: toneMapped,\n        polygonOffset: polygonOffset,\n        polygonOffsetFactor: polygonOffsetFactor\n      });\n    }\n  });\n  React.useEffect(function () {\n    return function () {\n      // Dispose everything on unmount\n      var group = ref.current;\n      if (!group) return;\n      var mesh = group.children[0];\n      if (mesh) {\n        if (angle) mesh.geometry.dispose();\n        group.remove(mesh);\n      }\n    };\n  }, []);\n  return /*#__PURE__*/React.createElement(\"group\", _extends({\n    ref: ref\n  }, props));\n}\nexport { Outlines };","map":{"version":3,"names":["_extends","THREE","React","shaderMaterial","useThree","extend","applyProps","toCreasedNormals","version","OutlinesMaterial","screenspace","color","Color","opacity","thickness","size","Vector2","concat","Outlines","_ref","_ref$color","_ref$opacity","_ref$transparent","transparent","_ref$screenspace","_ref$toneMapped","toneMapped","_ref$polygonOffset","polygonOffset","_ref$polygonOffsetFac","polygonOffsetFactor","_ref$renderOrder","renderOrder","_ref$thickness","_ref$angle","angle","Math","PI","props","_objectWithoutProperties","_excluded","ref","useRef","_React$useState","useState","side","BackSide","_React$useState2","_slicedToArray","material","_useThree","gl","contextSize","getDrawingBufferSize","useMemo","oldAngle","oldGeometry","useLayoutEffect","group","current","parent","geometry","_group$children","mesh","children","dispose","remove","skeleton","SkinnedMesh","bind","bindMatrix","add","isInstancedMesh","InstancedMesh","count","instanceMatrix","Mesh","useEffect","createElement"],"sources":["C:/Users/Nayyu/Desktop/skibidai-public-build/node_modules/@react-three/drei/core/Outlines.js"],"sourcesContent":["import _extends from '@babel/runtime/helpers/esm/extends';\nimport * as THREE from 'three';\nimport * as React from 'react';\nimport { shaderMaterial } from './shaderMaterial.js';\nimport { useThree, extend, applyProps } from '@react-three/fiber';\nimport { toCreasedNormals } from 'three-stdlib';\nimport { version } from '../helpers/constants.js';\n\nconst OutlinesMaterial = /* @__PURE__ */shaderMaterial({\n  screenspace: false,\n  color: /* @__PURE__ */new THREE.Color('black'),\n  opacity: 1,\n  thickness: 0.05,\n  size: /* @__PURE__ */new THREE.Vector2()\n}, `#include <common>\n   #include <morphtarget_pars_vertex>\n   #include <skinning_pars_vertex>\n   uniform float thickness;\n   uniform bool screenspace;\n   uniform vec2 size;\n   void main() {\n     #if defined (USE_SKINNING)\n\t     #include <beginnormal_vertex>\n       #include <morphnormal_vertex>\n       #include <skinbase_vertex>\n       #include <skinnormal_vertex>\n       #include <defaultnormal_vertex>\n     #endif\n     #include <begin_vertex>\n\t   #include <morphtarget_vertex>\n\t   #include <skinning_vertex>\n     #include <project_vertex>\n     vec4 tNormal = vec4(normal, 0.0);\n     vec4 tPosition = vec4(transformed, 1.0);\n     #ifdef USE_INSTANCING\n       tNormal = instanceMatrix * tNormal;\n       tPosition = instanceMatrix * tPosition;\n     #endif\n     if (screenspace) {\n       vec3 newPosition = tPosition.xyz + tNormal.xyz * thickness;\n       gl_Position = projectionMatrix * modelViewMatrix * vec4(newPosition, 1.0); \n     } else {\n       vec4 clipPosition = projectionMatrix * modelViewMatrix * tPosition;\n       vec4 clipNormal = projectionMatrix * modelViewMatrix * tNormal;\n       vec2 offset = normalize(clipNormal.xy) * thickness / size * clipPosition.w * 2.0;\n       clipPosition.xy += offset;\n       gl_Position = clipPosition;\n     }\n   }`, `uniform vec3 color;\n   uniform float opacity;\n   void main(){\n     gl_FragColor = vec4(color, opacity);\n     #include <tonemapping_fragment>\n     #include <${version >= 154 ? 'colorspace_fragment' : 'encodings_fragment'}>\n   }`);\nfunction Outlines({\n  color = 'black',\n  opacity = 1,\n  transparent = false,\n  screenspace = false,\n  toneMapped = true,\n  polygonOffset = false,\n  polygonOffsetFactor = 0,\n  renderOrder = 0,\n  thickness = 0.05,\n  angle = Math.PI,\n  ...props\n}) {\n  const ref = React.useRef();\n  const [material] = React.useState(() => new OutlinesMaterial({\n    side: THREE.BackSide\n  }));\n  const {\n    gl\n  } = useThree();\n  const contextSize = gl.getDrawingBufferSize(new THREE.Vector2());\n  React.useMemo(() => extend({\n    OutlinesMaterial\n  }), []);\n  const oldAngle = React.useRef(0);\n  const oldGeometry = React.useRef();\n  React.useLayoutEffect(() => {\n    const group = ref.current;\n    if (!group) return;\n    const parent = group.parent;\n    if (parent && parent.geometry) {\n      if (oldAngle.current !== angle || oldGeometry.current !== parent.geometry) {\n        var _group$children;\n        oldAngle.current = angle;\n        oldGeometry.current = parent.geometry;\n\n        // Remove old mesh\n        let mesh = (_group$children = group.children) == null ? void 0 : _group$children[0];\n        if (mesh) {\n          if (angle) mesh.geometry.dispose();\n          group.remove(mesh);\n        }\n        if (parent.skeleton) {\n          mesh = new THREE.SkinnedMesh();\n          mesh.material = material;\n          mesh.bind(parent.skeleton, parent.bindMatrix);\n          group.add(mesh);\n        } else if (parent.isInstancedMesh) {\n          mesh = new THREE.InstancedMesh(parent.geometry, material, parent.count);\n          mesh.instanceMatrix = parent.instanceMatrix;\n          group.add(mesh);\n        } else {\n          mesh = new THREE.Mesh();\n          mesh.material = material;\n          group.add(mesh);\n        }\n        mesh.geometry = angle ? toCreasedNormals(parent.geometry, angle) : parent.geometry;\n      }\n    }\n  });\n  React.useLayoutEffect(() => {\n    const group = ref.current;\n    if (!group) return;\n    const mesh = group.children[0];\n    if (mesh) {\n      mesh.renderOrder = renderOrder;\n      applyProps(mesh.material, {\n        transparent,\n        thickness,\n        color,\n        opacity,\n        size: contextSize,\n        screenspace,\n        toneMapped,\n        polygonOffset,\n        polygonOffsetFactor\n      });\n    }\n  });\n  React.useEffect(() => {\n    return () => {\n      // Dispose everything on unmount\n      const group = ref.current;\n      if (!group) return;\n      const mesh = group.children[0];\n      if (mesh) {\n        if (angle) mesh.geometry.dispose();\n        group.remove(mesh);\n      }\n    };\n  }, []);\n  return /*#__PURE__*/React.createElement(\"group\", _extends({\n    ref: ref\n  }, props));\n}\n\nexport { Outlines };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}