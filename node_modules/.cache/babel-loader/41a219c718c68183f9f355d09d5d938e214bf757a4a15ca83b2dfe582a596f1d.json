{"ast":null,"code":"import _classCallCheck from \"C:/Users/Nayyu/Desktop/skibidai-public-build/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Nayyu/Desktop/skibidai-public-build/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"C:/Users/Nayyu/Desktop/skibidai-public-build/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/Nayyu/Desktop/skibidai-public-build/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { Loader, FileLoader, NumberKeyframeTrack, AnimationClip, BufferAttribute } from \"three\";\nvar MDDLoader = /*#__PURE__*/function (_Loader) {\n  _inherits(MDDLoader, _Loader);\n  var _super = _createSuper(MDDLoader);\n  function MDDLoader(manager) {\n    _classCallCheck(this, MDDLoader);\n    return _super.call(this, manager);\n  }\n  _createClass(MDDLoader, [{\n    key: \"load\",\n    value: function load(url, onLoad, onProgress, onError) {\n      var scope = this;\n      var loader = new FileLoader(this.manager);\n      loader.setPath(this.path);\n      loader.setResponseType(\"arraybuffer\");\n      loader.load(url, function (data) {\n        onLoad(scope.parse(data));\n      }, onProgress, onError);\n    }\n  }, {\n    key: \"parse\",\n    value: function parse(data) {\n      var view = new DataView(data);\n      var totalFrames = view.getUint32(0);\n      var totalPoints = view.getUint32(4);\n      var offset = 8;\n      var times = new Float32Array(totalFrames);\n      var values = new Float32Array(totalFrames * totalFrames).fill(0);\n      for (var i = 0; i < totalFrames; i++) {\n        times[i] = view.getFloat32(offset);\n        offset += 4;\n        values[totalFrames * i + i] = 1;\n      }\n      var track = new NumberKeyframeTrack(\".morphTargetInfluences\", times, values);\n      var clip = new AnimationClip(\"default\", times[times.length - 1], [track]);\n      var morphTargets = [];\n      for (var _i = 0; _i < totalFrames; _i++) {\n        var morphTarget = new Float32Array(totalPoints * 3);\n        for (var j = 0; j < totalPoints; j++) {\n          var stride = j * 3;\n          morphTarget[stride + 0] = view.getFloat32(offset);\n          offset += 4;\n          morphTarget[stride + 1] = view.getFloat32(offset);\n          offset += 4;\n          morphTarget[stride + 2] = view.getFloat32(offset);\n          offset += 4;\n        }\n        var attribute = new BufferAttribute(morphTarget, 3);\n        attribute.name = \"morph_\" + _i;\n        morphTargets.push(attribute);\n      }\n      return {\n        morphTargets: morphTargets,\n        clip: clip\n      };\n    }\n  }]);\n  return MDDLoader;\n}(Loader);\nexport { MDDLoader };","map":{"version":3,"names":["MDDLoader","_Loader","_inherits","_super","_createSuper","manager","_classCallCheck","call","_createClass","key","value","load","url","onLoad","onProgress","onError","scope","loader","FileLoader","setPath","path","setResponseType","data","parse","view","DataView","totalFrames","getUint32","totalPoints","offset","times","Float32Array","values","fill","i","getFloat32","track","NumberKeyframeTrack","clip","AnimationClip","length","morphTargets","morphTarget","j","stride","attribute","BufferAttribute","name","push","Loader"],"sources":["C:\\Users\\Nayyu\\Desktop\\skibidai-public-build\\node_modules\\src\\loaders\\MDDLoader.js"],"sourcesContent":["/**\n * MDD is a special format that stores a position for every vertex in a model for every frame in an animation.\n * Similar to BVH, it can be used to transfer animation data between different 3D applications or engines.\n *\n * MDD stores its data in binary format (big endian) in the following way:\n *\n * number of frames (a single uint32)\n * number of vertices (a single uint32)\n * time values for each frame (sequence of float32)\n * vertex data for each frame (sequence of float32)\n */\n\nimport { AnimationClip, BufferAttribute, FileLoader, Loader, NumberKeyframeTrack } from 'three'\n\nclass MDDLoader extends Loader {\n  constructor(manager) {\n    super(manager)\n  }\n\n  load(url, onLoad, onProgress, onError) {\n    const scope = this\n\n    const loader = new FileLoader(this.manager)\n    loader.setPath(this.path)\n    loader.setResponseType('arraybuffer')\n    loader.load(\n      url,\n      function (data) {\n        onLoad(scope.parse(data))\n      },\n      onProgress,\n      onError,\n    )\n  }\n\n  parse(data) {\n    const view = new DataView(data)\n\n    const totalFrames = view.getUint32(0)\n    const totalPoints = view.getUint32(4)\n\n    let offset = 8\n\n    // animation clip\n\n    const times = new Float32Array(totalFrames)\n    const values = new Float32Array(totalFrames * totalFrames).fill(0)\n\n    for (let i = 0; i < totalFrames; i++) {\n      times[i] = view.getFloat32(offset)\n      offset += 4\n      values[totalFrames * i + i] = 1\n    }\n\n    const track = new NumberKeyframeTrack('.morphTargetInfluences', times, values)\n    const clip = new AnimationClip('default', times[times.length - 1], [track])\n\n    // morph targets\n\n    const morphTargets = []\n\n    for (let i = 0; i < totalFrames; i++) {\n      const morphTarget = new Float32Array(totalPoints * 3)\n\n      for (let j = 0; j < totalPoints; j++) {\n        const stride = j * 3\n\n        morphTarget[stride + 0] = view.getFloat32(offset)\n        offset += 4 // x\n        morphTarget[stride + 1] = view.getFloat32(offset)\n        offset += 4 // y\n        morphTarget[stride + 2] = view.getFloat32(offset)\n        offset += 4 // z\n      }\n\n      const attribute = new BufferAttribute(morphTarget, 3)\n      attribute.name = 'morph_' + i\n\n      morphTargets.push(attribute)\n    }\n\n    return {\n      morphTargets: morphTargets,\n      clip: clip,\n    }\n  }\n}\n\nexport { MDDLoader }\n"],"mappings":";;;;;IAcMA,SAAA,0BAAAC,OAAA;EAAAC,SAAA,CAAAF,SAAA,EAAAC,OAAA;EAAA,IAAAE,MAAA,GAAAC,YAAA,CAAAJ,SAAA;EACJ,SAAAA,UAAYK,OAAA,EAAS;IAAAC,eAAA,OAAAN,SAAA;IAAA,OAAAG,MAAA,CAAAI,IAAA,OACbF,OAAO;EACd;EAAAG,YAAA,CAAAR,SAAA;IAAAS,GAAA;IAAAC,KAAA,EAED,SAAAC,KAAKC,GAAA,EAAKC,MAAA,EAAQC,UAAA,EAAYC,OAAA,EAAS;MACrC,IAAMC,KAAA,GAAQ;MAEd,IAAMC,MAAA,GAAS,IAAIC,UAAA,CAAW,KAAKb,OAAO;MAC1CY,MAAA,CAAOE,OAAA,CAAQ,KAAKC,IAAI;MACxBH,MAAA,CAAOI,eAAA,CAAgB,aAAa;MACpCJ,MAAA,CAAON,IAAA,CACLC,GAAA,EACA,UAAUU,IAAA,EAAM;QACdT,MAAA,CAAOG,KAAA,CAAMO,KAAA,CAAMD,IAAI,CAAC;MACzB,GACDR,UAAA,EACAC,OACD;IACF;EAAA;IAAAN,GAAA;IAAAC,KAAA,EAED,SAAAa,MAAMD,IAAA,EAAM;MACV,IAAME,IAAA,GAAO,IAAIC,QAAA,CAASH,IAAI;MAE9B,IAAMI,WAAA,GAAcF,IAAA,CAAKG,SAAA,CAAU,CAAC;MACpC,IAAMC,WAAA,GAAcJ,IAAA,CAAKG,SAAA,CAAU,CAAC;MAEpC,IAAIE,MAAA,GAAS;MAIb,IAAMC,KAAA,GAAQ,IAAIC,YAAA,CAAaL,WAAW;MAC1C,IAAMM,MAAA,GAAS,IAAID,YAAA,CAAaL,WAAA,GAAcA,WAAW,EAAEO,IAAA,CAAK,CAAC;MAEjE,SAASC,CAAA,GAAI,GAAGA,CAAA,GAAIR,WAAA,EAAaQ,CAAA,IAAK;QACpCJ,KAAA,CAAMI,CAAC,IAAIV,IAAA,CAAKW,UAAA,CAAWN,MAAM;QACjCA,MAAA,IAAU;QACVG,MAAA,CAAON,WAAA,GAAcQ,CAAA,GAAIA,CAAC,IAAI;MAC/B;MAED,IAAME,KAAA,GAAQ,IAAIC,mBAAA,CAAoB,0BAA0BP,KAAA,EAAOE,MAAM;MAC7E,IAAMM,IAAA,GAAO,IAAIC,aAAA,CAAc,WAAWT,KAAA,CAAMA,KAAA,CAAMU,MAAA,GAAS,CAAC,GAAG,CAACJ,KAAK,CAAC;MAI1E,IAAMK,YAAA,GAAe,EAAE;MAEvB,SAASP,EAAA,GAAI,GAAGA,EAAA,GAAIR,WAAA,EAAaQ,EAAA,IAAK;QACpC,IAAMQ,WAAA,GAAc,IAAIX,YAAA,CAAaH,WAAA,GAAc,CAAC;QAEpD,SAASe,CAAA,GAAI,GAAGA,CAAA,GAAIf,WAAA,EAAae,CAAA,IAAK;UACpC,IAAMC,MAAA,GAASD,CAAA,GAAI;UAEnBD,WAAA,CAAYE,MAAA,GAAS,CAAC,IAAIpB,IAAA,CAAKW,UAAA,CAAWN,MAAM;UAChDA,MAAA,IAAU;UACVa,WAAA,CAAYE,MAAA,GAAS,CAAC,IAAIpB,IAAA,CAAKW,UAAA,CAAWN,MAAM;UAChDA,MAAA,IAAU;UACVa,WAAA,CAAYE,MAAA,GAAS,CAAC,IAAIpB,IAAA,CAAKW,UAAA,CAAWN,MAAM;UAChDA,MAAA,IAAU;QACX;QAED,IAAMgB,SAAA,GAAY,IAAIC,eAAA,CAAgBJ,WAAA,EAAa,CAAC;QACpDG,SAAA,CAAUE,IAAA,GAAO,WAAWb,EAAA;QAE5BO,YAAA,CAAaO,IAAA,CAAKH,SAAS;MAC5B;MAED,OAAO;QACLJ,YAAA,EAAAA,YAAA;QACAH,IAAA,EAAAA;MACD;IACF;EAAA;EAAA,OAAAtC,SAAA;AAAA,EAvEqBiD,MAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}