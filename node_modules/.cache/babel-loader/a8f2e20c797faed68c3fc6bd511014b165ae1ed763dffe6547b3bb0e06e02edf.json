{"ast":null,"code":"import _construct from \"C:/Users/Nayyu/Desktop/skibidai-public-build/node_modules/@babel/runtime/helpers/esm/construct.js\";\nimport _toConsumableArray from \"C:/Users/Nayyu/Desktop/skibidai-public-build/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _slicedToArray from \"C:/Users/Nayyu/Desktop/skibidai-public-build/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport * as React from 'react';\nimport * as THREE from 'three';\nimport { useThree, useFrame } from '@react-three/fiber';\n\n// eslint-disable-next-line no-shadow\nvar AnimationState = /*#__PURE__*/function (AnimationState) {\n  AnimationState[AnimationState[\"NONE\"] = 0] = \"NONE\";\n  AnimationState[AnimationState[\"START\"] = 1] = \"START\";\n  AnimationState[AnimationState[\"ACTIVE\"] = 2] = \"ACTIVE\";\n  return AnimationState;\n}(AnimationState || {});\nvar isOrthographic = function isOrthographic(def) {\n  return def && def.isOrthographicCamera;\n};\nvar isBox3 = function isBox3(def) {\n  return def && def.isBox3;\n};\nvar interpolateFuncDefault = function interpolateFuncDefault(t) {\n  // Imitates the previously used THREE.MathUtils.damp\n  return 1 - Math.exp(-5 * t) + 0.007 * t;\n};\nvar context = /*#__PURE__*/React.createContext(null);\nfunction Bounds(_ref) {\n  var children = _ref.children,\n    _ref$maxDuration = _ref.maxDuration,\n    maxDuration = _ref$maxDuration === void 0 ? 1.0 : _ref$maxDuration,\n    _ref$margin = _ref.margin,\n    margin = _ref$margin === void 0 ? 1.2 : _ref$margin,\n    observe = _ref.observe,\n    fit = _ref.fit,\n    clip = _ref.clip,\n    _ref$interpolateFunc = _ref.interpolateFunc,\n    interpolateFunc = _ref$interpolateFunc === void 0 ? interpolateFuncDefault : _ref$interpolateFunc,\n    onFit = _ref.onFit;\n  var ref = React.useRef(null);\n  var _useThree = useThree(),\n    camera = _useThree.camera,\n    size = _useThree.size,\n    invalidate = _useThree.invalidate;\n  var controls = useThree(function (state) {\n    return state.controls;\n  });\n  var onFitRef = React.useRef(onFit);\n  onFitRef.current = onFit;\n  var origin = React.useRef({\n    camPos: new THREE.Vector3(),\n    camRot: new THREE.Quaternion(),\n    camZoom: 1\n  });\n  var goal = React.useRef({\n    camPos: undefined,\n    camRot: undefined,\n    camZoom: undefined,\n    camUp: undefined,\n    target: undefined\n  });\n  var animationState = React.useRef(AnimationState.NONE);\n  var t = React.useRef(0); // represent animation state from 0 to 1\n\n  var _React$useState = React.useState(function () {\n      return new THREE.Box3();\n    }),\n    _React$useState2 = _slicedToArray(_React$useState, 1),\n    box = _React$useState2[0];\n  var api = React.useMemo(function () {\n    function getSize() {\n      var boxSize = box.getSize(new THREE.Vector3());\n      var center = box.getCenter(new THREE.Vector3());\n      var maxSize = Math.max(boxSize.x, boxSize.y, boxSize.z);\n      var fitHeightDistance = isOrthographic(camera) ? maxSize * 4 : maxSize / (2 * Math.atan(Math.PI * camera.fov / 360));\n      var fitWidthDistance = isOrthographic(camera) ? maxSize * 4 : fitHeightDistance / camera.aspect;\n      var distance = margin * Math.max(fitHeightDistance, fitWidthDistance);\n      return {\n        box: box,\n        size: boxSize,\n        center: center,\n        distance: distance\n      };\n    }\n    return {\n      getSize: getSize,\n      refresh: function refresh(object) {\n        if (isBox3(object)) box.copy(object);else {\n          var target = object || ref.current;\n          if (!target) return this;\n          target.updateWorldMatrix(true, true);\n          box.setFromObject(target);\n        }\n        if (box.isEmpty()) {\n          var max = camera.position.length() || 10;\n          box.setFromCenterAndSize(new THREE.Vector3(), new THREE.Vector3(max, max, max));\n        }\n        origin.current.camPos.copy(camera.position);\n        origin.current.camRot.copy(camera.quaternion);\n        isOrthographic(camera) && (origin.current.camZoom = camera.zoom);\n        goal.current.camPos = undefined;\n        goal.current.camRot = undefined;\n        goal.current.camZoom = undefined;\n        goal.current.camUp = undefined;\n        goal.current.target = undefined;\n        return this;\n      },\n      reset: function reset() {\n        var _getSize = getSize(),\n          center = _getSize.center,\n          distance = _getSize.distance;\n        var direction = camera.position.clone().sub(center).normalize();\n        goal.current.camPos = center.clone().addScaledVector(direction, distance);\n        goal.current.target = center.clone();\n        var mCamRot = new THREE.Matrix4().lookAt(goal.current.camPos, goal.current.target, camera.up);\n        goal.current.camRot = new THREE.Quaternion().setFromRotationMatrix(mCamRot);\n        animationState.current = AnimationState.START;\n        t.current = 0;\n        return this;\n      },\n      moveTo: function moveTo(position) {\n        goal.current.camPos = Array.isArray(position) ? _construct(THREE.Vector3, _toConsumableArray(position)) : position.clone();\n        animationState.current = AnimationState.START;\n        t.current = 0;\n        return this;\n      },\n      lookAt: function lookAt(_ref2) {\n        var target = _ref2.target,\n          up = _ref2.up;\n        goal.current.target = Array.isArray(target) ? _construct(THREE.Vector3, _toConsumableArray(target)) : target.clone();\n        if (up) {\n          goal.current.camUp = Array.isArray(up) ? _construct(THREE.Vector3, _toConsumableArray(up)) : up.clone();\n        } else {\n          goal.current.camUp = camera.up.clone();\n        }\n        var mCamRot = new THREE.Matrix4().lookAt(goal.current.camPos || camera.position, goal.current.target, goal.current.camUp);\n        goal.current.camRot = new THREE.Quaternion().setFromRotationMatrix(mCamRot);\n        animationState.current = AnimationState.START;\n        t.current = 0;\n        return this;\n      },\n      /**\n       * @deprecated Use moveTo and lookAt instead\n       */\n      to: function to(_ref3) {\n        var position = _ref3.position,\n          target = _ref3.target;\n        return this.moveTo(position).lookAt({\n          target: target\n        });\n      },\n      fit: function fit() {\n        if (!isOrthographic(camera)) {\n          // For non-orthographic cameras, fit should behave exactly like reset\n          return this.reset();\n        }\n\n        // For orthographic cameras, fit should only modify the zoom value\n        var maxHeight = 0,\n          maxWidth = 0;\n        var vertices = [new THREE.Vector3(box.min.x, box.min.y, box.min.z), new THREE.Vector3(box.min.x, box.max.y, box.min.z), new THREE.Vector3(box.min.x, box.min.y, box.max.z), new THREE.Vector3(box.min.x, box.max.y, box.max.z), new THREE.Vector3(box.max.x, box.max.y, box.max.z), new THREE.Vector3(box.max.x, box.max.y, box.min.z), new THREE.Vector3(box.max.x, box.min.y, box.max.z), new THREE.Vector3(box.max.x, box.min.y, box.min.z)];\n\n        // Transform the center and each corner to camera space\n        var pos = goal.current.camPos || camera.position;\n        var target = goal.current.target || (controls == null ? void 0 : controls.target);\n        var up = goal.current.camUp || camera.up;\n        var mCamWInv = target ? new THREE.Matrix4().lookAt(pos, target, up).setPosition(pos).invert() : camera.matrixWorldInverse;\n        for (var _i = 0, _vertices = vertices; _i < _vertices.length; _i++) {\n          var v = _vertices[_i];\n          v.applyMatrix4(mCamWInv);\n          maxHeight = Math.max(maxHeight, Math.abs(v.y));\n          maxWidth = Math.max(maxWidth, Math.abs(v.x));\n        }\n        maxHeight *= 2;\n        maxWidth *= 2;\n        var zoomForHeight = (camera.top - camera.bottom) / maxHeight;\n        var zoomForWidth = (camera.right - camera.left) / maxWidth;\n        goal.current.camZoom = Math.min(zoomForHeight, zoomForWidth) / margin;\n        animationState.current = AnimationState.START;\n        t.current = 0;\n        onFitRef.current && onFitRef.current(this.getSize());\n        return this;\n      },\n      clip: function clip() {\n        var _getSize2 = getSize(),\n          distance = _getSize2.distance;\n        camera.near = distance / 100;\n        camera.far = distance * 100;\n        camera.updateProjectionMatrix();\n        if (controls) {\n          controls.maxDistance = distance * 10;\n          controls.update();\n        }\n        invalidate();\n        return this;\n      }\n    };\n  }, [box, camera, controls, margin, invalidate]);\n  React.useLayoutEffect(function () {\n    if (controls) {\n      // Try to prevent drag hijacking\n      var callback = function callback() {\n        if (controls && goal.current.target && animationState.current !== AnimationState.NONE) {\n          var front = new THREE.Vector3().setFromMatrixColumn(camera.matrix, 2);\n          var d0 = origin.current.camPos.distanceTo(controls.target);\n          var d1 = (goal.current.camPos || origin.current.camPos).distanceTo(goal.current.target);\n          var d = (1 - t.current) * d0 + t.current * d1;\n          controls.target.copy(camera.position).addScaledVector(front, -d);\n          controls.update();\n        }\n        animationState.current = AnimationState.NONE;\n      };\n      controls.addEventListener('start', callback);\n      return function () {\n        return controls.removeEventListener('start', callback);\n      };\n    }\n  }, [controls]);\n\n  // Scale pointer on window resize\n  var count = React.useRef(0);\n  React.useLayoutEffect(function () {\n    if (observe || count.current++ === 0) {\n      api.refresh();\n      if (fit) api.reset().fit();\n      if (clip) api.clip();\n    }\n  }, [size, clip, fit, observe, camera, controls]);\n  useFrame(function (state, delta) {\n    // This [additional animation step START] is needed to guarantee that delta used in animation isn't absurdly high (2-3 seconds) which is actually possible if rendering happens on demand...\n    if (animationState.current === AnimationState.START) {\n      animationState.current = AnimationState.ACTIVE;\n      invalidate();\n    } else if (animationState.current === AnimationState.ACTIVE) {\n      t.current += delta / maxDuration;\n      if (t.current >= 1) {\n        goal.current.camPos && camera.position.copy(goal.current.camPos);\n        goal.current.camRot && camera.quaternion.copy(goal.current.camRot);\n        goal.current.camUp && camera.up.copy(goal.current.camUp);\n        goal.current.camZoom && isOrthographic(camera) && (camera.zoom = goal.current.camZoom);\n        camera.updateMatrixWorld();\n        camera.updateProjectionMatrix();\n        if (controls && goal.current.target) {\n          controls.target.copy(goal.current.target);\n          controls.update();\n        }\n        animationState.current = AnimationState.NONE;\n      } else {\n        var k = interpolateFunc(t.current);\n        goal.current.camPos && camera.position.lerpVectors(origin.current.camPos, goal.current.camPos, k);\n        goal.current.camRot && camera.quaternion.slerpQuaternions(origin.current.camRot, goal.current.camRot, k);\n        goal.current.camUp && camera.up.set(0, 1, 0).applyQuaternion(camera.quaternion);\n        goal.current.camZoom && isOrthographic(camera) && (camera.zoom = (1 - k) * origin.current.camZoom + k * goal.current.camZoom);\n        camera.updateMatrixWorld();\n        camera.updateProjectionMatrix();\n      }\n      invalidate();\n    }\n  });\n  return /*#__PURE__*/React.createElement(\"group\", {\n    ref: ref\n  }, /*#__PURE__*/React.createElement(context.Provider, {\n    value: api\n  }, children));\n}\nfunction useBounds() {\n  return React.useContext(context);\n}\nexport { Bounds, useBounds };","map":{"version":3,"names":["React","THREE","useThree","useFrame","AnimationState","isOrthographic","def","isOrthographicCamera","isBox3","interpolateFuncDefault","t","Math","exp","context","createContext","Bounds","_ref","children","_ref$maxDuration","maxDuration","_ref$margin","margin","observe","fit","clip","_ref$interpolateFunc","interpolateFunc","onFit","ref","useRef","_useThree","camera","size","invalidate","controls","state","onFitRef","current","origin","camPos","Vector3","camRot","Quaternion","camZoom","goal","undefined","camUp","target","animationState","NONE","_React$useState","useState","Box3","_React$useState2","_slicedToArray","box","api","useMemo","getSize","boxSize","center","getCenter","maxSize","max","x","y","z","fitHeightDistance","atan","PI","fov","fitWidthDistance","aspect","distance","refresh","object","copy","updateWorldMatrix","setFromObject","isEmpty","position","length","setFromCenterAndSize","quaternion","zoom","reset","_getSize","direction","clone","sub","normalize","addScaledVector","mCamRot","Matrix4","lookAt","up","setFromRotationMatrix","START","moveTo","Array","isArray","_construct","_toConsumableArray","_ref2","to","_ref3","maxHeight","maxWidth","vertices","min","pos","mCamWInv","setPosition","invert","matrixWorldInverse","_i","_vertices","v","applyMatrix4","abs","zoomForHeight","top","bottom","zoomForWidth","right","left","_getSize2","near","far","updateProjectionMatrix","maxDistance","update","useLayoutEffect","callback","front","setFromMatrixColumn","matrix","d0","distanceTo","d1","d","addEventListener","removeEventListener","count","delta","ACTIVE","updateMatrixWorld","k","lerpVectors","slerpQuaternions","set","applyQuaternion","createElement","Provider","value","useBounds","useContext"],"sources":["C:/Users/Nayyu/Desktop/skibidai-public-build/node_modules/@react-three/drei/core/Bounds.js"],"sourcesContent":["import * as React from 'react';\nimport * as THREE from 'three';\nimport { useThree, useFrame } from '@react-three/fiber';\n\n// eslint-disable-next-line no-shadow\nvar AnimationState = /*#__PURE__*/function (AnimationState) {\n  AnimationState[AnimationState[\"NONE\"] = 0] = \"NONE\";\n  AnimationState[AnimationState[\"START\"] = 1] = \"START\";\n  AnimationState[AnimationState[\"ACTIVE\"] = 2] = \"ACTIVE\";\n  return AnimationState;\n}(AnimationState || {});\nconst isOrthographic = def => def && def.isOrthographicCamera;\nconst isBox3 = def => def && def.isBox3;\nconst interpolateFuncDefault = t => {\n  // Imitates the previously used THREE.MathUtils.damp\n  return 1 - Math.exp(-5 * t) + 0.007 * t;\n};\nconst context = /*#__PURE__*/React.createContext(null);\nfunction Bounds({\n  children,\n  maxDuration = 1.0,\n  margin = 1.2,\n  observe,\n  fit,\n  clip,\n  interpolateFunc = interpolateFuncDefault,\n  onFit\n}) {\n  const ref = React.useRef(null);\n  const {\n    camera,\n    size,\n    invalidate\n  } = useThree();\n  const controls = useThree(state => state.controls);\n  const onFitRef = React.useRef(onFit);\n  onFitRef.current = onFit;\n  const origin = React.useRef({\n    camPos: new THREE.Vector3(),\n    camRot: new THREE.Quaternion(),\n    camZoom: 1\n  });\n  const goal = React.useRef({\n    camPos: undefined,\n    camRot: undefined,\n    camZoom: undefined,\n    camUp: undefined,\n    target: undefined\n  });\n  const animationState = React.useRef(AnimationState.NONE);\n  const t = React.useRef(0); // represent animation state from 0 to 1\n\n  const [box] = React.useState(() => new THREE.Box3());\n  const api = React.useMemo(() => {\n    function getSize() {\n      const boxSize = box.getSize(new THREE.Vector3());\n      const center = box.getCenter(new THREE.Vector3());\n      const maxSize = Math.max(boxSize.x, boxSize.y, boxSize.z);\n      const fitHeightDistance = isOrthographic(camera) ? maxSize * 4 : maxSize / (2 * Math.atan(Math.PI * camera.fov / 360));\n      const fitWidthDistance = isOrthographic(camera) ? maxSize * 4 : fitHeightDistance / camera.aspect;\n      const distance = margin * Math.max(fitHeightDistance, fitWidthDistance);\n      return {\n        box,\n        size: boxSize,\n        center,\n        distance\n      };\n    }\n    return {\n      getSize,\n      refresh(object) {\n        if (isBox3(object)) box.copy(object);else {\n          const target = object || ref.current;\n          if (!target) return this;\n          target.updateWorldMatrix(true, true);\n          box.setFromObject(target);\n        }\n        if (box.isEmpty()) {\n          const max = camera.position.length() || 10;\n          box.setFromCenterAndSize(new THREE.Vector3(), new THREE.Vector3(max, max, max));\n        }\n        origin.current.camPos.copy(camera.position);\n        origin.current.camRot.copy(camera.quaternion);\n        isOrthographic(camera) && (origin.current.camZoom = camera.zoom);\n        goal.current.camPos = undefined;\n        goal.current.camRot = undefined;\n        goal.current.camZoom = undefined;\n        goal.current.camUp = undefined;\n        goal.current.target = undefined;\n        return this;\n      },\n      reset() {\n        const {\n          center,\n          distance\n        } = getSize();\n        const direction = camera.position.clone().sub(center).normalize();\n        goal.current.camPos = center.clone().addScaledVector(direction, distance);\n        goal.current.target = center.clone();\n        const mCamRot = new THREE.Matrix4().lookAt(goal.current.camPos, goal.current.target, camera.up);\n        goal.current.camRot = new THREE.Quaternion().setFromRotationMatrix(mCamRot);\n        animationState.current = AnimationState.START;\n        t.current = 0;\n        return this;\n      },\n      moveTo(position) {\n        goal.current.camPos = Array.isArray(position) ? new THREE.Vector3(...position) : position.clone();\n        animationState.current = AnimationState.START;\n        t.current = 0;\n        return this;\n      },\n      lookAt({\n        target,\n        up\n      }) {\n        goal.current.target = Array.isArray(target) ? new THREE.Vector3(...target) : target.clone();\n        if (up) {\n          goal.current.camUp = Array.isArray(up) ? new THREE.Vector3(...up) : up.clone();\n        } else {\n          goal.current.camUp = camera.up.clone();\n        }\n        const mCamRot = new THREE.Matrix4().lookAt(goal.current.camPos || camera.position, goal.current.target, goal.current.camUp);\n        goal.current.camRot = new THREE.Quaternion().setFromRotationMatrix(mCamRot);\n        animationState.current = AnimationState.START;\n        t.current = 0;\n        return this;\n      },\n      /**\n       * @deprecated Use moveTo and lookAt instead\n       */\n      to({\n        position,\n        target\n      }) {\n        return this.moveTo(position).lookAt({\n          target\n        });\n      },\n      fit() {\n        if (!isOrthographic(camera)) {\n          // For non-orthographic cameras, fit should behave exactly like reset\n          return this.reset();\n        }\n\n        // For orthographic cameras, fit should only modify the zoom value\n        let maxHeight = 0,\n          maxWidth = 0;\n        const vertices = [new THREE.Vector3(box.min.x, box.min.y, box.min.z), new THREE.Vector3(box.min.x, box.max.y, box.min.z), new THREE.Vector3(box.min.x, box.min.y, box.max.z), new THREE.Vector3(box.min.x, box.max.y, box.max.z), new THREE.Vector3(box.max.x, box.max.y, box.max.z), new THREE.Vector3(box.max.x, box.max.y, box.min.z), new THREE.Vector3(box.max.x, box.min.y, box.max.z), new THREE.Vector3(box.max.x, box.min.y, box.min.z)];\n\n        // Transform the center and each corner to camera space\n        const pos = goal.current.camPos || camera.position;\n        const target = goal.current.target || (controls == null ? void 0 : controls.target);\n        const up = goal.current.camUp || camera.up;\n        const mCamWInv = target ? new THREE.Matrix4().lookAt(pos, target, up).setPosition(pos).invert() : camera.matrixWorldInverse;\n        for (const v of vertices) {\n          v.applyMatrix4(mCamWInv);\n          maxHeight = Math.max(maxHeight, Math.abs(v.y));\n          maxWidth = Math.max(maxWidth, Math.abs(v.x));\n        }\n        maxHeight *= 2;\n        maxWidth *= 2;\n        const zoomForHeight = (camera.top - camera.bottom) / maxHeight;\n        const zoomForWidth = (camera.right - camera.left) / maxWidth;\n        goal.current.camZoom = Math.min(zoomForHeight, zoomForWidth) / margin;\n        animationState.current = AnimationState.START;\n        t.current = 0;\n        onFitRef.current && onFitRef.current(this.getSize());\n        return this;\n      },\n      clip() {\n        const {\n          distance\n        } = getSize();\n        camera.near = distance / 100;\n        camera.far = distance * 100;\n        camera.updateProjectionMatrix();\n        if (controls) {\n          controls.maxDistance = distance * 10;\n          controls.update();\n        }\n        invalidate();\n        return this;\n      }\n    };\n  }, [box, camera, controls, margin, invalidate]);\n  React.useLayoutEffect(() => {\n    if (controls) {\n      // Try to prevent drag hijacking\n      const callback = () => {\n        if (controls && goal.current.target && animationState.current !== AnimationState.NONE) {\n          const front = new THREE.Vector3().setFromMatrixColumn(camera.matrix, 2);\n          const d0 = origin.current.camPos.distanceTo(controls.target);\n          const d1 = (goal.current.camPos || origin.current.camPos).distanceTo(goal.current.target);\n          const d = (1 - t.current) * d0 + t.current * d1;\n          controls.target.copy(camera.position).addScaledVector(front, -d);\n          controls.update();\n        }\n        animationState.current = AnimationState.NONE;\n      };\n      controls.addEventListener('start', callback);\n      return () => controls.removeEventListener('start', callback);\n    }\n  }, [controls]);\n\n  // Scale pointer on window resize\n  const count = React.useRef(0);\n  React.useLayoutEffect(() => {\n    if (observe || count.current++ === 0) {\n      api.refresh();\n      if (fit) api.reset().fit();\n      if (clip) api.clip();\n    }\n  }, [size, clip, fit, observe, camera, controls]);\n  useFrame((state, delta) => {\n    // This [additional animation step START] is needed to guarantee that delta used in animation isn't absurdly high (2-3 seconds) which is actually possible if rendering happens on demand...\n    if (animationState.current === AnimationState.START) {\n      animationState.current = AnimationState.ACTIVE;\n      invalidate();\n    } else if (animationState.current === AnimationState.ACTIVE) {\n      t.current += delta / maxDuration;\n      if (t.current >= 1) {\n        goal.current.camPos && camera.position.copy(goal.current.camPos);\n        goal.current.camRot && camera.quaternion.copy(goal.current.camRot);\n        goal.current.camUp && camera.up.copy(goal.current.camUp);\n        goal.current.camZoom && isOrthographic(camera) && (camera.zoom = goal.current.camZoom);\n        camera.updateMatrixWorld();\n        camera.updateProjectionMatrix();\n        if (controls && goal.current.target) {\n          controls.target.copy(goal.current.target);\n          controls.update();\n        }\n        animationState.current = AnimationState.NONE;\n      } else {\n        const k = interpolateFunc(t.current);\n        goal.current.camPos && camera.position.lerpVectors(origin.current.camPos, goal.current.camPos, k);\n        goal.current.camRot && camera.quaternion.slerpQuaternions(origin.current.camRot, goal.current.camRot, k);\n        goal.current.camUp && camera.up.set(0, 1, 0).applyQuaternion(camera.quaternion);\n        goal.current.camZoom && isOrthographic(camera) && (camera.zoom = (1 - k) * origin.current.camZoom + k * goal.current.camZoom);\n        camera.updateMatrixWorld();\n        camera.updateProjectionMatrix();\n      }\n      invalidate();\n    }\n  });\n  return /*#__PURE__*/React.createElement(\"group\", {\n    ref: ref\n  }, /*#__PURE__*/React.createElement(context.Provider, {\n    value: api\n  }, children));\n}\nfunction useBounds() {\n  return React.useContext(context);\n}\n\nexport { Bounds, useBounds };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}