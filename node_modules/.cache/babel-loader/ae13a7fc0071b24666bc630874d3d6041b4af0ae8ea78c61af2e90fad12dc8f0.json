{"ast":null,"code":"import _classCallCheck from \"C:/Users/Nayyu/Desktop/skibidai-public-build/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Nayyu/Desktop/skibidai-public-build/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { Vector3, Matrix3, Box3, Matrix4, Ray, MathUtils } from \"three\";\nvar a = {\n  c: null,\n  // center\n  u: [new Vector3(), new Vector3(), new Vector3()],\n  // basis vectors\n  e: []\n  // half width\n};\n\nvar b = {\n  c: null,\n  // center\n  u: [new Vector3(), new Vector3(), new Vector3()],\n  // basis vectors\n  e: []\n  // half width\n};\n\nvar R = [[], [], []];\nvar AbsR = [[], [], []];\nvar t = [];\nvar xAxis = new Vector3();\nvar yAxis = new Vector3();\nvar zAxis = new Vector3();\nvar v1 = new Vector3();\nvar size = new Vector3();\nvar closestPoint = new Vector3();\nvar rotationMatrix = new Matrix3();\nvar aabb = new Box3();\nvar matrix = new Matrix4();\nvar inverse = new Matrix4();\nvar localRay = new Ray();\nvar OBB = /*#__PURE__*/function () {\n  function OBB() {\n    var center = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Vector3();\n    var halfSize = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Vector3();\n    var rotation = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : new Matrix3();\n    _classCallCheck(this, OBB);\n    this.center = center;\n    this.halfSize = halfSize;\n    this.rotation = rotation;\n  }\n  _createClass(OBB, [{\n    key: \"set\",\n    value: function set(center, halfSize, rotation) {\n      this.center = center;\n      this.halfSize = halfSize;\n      this.rotation = rotation;\n      return this;\n    }\n  }, {\n    key: \"copy\",\n    value: function copy(obb2) {\n      this.center.copy(obb2.center);\n      this.halfSize.copy(obb2.halfSize);\n      this.rotation.copy(obb2.rotation);\n      return this;\n    }\n  }, {\n    key: \"clone\",\n    value: function clone() {\n      return new this.constructor().copy(this);\n    }\n  }, {\n    key: \"getSize\",\n    value: function getSize(result) {\n      return result.copy(this.halfSize).multiplyScalar(2);\n    }\n    /**\n     * Reference: Closest Point on OBB to Point in Real-Time Collision Detection\n     * by Christer Ericson (chapter 5.1.4)\n     */\n  }, {\n    key: \"clampPoint\",\n    value: function clampPoint(point, result) {\n      var halfSize = this.halfSize;\n      v1.subVectors(point, this.center);\n      this.rotation.extractBasis(xAxis, yAxis, zAxis);\n      result.copy(this.center);\n      var x = MathUtils.clamp(v1.dot(xAxis), -halfSize.x, halfSize.x);\n      result.add(xAxis.multiplyScalar(x));\n      var y = MathUtils.clamp(v1.dot(yAxis), -halfSize.y, halfSize.y);\n      result.add(yAxis.multiplyScalar(y));\n      var z = MathUtils.clamp(v1.dot(zAxis), -halfSize.z, halfSize.z);\n      result.add(zAxis.multiplyScalar(z));\n      return result;\n    }\n  }, {\n    key: \"containsPoint\",\n    value: function containsPoint(point) {\n      v1.subVectors(point, this.center);\n      this.rotation.extractBasis(xAxis, yAxis, zAxis);\n      return Math.abs(v1.dot(xAxis)) <= this.halfSize.x && Math.abs(v1.dot(yAxis)) <= this.halfSize.y && Math.abs(v1.dot(zAxis)) <= this.halfSize.z;\n    }\n  }, {\n    key: \"intersectsBox3\",\n    value: function intersectsBox3(box3) {\n      return this.intersectsOBB(obb.fromBox3(box3));\n    }\n  }, {\n    key: \"intersectsSphere\",\n    value: function intersectsSphere(sphere) {\n      this.clampPoint(sphere.center, closestPoint);\n      return closestPoint.distanceToSquared(sphere.center) <= sphere.radius * sphere.radius;\n    }\n    /**\n     * Reference: OBB-OBB Intersection in Real-Time Collision Detection\n     * by Christer Ericson (chapter 4.4.1)\n     *\n     */\n  }, {\n    key: \"intersectsOBB\",\n    value: function intersectsOBB(obb2) {\n      var epsilon = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Number.EPSILON;\n      a.c = this.center;\n      a.e[0] = this.halfSize.x;\n      a.e[1] = this.halfSize.y;\n      a.e[2] = this.halfSize.z;\n      this.rotation.extractBasis(a.u[0], a.u[1], a.u[2]);\n      b.c = obb2.center;\n      b.e[0] = obb2.halfSize.x;\n      b.e[1] = obb2.halfSize.y;\n      b.e[2] = obb2.halfSize.z;\n      obb2.rotation.extractBasis(b.u[0], b.u[1], b.u[2]);\n      for (var i = 0; i < 3; i++) {\n        for (var j = 0; j < 3; j++) {\n          R[i][j] = a.u[i].dot(b.u[j]);\n        }\n      }\n      v1.subVectors(b.c, a.c);\n      t[0] = v1.dot(a.u[0]);\n      t[1] = v1.dot(a.u[1]);\n      t[2] = v1.dot(a.u[2]);\n      for (var _i = 0; _i < 3; _i++) {\n        for (var _j = 0; _j < 3; _j++) {\n          AbsR[_i][_j] = Math.abs(R[_i][_j]) + epsilon;\n        }\n      }\n      var ra, rb;\n      for (var _i2 = 0; _i2 < 3; _i2++) {\n        ra = a.e[_i2];\n        rb = b.e[0] * AbsR[_i2][0] + b.e[1] * AbsR[_i2][1] + b.e[2] * AbsR[_i2][2];\n        if (Math.abs(t[_i2]) > ra + rb) return false;\n      }\n      for (var _i3 = 0; _i3 < 3; _i3++) {\n        ra = a.e[0] * AbsR[0][_i3] + a.e[1] * AbsR[1][_i3] + a.e[2] * AbsR[2][_i3];\n        rb = b.e[_i3];\n        if (Math.abs(t[0] * R[0][_i3] + t[1] * R[1][_i3] + t[2] * R[2][_i3]) > ra + rb) return false;\n      }\n      ra = a.e[1] * AbsR[2][0] + a.e[2] * AbsR[1][0];\n      rb = b.e[1] * AbsR[0][2] + b.e[2] * AbsR[0][1];\n      if (Math.abs(t[2] * R[1][0] - t[1] * R[2][0]) > ra + rb) return false;\n      ra = a.e[1] * AbsR[2][1] + a.e[2] * AbsR[1][1];\n      rb = b.e[0] * AbsR[0][2] + b.e[2] * AbsR[0][0];\n      if (Math.abs(t[2] * R[1][1] - t[1] * R[2][1]) > ra + rb) return false;\n      ra = a.e[1] * AbsR[2][2] + a.e[2] * AbsR[1][2];\n      rb = b.e[0] * AbsR[0][1] + b.e[1] * AbsR[0][0];\n      if (Math.abs(t[2] * R[1][2] - t[1] * R[2][2]) > ra + rb) return false;\n      ra = a.e[0] * AbsR[2][0] + a.e[2] * AbsR[0][0];\n      rb = b.e[1] * AbsR[1][2] + b.e[2] * AbsR[1][1];\n      if (Math.abs(t[0] * R[2][0] - t[2] * R[0][0]) > ra + rb) return false;\n      ra = a.e[0] * AbsR[2][1] + a.e[2] * AbsR[0][1];\n      rb = b.e[0] * AbsR[1][2] + b.e[2] * AbsR[1][0];\n      if (Math.abs(t[0] * R[2][1] - t[2] * R[0][1]) > ra + rb) return false;\n      ra = a.e[0] * AbsR[2][2] + a.e[2] * AbsR[0][2];\n      rb = b.e[0] * AbsR[1][1] + b.e[1] * AbsR[1][0];\n      if (Math.abs(t[0] * R[2][2] - t[2] * R[0][2]) > ra + rb) return false;\n      ra = a.e[0] * AbsR[1][0] + a.e[1] * AbsR[0][0];\n      rb = b.e[1] * AbsR[2][2] + b.e[2] * AbsR[2][1];\n      if (Math.abs(t[1] * R[0][0] - t[0] * R[1][0]) > ra + rb) return false;\n      ra = a.e[0] * AbsR[1][1] + a.e[1] * AbsR[0][1];\n      rb = b.e[0] * AbsR[2][2] + b.e[2] * AbsR[2][0];\n      if (Math.abs(t[1] * R[0][1] - t[0] * R[1][1]) > ra + rb) return false;\n      ra = a.e[0] * AbsR[1][2] + a.e[1] * AbsR[0][2];\n      rb = b.e[0] * AbsR[2][1] + b.e[1] * AbsR[2][0];\n      if (Math.abs(t[1] * R[0][2] - t[0] * R[1][2]) > ra + rb) return false;\n      return true;\n    }\n    /**\n     * Reference: Testing Box Against Plane in Real-Time Collision Detection\n     * by Christer Ericson (chapter 5.2.3)\n     */\n  }, {\n    key: \"intersectsPlane\",\n    value: function intersectsPlane(plane) {\n      this.rotation.extractBasis(xAxis, yAxis, zAxis);\n      var r = this.halfSize.x * Math.abs(plane.normal.dot(xAxis)) + this.halfSize.y * Math.abs(plane.normal.dot(yAxis)) + this.halfSize.z * Math.abs(plane.normal.dot(zAxis));\n      var d = plane.normal.dot(this.center) - plane.constant;\n      return Math.abs(d) <= r;\n    }\n    /**\n     * Performs a ray/OBB intersection test and stores the intersection point\n     * to the given 3D vector. If no intersection is detected, *null* is returned.\n     */\n  }, {\n    key: \"intersectRay\",\n    value: function intersectRay(ray, result) {\n      this.getSize(size);\n      aabb.setFromCenterAndSize(v1.set(0, 0, 0), size);\n      matrix.setFromMatrix3(this.rotation);\n      matrix.setPosition(this.center);\n      inverse.copy(matrix).invert();\n      localRay.copy(ray).applyMatrix4(inverse);\n      if (localRay.intersectBox(aabb, result)) {\n        return result.applyMatrix4(matrix);\n      } else {\n        return null;\n      }\n    }\n    /**\n     * Performs a ray/OBB intersection test. Returns either true or false if\n     * there is a intersection or not.\n     */\n  }, {\n    key: \"intersectsRay\",\n    value: function intersectsRay(ray) {\n      return this.intersectRay(ray, v1) !== null;\n    }\n  }, {\n    key: \"fromBox3\",\n    value: function fromBox3(box3) {\n      box3.getCenter(this.center);\n      box3.getSize(this.halfSize).multiplyScalar(0.5);\n      this.rotation.identity();\n      return this;\n    }\n  }, {\n    key: \"equals\",\n    value: function equals(obb2) {\n      return obb2.center.equals(this.center) && obb2.halfSize.equals(this.halfSize) && obb2.rotation.equals(this.rotation);\n    }\n  }, {\n    key: \"applyMatrix4\",\n    value: function applyMatrix4(matrix2) {\n      var e = matrix2.elements;\n      var sx = v1.set(e[0], e[1], e[2]).length();\n      var sy = v1.set(e[4], e[5], e[6]).length();\n      var sz = v1.set(e[8], e[9], e[10]).length();\n      var det = matrix2.determinant();\n      if (det < 0) sx = -sx;\n      rotationMatrix.setFromMatrix4(matrix2);\n      var invSX = 1 / sx;\n      var invSY = 1 / sy;\n      var invSZ = 1 / sz;\n      rotationMatrix.elements[0] *= invSX;\n      rotationMatrix.elements[1] *= invSX;\n      rotationMatrix.elements[2] *= invSX;\n      rotationMatrix.elements[3] *= invSY;\n      rotationMatrix.elements[4] *= invSY;\n      rotationMatrix.elements[5] *= invSY;\n      rotationMatrix.elements[6] *= invSZ;\n      rotationMatrix.elements[7] *= invSZ;\n      rotationMatrix.elements[8] *= invSZ;\n      this.rotation.multiply(rotationMatrix);\n      this.halfSize.x *= sx;\n      this.halfSize.y *= sy;\n      this.halfSize.z *= sz;\n      v1.setFromMatrixPosition(matrix2);\n      this.center.add(v1);\n      return this;\n    }\n  }]);\n  return OBB;\n}();\nvar obb = new OBB();\nexport { OBB };","map":{"version":3,"names":["a","c","u","Vector3","e","b","R","AbsR","t","xAxis","yAxis","zAxis","v1","size","closestPoint","rotationMatrix","Matrix3","aabb","Box3","matrix","Matrix4","inverse","localRay","Ray","OBB","center","arguments","length","undefined","halfSize","rotation","_classCallCheck","_createClass","key","value","set","copy","obb2","clone","constructor","getSize","result","multiplyScalar","clampPoint","point","subVectors","extractBasis","x","MathUtils","clamp","dot","add","y","z","containsPoint","Math","abs","intersectsBox3","box3","intersectsOBB","obb","fromBox3","intersectsSphere","sphere","distanceToSquared","radius","epsilon","Number","EPSILON","i","j","ra","rb","intersectsPlane","plane","r","normal","d","constant","intersectRay","ray","setFromCenterAndSize","setFromMatrix3","setPosition","invert","applyMatrix4","intersectBox","intersectsRay","getCenter","identity","equals","matrix2","elements","sx","sy","sz","det","determinant","setFromMatrix4","invSX","invSY","invSZ","multiply","setFromMatrixPosition"],"sources":["C:\\Users\\Nayyu\\Desktop\\skibidai-public-build\\node_modules\\src\\math\\OBB.js"],"sourcesContent":["import { Box3, MathUtils, Matrix4, Matrix3, Ray, Vector3 } from 'three'\n\n// module scope helper variables\n\nconst a = {\n  c: null, // center\n  u: [new Vector3(), new Vector3(), new Vector3()], // basis vectors\n  e: [], // half width\n}\n\nconst b = {\n  c: null, // center\n  u: [new Vector3(), new Vector3(), new Vector3()], // basis vectors\n  e: [], // half width\n}\n\nconst R = [[], [], []]\nconst AbsR = [[], [], []]\nconst t = []\n\nconst xAxis = new Vector3()\nconst yAxis = new Vector3()\nconst zAxis = new Vector3()\nconst v1 = new Vector3()\nconst size = new Vector3()\nconst closestPoint = new Vector3()\nconst rotationMatrix = new Matrix3()\nconst aabb = new Box3()\nconst matrix = new Matrix4()\nconst inverse = new Matrix4()\nconst localRay = new Ray()\n\n// OBB\n\nclass OBB {\n  constructor(center = new Vector3(), halfSize = new Vector3(), rotation = new Matrix3()) {\n    this.center = center\n    this.halfSize = halfSize\n    this.rotation = rotation\n  }\n\n  set(center, halfSize, rotation) {\n    this.center = center\n    this.halfSize = halfSize\n    this.rotation = rotation\n\n    return this\n  }\n\n  copy(obb) {\n    this.center.copy(obb.center)\n    this.halfSize.copy(obb.halfSize)\n    this.rotation.copy(obb.rotation)\n\n    return this\n  }\n\n  clone() {\n    return new this.constructor().copy(this)\n  }\n\n  getSize(result) {\n    return result.copy(this.halfSize).multiplyScalar(2)\n  }\n\n  /**\n   * Reference: Closest Point on OBB to Point in Real-Time Collision Detection\n   * by Christer Ericson (chapter 5.1.4)\n   */\n  clampPoint(point, result) {\n    const halfSize = this.halfSize\n\n    v1.subVectors(point, this.center)\n    this.rotation.extractBasis(xAxis, yAxis, zAxis)\n\n    // start at the center position of the OBB\n\n    result.copy(this.center)\n\n    // project the target onto the OBB axes and walk towards that point\n\n    const x = MathUtils.clamp(v1.dot(xAxis), -halfSize.x, halfSize.x)\n    result.add(xAxis.multiplyScalar(x))\n\n    const y = MathUtils.clamp(v1.dot(yAxis), -halfSize.y, halfSize.y)\n    result.add(yAxis.multiplyScalar(y))\n\n    const z = MathUtils.clamp(v1.dot(zAxis), -halfSize.z, halfSize.z)\n    result.add(zAxis.multiplyScalar(z))\n\n    return result\n  }\n\n  containsPoint(point) {\n    v1.subVectors(point, this.center)\n    this.rotation.extractBasis(xAxis, yAxis, zAxis)\n\n    // project v1 onto each axis and check if these points lie inside the OBB\n\n    return (\n      Math.abs(v1.dot(xAxis)) <= this.halfSize.x &&\n      Math.abs(v1.dot(yAxis)) <= this.halfSize.y &&\n      Math.abs(v1.dot(zAxis)) <= this.halfSize.z\n    )\n  }\n\n  intersectsBox3(box3) {\n    return this.intersectsOBB(obb.fromBox3(box3))\n  }\n\n  intersectsSphere(sphere) {\n    // find the point on the OBB closest to the sphere center\n\n    this.clampPoint(sphere.center, closestPoint)\n\n    // if that point is inside the sphere, the OBB and sphere intersect\n\n    return closestPoint.distanceToSquared(sphere.center) <= sphere.radius * sphere.radius\n  }\n\n  /**\n   * Reference: OBB-OBB Intersection in Real-Time Collision Detection\n   * by Christer Ericson (chapter 4.4.1)\n   *\n   */\n  intersectsOBB(obb, epsilon = Number.EPSILON) {\n    // prepare data structures (the code uses the same nomenclature like the reference)\n\n    a.c = this.center\n    a.e[0] = this.halfSize.x\n    a.e[1] = this.halfSize.y\n    a.e[2] = this.halfSize.z\n    this.rotation.extractBasis(a.u[0], a.u[1], a.u[2])\n\n    b.c = obb.center\n    b.e[0] = obb.halfSize.x\n    b.e[1] = obb.halfSize.y\n    b.e[2] = obb.halfSize.z\n    obb.rotation.extractBasis(b.u[0], b.u[1], b.u[2])\n\n    // compute rotation matrix expressing b in a's coordinate frame\n\n    for (let i = 0; i < 3; i++) {\n      for (let j = 0; j < 3; j++) {\n        R[i][j] = a.u[i].dot(b.u[j])\n      }\n    }\n\n    // compute translation vector\n\n    v1.subVectors(b.c, a.c)\n\n    // bring translation into a's coordinate frame\n\n    t[0] = v1.dot(a.u[0])\n    t[1] = v1.dot(a.u[1])\n    t[2] = v1.dot(a.u[2])\n\n    // compute common subexpressions. Add in an epsilon term to\n    // counteract arithmetic errors when two edges are parallel and\n    // their cross product is (near) null\n\n    for (let i = 0; i < 3; i++) {\n      for (let j = 0; j < 3; j++) {\n        AbsR[i][j] = Math.abs(R[i][j]) + epsilon\n      }\n    }\n\n    let ra, rb\n\n    // test axes L = A0, L = A1, L = A2\n\n    for (let i = 0; i < 3; i++) {\n      ra = a.e[i]\n      rb = b.e[0] * AbsR[i][0] + b.e[1] * AbsR[i][1] + b.e[2] * AbsR[i][2]\n      if (Math.abs(t[i]) > ra + rb) return false\n    }\n\n    // test axes L = B0, L = B1, L = B2\n\n    for (let i = 0; i < 3; i++) {\n      ra = a.e[0] * AbsR[0][i] + a.e[1] * AbsR[1][i] + a.e[2] * AbsR[2][i]\n      rb = b.e[i]\n      if (Math.abs(t[0] * R[0][i] + t[1] * R[1][i] + t[2] * R[2][i]) > ra + rb) return false\n    }\n\n    // test axis L = A0 x B0\n\n    ra = a.e[1] * AbsR[2][0] + a.e[2] * AbsR[1][0]\n    rb = b.e[1] * AbsR[0][2] + b.e[2] * AbsR[0][1]\n    if (Math.abs(t[2] * R[1][0] - t[1] * R[2][0]) > ra + rb) return false\n\n    // test axis L = A0 x B1\n\n    ra = a.e[1] * AbsR[2][1] + a.e[2] * AbsR[1][1]\n    rb = b.e[0] * AbsR[0][2] + b.e[2] * AbsR[0][0]\n    if (Math.abs(t[2] * R[1][1] - t[1] * R[2][1]) > ra + rb) return false\n\n    // test axis L = A0 x B2\n\n    ra = a.e[1] * AbsR[2][2] + a.e[2] * AbsR[1][2]\n    rb = b.e[0] * AbsR[0][1] + b.e[1] * AbsR[0][0]\n    if (Math.abs(t[2] * R[1][2] - t[1] * R[2][2]) > ra + rb) return false\n\n    // test axis L = A1 x B0\n\n    ra = a.e[0] * AbsR[2][0] + a.e[2] * AbsR[0][0]\n    rb = b.e[1] * AbsR[1][2] + b.e[2] * AbsR[1][1]\n    if (Math.abs(t[0] * R[2][0] - t[2] * R[0][0]) > ra + rb) return false\n\n    // test axis L = A1 x B1\n\n    ra = a.e[0] * AbsR[2][1] + a.e[2] * AbsR[0][1]\n    rb = b.e[0] * AbsR[1][2] + b.e[2] * AbsR[1][0]\n    if (Math.abs(t[0] * R[2][1] - t[2] * R[0][1]) > ra + rb) return false\n\n    // test axis L = A1 x B2\n\n    ra = a.e[0] * AbsR[2][2] + a.e[2] * AbsR[0][2]\n    rb = b.e[0] * AbsR[1][1] + b.e[1] * AbsR[1][0]\n    if (Math.abs(t[0] * R[2][2] - t[2] * R[0][2]) > ra + rb) return false\n\n    // test axis L = A2 x B0\n\n    ra = a.e[0] * AbsR[1][0] + a.e[1] * AbsR[0][0]\n    rb = b.e[1] * AbsR[2][2] + b.e[2] * AbsR[2][1]\n    if (Math.abs(t[1] * R[0][0] - t[0] * R[1][0]) > ra + rb) return false\n\n    // test axis L = A2 x B1\n\n    ra = a.e[0] * AbsR[1][1] + a.e[1] * AbsR[0][1]\n    rb = b.e[0] * AbsR[2][2] + b.e[2] * AbsR[2][0]\n    if (Math.abs(t[1] * R[0][1] - t[0] * R[1][1]) > ra + rb) return false\n\n    // test axis L = A2 x B2\n\n    ra = a.e[0] * AbsR[1][2] + a.e[1] * AbsR[0][2]\n    rb = b.e[0] * AbsR[2][1] + b.e[1] * AbsR[2][0]\n    if (Math.abs(t[1] * R[0][2] - t[0] * R[1][2]) > ra + rb) return false\n\n    // since no separating axis is found, the OBBs must be intersecting\n\n    return true\n  }\n\n  /**\n   * Reference: Testing Box Against Plane in Real-Time Collision Detection\n   * by Christer Ericson (chapter 5.2.3)\n   */\n  intersectsPlane(plane) {\n    this.rotation.extractBasis(xAxis, yAxis, zAxis)\n\n    // compute the projection interval radius of this OBB onto L(t) = this->center + t * p.normal;\n\n    const r =\n      this.halfSize.x * Math.abs(plane.normal.dot(xAxis)) +\n      this.halfSize.y * Math.abs(plane.normal.dot(yAxis)) +\n      this.halfSize.z * Math.abs(plane.normal.dot(zAxis))\n\n    // compute distance of the OBB's center from the plane\n\n    const d = plane.normal.dot(this.center) - plane.constant\n\n    // Intersection occurs when distance d falls within [-r,+r] interval\n\n    return Math.abs(d) <= r\n  }\n\n  /**\n   * Performs a ray/OBB intersection test and stores the intersection point\n   * to the given 3D vector. If no intersection is detected, *null* is returned.\n   */\n  intersectRay(ray, result) {\n    // the idea is to perform the intersection test in the local space\n    // of the OBB.\n\n    this.getSize(size)\n    aabb.setFromCenterAndSize(v1.set(0, 0, 0), size)\n\n    // create a 4x4 transformation matrix\n\n    matrix.setFromMatrix3(this.rotation)\n    matrix.setPosition(this.center)\n\n    // transform ray to the local space of the OBB\n\n    inverse.copy(matrix).invert()\n    localRay.copy(ray).applyMatrix4(inverse)\n\n    // perform ray <-> AABB intersection test\n\n    if (localRay.intersectBox(aabb, result)) {\n      // transform the intersection point back to world space\n\n      return result.applyMatrix4(matrix)\n    } else {\n      return null\n    }\n  }\n\n  /**\n   * Performs a ray/OBB intersection test. Returns either true or false if\n   * there is a intersection or not.\n   */\n  intersectsRay(ray) {\n    return this.intersectRay(ray, v1) !== null\n  }\n\n  fromBox3(box3) {\n    box3.getCenter(this.center)\n\n    box3.getSize(this.halfSize).multiplyScalar(0.5)\n\n    this.rotation.identity()\n\n    return this\n  }\n\n  equals(obb) {\n    return obb.center.equals(this.center) && obb.halfSize.equals(this.halfSize) && obb.rotation.equals(this.rotation)\n  }\n\n  applyMatrix4(matrix) {\n    const e = matrix.elements\n\n    let sx = v1.set(e[0], e[1], e[2]).length()\n    const sy = v1.set(e[4], e[5], e[6]).length()\n    const sz = v1.set(e[8], e[9], e[10]).length()\n\n    const det = matrix.determinant()\n    if (det < 0) sx = -sx\n\n    rotationMatrix.setFromMatrix4(matrix)\n\n    const invSX = 1 / sx\n    const invSY = 1 / sy\n    const invSZ = 1 / sz\n\n    rotationMatrix.elements[0] *= invSX\n    rotationMatrix.elements[1] *= invSX\n    rotationMatrix.elements[2] *= invSX\n\n    rotationMatrix.elements[3] *= invSY\n    rotationMatrix.elements[4] *= invSY\n    rotationMatrix.elements[5] *= invSY\n\n    rotationMatrix.elements[6] *= invSZ\n    rotationMatrix.elements[7] *= invSZ\n    rotationMatrix.elements[8] *= invSZ\n\n    this.rotation.multiply(rotationMatrix)\n\n    this.halfSize.x *= sx\n    this.halfSize.y *= sy\n    this.halfSize.z *= sz\n\n    v1.setFromMatrixPosition(matrix)\n    this.center.add(v1)\n\n    return this\n  }\n}\n\nconst obb = new OBB()\n\nexport { OBB }\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}