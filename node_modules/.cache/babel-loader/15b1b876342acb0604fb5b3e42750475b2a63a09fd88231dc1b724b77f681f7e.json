{"ast":null,"code":"import _classCallCheck from \"C:/Users/Nayyu/Desktop/skibidai-public-build/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Nayyu/Desktop/skibidai-public-build/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { Object3D, Box3, AnimationMixer, MeshLambertMaterial, Mesh, TextureLoader, UVMapping } from \"three\";\nimport { MD2Loader } from \"../loaders/MD2Loader.js\";\nvar MD2Character = /*#__PURE__*/function () {\n  function MD2Character() {\n    _classCallCheck(this, MD2Character);\n    this.scale = 1;\n    this.animationFPS = 6;\n    this.root = new Object3D();\n    this.meshBody = null;\n    this.meshWeapon = null;\n    this.skinsBody = [];\n    this.skinsWeapon = [];\n    this.weapons = [];\n    this.activeAnimation = null;\n    this.mixer = null;\n    this.onLoadComplete = function () {};\n    this.loadCounter = 0;\n  }\n  _createClass(MD2Character, [{\n    key: \"loadParts\",\n    value: function loadParts(config) {\n      var scope = this;\n      function createPart(geometry, skinMap) {\n        var materialWireframe = new MeshLambertMaterial({\n          color: 16755200,\n          wireframe: true,\n          morphTargets: true,\n          morphNormals: true\n        });\n        var materialTexture = new MeshLambertMaterial({\n          color: 16777215,\n          wireframe: false,\n          map: skinMap,\n          morphTargets: true,\n          morphNormals: true\n        });\n        var mesh = new Mesh(geometry, materialTexture);\n        mesh.rotation.y = -Math.PI / 2;\n        mesh.castShadow = true;\n        mesh.receiveShadow = true;\n        mesh.materialTexture = materialTexture;\n        mesh.materialWireframe = materialWireframe;\n        return mesh;\n      }\n      function loadTextures(baseUrl, textureUrls) {\n        var textureLoader = new TextureLoader();\n        var textures = [];\n        for (var i = 0; i < textureUrls.length; i++) {\n          textures[i] = textureLoader.load(baseUrl + textureUrls[i], checkLoadingComplete);\n          textures[i].mapping = UVMapping;\n          textures[i].name = textureUrls[i];\n          if (\"colorSpace\" in textures[i]) textures[i].colorSpace = \"srgb\";else textures[i].encoding = 3001;\n        }\n        return textures;\n      }\n      function checkLoadingComplete() {\n        scope.loadCounter -= 1;\n        if (scope.loadCounter === 0) scope.onLoadComplete();\n      }\n      this.loadCounter = config.weapons.length * 2 + config.skins.length + 1;\n      var weaponsTextures = [];\n      for (var i = 0; i < config.weapons.length; i++) weaponsTextures[i] = config.weapons[i][1];\n      this.skinsBody = loadTextures(config.baseUrl + \"skins/\", config.skins);\n      this.skinsWeapon = loadTextures(config.baseUrl + \"skins/\", weaponsTextures);\n      var loader = new MD2Loader();\n      loader.load(config.baseUrl + config.body, function (geo) {\n        var boundingBox = new Box3();\n        boundingBox.setFromBufferAttribute(geo.attributes.position);\n        scope.root.position.y = -scope.scale * boundingBox.min.y;\n        var mesh = createPart(geo, scope.skinsBody[0]);\n        mesh.scale.set(scope.scale, scope.scale, scope.scale);\n        scope.root.add(mesh);\n        scope.meshBody = mesh;\n        scope.meshBody.clipOffset = 0;\n        scope.activeAnimationClipName = mesh.geometry.animations[0].name;\n        scope.mixer = new AnimationMixer(mesh);\n        checkLoadingComplete();\n      });\n      var generateCallback = function generateCallback(index, name) {\n        return function (geo) {\n          var mesh = createPart(geo, scope.skinsWeapon[index]);\n          mesh.scale.set(scope.scale, scope.scale, scope.scale);\n          mesh.visible = false;\n          mesh.name = name;\n          scope.root.add(mesh);\n          scope.weapons[index] = mesh;\n          scope.meshWeapon = mesh;\n          checkLoadingComplete();\n        };\n      };\n      for (var _i = 0; _i < config.weapons.length; _i++) {\n        loader.load(config.baseUrl + config.weapons[_i][0], generateCallback(_i, config.weapons[_i][0]));\n      }\n    }\n  }, {\n    key: \"setPlaybackRate\",\n    value: function setPlaybackRate(rate) {\n      if (rate !== 0) {\n        this.mixer.timeScale = 1 / rate;\n      } else {\n        this.mixer.timeScale = 0;\n      }\n    }\n  }, {\n    key: \"setWireframe\",\n    value: function setWireframe(wireframeEnabled) {\n      if (wireframeEnabled) {\n        if (this.meshBody) this.meshBody.material = this.meshBody.materialWireframe;\n        if (this.meshWeapon) this.meshWeapon.material = this.meshWeapon.materialWireframe;\n      } else {\n        if (this.meshBody) this.meshBody.material = this.meshBody.materialTexture;\n        if (this.meshWeapon) this.meshWeapon.material = this.meshWeapon.materialTexture;\n      }\n    }\n  }, {\n    key: \"setSkin\",\n    value: function setSkin(index) {\n      if (this.meshBody && this.meshBody.material.wireframe === false) {\n        this.meshBody.material.map = this.skinsBody[index];\n      }\n    }\n  }, {\n    key: \"setWeapon\",\n    value: function setWeapon(index) {\n      for (var i = 0; i < this.weapons.length; i++) this.weapons[i].visible = false;\n      var activeWeapon = this.weapons[index];\n      if (activeWeapon) {\n        activeWeapon.visible = true;\n        this.meshWeapon = activeWeapon;\n        this.syncWeaponAnimation();\n      }\n    }\n  }, {\n    key: \"setAnimation\",\n    value: function setAnimation(clipName) {\n      if (this.meshBody) {\n        if (this.meshBody.activeAction) {\n          this.meshBody.activeAction.stop();\n          this.meshBody.activeAction = null;\n        }\n        var action = this.mixer.clipAction(clipName, this.meshBody);\n        if (action) {\n          this.meshBody.activeAction = action.play();\n        }\n      }\n      this.activeClipName = clipName;\n      this.syncWeaponAnimation();\n    }\n  }, {\n    key: \"syncWeaponAnimation\",\n    value: function syncWeaponAnimation() {\n      var clipName = this.activeClipName;\n      if (this.meshWeapon) {\n        if (this.meshWeapon.activeAction) {\n          this.meshWeapon.activeAction.stop();\n          this.meshWeapon.activeAction = null;\n        }\n        var action = this.mixer.clipAction(clipName, this.meshWeapon);\n        if (action) {\n          this.meshWeapon.activeAction = action.syncWith(this.meshBody.activeAction).play();\n        }\n      }\n    }\n  }, {\n    key: \"update\",\n    value: function update(delta) {\n      if (this.mixer) this.mixer.update(delta);\n    }\n  }]);\n  return MD2Character;\n}();\nexport { MD2Character };","map":{"version":3,"names":["MD2Character","_classCallCheck","scale","animationFPS","root","Object3D","meshBody","meshWeapon","skinsBody","skinsWeapon","weapons","activeAnimation","mixer","onLoadComplete","loadCounter","_createClass","key","value","loadParts","config","scope","createPart","geometry","skinMap","materialWireframe","MeshLambertMaterial","color","wireframe","morphTargets","morphNormals","materialTexture","map","mesh","Mesh","rotation","y","Math","PI","castShadow","receiveShadow","loadTextures","baseUrl","textureUrls","textureLoader","TextureLoader","textures","i","length","load","checkLoadingComplete","mapping","UVMapping","name","colorSpace","encoding","skins","weaponsTextures","loader","MD2Loader","body","geo","boundingBox","Box3","setFromBufferAttribute","attributes","position","min","set","add","clipOffset","activeAnimationClipName","animations","AnimationMixer","generateCallback","index","visible","setPlaybackRate","rate","timeScale","setWireframe","wireframeEnabled","material","setSkin","setWeapon","activeWeapon","syncWeaponAnimation","setAnimation","clipName","activeAction","stop","action","clipAction","play","activeClipName","syncWith","update","delta"],"sources":["C:\\Users\\Nayyu\\Desktop\\skibidai-public-build\\node_modules\\src\\misc\\MD2Character.js"],"sourcesContent":["import { AnimationMixer, Box3, Mesh, MeshLambertMaterial, Object3D, TextureLoader, UVMapping } from 'three'\nimport { MD2Loader } from '../loaders/MD2Loader'\n\nclass MD2Character {\n  constructor() {\n    this.scale = 1\n    this.animationFPS = 6\n\n    this.root = new Object3D()\n\n    this.meshBody = null\n    this.meshWeapon = null\n\n    this.skinsBody = []\n    this.skinsWeapon = []\n\n    this.weapons = []\n\n    this.activeAnimation = null\n\n    this.mixer = null\n\n    this.onLoadComplete = function () {}\n\n    this.loadCounter = 0\n  }\n\n  loadParts(config) {\n    const scope = this\n\n    function createPart(geometry, skinMap) {\n      const materialWireframe = new MeshLambertMaterial({\n        color: 0xffaa00,\n        wireframe: true,\n        morphTargets: true,\n        morphNormals: true,\n      })\n      const materialTexture = new MeshLambertMaterial({\n        color: 0xffffff,\n        wireframe: false,\n        map: skinMap,\n        morphTargets: true,\n        morphNormals: true,\n      })\n\n      //\n\n      const mesh = new Mesh(geometry, materialTexture)\n      mesh.rotation.y = -Math.PI / 2\n\n      mesh.castShadow = true\n      mesh.receiveShadow = true\n\n      //\n\n      mesh.materialTexture = materialTexture\n      mesh.materialWireframe = materialWireframe\n\n      return mesh\n    }\n\n    function loadTextures(baseUrl, textureUrls) {\n      const textureLoader = new TextureLoader()\n      const textures = []\n\n      for (let i = 0; i < textureUrls.length; i++) {\n        textures[i] = textureLoader.load(baseUrl + textureUrls[i], checkLoadingComplete)\n        textures[i].mapping = UVMapping\n        textures[i].name = textureUrls[i]\n        if ('colorSpace' in textures[i]) textures[i].colorSpace = 'srgb'\n        else textures[i].encoding = 3001 // sRGBEncoding\n      }\n\n      return textures\n    }\n\n    function checkLoadingComplete() {\n      scope.loadCounter -= 1\n\n      if (scope.loadCounter === 0) scope.onLoadComplete()\n    }\n\n    this.loadCounter = config.weapons.length * 2 + config.skins.length + 1\n\n    const weaponsTextures = []\n    for (let i = 0; i < config.weapons.length; i++) weaponsTextures[i] = config.weapons[i][1]\n    // SKINS\n\n    this.skinsBody = loadTextures(config.baseUrl + 'skins/', config.skins)\n    this.skinsWeapon = loadTextures(config.baseUrl + 'skins/', weaponsTextures)\n\n    // BODY\n\n    const loader = new MD2Loader()\n\n    loader.load(config.baseUrl + config.body, function (geo) {\n      const boundingBox = new Box3()\n      boundingBox.setFromBufferAttribute(geo.attributes.position)\n\n      scope.root.position.y = -scope.scale * boundingBox.min.y\n\n      const mesh = createPart(geo, scope.skinsBody[0])\n      mesh.scale.set(scope.scale, scope.scale, scope.scale)\n\n      scope.root.add(mesh)\n\n      scope.meshBody = mesh\n\n      scope.meshBody.clipOffset = 0\n      scope.activeAnimationClipName = mesh.geometry.animations[0].name\n\n      scope.mixer = new AnimationMixer(mesh)\n\n      checkLoadingComplete()\n    })\n\n    // WEAPONS\n\n    const generateCallback = function (index, name) {\n      return function (geo) {\n        const mesh = createPart(geo, scope.skinsWeapon[index])\n        mesh.scale.set(scope.scale, scope.scale, scope.scale)\n        mesh.visible = false\n\n        mesh.name = name\n\n        scope.root.add(mesh)\n\n        scope.weapons[index] = mesh\n        scope.meshWeapon = mesh\n\n        checkLoadingComplete()\n      }\n    }\n\n    for (let i = 0; i < config.weapons.length; i++) {\n      loader.load(config.baseUrl + config.weapons[i][0], generateCallback(i, config.weapons[i][0]))\n    }\n  }\n\n  setPlaybackRate(rate) {\n    if (rate !== 0) {\n      this.mixer.timeScale = 1 / rate\n    } else {\n      this.mixer.timeScale = 0\n    }\n  }\n\n  setWireframe(wireframeEnabled) {\n    if (wireframeEnabled) {\n      if (this.meshBody) this.meshBody.material = this.meshBody.materialWireframe\n      if (this.meshWeapon) this.meshWeapon.material = this.meshWeapon.materialWireframe\n    } else {\n      if (this.meshBody) this.meshBody.material = this.meshBody.materialTexture\n      if (this.meshWeapon) this.meshWeapon.material = this.meshWeapon.materialTexture\n    }\n  }\n\n  setSkin(index) {\n    if (this.meshBody && this.meshBody.material.wireframe === false) {\n      this.meshBody.material.map = this.skinsBody[index]\n    }\n  }\n\n  setWeapon(index) {\n    for (let i = 0; i < this.weapons.length; i++) this.weapons[i].visible = false\n\n    const activeWeapon = this.weapons[index]\n\n    if (activeWeapon) {\n      activeWeapon.visible = true\n      this.meshWeapon = activeWeapon\n\n      this.syncWeaponAnimation()\n    }\n  }\n\n  setAnimation(clipName) {\n    if (this.meshBody) {\n      if (this.meshBody.activeAction) {\n        this.meshBody.activeAction.stop()\n        this.meshBody.activeAction = null\n      }\n\n      const action = this.mixer.clipAction(clipName, this.meshBody)\n\n      if (action) {\n        this.meshBody.activeAction = action.play()\n      }\n    }\n\n    this.activeClipName = clipName\n\n    this.syncWeaponAnimation()\n  }\n\n  syncWeaponAnimation() {\n    const clipName = this.activeClipName\n\n    if (this.meshWeapon) {\n      if (this.meshWeapon.activeAction) {\n        this.meshWeapon.activeAction.stop()\n        this.meshWeapon.activeAction = null\n      }\n\n      const action = this.mixer.clipAction(clipName, this.meshWeapon)\n\n      if (action) {\n        this.meshWeapon.activeAction = action.syncWith(this.meshBody.activeAction).play()\n      }\n    }\n  }\n\n  update(delta) {\n    if (this.mixer) this.mixer.update(delta)\n  }\n}\n\nexport { MD2Character }\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}