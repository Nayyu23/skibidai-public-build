{"ast":null,"code":"import _createForOfIteratorHelper from \"C:/Users/Nayyu/Desktop/skibidai-public-build/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _objectWithoutProperties from \"C:/Users/Nayyu/Desktop/skibidai-public-build/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nimport _regeneratorRuntime from \"C:/Users/Nayyu/Desktop/skibidai-public-build/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"C:/Users/Nayyu/Desktop/skibidai-public-build/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"C:/Users/Nayyu/Desktop/skibidai-public-build/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Nayyu/Desktop/skibidai-public-build/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"C:/Users/Nayyu/Desktop/skibidai-public-build/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/Nayyu/Desktop/skibidai-public-build/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nvar _excluded = [\"src\", \"toneMapped\", \"alphaTest\", \"alphaHash\", \"chunkSize\"];\nimport _extends from '@babel/runtime/helpers/esm/extends';\nimport * as THREE from 'three';\nimport * as React from 'react';\nimport { extend, useThree, useLoader, useFrame } from '@react-three/fiber';\nimport { shaderMaterial } from './shaderMaterial.js';\nvar SplatMaterial = /* @__PURE__ */shaderMaterial({\n  alphaTest: 0,\n  viewport: /* @__PURE__ */new THREE.Vector2(1980, 1080),\n  focal: 1000.0,\n  centerAndScaleTexture: null,\n  covAndColorTexture: null\n}, /*glsl*/\"\\n    precision highp sampler2D;\\n    precision highp usampler2D;\\n    out vec4 vColor;\\n    out vec3 vPosition;\\n    uniform vec2 resolution;\\n    uniform vec2 viewport;\\n    uniform float focal;\\n    attribute uint splatIndex;\\n    uniform sampler2D centerAndScaleTexture;\\n    uniform usampler2D covAndColorTexture;    \\n\\n    vec2 unpackInt16(in uint value) {\\n      int v = int(value);\\n      int v0 = v >> 16;\\n      int v1 = (v & 0xFFFF);\\n      if((v & 0x8000) != 0)\\n        v1 |= 0xFFFF0000;\\n      return vec2(float(v1), float(v0));\\n    }\\n\\n    void main () {\\n      ivec2 texSize = textureSize(centerAndScaleTexture, 0);\\n      ivec2 texPos = ivec2(splatIndex%uint(texSize.x), splatIndex/uint(texSize.x));\\n      vec4 centerAndScaleData = texelFetch(centerAndScaleTexture, texPos, 0);\\n      vec4 center = vec4(centerAndScaleData.xyz, 1);\\n      vec4 camspace = modelViewMatrix * center;\\n      vec4 pos2d = projectionMatrix * camspace;\\n\\n      float bounds = 1.2 * pos2d.w;\\n      if (pos2d.z < -pos2d.w || pos2d.x < -bounds || pos2d.x > bounds\\n        || pos2d.y < -bounds || pos2d.y > bounds) {\\n        gl_Position = vec4(0.0, 0.0, 2.0, 1.0);\\n        return;\\n      }\\n\\n      uvec4 covAndColorData = texelFetch(covAndColorTexture, texPos, 0);\\n      vec2 cov3D_M11_M12 = unpackInt16(covAndColorData.x) * centerAndScaleData.w;\\n      vec2 cov3D_M13_M22 = unpackInt16(covAndColorData.y) * centerAndScaleData.w;\\n      vec2 cov3D_M23_M33 = unpackInt16(covAndColorData.z) * centerAndScaleData.w;\\n      mat3 Vrk = mat3(\\n        cov3D_M11_M12.x, cov3D_M11_M12.y, cov3D_M13_M22.x,\\n        cov3D_M11_M12.y, cov3D_M13_M22.y, cov3D_M23_M33.x,\\n        cov3D_M13_M22.x, cov3D_M23_M33.x, cov3D_M23_M33.y\\n      );\\n\\n      mat3 J = mat3(\\n        focal / camspace.z, 0., -(focal * camspace.x) / (camspace.z * camspace.z),\\n        0., focal / camspace.z, -(focal * camspace.y) / (camspace.z * camspace.z),\\n        0., 0., 0.\\n      );\\n\\n      mat3 W = transpose(mat3(modelViewMatrix));\\n      mat3 T = W * J;\\n      mat3 cov = transpose(T) * Vrk * T;\\n      vec2 vCenter = vec2(pos2d) / pos2d.w;\\n      float diagonal1 = cov[0][0] + 0.3;\\n      float offDiagonal = cov[0][1];\\n      float diagonal2 = cov[1][1] + 0.3;\\n      float mid = 0.5 * (diagonal1 + diagonal2);\\n      float radius = length(vec2((diagonal1 - diagonal2) / 2.0, offDiagonal));\\n      float lambda1 = mid + radius;\\n      float lambda2 = max(mid - radius, 0.1);\\n      vec2 diagonalVector = normalize(vec2(offDiagonal, lambda1 - diagonal1));\\n      vec2 v1 = min(sqrt(2.0 * lambda1), 1024.0) * diagonalVector;\\n      vec2 v2 = min(sqrt(2.0 * lambda2), 1024.0) * vec2(diagonalVector.y, -diagonalVector.x);\\n      uint colorUint = covAndColorData.w;\\n      vColor = vec4(\\n        float(colorUint & uint(0xFF)) / 255.0,\\n        float((colorUint >> uint(8)) & uint(0xFF)) / 255.0,\\n        float((colorUint >> uint(16)) & uint(0xFF)) / 255.0,\\n        float(colorUint >> uint(24)) / 255.0\\n      );\\n      vPosition = position;\\n\\n      gl_Position = vec4(\\n        vCenter \\n          + position.x * v2 / viewport * 2.0 \\n          + position.y * v1 / viewport * 2.0, pos2d.z / pos2d.w, 1.0);\\n    }\\n    \", /*glsl*/\"\\n    #include <alphatest_pars_fragment>\\n    #include <alphahash_pars_fragment>\\n    in vec4 vColor;\\n    in vec3 vPosition;\\n    void main () {\\n      float A = -dot(vPosition.xy, vPosition.xy);\\n      if (A < -4.0) discard;\\n      float B = exp(A) * vColor.a;\\n      vec4 diffuseColor = vec4(vColor.rgb, B);\\n      #include <alphatest_fragment>\\n      #include <alphahash_fragment>\\n      gl_FragColor = diffuseColor;\\n      #include <tonemapping_fragment>\\n      #include <\".concat(parseInt(THREE.REVISION.replace(/\\D+/g, '')) >= 154 ? 'colorspace_fragment' : 'encodings_fragment', \">\\n    }\\n  \"));\nfunction createWorker(self) {\n  var matrices = null;\n  var offset = 0;\n  function sortSplats(view) {\n    var hashed = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    var vertexCount = matrices.length / 16;\n    var threshold = -0.0001;\n    var maxDepth = -Infinity;\n    var minDepth = Infinity;\n    var depthList = new Float32Array(vertexCount);\n    var sizeList = new Int32Array(depthList.buffer);\n    var validIndexList = new Int32Array(vertexCount);\n    var validCount = 0;\n    for (var i = 0; i < vertexCount; i++) {\n      // Sign of depth is reversed\n      var depth = view[0] * matrices[i * 16 + 12] + view[1] * matrices[i * 16 + 13] + view[2] * matrices[i * 16 + 14] + view[3];\n      // Skip behind of camera and small, transparent splat\n      if (hashed || depth < 0 && matrices[i * 16 + 15] > threshold * depth) {\n        depthList[validCount] = depth;\n        validIndexList[validCount] = i;\n        validCount++;\n        if (depth > maxDepth) maxDepth = depth;\n        if (depth < minDepth) minDepth = depth;\n      }\n    }\n\n    // This is a 16 bit single-pass counting sort\n    var depthInv = (256 * 256 - 1) / (maxDepth - minDepth);\n    var counts0 = new Uint32Array(256 * 256);\n    for (var _i = 0; _i < validCount; _i++) {\n      sizeList[_i] = (depthList[_i] - minDepth) * depthInv | 0;\n      counts0[sizeList[_i]]++;\n    }\n    var starts0 = new Uint32Array(256 * 256);\n    for (var _i2 = 1; _i2 < 256 * 256; _i2++) starts0[_i2] = starts0[_i2 - 1] + counts0[_i2 - 1];\n    var depthIndex = new Uint32Array(validCount);\n    for (var _i3 = 0; _i3 < validCount; _i3++) depthIndex[starts0[sizeList[_i3]]++] = validIndexList[_i3];\n    return depthIndex;\n  }\n  self.onmessage = function (e) {\n    if (e.data.method == 'push') {\n      if (offset === 0) matrices = new Float32Array(e.data.length);\n      var new_matrices = new Float32Array(e.data.matrices);\n      matrices.set(new_matrices, offset);\n      offset += new_matrices.length;\n    } else if (e.data.method == 'sort') {\n      if (matrices !== null) {\n        var indices = sortSplats(new Float32Array(e.data.view), e.data.hashed);\n        // @ts-ignore\n        self.postMessage({\n          indices: indices,\n          key: e.data.key\n        }, [indices.buffer]);\n      }\n    }\n  };\n}\nvar SplatLoader = /*#__PURE__*/function (_THREE$Loader) {\n  _inherits(SplatLoader, _THREE$Loader);\n  var _super = _createSuper(SplatLoader);\n  function SplatLoader() {\n    var _this;\n    _classCallCheck(this, SplatLoader);\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    _this = _super.call.apply(_super, [this].concat(args));\n    // WebGLRenderer, needs to be filled out!\n    _this.gl = null;\n    // Default chunk size for lazy loading\n    _this.chunkSize = 25000;\n    return _this;\n  }\n  _createClass(SplatLoader, [{\n    key: \"load\",\n    value: function load(url, onLoad, onProgress, onError) {\n      var shared = {\n        gl: this.gl,\n        url: this.manager.resolveURL(url),\n        worker: new Worker(URL.createObjectURL(new Blob(['(', createWorker.toString(), ')(self)'], {\n          type: 'application/javascript'\n        }))),\n        manager: this.manager,\n        update: function update(target, camera, hashed) {\n          return _update(camera, shared, target, hashed);\n        },\n        connect: function connect(target) {\n          return _connect(shared, target);\n        },\n        loading: false,\n        loaded: false,\n        loadedVertexCount: 0,\n        chunkSize: this.chunkSize,\n        totalDownloadBytes: 0,\n        numVertices: 0,\n        rowLength: 3 * 4 + 3 * 4 + 4 + 4,\n        maxVertexes: 0,\n        bufferTextureWidth: 0,\n        bufferTextureHeight: 0,\n        stream: null,\n        centerAndScaleData: null,\n        covAndColorData: null,\n        covAndColorTexture: null,\n        centerAndScaleTexture: null,\n        onProgress: onProgress\n      };\n      _load(shared).then(onLoad).catch(function (e) {\n        onError == null || onError(e);\n        shared.manager.itemError(shared.url);\n      });\n    }\n  }]);\n  return SplatLoader;\n}(THREE.Loader);\nfunction _load(_x) {\n  return _load2.apply(this, arguments);\n}\nfunction _load2() {\n  _load2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(shared) {\n    var data, _totalDownloadBytes, totalDownloadBytes, context, maxTextureSize;\n    return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n      while (1) switch (_context2.prev = _context2.next) {\n        case 0:\n          shared.manager.itemStart(shared.url);\n          _context2.next = 3;\n          return fetch(shared.url);\n        case 3:\n          data = _context2.sent;\n          if (!(data.body === null)) {\n            _context2.next = 6;\n            break;\n          }\n          throw 'Failed to fetch file';\n        case 6:\n          _totalDownloadBytes = data.headers.get('Content-Length');\n          totalDownloadBytes = _totalDownloadBytes ? parseInt(_totalDownloadBytes) : undefined;\n          if (!(totalDownloadBytes == undefined)) {\n            _context2.next = 10;\n            break;\n          }\n          throw 'Failed to get content length';\n        case 10:\n          shared.stream = data.body.getReader();\n          shared.totalDownloadBytes = totalDownloadBytes;\n          shared.numVertices = Math.floor(shared.totalDownloadBytes / shared.rowLength);\n          context = shared.gl.getContext();\n          maxTextureSize = context.getParameter(context.MAX_TEXTURE_SIZE);\n          shared.maxVertexes = maxTextureSize * maxTextureSize;\n          if (shared.numVertices > shared.maxVertexes) shared.numVertices = shared.maxVertexes;\n          shared.bufferTextureWidth = maxTextureSize;\n          shared.bufferTextureHeight = Math.floor((shared.numVertices - 1) / maxTextureSize) + 1;\n          shared.centerAndScaleData = new Float32Array(shared.bufferTextureWidth * shared.bufferTextureHeight * 4);\n          shared.covAndColorData = new Uint32Array(shared.bufferTextureWidth * shared.bufferTextureHeight * 4);\n          shared.centerAndScaleTexture = new THREE.DataTexture(shared.centerAndScaleData, shared.bufferTextureWidth, shared.bufferTextureHeight, THREE.RGBAFormat, THREE.FloatType);\n          shared.centerAndScaleTexture.needsUpdate = true;\n          shared.covAndColorTexture = new THREE.DataTexture(shared.covAndColorData, shared.bufferTextureWidth, shared.bufferTextureHeight, THREE.RGBAIntegerFormat, THREE.UnsignedIntType);\n          shared.covAndColorTexture.internalFormat = 'RGBA32UI';\n          shared.covAndColorTexture.needsUpdate = true;\n          return _context2.abrupt(\"return\", shared);\n        case 27:\n        case \"end\":\n          return _context2.stop();\n      }\n    }, _callee2);\n  }));\n  return _load2.apply(this, arguments);\n}\nfunction lazyLoad(_x2) {\n  return _lazyLoad.apply(this, arguments);\n}\nfunction _lazyLoad() {\n  _lazyLoad = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(shared) {\n    var bytesDownloaded, bytesProcessed, chunks, lastReportedProgress, lengthComputable, _yield$shared$stream$, value, done, percent, event, bytesRemains, vertexCount, concatenatedChunksbuffer, offset, _iterator, _step, chunk, extra_data, buffer, matrices, _event, concatenatedChunks, _offset, _iterator2, _step2, _chunk, numVertices, _matrices;\n    return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n      while (1) switch (_context3.prev = _context3.next) {\n        case 0:\n          shared.loading = true;\n          bytesDownloaded = 0;\n          bytesProcessed = 0;\n          chunks = [];\n          lastReportedProgress = 0;\n          lengthComputable = shared.totalDownloadBytes !== 0;\n        case 6:\n          if (!true) {\n            _context3.next = 28;\n            break;\n          }\n          _context3.prev = 7;\n          _context3.next = 10;\n          return shared.stream.read();\n        case 10:\n          _yield$shared$stream$ = _context3.sent;\n          value = _yield$shared$stream$.value;\n          done = _yield$shared$stream$.done;\n          if (!done) {\n            _context3.next = 15;\n            break;\n          }\n          return _context3.abrupt(\"break\", 28);\n        case 15:\n          bytesDownloaded += value.length;\n          if (shared.totalDownloadBytes != undefined) {\n            percent = bytesDownloaded / shared.totalDownloadBytes * 100;\n            if (shared.onProgress && percent - lastReportedProgress > 1) {\n              event = new ProgressEvent('progress', {\n                lengthComputable: lengthComputable,\n                loaded: bytesDownloaded,\n                total: shared.totalDownloadBytes\n              });\n              shared.onProgress(event);\n              lastReportedProgress = percent;\n            }\n          }\n          chunks.push(value);\n          bytesRemains = bytesDownloaded - bytesProcessed;\n          if (shared.totalDownloadBytes != undefined && bytesRemains > shared.rowLength * shared.chunkSize) {\n            vertexCount = Math.floor(bytesRemains / shared.rowLength);\n            concatenatedChunksbuffer = new Uint8Array(bytesRemains);\n            offset = 0;\n            _iterator = _createForOfIteratorHelper(chunks);\n            try {\n              for (_iterator.s(); !(_step = _iterator.n()).done;) {\n                chunk = _step.value;\n                concatenatedChunksbuffer.set(chunk, offset);\n                offset += chunk.length;\n              }\n            } catch (err) {\n              _iterator.e(err);\n            } finally {\n              _iterator.f();\n            }\n            chunks.length = 0;\n            if (bytesRemains > vertexCount * shared.rowLength) {\n              extra_data = new Uint8Array(bytesRemains - vertexCount * shared.rowLength);\n              extra_data.set(concatenatedChunksbuffer.subarray(bytesRemains - extra_data.length, bytesRemains), 0);\n              chunks.push(extra_data);\n            }\n            buffer = new Uint8Array(vertexCount * shared.rowLength);\n            buffer.set(concatenatedChunksbuffer.subarray(0, buffer.byteLength), 0);\n            matrices = pushDataBuffer(shared, buffer.buffer, vertexCount);\n            shared.worker.postMessage({\n              method: 'push',\n              src: shared.url,\n              length: shared.numVertices * 16,\n              matrices: matrices.buffer\n            }, [matrices.buffer]);\n            bytesProcessed += vertexCount * shared.rowLength;\n            if (shared.onProgress) {\n              _event = new ProgressEvent('progress', {\n                lengthComputable: lengthComputable,\n                loaded: shared.totalDownloadBytes,\n                total: shared.totalDownloadBytes\n              });\n              shared.onProgress(_event);\n            }\n          }\n          _context3.next = 26;\n          break;\n        case 22:\n          _context3.prev = 22;\n          _context3.t0 = _context3[\"catch\"](7);\n          console.error(_context3.t0);\n          return _context3.abrupt(\"break\", 28);\n        case 26:\n          _context3.next = 6;\n          break;\n        case 28:\n          if (bytesDownloaded - bytesProcessed > 0) {\n            // Concatenate the chunks into a single Uint8Array\n            concatenatedChunks = new Uint8Array(chunks.reduce(function (acc, chunk) {\n              return acc + chunk.length;\n            }, 0));\n            _offset = 0;\n            _iterator2 = _createForOfIteratorHelper(chunks);\n            try {\n              for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n                _chunk = _step2.value;\n                concatenatedChunks.set(_chunk, _offset);\n                _offset += _chunk.length;\n              }\n            } catch (err) {\n              _iterator2.e(err);\n            } finally {\n              _iterator2.f();\n            }\n            numVertices = Math.floor(concatenatedChunks.byteLength / shared.rowLength);\n            _matrices = pushDataBuffer(shared, concatenatedChunks.buffer, numVertices);\n            shared.worker.postMessage({\n              method: 'push',\n              src: shared.url,\n              length: numVertices * 16,\n              matrices: _matrices.buffer\n            }, [_matrices.buffer]);\n          }\n          shared.loaded = true;\n          shared.manager.itemEnd(shared.url);\n        case 31:\n        case \"end\":\n          return _context3.stop();\n      }\n    }, _callee3, null, [[7, 22]]);\n  }));\n  return _lazyLoad.apply(this, arguments);\n}\nfunction _update(camera, shared, target, hashed) {\n  camera.updateMatrixWorld();\n  shared.gl.getCurrentViewport(target.viewport);\n  // @ts-ignore\n  target.material.viewport.x = target.viewport.z;\n  // @ts-ignore\n  target.material.viewport.y = target.viewport.w;\n  target.material.focal = target.viewport.w / 2.0 * Math.abs(camera.projectionMatrix.elements[5]);\n  if (target.ready) {\n    if (hashed && target.sorted) return;\n    target.ready = false;\n    var view = new Float32Array([target.modelViewMatrix.elements[2], -target.modelViewMatrix.elements[6], target.modelViewMatrix.elements[10], target.modelViewMatrix.elements[14]]);\n    shared.worker.postMessage({\n      method: 'sort',\n      src: shared.url,\n      key: target.uuid,\n      view: view.buffer,\n      hashed: hashed\n    }, [view.buffer]);\n    if (hashed && shared.loaded) target.sorted = true;\n  }\n}\nfunction _connect(shared, target) {\n  if (!shared.loading) lazyLoad(shared);\n  target.ready = false;\n  target.pm = new THREE.Matrix4();\n  target.vm1 = new THREE.Matrix4();\n  target.vm2 = new THREE.Matrix4();\n  target.viewport = new THREE.Vector4();\n  var splatIndexArray = new Uint32Array(shared.bufferTextureWidth * shared.bufferTextureHeight);\n  var splatIndexes = new THREE.InstancedBufferAttribute(splatIndexArray, 1, false);\n  splatIndexes.setUsage(THREE.DynamicDrawUsage);\n  var geometry = target.geometry = new THREE.InstancedBufferGeometry();\n  var positionsArray = new Float32Array(6 * 3);\n  var positions = new THREE.BufferAttribute(positionsArray, 3);\n  geometry.setAttribute('position', positions);\n  positions.setXYZ(2, -2.0, 2.0, 0.0);\n  positions.setXYZ(1, 2.0, 2.0, 0.0);\n  positions.setXYZ(0, -2.0, -2.0, 0.0);\n  positions.setXYZ(5, -2.0, -2.0, 0.0);\n  positions.setXYZ(4, 2.0, 2.0, 0.0);\n  positions.setXYZ(3, 2.0, -2.0, 0.0);\n  positions.needsUpdate = true;\n  geometry.setAttribute('splatIndex', splatIndexes);\n  geometry.instanceCount = 1;\n  function listener(e) {\n    if (target && e.data.key === target.uuid) {\n      var indexes = new Uint32Array(e.data.indices);\n      // @ts-ignore\n      geometry.attributes.splatIndex.set(indexes);\n      geometry.attributes.splatIndex.needsUpdate = true;\n      geometry.instanceCount = indexes.length;\n      target.ready = true;\n    }\n  }\n  shared.worker.addEventListener('message', listener);\n  function wait() {\n    return _wait.apply(this, arguments);\n  }\n  function _wait() {\n    _wait = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n      var centerAndScaleTextureProperties, covAndColorTextureProperties;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            if (!true) {\n              _context.next = 9;\n              break;\n            }\n            centerAndScaleTextureProperties = shared.gl.properties.get(shared.centerAndScaleTexture);\n            covAndColorTextureProperties = shared.gl.properties.get(shared.covAndColorTexture);\n            if (!(centerAndScaleTextureProperties != null && centerAndScaleTextureProperties.__webglTexture && covAndColorTextureProperties != null && covAndColorTextureProperties.__webglTexture && shared.loadedVertexCount > 0)) {\n              _context.next = 5;\n              break;\n            }\n            return _context.abrupt(\"break\", 9);\n          case 5:\n            _context.next = 7;\n            return new Promise(function (resolve) {\n              return setTimeout(resolve, 10);\n            });\n          case 7:\n            _context.next = 0;\n            break;\n          case 9:\n            target.ready = true;\n          case 10:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee);\n    }));\n    return _wait.apply(this, arguments);\n  }\n  wait();\n  return function () {\n    return shared.worker.removeEventListener('message', listener);\n  };\n}\nfunction pushDataBuffer(shared, buffer, vertexCount) {\n  var context = shared.gl.getContext();\n  if (shared.loadedVertexCount + vertexCount > shared.maxVertexes) vertexCount = shared.maxVertexes - shared.loadedVertexCount;\n  if (vertexCount <= 0) throw 'Failed to parse file';\n  var u_buffer = new Uint8Array(buffer);\n  var f_buffer = new Float32Array(buffer);\n  var matrices = new Float32Array(vertexCount * 16);\n  var covAndColorData_uint8 = new Uint8Array(shared.covAndColorData.buffer);\n  var covAndColorData_int16 = new Int16Array(shared.covAndColorData.buffer);\n  for (var i = 0; i < vertexCount; i++) {\n    var quat = new THREE.Quaternion(-(u_buffer[32 * i + 28 + 1] - 128) / 128.0, (u_buffer[32 * i + 28 + 2] - 128) / 128.0, (u_buffer[32 * i + 28 + 3] - 128) / 128.0, -(u_buffer[32 * i + 28 + 0] - 128) / 128.0);\n    quat.invert();\n    var center = new THREE.Vector3(f_buffer[8 * i + 0], f_buffer[8 * i + 1], -f_buffer[8 * i + 2]);\n    var scale = new THREE.Vector3(f_buffer[8 * i + 3 + 0], f_buffer[8 * i + 3 + 1], f_buffer[8 * i + 3 + 2]);\n    var mtx = new THREE.Matrix4();\n    mtx.makeRotationFromQuaternion(quat);\n    mtx.transpose();\n    mtx.scale(scale);\n    var mtx_t = mtx.clone();\n    mtx.transpose();\n    mtx.premultiply(mtx_t);\n    mtx.setPosition(center);\n    var cov_indexes = [0, 1, 2, 5, 6, 10];\n    var max_value = 0.0;\n    for (var j = 0; j < cov_indexes.length; j++) if (Math.abs(mtx.elements[cov_indexes[j]]) > max_value) max_value = Math.abs(mtx.elements[cov_indexes[j]]);\n    var destOffset = shared.loadedVertexCount * 4 + i * 4;\n    shared.centerAndScaleData[destOffset + 0] = center.x;\n    shared.centerAndScaleData[destOffset + 1] = -center.y;\n    shared.centerAndScaleData[destOffset + 2] = center.z;\n    shared.centerAndScaleData[destOffset + 3] = max_value / 32767.0;\n    destOffset = shared.loadedVertexCount * 8 + i * 4 * 2;\n    for (var _j = 0; _j < cov_indexes.length; _j++) covAndColorData_int16[destOffset + _j] = mtx.elements[cov_indexes[_j]] * 32767.0 / max_value;\n\n    // RGBA\n    destOffset = shared.loadedVertexCount * 16 + (i * 4 + 3) * 4;\n    var col = new THREE.Color(u_buffer[32 * i + 24 + 0] / 255, u_buffer[32 * i + 24 + 1] / 255, u_buffer[32 * i + 24 + 2] / 255);\n    col.convertSRGBToLinear();\n    covAndColorData_uint8[destOffset + 0] = col.r * 255;\n    covAndColorData_uint8[destOffset + 1] = col.g * 255;\n    covAndColorData_uint8[destOffset + 2] = col.b * 255;\n    covAndColorData_uint8[destOffset + 3] = u_buffer[32 * i + 24 + 3];\n\n    // Store scale and transparent to remove splat in sorting process\n    mtx.elements[15] = Math.max(scale.x, scale.y, scale.z) * u_buffer[32 * i + 24 + 3] / 255.0;\n    for (var _j2 = 0; _j2 < 16; _j2++) matrices[i * 16 + _j2] = mtx.elements[_j2];\n  }\n  while (vertexCount > 0) {\n    var width = 0;\n    var height = 0;\n    var xoffset = shared.loadedVertexCount % shared.bufferTextureWidth;\n    var yoffset = Math.floor(shared.loadedVertexCount / shared.bufferTextureWidth);\n    if (shared.loadedVertexCount % shared.bufferTextureWidth != 0) {\n      width = Math.min(shared.bufferTextureWidth, xoffset + vertexCount) - xoffset;\n      height = 1;\n    } else if (Math.floor(vertexCount / shared.bufferTextureWidth) > 0) {\n      width = shared.bufferTextureWidth;\n      height = Math.floor(vertexCount / shared.bufferTextureWidth);\n    } else {\n      width = vertexCount % shared.bufferTextureWidth;\n      height = 1;\n    }\n    var centerAndScaleTextureProperties = shared.gl.properties.get(shared.centerAndScaleTexture);\n    context.bindTexture(context.TEXTURE_2D, centerAndScaleTextureProperties.__webglTexture);\n    context.texSubImage2D(context.TEXTURE_2D, 0, xoffset, yoffset, width, height, context.RGBA, context.FLOAT, shared.centerAndScaleData, shared.loadedVertexCount * 4);\n    var covAndColorTextureProperties = shared.gl.properties.get(shared.covAndColorTexture);\n    context.bindTexture(context.TEXTURE_2D, covAndColorTextureProperties.__webglTexture);\n    context.texSubImage2D(context.TEXTURE_2D, 0, xoffset, yoffset, width, height,\n    // @ts-ignore\n    context.RGBA_INTEGER, context.UNSIGNED_INT, shared.covAndColorData, shared.loadedVertexCount * 4);\n    shared.gl.resetState();\n    shared.loadedVertexCount += width * height;\n    vertexCount -= width * height;\n  }\n  return matrices;\n}\nfunction Splat(_ref) {\n  var src = _ref.src,\n    _ref$toneMapped = _ref.toneMapped,\n    toneMapped = _ref$toneMapped === void 0 ? false : _ref$toneMapped,\n    _ref$alphaTest = _ref.alphaTest,\n    alphaTest = _ref$alphaTest === void 0 ? 0 : _ref$alphaTest,\n    _ref$alphaHash = _ref.alphaHash,\n    alphaHash = _ref$alphaHash === void 0 ? false : _ref$alphaHash,\n    _ref$chunkSize = _ref.chunkSize,\n    chunkSize = _ref$chunkSize === void 0 ? 25000 : _ref$chunkSize,\n    props = _objectWithoutProperties(_ref, _excluded);\n  extend({\n    SplatMaterial: SplatMaterial\n  });\n  var ref = React.useRef(null);\n  var gl = useThree(function (state) {\n    return state.gl;\n  });\n  var camera = useThree(function (state) {\n    return state.camera;\n  });\n\n  // Shared state, globally memoized, the same url re-uses the same daza\n  var shared = useLoader(SplatLoader, src, function (loader) {\n    loader.gl = gl;\n    loader.chunkSize = chunkSize;\n  });\n\n  // Listen to worker results, apply them to the target mesh\n  React.useLayoutEffect(function () {\n    return shared.connect(ref.current);\n  }, [src]);\n  // Update the worker\n  useFrame(function () {\n    return shared.update(ref.current, camera, alphaHash);\n  });\n  return /*#__PURE__*/React.createElement(\"mesh\", _extends({\n    ref: ref,\n    frustumCulled: false\n  }, props), /*#__PURE__*/React.createElement(\"splatMaterial\", {\n    key: \"\".concat(src, \"/\").concat(alphaTest, \"/\").concat(alphaHash).concat(SplatMaterial.key),\n    transparent: !alphaHash,\n    depthTest: true,\n    alphaTest: alphaHash ? 0 : alphaTest,\n    centerAndScaleTexture: shared.centerAndScaleTexture,\n    covAndColorTexture: shared.covAndColorTexture,\n    depthWrite: alphaHash ? true : alphaTest > 0,\n    blending: alphaHash ? THREE.NormalBlending : THREE.CustomBlending,\n    blendSrcAlpha: THREE.OneFactor,\n    alphaHash: !!alphaHash,\n    toneMapped: toneMapped\n  }));\n}\nexport { Splat };","map":{"version":3,"names":["_extends","THREE","React","extend","useThree","useLoader","useFrame","shaderMaterial","SplatMaterial","alphaTest","viewport","Vector2","focal","centerAndScaleTexture","covAndColorTexture","concat","parseInt","REVISION","replace","createWorker","self","matrices","offset","sortSplats","view","hashed","arguments","length","undefined","vertexCount","threshold","maxDepth","Infinity","minDepth","depthList","Float32Array","sizeList","Int32Array","buffer","validIndexList","validCount","i","depth","depthInv","counts0","Uint32Array","starts0","depthIndex","onmessage","e","data","method","new_matrices","set","indices","postMessage","key","SplatLoader","_THREE$Loader","_inherits","_super","_createSuper","_this","_classCallCheck","_len","args","Array","_key","call","apply","gl","chunkSize","_createClass","value","load","url","onLoad","onProgress","onError","shared","manager","resolveURL","worker","Worker","URL","createObjectURL","Blob","toString","type","update","target","camera","connect","loading","loaded","loadedVertexCount","totalDownloadBytes","numVertices","rowLength","maxVertexes","bufferTextureWidth","bufferTextureHeight","stream","centerAndScaleData","covAndColorData","then","catch","itemError","Loader","_x","_load2","_asyncToGenerator","_regeneratorRuntime","mark","_callee2","_totalDownloadBytes","context","maxTextureSize","wrap","_callee2$","_context2","prev","next","itemStart","fetch","sent","body","headers","get","getReader","Math","floor","getContext","getParameter","MAX_TEXTURE_SIZE","DataTexture","RGBAFormat","FloatType","needsUpdate","RGBAIntegerFormat","UnsignedIntType","internalFormat","abrupt","stop","lazyLoad","_x2","_lazyLoad","_callee3","bytesDownloaded","bytesProcessed","chunks","lastReportedProgress","lengthComputable","_yield$shared$stream$","done","percent","event","bytesRemains","concatenatedChunksbuffer","_iterator","_step","chunk","extra_data","_event","concatenatedChunks","_offset","_iterator2","_step2","_chunk","_matrices","_callee3$","_context3","read","ProgressEvent","total","push","Uint8Array","_createForOfIteratorHelper","s","n","err","f","subarray","byteLength","pushDataBuffer","src","t0","console","error","reduce","acc","itemEnd","updateMatrixWorld","getCurrentViewport","material","x","z","y","w","abs","projectionMatrix","elements","ready","sorted","modelViewMatrix","uuid","pm","Matrix4","vm1","vm2","Vector4","splatIndexArray","splatIndexes","InstancedBufferAttribute","setUsage","DynamicDrawUsage","geometry","InstancedBufferGeometry","positionsArray","positions","BufferAttribute","setAttribute","setXYZ","instanceCount","listener","indexes","attributes","splatIndex","addEventListener","wait","_wait","_callee","centerAndScaleTextureProperties","covAndColorTextureProperties","_callee$","_context","properties","__webglTexture","Promise","resolve","setTimeout","removeEventListener","u_buffer","f_buffer","covAndColorData_uint8","covAndColorData_int16","Int16Array","quat","Quaternion","invert","center","Vector3","scale","mtx","makeRotationFromQuaternion","transpose","mtx_t","clone","premultiply","setPosition","cov_indexes","max_value","j","destOffset","col","Color","convertSRGBToLinear","r","g","b","max","width","height","xoffset","yoffset","min","bindTexture","TEXTURE_2D","texSubImage2D","RGBA","FLOAT","RGBA_INTEGER","UNSIGNED_INT","resetState","Splat","_ref","_ref$toneMapped","toneMapped","_ref$alphaTest","_ref$alphaHash","alphaHash","_ref$chunkSize","props","_objectWithoutProperties","_excluded","ref","useRef","state","loader","useLayoutEffect","current","createElement","frustumCulled","transparent","depthTest","depthWrite","blending","NormalBlending","CustomBlending","blendSrcAlpha","OneFactor"],"sources":["C:/Users/Nayyu/Desktop/skibidai-public-build/node_modules/@react-three/drei/core/Splat.js"],"sourcesContent":["import _extends from '@babel/runtime/helpers/esm/extends';\nimport * as THREE from 'three';\nimport * as React from 'react';\nimport { extend, useThree, useLoader, useFrame } from '@react-three/fiber';\nimport { shaderMaterial } from './shaderMaterial.js';\n\nconst SplatMaterial = /* @__PURE__ */shaderMaterial({\n  alphaTest: 0,\n  viewport: /* @__PURE__ */new THREE.Vector2(1980, 1080),\n  focal: 1000.0,\n  centerAndScaleTexture: null,\n  covAndColorTexture: null\n}, /*glsl*/`\n    precision highp sampler2D;\n    precision highp usampler2D;\n    out vec4 vColor;\n    out vec3 vPosition;\n    uniform vec2 resolution;\n    uniform vec2 viewport;\n    uniform float focal;\n    attribute uint splatIndex;\n    uniform sampler2D centerAndScaleTexture;\n    uniform usampler2D covAndColorTexture;    \n\n    vec2 unpackInt16(in uint value) {\n      int v = int(value);\n      int v0 = v >> 16;\n      int v1 = (v & 0xFFFF);\n      if((v & 0x8000) != 0)\n        v1 |= 0xFFFF0000;\n      return vec2(float(v1), float(v0));\n    }\n\n    void main () {\n      ivec2 texSize = textureSize(centerAndScaleTexture, 0);\n      ivec2 texPos = ivec2(splatIndex%uint(texSize.x), splatIndex/uint(texSize.x));\n      vec4 centerAndScaleData = texelFetch(centerAndScaleTexture, texPos, 0);\n      vec4 center = vec4(centerAndScaleData.xyz, 1);\n      vec4 camspace = modelViewMatrix * center;\n      vec4 pos2d = projectionMatrix * camspace;\n\n      float bounds = 1.2 * pos2d.w;\n      if (pos2d.z < -pos2d.w || pos2d.x < -bounds || pos2d.x > bounds\n        || pos2d.y < -bounds || pos2d.y > bounds) {\n        gl_Position = vec4(0.0, 0.0, 2.0, 1.0);\n        return;\n      }\n\n      uvec4 covAndColorData = texelFetch(covAndColorTexture, texPos, 0);\n      vec2 cov3D_M11_M12 = unpackInt16(covAndColorData.x) * centerAndScaleData.w;\n      vec2 cov3D_M13_M22 = unpackInt16(covAndColorData.y) * centerAndScaleData.w;\n      vec2 cov3D_M23_M33 = unpackInt16(covAndColorData.z) * centerAndScaleData.w;\n      mat3 Vrk = mat3(\n        cov3D_M11_M12.x, cov3D_M11_M12.y, cov3D_M13_M22.x,\n        cov3D_M11_M12.y, cov3D_M13_M22.y, cov3D_M23_M33.x,\n        cov3D_M13_M22.x, cov3D_M23_M33.x, cov3D_M23_M33.y\n      );\n\n      mat3 J = mat3(\n        focal / camspace.z, 0., -(focal * camspace.x) / (camspace.z * camspace.z),\n        0., focal / camspace.z, -(focal * camspace.y) / (camspace.z * camspace.z),\n        0., 0., 0.\n      );\n\n      mat3 W = transpose(mat3(modelViewMatrix));\n      mat3 T = W * J;\n      mat3 cov = transpose(T) * Vrk * T;\n      vec2 vCenter = vec2(pos2d) / pos2d.w;\n      float diagonal1 = cov[0][0] + 0.3;\n      float offDiagonal = cov[0][1];\n      float diagonal2 = cov[1][1] + 0.3;\n      float mid = 0.5 * (diagonal1 + diagonal2);\n      float radius = length(vec2((diagonal1 - diagonal2) / 2.0, offDiagonal));\n      float lambda1 = mid + radius;\n      float lambda2 = max(mid - radius, 0.1);\n      vec2 diagonalVector = normalize(vec2(offDiagonal, lambda1 - diagonal1));\n      vec2 v1 = min(sqrt(2.0 * lambda1), 1024.0) * diagonalVector;\n      vec2 v2 = min(sqrt(2.0 * lambda2), 1024.0) * vec2(diagonalVector.y, -diagonalVector.x);\n      uint colorUint = covAndColorData.w;\n      vColor = vec4(\n        float(colorUint & uint(0xFF)) / 255.0,\n        float((colorUint >> uint(8)) & uint(0xFF)) / 255.0,\n        float((colorUint >> uint(16)) & uint(0xFF)) / 255.0,\n        float(colorUint >> uint(24)) / 255.0\n      );\n      vPosition = position;\n\n      gl_Position = vec4(\n        vCenter \n          + position.x * v2 / viewport * 2.0 \n          + position.y * v1 / viewport * 2.0, pos2d.z / pos2d.w, 1.0);\n    }\n    `, /*glsl*/`\n    #include <alphatest_pars_fragment>\n    #include <alphahash_pars_fragment>\n    in vec4 vColor;\n    in vec3 vPosition;\n    void main () {\n      float A = -dot(vPosition.xy, vPosition.xy);\n      if (A < -4.0) discard;\n      float B = exp(A) * vColor.a;\n      vec4 diffuseColor = vec4(vColor.rgb, B);\n      #include <alphatest_fragment>\n      #include <alphahash_fragment>\n      gl_FragColor = diffuseColor;\n      #include <tonemapping_fragment>\n      #include <${parseInt(THREE.REVISION.replace(/\\D+/g, '')) >= 154 ? 'colorspace_fragment' : 'encodings_fragment'}>\n    }\n  `);\nfunction createWorker(self) {\n  let matrices = null;\n  let offset = 0;\n  function sortSplats(view, hashed = false) {\n    const vertexCount = matrices.length / 16;\n    const threshold = -0.0001;\n    let maxDepth = -Infinity;\n    let minDepth = Infinity;\n    const depthList = new Float32Array(vertexCount);\n    const sizeList = new Int32Array(depthList.buffer);\n    const validIndexList = new Int32Array(vertexCount);\n    let validCount = 0;\n    for (let i = 0; i < vertexCount; i++) {\n      // Sign of depth is reversed\n      const depth = view[0] * matrices[i * 16 + 12] + view[1] * matrices[i * 16 + 13] + view[2] * matrices[i * 16 + 14] + view[3];\n      // Skip behind of camera and small, transparent splat\n      if (hashed || depth < 0 && matrices[i * 16 + 15] > threshold * depth) {\n        depthList[validCount] = depth;\n        validIndexList[validCount] = i;\n        validCount++;\n        if (depth > maxDepth) maxDepth = depth;\n        if (depth < minDepth) minDepth = depth;\n      }\n    }\n\n    // This is a 16 bit single-pass counting sort\n    const depthInv = (256 * 256 - 1) / (maxDepth - minDepth);\n    const counts0 = new Uint32Array(256 * 256);\n    for (let i = 0; i < validCount; i++) {\n      sizeList[i] = (depthList[i] - minDepth) * depthInv | 0;\n      counts0[sizeList[i]]++;\n    }\n    const starts0 = new Uint32Array(256 * 256);\n    for (let i = 1; i < 256 * 256; i++) starts0[i] = starts0[i - 1] + counts0[i - 1];\n    const depthIndex = new Uint32Array(validCount);\n    for (let i = 0; i < validCount; i++) depthIndex[starts0[sizeList[i]]++] = validIndexList[i];\n    return depthIndex;\n  }\n  self.onmessage = e => {\n    if (e.data.method == 'push') {\n      if (offset === 0) matrices = new Float32Array(e.data.length);\n      const new_matrices = new Float32Array(e.data.matrices);\n      matrices.set(new_matrices, offset);\n      offset += new_matrices.length;\n    } else if (e.data.method == 'sort') {\n      if (matrices !== null) {\n        const indices = sortSplats(new Float32Array(e.data.view), e.data.hashed);\n        // @ts-ignore\n        self.postMessage({\n          indices,\n          key: e.data.key\n        }, [indices.buffer]);\n      }\n    }\n  };\n}\nclass SplatLoader extends THREE.Loader {\n  constructor(...args) {\n    super(...args);\n    // WebGLRenderer, needs to be filled out!\n    this.gl = null;\n    // Default chunk size for lazy loading\n    this.chunkSize = 25000;\n  }\n  load(url, onLoad, onProgress, onError) {\n    const shared = {\n      gl: this.gl,\n      url: this.manager.resolveURL(url),\n      worker: new Worker(URL.createObjectURL(new Blob(['(', createWorker.toString(), ')(self)'], {\n        type: 'application/javascript'\n      }))),\n      manager: this.manager,\n      update: (target, camera, hashed) => update(camera, shared, target, hashed),\n      connect: target => connect(shared, target),\n      loading: false,\n      loaded: false,\n      loadedVertexCount: 0,\n      chunkSize: this.chunkSize,\n      totalDownloadBytes: 0,\n      numVertices: 0,\n      rowLength: 3 * 4 + 3 * 4 + 4 + 4,\n      maxVertexes: 0,\n      bufferTextureWidth: 0,\n      bufferTextureHeight: 0,\n      stream: null,\n      centerAndScaleData: null,\n      covAndColorData: null,\n      covAndColorTexture: null,\n      centerAndScaleTexture: null,\n      onProgress\n    };\n    load(shared).then(onLoad).catch(e => {\n      onError == null || onError(e);\n      shared.manager.itemError(shared.url);\n    });\n  }\n}\nasync function load(shared) {\n  shared.manager.itemStart(shared.url);\n  const data = await fetch(shared.url);\n  if (data.body === null) throw 'Failed to fetch file';\n  let _totalDownloadBytes = data.headers.get('Content-Length');\n  const totalDownloadBytes = _totalDownloadBytes ? parseInt(_totalDownloadBytes) : undefined;\n  if (totalDownloadBytes == undefined) throw 'Failed to get content length';\n  shared.stream = data.body.getReader();\n  shared.totalDownloadBytes = totalDownloadBytes;\n  shared.numVertices = Math.floor(shared.totalDownloadBytes / shared.rowLength);\n  const context = shared.gl.getContext();\n  let maxTextureSize = context.getParameter(context.MAX_TEXTURE_SIZE);\n  shared.maxVertexes = maxTextureSize * maxTextureSize;\n  if (shared.numVertices > shared.maxVertexes) shared.numVertices = shared.maxVertexes;\n  shared.bufferTextureWidth = maxTextureSize;\n  shared.bufferTextureHeight = Math.floor((shared.numVertices - 1) / maxTextureSize) + 1;\n  shared.centerAndScaleData = new Float32Array(shared.bufferTextureWidth * shared.bufferTextureHeight * 4);\n  shared.covAndColorData = new Uint32Array(shared.bufferTextureWidth * shared.bufferTextureHeight * 4);\n  shared.centerAndScaleTexture = new THREE.DataTexture(shared.centerAndScaleData, shared.bufferTextureWidth, shared.bufferTextureHeight, THREE.RGBAFormat, THREE.FloatType);\n  shared.centerAndScaleTexture.needsUpdate = true;\n  shared.covAndColorTexture = new THREE.DataTexture(shared.covAndColorData, shared.bufferTextureWidth, shared.bufferTextureHeight, THREE.RGBAIntegerFormat, THREE.UnsignedIntType);\n  shared.covAndColorTexture.internalFormat = 'RGBA32UI';\n  shared.covAndColorTexture.needsUpdate = true;\n  return shared;\n}\nasync function lazyLoad(shared) {\n  shared.loading = true;\n  let bytesDownloaded = 0;\n  let bytesProcessed = 0;\n  const chunks = [];\n  let lastReportedProgress = 0;\n  const lengthComputable = shared.totalDownloadBytes !== 0;\n  while (true) {\n    try {\n      const {\n        value,\n        done\n      } = await shared.stream.read();\n      if (done) break;\n      bytesDownloaded += value.length;\n      if (shared.totalDownloadBytes != undefined) {\n        const percent = bytesDownloaded / shared.totalDownloadBytes * 100;\n        if (shared.onProgress && percent - lastReportedProgress > 1) {\n          const event = new ProgressEvent('progress', {\n            lengthComputable,\n            loaded: bytesDownloaded,\n            total: shared.totalDownloadBytes\n          });\n          shared.onProgress(event);\n          lastReportedProgress = percent;\n        }\n      }\n      chunks.push(value);\n      const bytesRemains = bytesDownloaded - bytesProcessed;\n      if (shared.totalDownloadBytes != undefined && bytesRemains > shared.rowLength * shared.chunkSize) {\n        let vertexCount = Math.floor(bytesRemains / shared.rowLength);\n        const concatenatedChunksbuffer = new Uint8Array(bytesRemains);\n        let offset = 0;\n        for (const chunk of chunks) {\n          concatenatedChunksbuffer.set(chunk, offset);\n          offset += chunk.length;\n        }\n        chunks.length = 0;\n        if (bytesRemains > vertexCount * shared.rowLength) {\n          const extra_data = new Uint8Array(bytesRemains - vertexCount * shared.rowLength);\n          extra_data.set(concatenatedChunksbuffer.subarray(bytesRemains - extra_data.length, bytesRemains), 0);\n          chunks.push(extra_data);\n        }\n        const buffer = new Uint8Array(vertexCount * shared.rowLength);\n        buffer.set(concatenatedChunksbuffer.subarray(0, buffer.byteLength), 0);\n        const matrices = pushDataBuffer(shared, buffer.buffer, vertexCount);\n        shared.worker.postMessage({\n          method: 'push',\n          src: shared.url,\n          length: shared.numVertices * 16,\n          matrices: matrices.buffer\n        }, [matrices.buffer]);\n        bytesProcessed += vertexCount * shared.rowLength;\n        if (shared.onProgress) {\n          const event = new ProgressEvent('progress', {\n            lengthComputable,\n            loaded: shared.totalDownloadBytes,\n            total: shared.totalDownloadBytes\n          });\n          shared.onProgress(event);\n        }\n      }\n    } catch (error) {\n      console.error(error);\n      break;\n    }\n  }\n  if (bytesDownloaded - bytesProcessed > 0) {\n    // Concatenate the chunks into a single Uint8Array\n    let concatenatedChunks = new Uint8Array(chunks.reduce((acc, chunk) => acc + chunk.length, 0));\n    let offset = 0;\n    for (const chunk of chunks) {\n      concatenatedChunks.set(chunk, offset);\n      offset += chunk.length;\n    }\n    let numVertices = Math.floor(concatenatedChunks.byteLength / shared.rowLength);\n    const matrices = pushDataBuffer(shared, concatenatedChunks.buffer, numVertices);\n    shared.worker.postMessage({\n      method: 'push',\n      src: shared.url,\n      length: numVertices * 16,\n      matrices: matrices.buffer\n    }, [matrices.buffer]);\n  }\n  shared.loaded = true;\n  shared.manager.itemEnd(shared.url);\n}\nfunction update(camera, shared, target, hashed) {\n  camera.updateMatrixWorld();\n  shared.gl.getCurrentViewport(target.viewport);\n  // @ts-ignore\n  target.material.viewport.x = target.viewport.z;\n  // @ts-ignore\n  target.material.viewport.y = target.viewport.w;\n  target.material.focal = target.viewport.w / 2.0 * Math.abs(camera.projectionMatrix.elements[5]);\n  if (target.ready) {\n    if (hashed && target.sorted) return;\n    target.ready = false;\n    const view = new Float32Array([target.modelViewMatrix.elements[2], -target.modelViewMatrix.elements[6], target.modelViewMatrix.elements[10], target.modelViewMatrix.elements[14]]);\n    shared.worker.postMessage({\n      method: 'sort',\n      src: shared.url,\n      key: target.uuid,\n      view: view.buffer,\n      hashed\n    }, [view.buffer]);\n    if (hashed && shared.loaded) target.sorted = true;\n  }\n}\nfunction connect(shared, target) {\n  if (!shared.loading) lazyLoad(shared);\n  target.ready = false;\n  target.pm = new THREE.Matrix4();\n  target.vm1 = new THREE.Matrix4();\n  target.vm2 = new THREE.Matrix4();\n  target.viewport = new THREE.Vector4();\n  let splatIndexArray = new Uint32Array(shared.bufferTextureWidth * shared.bufferTextureHeight);\n  const splatIndexes = new THREE.InstancedBufferAttribute(splatIndexArray, 1, false);\n  splatIndexes.setUsage(THREE.DynamicDrawUsage);\n  const geometry = target.geometry = new THREE.InstancedBufferGeometry();\n  const positionsArray = new Float32Array(6 * 3);\n  const positions = new THREE.BufferAttribute(positionsArray, 3);\n  geometry.setAttribute('position', positions);\n  positions.setXYZ(2, -2.0, 2.0, 0.0);\n  positions.setXYZ(1, 2.0, 2.0, 0.0);\n  positions.setXYZ(0, -2.0, -2.0, 0.0);\n  positions.setXYZ(5, -2.0, -2.0, 0.0);\n  positions.setXYZ(4, 2.0, 2.0, 0.0);\n  positions.setXYZ(3, 2.0, -2.0, 0.0);\n  positions.needsUpdate = true;\n  geometry.setAttribute('splatIndex', splatIndexes);\n  geometry.instanceCount = 1;\n  function listener(e) {\n    if (target && e.data.key === target.uuid) {\n      let indexes = new Uint32Array(e.data.indices);\n      // @ts-ignore\n      geometry.attributes.splatIndex.set(indexes);\n      geometry.attributes.splatIndex.needsUpdate = true;\n      geometry.instanceCount = indexes.length;\n      target.ready = true;\n    }\n  }\n  shared.worker.addEventListener('message', listener);\n  async function wait() {\n    while (true) {\n      const centerAndScaleTextureProperties = shared.gl.properties.get(shared.centerAndScaleTexture);\n      const covAndColorTextureProperties = shared.gl.properties.get(shared.covAndColorTexture);\n      if (centerAndScaleTextureProperties != null && centerAndScaleTextureProperties.__webglTexture && covAndColorTextureProperties != null && covAndColorTextureProperties.__webglTexture && shared.loadedVertexCount > 0) break;\n      await new Promise(resolve => setTimeout(resolve, 10));\n    }\n    target.ready = true;\n  }\n  wait();\n  return () => shared.worker.removeEventListener('message', listener);\n}\nfunction pushDataBuffer(shared, buffer, vertexCount) {\n  const context = shared.gl.getContext();\n  if (shared.loadedVertexCount + vertexCount > shared.maxVertexes) vertexCount = shared.maxVertexes - shared.loadedVertexCount;\n  if (vertexCount <= 0) throw 'Failed to parse file';\n  const u_buffer = new Uint8Array(buffer);\n  const f_buffer = new Float32Array(buffer);\n  const matrices = new Float32Array(vertexCount * 16);\n  const covAndColorData_uint8 = new Uint8Array(shared.covAndColorData.buffer);\n  const covAndColorData_int16 = new Int16Array(shared.covAndColorData.buffer);\n  for (let i = 0; i < vertexCount; i++) {\n    const quat = new THREE.Quaternion(-(u_buffer[32 * i + 28 + 1] - 128) / 128.0, (u_buffer[32 * i + 28 + 2] - 128) / 128.0, (u_buffer[32 * i + 28 + 3] - 128) / 128.0, -(u_buffer[32 * i + 28 + 0] - 128) / 128.0);\n    quat.invert();\n    const center = new THREE.Vector3(f_buffer[8 * i + 0], f_buffer[8 * i + 1], -f_buffer[8 * i + 2]);\n    const scale = new THREE.Vector3(f_buffer[8 * i + 3 + 0], f_buffer[8 * i + 3 + 1], f_buffer[8 * i + 3 + 2]);\n    const mtx = new THREE.Matrix4();\n    mtx.makeRotationFromQuaternion(quat);\n    mtx.transpose();\n    mtx.scale(scale);\n    const mtx_t = mtx.clone();\n    mtx.transpose();\n    mtx.premultiply(mtx_t);\n    mtx.setPosition(center);\n    const cov_indexes = [0, 1, 2, 5, 6, 10];\n    let max_value = 0.0;\n    for (let j = 0; j < cov_indexes.length; j++) if (Math.abs(mtx.elements[cov_indexes[j]]) > max_value) max_value = Math.abs(mtx.elements[cov_indexes[j]]);\n    let destOffset = shared.loadedVertexCount * 4 + i * 4;\n    shared.centerAndScaleData[destOffset + 0] = center.x;\n    shared.centerAndScaleData[destOffset + 1] = -center.y;\n    shared.centerAndScaleData[destOffset + 2] = center.z;\n    shared.centerAndScaleData[destOffset + 3] = max_value / 32767.0;\n    destOffset = shared.loadedVertexCount * 8 + i * 4 * 2;\n    for (let j = 0; j < cov_indexes.length; j++) covAndColorData_int16[destOffset + j] = mtx.elements[cov_indexes[j]] * 32767.0 / max_value;\n\n    // RGBA\n    destOffset = shared.loadedVertexCount * 16 + (i * 4 + 3) * 4;\n    const col = new THREE.Color(u_buffer[32 * i + 24 + 0] / 255, u_buffer[32 * i + 24 + 1] / 255, u_buffer[32 * i + 24 + 2] / 255);\n    col.convertSRGBToLinear();\n    covAndColorData_uint8[destOffset + 0] = col.r * 255;\n    covAndColorData_uint8[destOffset + 1] = col.g * 255;\n    covAndColorData_uint8[destOffset + 2] = col.b * 255;\n    covAndColorData_uint8[destOffset + 3] = u_buffer[32 * i + 24 + 3];\n\n    // Store scale and transparent to remove splat in sorting process\n    mtx.elements[15] = Math.max(scale.x, scale.y, scale.z) * u_buffer[32 * i + 24 + 3] / 255.0;\n    for (let j = 0; j < 16; j++) matrices[i * 16 + j] = mtx.elements[j];\n  }\n  while (vertexCount > 0) {\n    let width = 0;\n    let height = 0;\n    const xoffset = shared.loadedVertexCount % shared.bufferTextureWidth;\n    const yoffset = Math.floor(shared.loadedVertexCount / shared.bufferTextureWidth);\n    if (shared.loadedVertexCount % shared.bufferTextureWidth != 0) {\n      width = Math.min(shared.bufferTextureWidth, xoffset + vertexCount) - xoffset;\n      height = 1;\n    } else if (Math.floor(vertexCount / shared.bufferTextureWidth) > 0) {\n      width = shared.bufferTextureWidth;\n      height = Math.floor(vertexCount / shared.bufferTextureWidth);\n    } else {\n      width = vertexCount % shared.bufferTextureWidth;\n      height = 1;\n    }\n    const centerAndScaleTextureProperties = shared.gl.properties.get(shared.centerAndScaleTexture);\n    context.bindTexture(context.TEXTURE_2D, centerAndScaleTextureProperties.__webglTexture);\n    context.texSubImage2D(context.TEXTURE_2D, 0, xoffset, yoffset, width, height, context.RGBA, context.FLOAT, shared.centerAndScaleData, shared.loadedVertexCount * 4);\n    const covAndColorTextureProperties = shared.gl.properties.get(shared.covAndColorTexture);\n    context.bindTexture(context.TEXTURE_2D, covAndColorTextureProperties.__webglTexture);\n    context.texSubImage2D(context.TEXTURE_2D, 0, xoffset, yoffset, width, height,\n    // @ts-ignore\n    context.RGBA_INTEGER, context.UNSIGNED_INT, shared.covAndColorData, shared.loadedVertexCount * 4);\n    shared.gl.resetState();\n    shared.loadedVertexCount += width * height;\n    vertexCount -= width * height;\n  }\n  return matrices;\n}\nfunction Splat({\n  src,\n  toneMapped = false,\n  alphaTest = 0,\n  alphaHash = false,\n  chunkSize = 25000,\n  ...props\n}) {\n  extend({\n    SplatMaterial\n  });\n  const ref = React.useRef(null);\n  const gl = useThree(state => state.gl);\n  const camera = useThree(state => state.camera);\n\n  // Shared state, globally memoized, the same url re-uses the same daza\n  const shared = useLoader(SplatLoader, src, loader => {\n    loader.gl = gl;\n    loader.chunkSize = chunkSize;\n  });\n\n  // Listen to worker results, apply them to the target mesh\n  React.useLayoutEffect(() => shared.connect(ref.current), [src]);\n  // Update the worker\n  useFrame(() => shared.update(ref.current, camera, alphaHash));\n  return /*#__PURE__*/React.createElement(\"mesh\", _extends({\n    ref: ref,\n    frustumCulled: false\n  }, props), /*#__PURE__*/React.createElement(\"splatMaterial\", {\n    key: `${src}/${alphaTest}/${alphaHash}${SplatMaterial.key}`,\n    transparent: !alphaHash,\n    depthTest: true,\n    alphaTest: alphaHash ? 0 : alphaTest,\n    centerAndScaleTexture: shared.centerAndScaleTexture,\n    covAndColorTexture: shared.covAndColorTexture,\n    depthWrite: alphaHash ? true : alphaTest > 0,\n    blending: alphaHash ? THREE.NormalBlending : THREE.CustomBlending,\n    blendSrcAlpha: THREE.OneFactor,\n    alphaHash: !!alphaHash,\n    toneMapped: toneMapped\n  }));\n}\n\nexport { Splat };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}