{"ast":null,"code":"import _classCallCheck from \"C:/Users/Nayyu/Desktop/skibidai-public-build/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Nayyu/Desktop/skibidai-public-build/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"C:/Users/Nayyu/Desktop/skibidai-public-build/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/Nayyu/Desktop/skibidai-public-build/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { Loader, FileLoader, BufferGeometry, Float32BufferAttribute } from \"three\";\nvar PDBLoader = /*#__PURE__*/function (_Loader) {\n  _inherits(PDBLoader, _Loader);\n  var _super = _createSuper(PDBLoader);\n  function PDBLoader(manager) {\n    _classCallCheck(this, PDBLoader);\n    return _super.call(this, manager);\n  }\n  _createClass(PDBLoader, [{\n    key: \"load\",\n    value: function load(url, onLoad, onProgress, onError) {\n      var scope = this;\n      var loader = new FileLoader(scope.manager);\n      loader.setPath(scope.path);\n      loader.setRequestHeader(scope.requestHeader);\n      loader.setWithCredentials(scope.withCredentials);\n      loader.load(url, function (text) {\n        try {\n          onLoad(scope.parse(text));\n        } catch (e) {\n          if (onError) {\n            onError(e);\n          } else {\n            console.error(e);\n          }\n          scope.manager.itemError(url);\n        }\n      }, onProgress, onError);\n    }\n    // Based on CanvasMol PDB parser\n  }, {\n    key: \"parse\",\n    value: function parse(text) {\n      function trim(text2) {\n        return text2.replace(/^\\s\\s*/, \"\").replace(/\\s\\s*$/, \"\");\n      }\n      function capitalize(text2) {\n        return text2.charAt(0).toUpperCase() + text2.substr(1).toLowerCase();\n      }\n      function hash(s, e) {\n        return \"s\" + Math.min(s, e) + \"e\" + Math.max(s, e);\n      }\n      function parseBond(start, length, satom, i) {\n        var eatom = parseInt(lines[i].substr(start, length));\n        if (eatom) {\n          var h = hash(satom, eatom);\n          if (_bhash[h] === void 0) {\n            _bonds.push([satom - 1, eatom - 1, 1]);\n            _bhash[h] = _bonds.length - 1;\n          }\n        }\n      }\n      function buildGeometry() {\n        var build = {\n          geometryAtoms: new BufferGeometry(),\n          geometryBonds: new BufferGeometry(),\n          json: {\n            atoms: atoms\n          }\n        };\n        var geometryAtoms = build.geometryAtoms;\n        var geometryBonds = build.geometryBonds;\n        var verticesAtoms = [];\n        var colorsAtoms = [];\n        var verticesBonds = [];\n        for (var i = 0, l = atoms.length; i < l; i++) {\n          var atom = atoms[i];\n          var x = atom[0];\n          var y = atom[1];\n          var z = atom[2];\n          verticesAtoms.push(x, y, z);\n          var r = atom[3][0] / 255;\n          var g = atom[3][1] / 255;\n          var b = atom[3][2] / 255;\n          colorsAtoms.push(r, g, b);\n        }\n        for (var _i = 0, _l = _bonds.length; _i < _l; _i++) {\n          var bond = _bonds[_i];\n          var start = bond[0];\n          var end = bond[1];\n          var startAtom = _atomMap[start];\n          var endAtom = _atomMap[end];\n          var _x = startAtom[0];\n          var _y = startAtom[1];\n          var _z = startAtom[2];\n          verticesBonds.push(_x, _y, _z);\n          _x = endAtom[0];\n          _y = endAtom[1];\n          _z = endAtom[2];\n          verticesBonds.push(_x, _y, _z);\n        }\n        geometryAtoms.setAttribute(\"position\", new Float32BufferAttribute(verticesAtoms, 3));\n        geometryAtoms.setAttribute(\"color\", new Float32BufferAttribute(colorsAtoms, 3));\n        geometryBonds.setAttribute(\"position\", new Float32BufferAttribute(verticesBonds, 3));\n        return build;\n      }\n      var CPK = {\n        h: [255, 255, 255],\n        he: [217, 255, 255],\n        li: [204, 128, 255],\n        be: [194, 255, 0],\n        b: [255, 181, 181],\n        c: [144, 144, 144],\n        n: [48, 80, 248],\n        o: [255, 13, 13],\n        f: [144, 224, 80],\n        ne: [179, 227, 245],\n        na: [171, 92, 242],\n        mg: [138, 255, 0],\n        al: [191, 166, 166],\n        si: [240, 200, 160],\n        p: [255, 128, 0],\n        s: [255, 255, 48],\n        cl: [31, 240, 31],\n        ar: [128, 209, 227],\n        k: [143, 64, 212],\n        ca: [61, 255, 0],\n        sc: [230, 230, 230],\n        ti: [191, 194, 199],\n        v: [166, 166, 171],\n        cr: [138, 153, 199],\n        mn: [156, 122, 199],\n        fe: [224, 102, 51],\n        co: [240, 144, 160],\n        ni: [80, 208, 80],\n        cu: [200, 128, 51],\n        zn: [125, 128, 176],\n        ga: [194, 143, 143],\n        ge: [102, 143, 143],\n        as: [189, 128, 227],\n        se: [255, 161, 0],\n        br: [166, 41, 41],\n        kr: [92, 184, 209],\n        rb: [112, 46, 176],\n        sr: [0, 255, 0],\n        y: [148, 255, 255],\n        zr: [148, 224, 224],\n        nb: [115, 194, 201],\n        mo: [84, 181, 181],\n        tc: [59, 158, 158],\n        ru: [36, 143, 143],\n        rh: [10, 125, 140],\n        pd: [0, 105, 133],\n        ag: [192, 192, 192],\n        cd: [255, 217, 143],\n        in: [166, 117, 115],\n        sn: [102, 128, 128],\n        sb: [158, 99, 181],\n        te: [212, 122, 0],\n        i: [148, 0, 148],\n        xe: [66, 158, 176],\n        cs: [87, 23, 143],\n        ba: [0, 201, 0],\n        la: [112, 212, 255],\n        ce: [255, 255, 199],\n        pr: [217, 255, 199],\n        nd: [199, 255, 199],\n        pm: [163, 255, 199],\n        sm: [143, 255, 199],\n        eu: [97, 255, 199],\n        gd: [69, 255, 199],\n        tb: [48, 255, 199],\n        dy: [31, 255, 199],\n        ho: [0, 255, 156],\n        er: [0, 230, 117],\n        tm: [0, 212, 82],\n        yb: [0, 191, 56],\n        lu: [0, 171, 36],\n        hf: [77, 194, 255],\n        ta: [77, 166, 255],\n        w: [33, 148, 214],\n        re: [38, 125, 171],\n        os: [38, 102, 150],\n        ir: [23, 84, 135],\n        pt: [208, 208, 224],\n        au: [255, 209, 35],\n        hg: [184, 184, 208],\n        tl: [166, 84, 77],\n        pb: [87, 89, 97],\n        bi: [158, 79, 181],\n        po: [171, 92, 0],\n        at: [117, 79, 69],\n        rn: [66, 130, 150],\n        fr: [66, 0, 102],\n        ra: [0, 125, 0],\n        ac: [112, 171, 250],\n        th: [0, 186, 255],\n        pa: [0, 161, 255],\n        u: [0, 143, 255],\n        np: [0, 128, 255],\n        pu: [0, 107, 255],\n        am: [84, 92, 242],\n        cm: [120, 92, 227],\n        bk: [138, 79, 227],\n        cf: [161, 54, 212],\n        es: [179, 31, 212],\n        fm: [179, 31, 186],\n        md: [179, 13, 166],\n        no: [189, 13, 135],\n        lr: [199, 0, 102],\n        rf: [204, 0, 89],\n        db: [209, 0, 79],\n        sg: [217, 0, 69],\n        bh: [224, 0, 56],\n        hs: [230, 0, 46],\n        mt: [235, 0, 38],\n        ds: [235, 0, 38],\n        rg: [235, 0, 38],\n        cn: [235, 0, 38],\n        uut: [235, 0, 38],\n        uuq: [235, 0, 38],\n        uup: [235, 0, 38],\n        uuh: [235, 0, 38],\n        uus: [235, 0, 38],\n        uuo: [235, 0, 38]\n      };\n      var atoms = [];\n      var _bonds = [];\n      var _bhash = {};\n      var _atomMap = {};\n      var lines = text.split(\"\\n\");\n      for (var i = 0, l = lines.length; i < l; i++) {\n        if (lines[i].substr(0, 4) === \"ATOM\" || lines[i].substr(0, 6) === \"HETATM\") {\n          var x = parseFloat(lines[i].substr(30, 7));\n          var y = parseFloat(lines[i].substr(38, 7));\n          var z = parseFloat(lines[i].substr(46, 7));\n          var index = parseInt(lines[i].substr(6, 5)) - 1;\n          var e = trim(lines[i].substr(76, 2)).toLowerCase();\n          if (e === \"\") {\n            e = trim(lines[i].substr(12, 2)).toLowerCase();\n          }\n          var atomData = [x, y, z, CPK[e], capitalize(e)];\n          atoms.push(atomData);\n          _atomMap[index] = atomData;\n        } else if (lines[i].substr(0, 6) === \"CONECT\") {\n          var satom = parseInt(lines[i].substr(6, 5));\n          parseBond(11, 5, satom, i);\n          parseBond(16, 5, satom, i);\n          parseBond(21, 5, satom, i);\n          parseBond(26, 5, satom, i);\n        }\n      }\n      return buildGeometry();\n    }\n  }]);\n  return PDBLoader;\n}(Loader);\nexport { PDBLoader };","map":{"version":3,"names":["PDBLoader","_Loader","_inherits","_super","_createSuper","manager","_classCallCheck","call","_createClass","key","value","load","url","onLoad","onProgress","onError","scope","loader","FileLoader","setPath","path","setRequestHeader","requestHeader","setWithCredentials","withCredentials","text","parse","e","console","error","itemError","trim","text2","replace","capitalize","charAt","toUpperCase","substr","toLowerCase","hash","s","Math","min","max","parseBond","start","length","satom","i","eatom","parseInt","lines","h","_bhash","_bonds","push","buildGeometry","build","geometryAtoms","BufferGeometry","geometryBonds","json","atoms","verticesAtoms","colorsAtoms","verticesBonds","l","atom","x","y","z","r","g","b","bond","end","startAtom","_atomMap","endAtom","setAttribute","Float32BufferAttribute","CPK","he","li","be","c","n","o","f","ne","na","mg","al","si","p","cl","ar","k","ca","sc","ti","v","cr","mn","fe","co","ni","cu","zn","ga","ge","as","se","br","kr","rb","sr","zr","nb","mo","tc","ru","rh","pd","ag","cd","in","sn","sb","te","xe","cs","ba","la","ce","pr","nd","pm","sm","eu","gd","tb","dy","ho","er","tm","yb","lu","hf","ta","w","re","os","ir","pt","au","hg","tl","pb","bi","po","at","rn","fr","ra","ac","th","pa","u","np","pu","am","cm","bk","cf","es","fm","md","no","lr","rf","db","sg","bh","hs","mt","ds","rg","cn","uut","uuq","uup","uuh","uus","uuo","split","parseFloat","index","atomData","Loader"],"sources":["C:\\Users\\Nayyu\\Desktop\\skibidai-public-build\\node_modules\\src\\loaders\\PDBLoader.js"],"sourcesContent":["import { BufferGeometry, FileLoader, Float32BufferAttribute, Loader } from 'three'\n\nclass PDBLoader extends Loader {\n  constructor(manager) {\n    super(manager)\n  }\n\n  load(url, onLoad, onProgress, onError) {\n    const scope = this\n\n    const loader = new FileLoader(scope.manager)\n    loader.setPath(scope.path)\n    loader.setRequestHeader(scope.requestHeader)\n    loader.setWithCredentials(scope.withCredentials)\n    loader.load(\n      url,\n      function (text) {\n        try {\n          onLoad(scope.parse(text))\n        } catch (e) {\n          if (onError) {\n            onError(e)\n          } else {\n            console.error(e)\n          }\n\n          scope.manager.itemError(url)\n        }\n      },\n      onProgress,\n      onError,\n    )\n  }\n\n  // Based on CanvasMol PDB parser\n\n  parse(text) {\n    function trim(text) {\n      return text.replace(/^\\s\\s*/, '').replace(/\\s\\s*$/, '')\n    }\n\n    function capitalize(text) {\n      return text.charAt(0).toUpperCase() + text.substr(1).toLowerCase()\n    }\n\n    function hash(s, e) {\n      return 's' + Math.min(s, e) + 'e' + Math.max(s, e)\n    }\n\n    function parseBond(start, length, satom, i) {\n      const eatom = parseInt(lines[i].substr(start, length))\n\n      if (eatom) {\n        const h = hash(satom, eatom)\n\n        if (_bhash[h] === undefined) {\n          _bonds.push([satom - 1, eatom - 1, 1])\n          _bhash[h] = _bonds.length - 1\n        } else {\n          // doesn't really work as almost all PDBs\n          // have just normal bonds appearing multiple\n          // times instead of being double/triple bonds\n          // bonds[bhash[h]][2] += 1;\n        }\n      }\n    }\n\n    function buildGeometry() {\n      const build = {\n        geometryAtoms: new BufferGeometry(),\n        geometryBonds: new BufferGeometry(),\n        json: {\n          atoms: atoms,\n        },\n      }\n\n      const geometryAtoms = build.geometryAtoms\n      const geometryBonds = build.geometryBonds\n\n      const verticesAtoms = []\n      const colorsAtoms = []\n      const verticesBonds = []\n\n      // atoms\n\n      for (let i = 0, l = atoms.length; i < l; i++) {\n        const atom = atoms[i]\n\n        const x = atom[0]\n        const y = atom[1]\n        const z = atom[2]\n\n        verticesAtoms.push(x, y, z)\n\n        const r = atom[3][0] / 255\n        const g = atom[3][1] / 255\n        const b = atom[3][2] / 255\n\n        colorsAtoms.push(r, g, b)\n      }\n\n      // bonds\n\n      for (let i = 0, l = _bonds.length; i < l; i++) {\n        const bond = _bonds[i]\n\n        const start = bond[0]\n        const end = bond[1]\n\n        const startAtom = _atomMap[start]\n        const endAtom = _atomMap[end]\n\n        let x = startAtom[0]\n        let y = startAtom[1]\n        let z = startAtom[2]\n\n        verticesBonds.push(x, y, z)\n\n        x = endAtom[0]\n        y = endAtom[1]\n        z = endAtom[2]\n\n        verticesBonds.push(x, y, z)\n      }\n\n      // build geometry\n\n      geometryAtoms.setAttribute('position', new Float32BufferAttribute(verticesAtoms, 3))\n      geometryAtoms.setAttribute('color', new Float32BufferAttribute(colorsAtoms, 3))\n\n      geometryBonds.setAttribute('position', new Float32BufferAttribute(verticesBonds, 3))\n\n      return build\n    }\n\n    const CPK = {\n      h: [255, 255, 255],\n      he: [217, 255, 255],\n      li: [204, 128, 255],\n      be: [194, 255, 0],\n      b: [255, 181, 181],\n      c: [144, 144, 144],\n      n: [48, 80, 248],\n      o: [255, 13, 13],\n      f: [144, 224, 80],\n      ne: [179, 227, 245],\n      na: [171, 92, 242],\n      mg: [138, 255, 0],\n      al: [191, 166, 166],\n      si: [240, 200, 160],\n      p: [255, 128, 0],\n      s: [255, 255, 48],\n      cl: [31, 240, 31],\n      ar: [128, 209, 227],\n      k: [143, 64, 212],\n      ca: [61, 255, 0],\n      sc: [230, 230, 230],\n      ti: [191, 194, 199],\n      v: [166, 166, 171],\n      cr: [138, 153, 199],\n      mn: [156, 122, 199],\n      fe: [224, 102, 51],\n      co: [240, 144, 160],\n      ni: [80, 208, 80],\n      cu: [200, 128, 51],\n      zn: [125, 128, 176],\n      ga: [194, 143, 143],\n      ge: [102, 143, 143],\n      as: [189, 128, 227],\n      se: [255, 161, 0],\n      br: [166, 41, 41],\n      kr: [92, 184, 209],\n      rb: [112, 46, 176],\n      sr: [0, 255, 0],\n      y: [148, 255, 255],\n      zr: [148, 224, 224],\n      nb: [115, 194, 201],\n      mo: [84, 181, 181],\n      tc: [59, 158, 158],\n      ru: [36, 143, 143],\n      rh: [10, 125, 140],\n      pd: [0, 105, 133],\n      ag: [192, 192, 192],\n      cd: [255, 217, 143],\n      in: [166, 117, 115],\n      sn: [102, 128, 128],\n      sb: [158, 99, 181],\n      te: [212, 122, 0],\n      i: [148, 0, 148],\n      xe: [66, 158, 176],\n      cs: [87, 23, 143],\n      ba: [0, 201, 0],\n      la: [112, 212, 255],\n      ce: [255, 255, 199],\n      pr: [217, 255, 199],\n      nd: [199, 255, 199],\n      pm: [163, 255, 199],\n      sm: [143, 255, 199],\n      eu: [97, 255, 199],\n      gd: [69, 255, 199],\n      tb: [48, 255, 199],\n      dy: [31, 255, 199],\n      ho: [0, 255, 156],\n      er: [0, 230, 117],\n      tm: [0, 212, 82],\n      yb: [0, 191, 56],\n      lu: [0, 171, 36],\n      hf: [77, 194, 255],\n      ta: [77, 166, 255],\n      w: [33, 148, 214],\n      re: [38, 125, 171],\n      os: [38, 102, 150],\n      ir: [23, 84, 135],\n      pt: [208, 208, 224],\n      au: [255, 209, 35],\n      hg: [184, 184, 208],\n      tl: [166, 84, 77],\n      pb: [87, 89, 97],\n      bi: [158, 79, 181],\n      po: [171, 92, 0],\n      at: [117, 79, 69],\n      rn: [66, 130, 150],\n      fr: [66, 0, 102],\n      ra: [0, 125, 0],\n      ac: [112, 171, 250],\n      th: [0, 186, 255],\n      pa: [0, 161, 255],\n      u: [0, 143, 255],\n      np: [0, 128, 255],\n      pu: [0, 107, 255],\n      am: [84, 92, 242],\n      cm: [120, 92, 227],\n      bk: [138, 79, 227],\n      cf: [161, 54, 212],\n      es: [179, 31, 212],\n      fm: [179, 31, 186],\n      md: [179, 13, 166],\n      no: [189, 13, 135],\n      lr: [199, 0, 102],\n      rf: [204, 0, 89],\n      db: [209, 0, 79],\n      sg: [217, 0, 69],\n      bh: [224, 0, 56],\n      hs: [230, 0, 46],\n      mt: [235, 0, 38],\n      ds: [235, 0, 38],\n      rg: [235, 0, 38],\n      cn: [235, 0, 38],\n      uut: [235, 0, 38],\n      uuq: [235, 0, 38],\n      uup: [235, 0, 38],\n      uuh: [235, 0, 38],\n      uus: [235, 0, 38],\n      uuo: [235, 0, 38],\n    }\n\n    const atoms = []\n\n    const _bonds = []\n    const _bhash = {}\n    const _atomMap = {}\n\n    // parse\n\n    const lines = text.split('\\n')\n\n    for (let i = 0, l = lines.length; i < l; i++) {\n      if (lines[i].substr(0, 4) === 'ATOM' || lines[i].substr(0, 6) === 'HETATM') {\n        const x = parseFloat(lines[i].substr(30, 7))\n        const y = parseFloat(lines[i].substr(38, 7))\n        const z = parseFloat(lines[i].substr(46, 7))\n        const index = parseInt(lines[i].substr(6, 5)) - 1\n\n        let e = trim(lines[i].substr(76, 2)).toLowerCase()\n\n        if (e === '') {\n          e = trim(lines[i].substr(12, 2)).toLowerCase()\n        }\n\n        const atomData = [x, y, z, CPK[e], capitalize(e)]\n\n        atoms.push(atomData)\n        _atomMap[index] = atomData\n      } else if (lines[i].substr(0, 6) === 'CONECT') {\n        const satom = parseInt(lines[i].substr(6, 5))\n\n        parseBond(11, 5, satom, i)\n        parseBond(16, 5, satom, i)\n        parseBond(21, 5, satom, i)\n        parseBond(26, 5, satom, i)\n      }\n    }\n\n    // build and return geometry\n\n    return buildGeometry()\n  }\n}\n\nexport { PDBLoader }\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}