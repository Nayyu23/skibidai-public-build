{"ast":null,"code":"import _createClass from \"C:/Users/Nayyu/Desktop/skibidai-public-build/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"C:/Users/Nayyu/Desktop/skibidai-public-build/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _assertThisInitialized from \"C:/Users/Nayyu/Desktop/skibidai-public-build/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"C:/Users/Nayyu/Desktop/skibidai-public-build/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/Nayyu/Desktop/skibidai-public-build/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nvar __defProp = Object.defineProperty;\nvar __defNormalProp = function __defNormalProp(obj, key, value) {\n  return key in obj ? __defProp(obj, key, {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: value\n  }) : obj[key] = value;\n};\nvar __publicField = function __publicField(obj, key, value) {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nimport { Ray, Plane, EventDispatcher, Vector3, MOUSE, TOUCH, Quaternion, PerspectiveCamera, OrthographicCamera, Spherical, Vector2 } from \"three\";\nvar _ray = new Ray();\nvar _plane = new Plane();\nvar TILT_LIMIT = Math.cos(70 * (Math.PI / 180));\nvar moduloWrapAround = function moduloWrapAround(offset, capacity) {\n  return (offset % capacity + capacity) % capacity;\n};\nvar OrbitControls = /*#__PURE__*/function (_EventDispatcher) {\n  _inherits(OrbitControls, _EventDispatcher);\n  var _super = _createSuper(OrbitControls);\n  function OrbitControls(object, domElement) {\n    var _this;\n    _classCallCheck(this, OrbitControls);\n    _this = _super.call(this);\n    __publicField(_assertThisInitialized(_this), \"object\");\n    __publicField(_assertThisInitialized(_this), \"domElement\");\n    // Set to false to disable this control\n    __publicField(_assertThisInitialized(_this), \"enabled\", true);\n    // \"target\" sets the location of focus, where the object orbits around\n    __publicField(_assertThisInitialized(_this), \"target\", new Vector3());\n    // How far you can dolly in and out ( PerspectiveCamera only )\n    __publicField(_assertThisInitialized(_this), \"minDistance\", 0);\n    __publicField(_assertThisInitialized(_this), \"maxDistance\", Infinity);\n    // How far you can zoom in and out ( OrthographicCamera only )\n    __publicField(_assertThisInitialized(_this), \"minZoom\", 0);\n    __publicField(_assertThisInitialized(_this), \"maxZoom\", Infinity);\n    // How far you can orbit vertically, upper and lower limits.\n    // Range is 0 to Math.PI radians.\n    __publicField(_assertThisInitialized(_this), \"minPolarAngle\", 0);\n    // radians\n    __publicField(_assertThisInitialized(_this), \"maxPolarAngle\", Math.PI);\n    // radians\n    // How far you can orbit horizontally, upper and lower limits.\n    // If set, the interval [ min, max ] must be a sub-interval of [ - 2 PI, 2 PI ], with ( max - min < 2 PI )\n    __publicField(_assertThisInitialized(_this), \"minAzimuthAngle\", -Infinity);\n    // radians\n    __publicField(_assertThisInitialized(_this), \"maxAzimuthAngle\", Infinity);\n    // radians\n    // Set to true to enable damping (inertia)\n    // If damping is enabled, you must call controls.update() in your animation loop\n    __publicField(_assertThisInitialized(_this), \"enableDamping\", false);\n    __publicField(_assertThisInitialized(_this), \"dampingFactor\", 0.05);\n    // This option actually enables dollying in and out; left as \"zoom\" for backwards compatibility.\n    // Set to false to disable zooming\n    __publicField(_assertThisInitialized(_this), \"enableZoom\", true);\n    __publicField(_assertThisInitialized(_this), \"zoomSpeed\", 1);\n    // Set to false to disable rotating\n    __publicField(_assertThisInitialized(_this), \"enableRotate\", true);\n    __publicField(_assertThisInitialized(_this), \"rotateSpeed\", 1);\n    // Set to false to disable panning\n    __publicField(_assertThisInitialized(_this), \"enablePan\", true);\n    __publicField(_assertThisInitialized(_this), \"panSpeed\", 1);\n    __publicField(_assertThisInitialized(_this), \"screenSpacePanning\", true);\n    // if false, pan orthogonal to world-space direction camera.up\n    __publicField(_assertThisInitialized(_this), \"keyPanSpeed\", 7);\n    // pixels moved per arrow key push\n    __publicField(_assertThisInitialized(_this), \"zoomToCursor\", false);\n    // Set to true to automatically rotate around the target\n    // If auto-rotate is enabled, you must call controls.update() in your animation loop\n    __publicField(_assertThisInitialized(_this), \"autoRotate\", false);\n    __publicField(_assertThisInitialized(_this), \"autoRotateSpeed\", 2);\n    // 30 seconds per orbit when fps is 60\n    __publicField(_assertThisInitialized(_this), \"reverseOrbit\", false);\n    // true if you want to reverse the orbit to mouse drag from left to right = orbits left\n    __publicField(_assertThisInitialized(_this), \"reverseHorizontalOrbit\", false);\n    // true if you want to reverse the horizontal orbit direction\n    __publicField(_assertThisInitialized(_this), \"reverseVerticalOrbit\", false);\n    // true if you want to reverse the vertical orbit direction\n    // The four arrow keys\n    __publicField(_assertThisInitialized(_this), \"keys\", {\n      LEFT: \"ArrowLeft\",\n      UP: \"ArrowUp\",\n      RIGHT: \"ArrowRight\",\n      BOTTOM: \"ArrowDown\"\n    });\n    // Mouse buttons\n    __publicField(_assertThisInitialized(_this), \"mouseButtons\", {\n      LEFT: MOUSE.ROTATE,\n      MIDDLE: MOUSE.DOLLY,\n      RIGHT: MOUSE.PAN\n    });\n    // Touch fingers\n    __publicField(_assertThisInitialized(_this), \"touches\", {\n      ONE: TOUCH.ROTATE,\n      TWO: TOUCH.DOLLY_PAN\n    });\n    __publicField(_assertThisInitialized(_this), \"target0\");\n    __publicField(_assertThisInitialized(_this), \"position0\");\n    __publicField(_assertThisInitialized(_this), \"zoom0\");\n    // the target DOM element for key events\n    __publicField(_assertThisInitialized(_this), \"_domElementKeyEvents\", null);\n    __publicField(_assertThisInitialized(_this), \"getPolarAngle\");\n    __publicField(_assertThisInitialized(_this), \"getAzimuthalAngle\");\n    __publicField(_assertThisInitialized(_this), \"setPolarAngle\");\n    __publicField(_assertThisInitialized(_this), \"setAzimuthalAngle\");\n    __publicField(_assertThisInitialized(_this), \"getDistance\");\n    __publicField(_assertThisInitialized(_this), \"listenToKeyEvents\");\n    __publicField(_assertThisInitialized(_this), \"stopListenToKeyEvents\");\n    __publicField(_assertThisInitialized(_this), \"saveState\");\n    __publicField(_assertThisInitialized(_this), \"reset\");\n    __publicField(_assertThisInitialized(_this), \"update\");\n    __publicField(_assertThisInitialized(_this), \"connect\");\n    __publicField(_assertThisInitialized(_this), \"dispose\");\n    _this.object = object;\n    _this.domElement = domElement;\n    _this.target0 = _this.target.clone();\n    _this.position0 = _this.object.position.clone();\n    _this.zoom0 = _this.object.zoom;\n    _this.getPolarAngle = function () {\n      return spherical.phi;\n    };\n    _this.getAzimuthalAngle = function () {\n      return spherical.theta;\n    };\n    _this.setPolarAngle = function (value) {\n      var phi = moduloWrapAround(value, 2 * Math.PI);\n      var currentPhi = spherical.phi;\n      if (currentPhi < 0) currentPhi += 2 * Math.PI;\n      if (phi < 0) phi += 2 * Math.PI;\n      var phiDist = Math.abs(phi - currentPhi);\n      if (2 * Math.PI - phiDist < phiDist) {\n        if (phi < currentPhi) {\n          phi += 2 * Math.PI;\n        } else {\n          currentPhi += 2 * Math.PI;\n        }\n      }\n      sphericalDelta.phi = phi - currentPhi;\n      scope.update();\n    };\n    _this.setAzimuthalAngle = function (value) {\n      var theta = moduloWrapAround(value, 2 * Math.PI);\n      var currentTheta = spherical.theta;\n      if (currentTheta < 0) currentTheta += 2 * Math.PI;\n      if (theta < 0) theta += 2 * Math.PI;\n      var thetaDist = Math.abs(theta - currentTheta);\n      if (2 * Math.PI - thetaDist < thetaDist) {\n        if (theta < currentTheta) {\n          theta += 2 * Math.PI;\n        } else {\n          currentTheta += 2 * Math.PI;\n        }\n      }\n      sphericalDelta.theta = theta - currentTheta;\n      scope.update();\n    };\n    _this.getDistance = function () {\n      return scope.object.position.distanceTo(scope.target);\n    };\n    _this.listenToKeyEvents = function (domElement2) {\n      domElement2.addEventListener(\"keydown\", onKeyDown);\n      _this._domElementKeyEvents = domElement2;\n    };\n    _this.stopListenToKeyEvents = function () {\n      _this._domElementKeyEvents.removeEventListener(\"keydown\", onKeyDown);\n      _this._domElementKeyEvents = null;\n    };\n    _this.saveState = function () {\n      scope.target0.copy(scope.target);\n      scope.position0.copy(scope.object.position);\n      scope.zoom0 = scope.object.zoom;\n    };\n    _this.reset = function () {\n      scope.target.copy(scope.target0);\n      scope.object.position.copy(scope.position0);\n      scope.object.zoom = scope.zoom0;\n      scope.object.updateProjectionMatrix();\n      scope.dispatchEvent(changeEvent);\n      scope.update();\n      state = STATE.NONE;\n    };\n    _this.update = function () {\n      var offset = new Vector3();\n      var up = new Vector3(0, 1, 0);\n      var quat = new Quaternion().setFromUnitVectors(object.up, up);\n      var quatInverse = quat.clone().invert();\n      var lastPosition = new Vector3();\n      var lastQuaternion = new Quaternion();\n      var twoPI = 2 * Math.PI;\n      return function update() {\n        var position = scope.object.position;\n        quat.setFromUnitVectors(object.up, up);\n        quatInverse.copy(quat).invert();\n        offset.copy(position).sub(scope.target);\n        offset.applyQuaternion(quat);\n        spherical.setFromVector3(offset);\n        if (scope.autoRotate && state === STATE.NONE) {\n          rotateLeft(getAutoRotationAngle());\n        }\n        if (scope.enableDamping) {\n          spherical.theta += sphericalDelta.theta * scope.dampingFactor;\n          spherical.phi += sphericalDelta.phi * scope.dampingFactor;\n        } else {\n          spherical.theta += sphericalDelta.theta;\n          spherical.phi += sphericalDelta.phi;\n        }\n        var min = scope.minAzimuthAngle;\n        var max = scope.maxAzimuthAngle;\n        if (isFinite(min) && isFinite(max)) {\n          if (min < -Math.PI) min += twoPI;else if (min > Math.PI) min -= twoPI;\n          if (max < -Math.PI) max += twoPI;else if (max > Math.PI) max -= twoPI;\n          if (min <= max) {\n            spherical.theta = Math.max(min, Math.min(max, spherical.theta));\n          } else {\n            spherical.theta = spherical.theta > (min + max) / 2 ? Math.max(min, spherical.theta) : Math.min(max, spherical.theta);\n          }\n        }\n        spherical.phi = Math.max(scope.minPolarAngle, Math.min(scope.maxPolarAngle, spherical.phi));\n        spherical.makeSafe();\n        if (scope.enableDamping === true) {\n          scope.target.addScaledVector(panOffset, scope.dampingFactor);\n        } else {\n          scope.target.add(panOffset);\n        }\n        if (scope.zoomToCursor && performCursorZoom || scope.object.isOrthographicCamera) {\n          spherical.radius = clampDistance(spherical.radius);\n        } else {\n          spherical.radius = clampDistance(spherical.radius * scale);\n        }\n        offset.setFromSpherical(spherical);\n        offset.applyQuaternion(quatInverse);\n        position.copy(scope.target).add(offset);\n        if (!scope.object.matrixAutoUpdate) scope.object.updateMatrix();\n        scope.object.lookAt(scope.target);\n        if (scope.enableDamping === true) {\n          sphericalDelta.theta *= 1 - scope.dampingFactor;\n          sphericalDelta.phi *= 1 - scope.dampingFactor;\n          panOffset.multiplyScalar(1 - scope.dampingFactor);\n        } else {\n          sphericalDelta.set(0, 0, 0);\n          panOffset.set(0, 0, 0);\n        }\n        var zoomChanged = false;\n        if (scope.zoomToCursor && performCursorZoom) {\n          var newRadius = null;\n          if (scope.object instanceof PerspectiveCamera && scope.object.isPerspectiveCamera) {\n            var prevRadius = offset.length();\n            newRadius = clampDistance(prevRadius * scale);\n            var radiusDelta = prevRadius - newRadius;\n            scope.object.position.addScaledVector(dollyDirection, radiusDelta);\n            scope.object.updateMatrixWorld();\n          } else if (scope.object.isOrthographicCamera) {\n            var mouseBefore = new Vector3(mouse.x, mouse.y, 0);\n            mouseBefore.unproject(scope.object);\n            scope.object.zoom = Math.max(scope.minZoom, Math.min(scope.maxZoom, scope.object.zoom / scale));\n            scope.object.updateProjectionMatrix();\n            zoomChanged = true;\n            var mouseAfter = new Vector3(mouse.x, mouse.y, 0);\n            mouseAfter.unproject(scope.object);\n            scope.object.position.sub(mouseAfter).add(mouseBefore);\n            scope.object.updateMatrixWorld();\n            newRadius = offset.length();\n          } else {\n            console.warn(\"WARNING: OrbitControls.js encountered an unknown camera type - zoom to cursor disabled.\");\n            scope.zoomToCursor = false;\n          }\n          if (newRadius !== null) {\n            if (scope.screenSpacePanning) {\n              scope.target.set(0, 0, -1).transformDirection(scope.object.matrix).multiplyScalar(newRadius).add(scope.object.position);\n            } else {\n              _ray.origin.copy(scope.object.position);\n              _ray.direction.set(0, 0, -1).transformDirection(scope.object.matrix);\n              if (Math.abs(scope.object.up.dot(_ray.direction)) < TILT_LIMIT) {\n                object.lookAt(scope.target);\n              } else {\n                _plane.setFromNormalAndCoplanarPoint(scope.object.up, scope.target);\n                _ray.intersectPlane(_plane, scope.target);\n              }\n            }\n          }\n        } else if (scope.object instanceof OrthographicCamera && scope.object.isOrthographicCamera) {\n          zoomChanged = scale !== 1;\n          if (zoomChanged) {\n            scope.object.zoom = Math.max(scope.minZoom, Math.min(scope.maxZoom, scope.object.zoom / scale));\n            scope.object.updateProjectionMatrix();\n          }\n        }\n        scale = 1;\n        performCursorZoom = false;\n        if (zoomChanged || lastPosition.distanceToSquared(scope.object.position) > EPS || 8 * (1 - lastQuaternion.dot(scope.object.quaternion)) > EPS) {\n          scope.dispatchEvent(changeEvent);\n          lastPosition.copy(scope.object.position);\n          lastQuaternion.copy(scope.object.quaternion);\n          zoomChanged = false;\n          return true;\n        }\n        return false;\n      };\n    }();\n    _this.connect = function (domElement2) {\n      scope.domElement = domElement2;\n      scope.domElement.style.touchAction = \"none\";\n      scope.domElement.addEventListener(\"contextmenu\", onContextMenu);\n      scope.domElement.addEventListener(\"pointerdown\", onPointerDown);\n      scope.domElement.addEventListener(\"pointercancel\", onPointerUp);\n      scope.domElement.addEventListener(\"wheel\", onMouseWheel);\n    };\n    _this.dispose = function () {\n      var _a, _b, _c, _d, _e, _f;\n      if (scope.domElement) {\n        scope.domElement.style.touchAction = \"auto\";\n      }\n      (_a = scope.domElement) == null ? void 0 : _a.removeEventListener(\"contextmenu\", onContextMenu);\n      (_b = scope.domElement) == null ? void 0 : _b.removeEventListener(\"pointerdown\", onPointerDown);\n      (_c = scope.domElement) == null ? void 0 : _c.removeEventListener(\"pointercancel\", onPointerUp);\n      (_d = scope.domElement) == null ? void 0 : _d.removeEventListener(\"wheel\", onMouseWheel);\n      (_e = scope.domElement) == null ? void 0 : _e.ownerDocument.removeEventListener(\"pointermove\", onPointerMove);\n      (_f = scope.domElement) == null ? void 0 : _f.ownerDocument.removeEventListener(\"pointerup\", onPointerUp);\n      if (scope._domElementKeyEvents !== null) {\n        scope._domElementKeyEvents.removeEventListener(\"keydown\", onKeyDown);\n      }\n    };\n    var scope = _assertThisInitialized(_this);\n    var changeEvent = {\n      type: \"change\"\n    };\n    var startEvent = {\n      type: \"start\"\n    };\n    var endEvent = {\n      type: \"end\"\n    };\n    var STATE = {\n      NONE: -1,\n      ROTATE: 0,\n      DOLLY: 1,\n      PAN: 2,\n      TOUCH_ROTATE: 3,\n      TOUCH_PAN: 4,\n      TOUCH_DOLLY_PAN: 5,\n      TOUCH_DOLLY_ROTATE: 6\n    };\n    var state = STATE.NONE;\n    var EPS = 1e-6;\n    var spherical = new Spherical();\n    var sphericalDelta = new Spherical();\n    var scale = 1;\n    var panOffset = new Vector3();\n    var rotateStart = new Vector2();\n    var rotateEnd = new Vector2();\n    var rotateDelta = new Vector2();\n    var panStart = new Vector2();\n    var panEnd = new Vector2();\n    var panDelta = new Vector2();\n    var dollyStart = new Vector2();\n    var dollyEnd = new Vector2();\n    var dollyDelta = new Vector2();\n    var dollyDirection = new Vector3();\n    var mouse = new Vector2();\n    var performCursorZoom = false;\n    var pointers = [];\n    var pointerPositions = {};\n    function getAutoRotationAngle() {\n      return 2 * Math.PI / 60 / 60 * scope.autoRotateSpeed;\n    }\n    function getZoomScale() {\n      return Math.pow(0.95, scope.zoomSpeed);\n    }\n    function rotateLeft(angle) {\n      if (scope.reverseOrbit || scope.reverseHorizontalOrbit) {\n        sphericalDelta.theta += angle;\n      } else {\n        sphericalDelta.theta -= angle;\n      }\n    }\n    function rotateUp(angle) {\n      if (scope.reverseOrbit || scope.reverseVerticalOrbit) {\n        sphericalDelta.phi += angle;\n      } else {\n        sphericalDelta.phi -= angle;\n      }\n    }\n    var panLeft = function () {\n      var v = new Vector3();\n      return function panLeft2(distance, objectMatrix) {\n        v.setFromMatrixColumn(objectMatrix, 0);\n        v.multiplyScalar(-distance);\n        panOffset.add(v);\n      };\n    }();\n    var panUp = function () {\n      var v = new Vector3();\n      return function panUp2(distance, objectMatrix) {\n        if (scope.screenSpacePanning === true) {\n          v.setFromMatrixColumn(objectMatrix, 1);\n        } else {\n          v.setFromMatrixColumn(objectMatrix, 0);\n          v.crossVectors(scope.object.up, v);\n        }\n        v.multiplyScalar(distance);\n        panOffset.add(v);\n      };\n    }();\n    var pan = function () {\n      var offset = new Vector3();\n      return function pan2(deltaX, deltaY) {\n        var element = scope.domElement;\n        if (element && scope.object instanceof PerspectiveCamera && scope.object.isPerspectiveCamera) {\n          var position = scope.object.position;\n          offset.copy(position).sub(scope.target);\n          var targetDistance = offset.length();\n          targetDistance *= Math.tan(scope.object.fov / 2 * Math.PI / 180);\n          panLeft(2 * deltaX * targetDistance / element.clientHeight, scope.object.matrix);\n          panUp(2 * deltaY * targetDistance / element.clientHeight, scope.object.matrix);\n        } else if (element && scope.object instanceof OrthographicCamera && scope.object.isOrthographicCamera) {\n          panLeft(deltaX * (scope.object.right - scope.object.left) / scope.object.zoom / element.clientWidth, scope.object.matrix);\n          panUp(deltaY * (scope.object.top - scope.object.bottom) / scope.object.zoom / element.clientHeight, scope.object.matrix);\n        } else {\n          console.warn(\"WARNING: OrbitControls.js encountered an unknown camera type - pan disabled.\");\n          scope.enablePan = false;\n        }\n      };\n    }();\n    function dollyOut(dollyScale) {\n      if (scope.object instanceof PerspectiveCamera && scope.object.isPerspectiveCamera || scope.object instanceof OrthographicCamera && scope.object.isOrthographicCamera) {\n        scale /= dollyScale;\n      } else {\n        console.warn(\"WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.\");\n        scope.enableZoom = false;\n      }\n    }\n    function dollyIn(dollyScale) {\n      if (scope.object instanceof PerspectiveCamera && scope.object.isPerspectiveCamera || scope.object instanceof OrthographicCamera && scope.object.isOrthographicCamera) {\n        scale *= dollyScale;\n      } else {\n        console.warn(\"WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.\");\n        scope.enableZoom = false;\n      }\n    }\n    function updateMouseParameters(event) {\n      if (!scope.zoomToCursor || !scope.domElement) {\n        return;\n      }\n      performCursorZoom = true;\n      var rect = scope.domElement.getBoundingClientRect();\n      var x = event.clientX - rect.left;\n      var y = event.clientY - rect.top;\n      var w = rect.width;\n      var h = rect.height;\n      mouse.x = x / w * 2 - 1;\n      mouse.y = -(y / h) * 2 + 1;\n      dollyDirection.set(mouse.x, mouse.y, 1).unproject(scope.object).sub(scope.object.position).normalize();\n    }\n    function clampDistance(dist) {\n      return Math.max(scope.minDistance, Math.min(scope.maxDistance, dist));\n    }\n    function handleMouseDownRotate(event) {\n      rotateStart.set(event.clientX, event.clientY);\n    }\n    function handleMouseDownDolly(event) {\n      updateMouseParameters(event);\n      dollyStart.set(event.clientX, event.clientY);\n    }\n    function handleMouseDownPan(event) {\n      panStart.set(event.clientX, event.clientY);\n    }\n    function handleMouseMoveRotate(event) {\n      rotateEnd.set(event.clientX, event.clientY);\n      rotateDelta.subVectors(rotateEnd, rotateStart).multiplyScalar(scope.rotateSpeed);\n      var element = scope.domElement;\n      if (element) {\n        rotateLeft(2 * Math.PI * rotateDelta.x / element.clientHeight);\n        rotateUp(2 * Math.PI * rotateDelta.y / element.clientHeight);\n      }\n      rotateStart.copy(rotateEnd);\n      scope.update();\n    }\n    function handleMouseMoveDolly(event) {\n      dollyEnd.set(event.clientX, event.clientY);\n      dollyDelta.subVectors(dollyEnd, dollyStart);\n      if (dollyDelta.y > 0) {\n        dollyOut(getZoomScale());\n      } else if (dollyDelta.y < 0) {\n        dollyIn(getZoomScale());\n      }\n      dollyStart.copy(dollyEnd);\n      scope.update();\n    }\n    function handleMouseMovePan(event) {\n      panEnd.set(event.clientX, event.clientY);\n      panDelta.subVectors(panEnd, panStart).multiplyScalar(scope.panSpeed);\n      pan(panDelta.x, panDelta.y);\n      panStart.copy(panEnd);\n      scope.update();\n    }\n    function handleMouseWheel(event) {\n      updateMouseParameters(event);\n      if (event.deltaY < 0) {\n        dollyIn(getZoomScale());\n      } else if (event.deltaY > 0) {\n        dollyOut(getZoomScale());\n      }\n      scope.update();\n    }\n    function handleKeyDown(event) {\n      var needsUpdate = false;\n      switch (event.code) {\n        case scope.keys.UP:\n          pan(0, scope.keyPanSpeed);\n          needsUpdate = true;\n          break;\n        case scope.keys.BOTTOM:\n          pan(0, -scope.keyPanSpeed);\n          needsUpdate = true;\n          break;\n        case scope.keys.LEFT:\n          pan(scope.keyPanSpeed, 0);\n          needsUpdate = true;\n          break;\n        case scope.keys.RIGHT:\n          pan(-scope.keyPanSpeed, 0);\n          needsUpdate = true;\n          break;\n      }\n      if (needsUpdate) {\n        event.preventDefault();\n        scope.update();\n      }\n    }\n    function handleTouchStartRotate() {\n      if (pointers.length == 1) {\n        rotateStart.set(pointers[0].pageX, pointers[0].pageY);\n      } else {\n        var x = 0.5 * (pointers[0].pageX + pointers[1].pageX);\n        var y = 0.5 * (pointers[0].pageY + pointers[1].pageY);\n        rotateStart.set(x, y);\n      }\n    }\n    function handleTouchStartPan() {\n      if (pointers.length == 1) {\n        panStart.set(pointers[0].pageX, pointers[0].pageY);\n      } else {\n        var x = 0.5 * (pointers[0].pageX + pointers[1].pageX);\n        var y = 0.5 * (pointers[0].pageY + pointers[1].pageY);\n        panStart.set(x, y);\n      }\n    }\n    function handleTouchStartDolly() {\n      var dx = pointers[0].pageX - pointers[1].pageX;\n      var dy = pointers[0].pageY - pointers[1].pageY;\n      var distance = Math.sqrt(dx * dx + dy * dy);\n      dollyStart.set(0, distance);\n    }\n    function handleTouchStartDollyPan() {\n      if (scope.enableZoom) handleTouchStartDolly();\n      if (scope.enablePan) handleTouchStartPan();\n    }\n    function handleTouchStartDollyRotate() {\n      if (scope.enableZoom) handleTouchStartDolly();\n      if (scope.enableRotate) handleTouchStartRotate();\n    }\n    function handleTouchMoveRotate(event) {\n      if (pointers.length == 1) {\n        rotateEnd.set(event.pageX, event.pageY);\n      } else {\n        var position = getSecondPointerPosition(event);\n        var x = 0.5 * (event.pageX + position.x);\n        var y = 0.5 * (event.pageY + position.y);\n        rotateEnd.set(x, y);\n      }\n      rotateDelta.subVectors(rotateEnd, rotateStart).multiplyScalar(scope.rotateSpeed);\n      var element = scope.domElement;\n      if (element) {\n        rotateLeft(2 * Math.PI * rotateDelta.x / element.clientHeight);\n        rotateUp(2 * Math.PI * rotateDelta.y / element.clientHeight);\n      }\n      rotateStart.copy(rotateEnd);\n    }\n    function handleTouchMovePan(event) {\n      if (pointers.length == 1) {\n        panEnd.set(event.pageX, event.pageY);\n      } else {\n        var position = getSecondPointerPosition(event);\n        var x = 0.5 * (event.pageX + position.x);\n        var y = 0.5 * (event.pageY + position.y);\n        panEnd.set(x, y);\n      }\n      panDelta.subVectors(panEnd, panStart).multiplyScalar(scope.panSpeed);\n      pan(panDelta.x, panDelta.y);\n      panStart.copy(panEnd);\n    }\n    function handleTouchMoveDolly(event) {\n      var position = getSecondPointerPosition(event);\n      var dx = event.pageX - position.x;\n      var dy = event.pageY - position.y;\n      var distance = Math.sqrt(dx * dx + dy * dy);\n      dollyEnd.set(0, distance);\n      dollyDelta.set(0, Math.pow(dollyEnd.y / dollyStart.y, scope.zoomSpeed));\n      dollyOut(dollyDelta.y);\n      dollyStart.copy(dollyEnd);\n    }\n    function handleTouchMoveDollyPan(event) {\n      if (scope.enableZoom) handleTouchMoveDolly(event);\n      if (scope.enablePan) handleTouchMovePan(event);\n    }\n    function handleTouchMoveDollyRotate(event) {\n      if (scope.enableZoom) handleTouchMoveDolly(event);\n      if (scope.enableRotate) handleTouchMoveRotate(event);\n    }\n    function onPointerDown(event) {\n      var _a, _b;\n      if (scope.enabled === false) return;\n      if (pointers.length === 0) {\n        (_a = scope.domElement) == null ? void 0 : _a.ownerDocument.addEventListener(\"pointermove\", onPointerMove);\n        (_b = scope.domElement) == null ? void 0 : _b.ownerDocument.addEventListener(\"pointerup\", onPointerUp);\n      }\n      addPointer(event);\n      if (event.pointerType === \"touch\") {\n        onTouchStart(event);\n      } else {\n        onMouseDown(event);\n      }\n    }\n    function onPointerMove(event) {\n      if (scope.enabled === false) return;\n      if (event.pointerType === \"touch\") {\n        onTouchMove(event);\n      } else {\n        onMouseMove(event);\n      }\n    }\n    function onPointerUp(event) {\n      var _a, _b, _c;\n      removePointer(event);\n      if (pointers.length === 0) {\n        (_a = scope.domElement) == null ? void 0 : _a.releasePointerCapture(event.pointerId);\n        (_b = scope.domElement) == null ? void 0 : _b.ownerDocument.removeEventListener(\"pointermove\", onPointerMove);\n        (_c = scope.domElement) == null ? void 0 : _c.ownerDocument.removeEventListener(\"pointerup\", onPointerUp);\n      }\n      scope.dispatchEvent(endEvent);\n      state = STATE.NONE;\n    }\n    function onMouseDown(event) {\n      var mouseAction;\n      switch (event.button) {\n        case 0:\n          mouseAction = scope.mouseButtons.LEFT;\n          break;\n        case 1:\n          mouseAction = scope.mouseButtons.MIDDLE;\n          break;\n        case 2:\n          mouseAction = scope.mouseButtons.RIGHT;\n          break;\n        default:\n          mouseAction = -1;\n      }\n      switch (mouseAction) {\n        case MOUSE.DOLLY:\n          if (scope.enableZoom === false) return;\n          handleMouseDownDolly(event);\n          state = STATE.DOLLY;\n          break;\n        case MOUSE.ROTATE:\n          if (event.ctrlKey || event.metaKey || event.shiftKey) {\n            if (scope.enablePan === false) return;\n            handleMouseDownPan(event);\n            state = STATE.PAN;\n          } else {\n            if (scope.enableRotate === false) return;\n            handleMouseDownRotate(event);\n            state = STATE.ROTATE;\n          }\n          break;\n        case MOUSE.PAN:\n          if (event.ctrlKey || event.metaKey || event.shiftKey) {\n            if (scope.enableRotate === false) return;\n            handleMouseDownRotate(event);\n            state = STATE.ROTATE;\n          } else {\n            if (scope.enablePan === false) return;\n            handleMouseDownPan(event);\n            state = STATE.PAN;\n          }\n          break;\n        default:\n          state = STATE.NONE;\n      }\n      if (state !== STATE.NONE) {\n        scope.dispatchEvent(startEvent);\n      }\n    }\n    function onMouseMove(event) {\n      if (scope.enabled === false) return;\n      switch (state) {\n        case STATE.ROTATE:\n          if (scope.enableRotate === false) return;\n          handleMouseMoveRotate(event);\n          break;\n        case STATE.DOLLY:\n          if (scope.enableZoom === false) return;\n          handleMouseMoveDolly(event);\n          break;\n        case STATE.PAN:\n          if (scope.enablePan === false) return;\n          handleMouseMovePan(event);\n          break;\n      }\n    }\n    function onMouseWheel(event) {\n      if (scope.enabled === false || scope.enableZoom === false || state !== STATE.NONE && state !== STATE.ROTATE) {\n        return;\n      }\n      event.preventDefault();\n      scope.dispatchEvent(startEvent);\n      handleMouseWheel(event);\n      scope.dispatchEvent(endEvent);\n    }\n    function onKeyDown(event) {\n      if (scope.enabled === false || scope.enablePan === false) return;\n      handleKeyDown(event);\n    }\n    function onTouchStart(event) {\n      trackPointer(event);\n      switch (pointers.length) {\n        case 1:\n          switch (scope.touches.ONE) {\n            case TOUCH.ROTATE:\n              if (scope.enableRotate === false) return;\n              handleTouchStartRotate();\n              state = STATE.TOUCH_ROTATE;\n              break;\n            case TOUCH.PAN:\n              if (scope.enablePan === false) return;\n              handleTouchStartPan();\n              state = STATE.TOUCH_PAN;\n              break;\n            default:\n              state = STATE.NONE;\n          }\n          break;\n        case 2:\n          switch (scope.touches.TWO) {\n            case TOUCH.DOLLY_PAN:\n              if (scope.enableZoom === false && scope.enablePan === false) return;\n              handleTouchStartDollyPan();\n              state = STATE.TOUCH_DOLLY_PAN;\n              break;\n            case TOUCH.DOLLY_ROTATE:\n              if (scope.enableZoom === false && scope.enableRotate === false) return;\n              handleTouchStartDollyRotate();\n              state = STATE.TOUCH_DOLLY_ROTATE;\n              break;\n            default:\n              state = STATE.NONE;\n          }\n          break;\n        default:\n          state = STATE.NONE;\n      }\n      if (state !== STATE.NONE) {\n        scope.dispatchEvent(startEvent);\n      }\n    }\n    function onTouchMove(event) {\n      trackPointer(event);\n      switch (state) {\n        case STATE.TOUCH_ROTATE:\n          if (scope.enableRotate === false) return;\n          handleTouchMoveRotate(event);\n          scope.update();\n          break;\n        case STATE.TOUCH_PAN:\n          if (scope.enablePan === false) return;\n          handleTouchMovePan(event);\n          scope.update();\n          break;\n        case STATE.TOUCH_DOLLY_PAN:\n          if (scope.enableZoom === false && scope.enablePan === false) return;\n          handleTouchMoveDollyPan(event);\n          scope.update();\n          break;\n        case STATE.TOUCH_DOLLY_ROTATE:\n          if (scope.enableZoom === false && scope.enableRotate === false) return;\n          handleTouchMoveDollyRotate(event);\n          scope.update();\n          break;\n        default:\n          state = STATE.NONE;\n      }\n    }\n    function onContextMenu(event) {\n      if (scope.enabled === false) return;\n      event.preventDefault();\n    }\n    function addPointer(event) {\n      pointers.push(event);\n    }\n    function removePointer(event) {\n      delete pointerPositions[event.pointerId];\n      for (var i = 0; i < pointers.length; i++) {\n        if (pointers[i].pointerId == event.pointerId) {\n          pointers.splice(i, 1);\n          return;\n        }\n      }\n    }\n    function trackPointer(event) {\n      var position = pointerPositions[event.pointerId];\n      if (position === void 0) {\n        position = new Vector2();\n        pointerPositions[event.pointerId] = position;\n      }\n      position.set(event.pageX, event.pageY);\n    }\n    function getSecondPointerPosition(event) {\n      var pointer = event.pointerId === pointers[0].pointerId ? pointers[1] : pointers[0];\n      return pointerPositions[pointer.pointerId];\n    }\n    if (domElement !== void 0) _this.connect(domElement);\n    _this.update();\n    return _this;\n  }\n  return _createClass(OrbitControls);\n}(EventDispatcher);\nvar MapControls = /*#__PURE__*/function (_OrbitControls) {\n  _inherits(MapControls, _OrbitControls);\n  var _super2 = _createSuper(MapControls);\n  function MapControls(object, domElement) {\n    var _this2;\n    _classCallCheck(this, MapControls);\n    _this2 = _super2.call(this, object, domElement);\n    _this2.screenSpacePanning = false;\n    _this2.mouseButtons.LEFT = MOUSE.PAN;\n    _this2.mouseButtons.RIGHT = MOUSE.ROTATE;\n    _this2.touches.ONE = TOUCH.PAN;\n    _this2.touches.TWO = TOUCH.DOLLY_ROTATE;\n    return _this2;\n  }\n  return _createClass(MapControls);\n}(OrbitControls);\nexport { MapControls, OrbitControls };","map":{"version":3,"names":["_ray","Ray","_plane","Plane","TILT_LIMIT","Math","cos","PI","moduloWrapAround","offset","capacity","OrbitControls","_EventDispatcher","_inherits","_super","_createSuper","object","domElement","_this","_classCallCheck","call","__publicField","_assertThisInitialized","Vector3","Infinity","LEFT","UP","RIGHT","BOTTOM","MOUSE","ROTATE","MIDDLE","DOLLY","PAN","ONE","TOUCH","TWO","DOLLY_PAN","target0","target","clone","position0","position","zoom0","zoom","getPolarAngle","spherical","phi","getAzimuthalAngle","theta","setPolarAngle","value","currentPhi","phiDist","abs","sphericalDelta","scope","update","setAzimuthalAngle","currentTheta","thetaDist","getDistance","distanceTo","listenToKeyEvents","domElement2","addEventListener","onKeyDown","_domElementKeyEvents","stopListenToKeyEvents","removeEventListener","saveState","copy","reset","updateProjectionMatrix","dispatchEvent","changeEvent","state","STATE","NONE","up","quat","Quaternion","setFromUnitVectors","quatInverse","invert","lastPosition","lastQuaternion","twoPI","sub","applyQuaternion","setFromVector3","autoRotate","rotateLeft","getAutoRotationAngle","enableDamping","dampingFactor","min","minAzimuthAngle","max","maxAzimuthAngle","isFinite","minPolarAngle","maxPolarAngle","makeSafe","addScaledVector","panOffset","add","zoomToCursor","performCursorZoom","isOrthographicCamera","radius","clampDistance","scale","setFromSpherical","matrixAutoUpdate","updateMatrix","lookAt","multiplyScalar","set","zoomChanged","newRadius","PerspectiveCamera","isPerspectiveCamera","prevRadius","length","radiusDelta","dollyDirection","updateMatrixWorld","mouseBefore","mouse","x","y","unproject","minZoom","maxZoom","mouseAfter","console","warn","screenSpacePanning","transformDirection","matrix","origin","direction","dot","setFromNormalAndCoplanarPoint","intersectPlane","OrthographicCamera","distanceToSquared","EPS","quaternion","connect","style","touchAction","onContextMenu","onPointerDown","onPointerUp","onMouseWheel","dispose","_a","_b","_c","_d","_e","ownerDocument","onPointerMove","_f","type","startEvent","endEvent","TOUCH_ROTATE","TOUCH_PAN","TOUCH_DOLLY_PAN","TOUCH_DOLLY_ROTATE","Spherical","rotateStart","Vector2","rotateEnd","rotateDelta","panStart","panEnd","panDelta","dollyStart","dollyEnd","dollyDelta","pointers","pointerPositions","autoRotateSpeed","getZoomScale","pow","zoomSpeed","angle","reverseOrbit","reverseHorizontalOrbit","rotateUp","reverseVerticalOrbit","panLeft","v","panLeft2","distance","objectMatrix","setFromMatrixColumn","panUp","panUp2","crossVectors","pan","pan2","deltaX","deltaY","element","targetDistance","tan","fov","clientHeight","right","left","clientWidth","top","bottom","enablePan","dollyOut","dollyScale","enableZoom","dollyIn","updateMouseParameters","event","rect","getBoundingClientRect","clientX","clientY","w","width","h","height","normalize","dist","minDistance","maxDistance","handleMouseDownRotate","handleMouseDownDolly","handleMouseDownPan","handleMouseMoveRotate","subVectors","rotateSpeed","handleMouseMoveDolly","handleMouseMovePan","panSpeed","handleMouseWheel","handleKeyDown","needsUpdate","code","keys","keyPanSpeed","preventDefault","handleTouchStartRotate","pageX","pageY","handleTouchStartPan","handleTouchStartDolly","dx","dy","sqrt","handleTouchStartDollyPan","handleTouchStartDollyRotate","enableRotate","handleTouchMoveRotate","getSecondPointerPosition","handleTouchMovePan","handleTouchMoveDolly","handleTouchMoveDollyPan","handleTouchMoveDollyRotate","enabled","addPointer","pointerType","onTouchStart","onMouseDown","onTouchMove","onMouseMove","removePointer","releasePointerCapture","pointerId","mouseAction","button","mouseButtons","ctrlKey","metaKey","shiftKey","trackPointer","touches","DOLLY_ROTATE","push","i","splice","pointer","_createClass","EventDispatcher","MapControls","_OrbitControls","_super2","_this2"],"sources":["C:\\Users\\Nayyu\\Desktop\\skibidai-public-build\\node_modules\\src\\controls\\OrbitControls.ts"],"sourcesContent":["import {\n  EventDispatcher,\n  Matrix4,\n  MOUSE,\n  OrthographicCamera,\n  PerspectiveCamera,\n  Quaternion,\n  Spherical,\n  TOUCH,\n  Vector2,\n  Vector3,\n  Ray,\n  Plane,\n} from 'three'\n\nconst _ray = new Ray()\nconst _plane = new Plane()\nconst TILT_LIMIT = Math.cos(70 * (Math.PI / 180))\n\n// This set of controls performs orbiting, dollying (zooming), and panning.\n// Unlike TrackballControls, it maintains the \"up\" direction object.up (+Y by default).\n//\n//    Orbit - left mouse / touch: one-finger move\n//    Zoom - middle mouse, or mousewheel / touch: two-finger spread or squish\n//    Pan - right mouse, or left mouse + ctrl/meta/shiftKey, or arrow keys / touch: two-finger move\n\nconst moduloWrapAround = (offset: number, capacity: number) => ((offset % capacity) + capacity) % capacity\n\nclass OrbitControls extends EventDispatcher {\n  object: PerspectiveCamera | OrthographicCamera\n  domElement: HTMLElement | undefined\n  // Set to false to disable this control\n  enabled = true\n  // \"target\" sets the location of focus, where the object orbits around\n  target = new Vector3()\n  // How far you can dolly in and out ( PerspectiveCamera only )\n  minDistance = 0\n  maxDistance = Infinity\n  // How far you can zoom in and out ( OrthographicCamera only )\n  minZoom = 0\n  maxZoom = Infinity\n  // How far you can orbit vertically, upper and lower limits.\n  // Range is 0 to Math.PI radians.\n  minPolarAngle = 0 // radians\n  maxPolarAngle = Math.PI // radians\n  // How far you can orbit horizontally, upper and lower limits.\n  // If set, the interval [ min, max ] must be a sub-interval of [ - 2 PI, 2 PI ], with ( max - min < 2 PI )\n  minAzimuthAngle = -Infinity // radians\n  maxAzimuthAngle = Infinity // radians\n  // Set to true to enable damping (inertia)\n  // If damping is enabled, you must call controls.update() in your animation loop\n  enableDamping = false\n  dampingFactor = 0.05\n  // This option actually enables dollying in and out; left as \"zoom\" for backwards compatibility.\n  // Set to false to disable zooming\n  enableZoom = true\n  zoomSpeed = 1.0\n  // Set to false to disable rotating\n  enableRotate = true\n  rotateSpeed = 1.0\n  // Set to false to disable panning\n  enablePan = true\n  panSpeed = 1.0\n  screenSpacePanning = true // if false, pan orthogonal to world-space direction camera.up\n  keyPanSpeed = 7.0 // pixels moved per arrow key push\n  zoomToCursor = false\n  // Set to true to automatically rotate around the target\n  // If auto-rotate is enabled, you must call controls.update() in your animation loop\n  autoRotate = false\n  autoRotateSpeed = 2.0 // 30 seconds per orbit when fps is 60\n  reverseOrbit = false // true if you want to reverse the orbit to mouse drag from left to right = orbits left\n  reverseHorizontalOrbit = false // true if you want to reverse the horizontal orbit direction\n  reverseVerticalOrbit = false // true if you want to reverse the vertical orbit direction\n  // The four arrow keys\n  keys = { LEFT: 'ArrowLeft', UP: 'ArrowUp', RIGHT: 'ArrowRight', BOTTOM: 'ArrowDown' }\n  // Mouse buttons\n  mouseButtons: Partial<{\n    LEFT: MOUSE\n    MIDDLE: MOUSE\n    RIGHT: MOUSE\n  }> = {\n    LEFT: MOUSE.ROTATE,\n    MIDDLE: MOUSE.DOLLY,\n    RIGHT: MOUSE.PAN,\n  }\n  // Touch fingers\n  touches: Partial<{\n    ONE: TOUCH\n    TWO: TOUCH\n  }> = { ONE: TOUCH.ROTATE, TWO: TOUCH.DOLLY_PAN }\n  target0: Vector3\n  position0: Vector3\n  zoom0: number\n  // the target DOM element for key events\n  _domElementKeyEvents: any = null\n\n  getPolarAngle: () => number\n  getAzimuthalAngle: () => number\n  setPolarAngle: (x: number) => void\n  setAzimuthalAngle: (x: number) => void\n  getDistance: () => number\n\n  listenToKeyEvents: (domElement: HTMLElement) => void\n  stopListenToKeyEvents: () => void\n  saveState: () => void\n  reset: () => void\n  update: () => void\n  connect: (domElement: HTMLElement) => void\n  dispose: () => void\n\n  constructor(object: PerspectiveCamera | OrthographicCamera, domElement?: HTMLElement) {\n    super()\n\n    this.object = object\n    this.domElement = domElement\n\n    // for reset\n    this.target0 = this.target.clone()\n    this.position0 = this.object.position.clone()\n    this.zoom0 = this.object.zoom\n\n    //\n    // public methods\n    //\n\n    this.getPolarAngle = (): number => spherical.phi\n\n    this.getAzimuthalAngle = (): number => spherical.theta\n\n    this.setPolarAngle = (value: number): void => {\n      // use modulo wrapping to safeguard value\n      let phi = moduloWrapAround(value, 2 * Math.PI)\n      let currentPhi = spherical.phi\n\n      // convert to the equivalent shortest angle\n      if (currentPhi < 0) currentPhi += 2 * Math.PI\n      if (phi < 0) phi += 2 * Math.PI\n      let phiDist = Math.abs(phi - currentPhi)\n      if (2 * Math.PI - phiDist < phiDist) {\n        if (phi < currentPhi) {\n          phi += 2 * Math.PI\n        } else {\n          currentPhi += 2 * Math.PI\n        }\n      }\n      sphericalDelta.phi = phi - currentPhi\n      scope.update()\n    }\n\n    this.setAzimuthalAngle = (value: number): void => {\n      // use modulo wrapping to safeguard value\n      let theta = moduloWrapAround(value, 2 * Math.PI)\n      let currentTheta = spherical.theta\n\n      // convert to the equivalent shortest angle\n      if (currentTheta < 0) currentTheta += 2 * Math.PI\n      if (theta < 0) theta += 2 * Math.PI\n      let thetaDist = Math.abs(theta - currentTheta)\n      if (2 * Math.PI - thetaDist < thetaDist) {\n        if (theta < currentTheta) {\n          theta += 2 * Math.PI\n        } else {\n          currentTheta += 2 * Math.PI\n        }\n      }\n      sphericalDelta.theta = theta - currentTheta\n      scope.update()\n    }\n\n    this.getDistance = (): number => scope.object.position.distanceTo(scope.target)\n\n    this.listenToKeyEvents = (domElement: HTMLElement): void => {\n      domElement.addEventListener('keydown', onKeyDown)\n      this._domElementKeyEvents = domElement\n    }\n\n    this.stopListenToKeyEvents = (): void => {\n      this._domElementKeyEvents.removeEventListener('keydown', onKeyDown)\n      this._domElementKeyEvents = null\n    }\n\n    this.saveState = (): void => {\n      scope.target0.copy(scope.target)\n      scope.position0.copy(scope.object.position)\n      scope.zoom0 = scope.object.zoom\n    }\n\n    this.reset = (): void => {\n      scope.target.copy(scope.target0)\n      scope.object.position.copy(scope.position0)\n      scope.object.zoom = scope.zoom0\n      scope.object.updateProjectionMatrix()\n\n      // @ts-ignore\n      scope.dispatchEvent(changeEvent)\n\n      scope.update()\n\n      state = STATE.NONE\n    }\n\n    // this method is exposed, but perhaps it would be better if we can make it private...\n    this.update = ((): (() => void) => {\n      const offset = new Vector3()\n      const up = new Vector3(0, 1, 0)\n\n      // so camera.up is the orbit axis\n      const quat = new Quaternion().setFromUnitVectors(object.up, up)\n      const quatInverse = quat.clone().invert()\n\n      const lastPosition = new Vector3()\n      const lastQuaternion = new Quaternion()\n\n      const twoPI = 2 * Math.PI\n\n      return function update(): boolean {\n        const position = scope.object.position\n\n        // update new up direction\n        quat.setFromUnitVectors(object.up, up)\n        quatInverse.copy(quat).invert()\n\n        offset.copy(position).sub(scope.target)\n\n        // rotate offset to \"y-axis-is-up\" space\n        offset.applyQuaternion(quat)\n\n        // angle from z-axis around y-axis\n        spherical.setFromVector3(offset)\n\n        if (scope.autoRotate && state === STATE.NONE) {\n          rotateLeft(getAutoRotationAngle())\n        }\n\n        if (scope.enableDamping) {\n          spherical.theta += sphericalDelta.theta * scope.dampingFactor\n          spherical.phi += sphericalDelta.phi * scope.dampingFactor\n        } else {\n          spherical.theta += sphericalDelta.theta\n          spherical.phi += sphericalDelta.phi\n        }\n\n        // restrict theta to be between desired limits\n\n        let min = scope.minAzimuthAngle\n        let max = scope.maxAzimuthAngle\n\n        if (isFinite(min) && isFinite(max)) {\n          if (min < -Math.PI) min += twoPI\n          else if (min > Math.PI) min -= twoPI\n\n          if (max < -Math.PI) max += twoPI\n          else if (max > Math.PI) max -= twoPI\n\n          if (min <= max) {\n            spherical.theta = Math.max(min, Math.min(max, spherical.theta))\n          } else {\n            spherical.theta =\n              spherical.theta > (min + max) / 2 ? Math.max(min, spherical.theta) : Math.min(max, spherical.theta)\n          }\n        }\n\n        // restrict phi to be between desired limits\n        spherical.phi = Math.max(scope.minPolarAngle, Math.min(scope.maxPolarAngle, spherical.phi))\n        spherical.makeSafe()\n\n        // move target to panned location\n\n        if (scope.enableDamping === true) {\n          scope.target.addScaledVector(panOffset, scope.dampingFactor)\n        } else {\n          scope.target.add(panOffset)\n        }\n\n        // adjust the camera position based on zoom only if we're not zooming to the cursor or if it's an ortho camera\n        // we adjust zoom later in these cases\n        if ((scope.zoomToCursor && performCursorZoom) || (scope.object as OrthographicCamera).isOrthographicCamera) {\n          spherical.radius = clampDistance(spherical.radius)\n        } else {\n          spherical.radius = clampDistance(spherical.radius * scale)\n        }\n\n        offset.setFromSpherical(spherical)\n\n        // rotate offset back to \"camera-up-vector-is-up\" space\n        offset.applyQuaternion(quatInverse)\n\n        position.copy(scope.target).add(offset)\n\n        if (!scope.object.matrixAutoUpdate) scope.object.updateMatrix()\n        scope.object.lookAt(scope.target)\n\n        if (scope.enableDamping === true) {\n          sphericalDelta.theta *= 1 - scope.dampingFactor\n          sphericalDelta.phi *= 1 - scope.dampingFactor\n\n          panOffset.multiplyScalar(1 - scope.dampingFactor)\n        } else {\n          sphericalDelta.set(0, 0, 0)\n\n          panOffset.set(0, 0, 0)\n        }\n\n        // adjust camera position\n        let zoomChanged = false\n        if (scope.zoomToCursor && performCursorZoom) {\n          let newRadius = null\n          if (scope.object instanceof PerspectiveCamera && scope.object.isPerspectiveCamera) {\n            // move the camera down the pointer ray\n            // this method avoids floating point error\n            const prevRadius = offset.length()\n            newRadius = clampDistance(prevRadius * scale)\n\n            const radiusDelta = prevRadius - newRadius\n            scope.object.position.addScaledVector(dollyDirection, radiusDelta)\n            scope.object.updateMatrixWorld()\n          } else if ((scope.object as OrthographicCamera).isOrthographicCamera) {\n            // adjust the ortho camera position based on zoom changes\n            const mouseBefore = new Vector3(mouse.x, mouse.y, 0)\n            mouseBefore.unproject(scope.object)\n\n            scope.object.zoom = Math.max(scope.minZoom, Math.min(scope.maxZoom, scope.object.zoom / scale))\n            scope.object.updateProjectionMatrix()\n            zoomChanged = true\n\n            const mouseAfter = new Vector3(mouse.x, mouse.y, 0)\n            mouseAfter.unproject(scope.object)\n\n            scope.object.position.sub(mouseAfter).add(mouseBefore)\n            scope.object.updateMatrixWorld()\n\n            newRadius = offset.length()\n          } else {\n            console.warn('WARNING: OrbitControls.js encountered an unknown camera type - zoom to cursor disabled.')\n            scope.zoomToCursor = false\n          }\n\n          // handle the placement of the target\n          if (newRadius !== null) {\n            if (scope.screenSpacePanning) {\n              // position the orbit target in front of the new camera position\n              scope.target\n                .set(0, 0, -1)\n                .transformDirection(scope.object.matrix)\n                .multiplyScalar(newRadius)\n                .add(scope.object.position)\n            } else {\n              // get the ray and translation plane to compute target\n              _ray.origin.copy(scope.object.position)\n              _ray.direction.set(0, 0, -1).transformDirection(scope.object.matrix)\n\n              // if the camera is 20 degrees above the horizon then don't adjust the focus target to avoid\n              // extremely large values\n              if (Math.abs(scope.object.up.dot(_ray.direction)) < TILT_LIMIT) {\n                object.lookAt(scope.target)\n              } else {\n                _plane.setFromNormalAndCoplanarPoint(scope.object.up, scope.target)\n                _ray.intersectPlane(_plane, scope.target)\n              }\n            }\n          }\n        } else if (scope.object instanceof OrthographicCamera && scope.object.isOrthographicCamera) {\n          zoomChanged = scale !== 1\n\n          if (zoomChanged) {\n            scope.object.zoom = Math.max(scope.minZoom, Math.min(scope.maxZoom, scope.object.zoom / scale))\n            scope.object.updateProjectionMatrix()\n          }\n        }\n\n        scale = 1\n        performCursorZoom = false\n\n        // update condition is:\n        // min(camera displacement, camera rotation in radians)^2 > EPS\n        // using small-angle approximation cos(x/2) = 1 - x^2 / 8\n\n        if (\n          zoomChanged ||\n          lastPosition.distanceToSquared(scope.object.position) > EPS ||\n          8 * (1 - lastQuaternion.dot(scope.object.quaternion)) > EPS\n        ) {\n          // @ts-ignore\n          scope.dispatchEvent(changeEvent)\n\n          lastPosition.copy(scope.object.position)\n          lastQuaternion.copy(scope.object.quaternion)\n          zoomChanged = false\n\n          return true\n        }\n\n        return false\n      }\n    })()\n\n    // https://github.com/mrdoob/three.js/issues/20575\n    this.connect = (domElement: HTMLElement): void => {\n      scope.domElement = domElement\n      // disables touch scroll\n      // touch-action needs to be defined for pointer events to work on mobile\n      // https://stackoverflow.com/a/48254578\n      scope.domElement.style.touchAction = 'none'\n      scope.domElement.addEventListener('contextmenu', onContextMenu)\n      scope.domElement.addEventListener('pointerdown', onPointerDown)\n      scope.domElement.addEventListener('pointercancel', onPointerUp)\n      scope.domElement.addEventListener('wheel', onMouseWheel)\n    }\n\n    this.dispose = (): void => {\n      // Enabling touch scroll\n      if (scope.domElement) {\n        scope.domElement.style.touchAction = 'auto'\n      }\n      scope.domElement?.removeEventListener('contextmenu', onContextMenu)\n      scope.domElement?.removeEventListener('pointerdown', onPointerDown)\n      scope.domElement?.removeEventListener('pointercancel', onPointerUp)\n      scope.domElement?.removeEventListener('wheel', onMouseWheel)\n      scope.domElement?.ownerDocument.removeEventListener('pointermove', onPointerMove)\n      scope.domElement?.ownerDocument.removeEventListener('pointerup', onPointerUp)\n      if (scope._domElementKeyEvents !== null) {\n        scope._domElementKeyEvents.removeEventListener('keydown', onKeyDown)\n      }\n      //scope.dispatchEvent( { type: 'dispose' } ); // should this be added here?\n    }\n\n    //\n    // internals\n    //\n\n    const scope = this\n\n    const changeEvent = { type: 'change' }\n    const startEvent = { type: 'start' }\n    const endEvent = { type: 'end' }\n\n    const STATE = {\n      NONE: -1,\n      ROTATE: 0,\n      DOLLY: 1,\n      PAN: 2,\n      TOUCH_ROTATE: 3,\n      TOUCH_PAN: 4,\n      TOUCH_DOLLY_PAN: 5,\n      TOUCH_DOLLY_ROTATE: 6,\n    }\n\n    let state = STATE.NONE\n\n    const EPS = 0.000001\n\n    // current position in spherical coordinates\n    const spherical = new Spherical()\n    const sphericalDelta = new Spherical()\n\n    let scale = 1\n    const panOffset = new Vector3()\n\n    const rotateStart = new Vector2()\n    const rotateEnd = new Vector2()\n    const rotateDelta = new Vector2()\n\n    const panStart = new Vector2()\n    const panEnd = new Vector2()\n    const panDelta = new Vector2()\n\n    const dollyStart = new Vector2()\n    const dollyEnd = new Vector2()\n    const dollyDelta = new Vector2()\n\n    const dollyDirection = new Vector3()\n    const mouse = new Vector2()\n    let performCursorZoom = false\n\n    const pointers: PointerEvent[] = []\n    const pointerPositions: { [key: string]: Vector2 } = {}\n\n    function getAutoRotationAngle(): number {\n      return ((2 * Math.PI) / 60 / 60) * scope.autoRotateSpeed\n    }\n\n    function getZoomScale(): number {\n      return Math.pow(0.95, scope.zoomSpeed)\n    }\n\n    function rotateLeft(angle: number): void {\n      if (scope.reverseOrbit || scope.reverseHorizontalOrbit) {\n        sphericalDelta.theta += angle\n      } else {\n        sphericalDelta.theta -= angle\n      }\n    }\n\n    function rotateUp(angle: number): void {\n      if (scope.reverseOrbit || scope.reverseVerticalOrbit) {\n        sphericalDelta.phi += angle\n      } else {\n        sphericalDelta.phi -= angle\n      }\n    }\n\n    const panLeft = (() => {\n      const v = new Vector3()\n\n      return function panLeft(distance: number, objectMatrix: Matrix4) {\n        v.setFromMatrixColumn(objectMatrix, 0) // get X column of objectMatrix\n        v.multiplyScalar(-distance)\n\n        panOffset.add(v)\n      }\n    })()\n\n    const panUp = (() => {\n      const v = new Vector3()\n\n      return function panUp(distance: number, objectMatrix: Matrix4) {\n        if (scope.screenSpacePanning === true) {\n          v.setFromMatrixColumn(objectMatrix, 1)\n        } else {\n          v.setFromMatrixColumn(objectMatrix, 0)\n          v.crossVectors(scope.object.up, v)\n        }\n\n        v.multiplyScalar(distance)\n\n        panOffset.add(v)\n      }\n    })()\n\n    // deltaX and deltaY are in pixels; right and down are positive\n    const pan = (() => {\n      const offset = new Vector3()\n\n      return function pan(deltaX: number, deltaY: number) {\n        const element = scope.domElement\n\n        if (element && scope.object instanceof PerspectiveCamera && scope.object.isPerspectiveCamera) {\n          // perspective\n          const position = scope.object.position\n          offset.copy(position).sub(scope.target)\n          let targetDistance = offset.length()\n\n          // half of the fov is center to top of screen\n          targetDistance *= Math.tan(((scope.object.fov / 2) * Math.PI) / 180.0)\n\n          // we use only clientHeight here so aspect ratio does not distort speed\n          panLeft((2 * deltaX * targetDistance) / element.clientHeight, scope.object.matrix)\n          panUp((2 * deltaY * targetDistance) / element.clientHeight, scope.object.matrix)\n        } else if (element && scope.object instanceof OrthographicCamera && scope.object.isOrthographicCamera) {\n          // orthographic\n          panLeft(\n            (deltaX * (scope.object.right - scope.object.left)) / scope.object.zoom / element.clientWidth,\n            scope.object.matrix,\n          )\n          panUp(\n            (deltaY * (scope.object.top - scope.object.bottom)) / scope.object.zoom / element.clientHeight,\n            scope.object.matrix,\n          )\n        } else {\n          // camera neither orthographic nor perspective\n          console.warn('WARNING: OrbitControls.js encountered an unknown camera type - pan disabled.')\n          scope.enablePan = false\n        }\n      }\n    })()\n\n    function dollyOut(dollyScale: number) {\n      if (\n        (scope.object instanceof PerspectiveCamera && scope.object.isPerspectiveCamera) ||\n        (scope.object instanceof OrthographicCamera && scope.object.isOrthographicCamera)\n      ) {\n        scale /= dollyScale\n      } else {\n        console.warn('WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.')\n        scope.enableZoom = false\n      }\n    }\n\n    function dollyIn(dollyScale: number) {\n      if (\n        (scope.object instanceof PerspectiveCamera && scope.object.isPerspectiveCamera) ||\n        (scope.object instanceof OrthographicCamera && scope.object.isOrthographicCamera)\n      ) {\n        scale *= dollyScale\n      } else {\n        console.warn('WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.')\n        scope.enableZoom = false\n      }\n    }\n\n    function updateMouseParameters(event: MouseEvent): void {\n      if (!scope.zoomToCursor || !scope.domElement) {\n        return\n      }\n\n      performCursorZoom = true\n\n      const rect = scope.domElement.getBoundingClientRect()\n      const x = event.clientX - rect.left\n      const y = event.clientY - rect.top\n      const w = rect.width\n      const h = rect.height\n\n      mouse.x = (x / w) * 2 - 1\n      mouse.y = -(y / h) * 2 + 1\n\n      dollyDirection.set(mouse.x, mouse.y, 1).unproject(scope.object).sub(scope.object.position).normalize()\n    }\n\n    function clampDistance(dist: number): number {\n      return Math.max(scope.minDistance, Math.min(scope.maxDistance, dist))\n    }\n\n    //\n    // event callbacks - update the object state\n    //\n\n    function handleMouseDownRotate(event: MouseEvent) {\n      rotateStart.set(event.clientX, event.clientY)\n    }\n\n    function handleMouseDownDolly(event: MouseEvent) {\n      updateMouseParameters(event)\n      dollyStart.set(event.clientX, event.clientY)\n    }\n\n    function handleMouseDownPan(event: MouseEvent) {\n      panStart.set(event.clientX, event.clientY)\n    }\n\n    function handleMouseMoveRotate(event: MouseEvent) {\n      rotateEnd.set(event.clientX, event.clientY)\n      rotateDelta.subVectors(rotateEnd, rotateStart).multiplyScalar(scope.rotateSpeed)\n\n      const element = scope.domElement\n\n      if (element) {\n        rotateLeft((2 * Math.PI * rotateDelta.x) / element.clientHeight) // yes, height\n        rotateUp((2 * Math.PI * rotateDelta.y) / element.clientHeight)\n      }\n      rotateStart.copy(rotateEnd)\n      scope.update()\n    }\n\n    function handleMouseMoveDolly(event: MouseEvent) {\n      dollyEnd.set(event.clientX, event.clientY)\n      dollyDelta.subVectors(dollyEnd, dollyStart)\n\n      if (dollyDelta.y > 0) {\n        dollyOut(getZoomScale())\n      } else if (dollyDelta.y < 0) {\n        dollyIn(getZoomScale())\n      }\n\n      dollyStart.copy(dollyEnd)\n      scope.update()\n    }\n\n    function handleMouseMovePan(event: MouseEvent) {\n      panEnd.set(event.clientX, event.clientY)\n      panDelta.subVectors(panEnd, panStart).multiplyScalar(scope.panSpeed)\n      pan(panDelta.x, panDelta.y)\n      panStart.copy(panEnd)\n      scope.update()\n    }\n\n    function handleMouseWheel(event: WheelEvent) {\n      updateMouseParameters(event)\n\n      if (event.deltaY < 0) {\n        dollyIn(getZoomScale())\n      } else if (event.deltaY > 0) {\n        dollyOut(getZoomScale())\n      }\n\n      scope.update()\n    }\n\n    function handleKeyDown(event: KeyboardEvent) {\n      let needsUpdate = false\n\n      switch (event.code) {\n        case scope.keys.UP:\n          pan(0, scope.keyPanSpeed)\n          needsUpdate = true\n          break\n\n        case scope.keys.BOTTOM:\n          pan(0, -scope.keyPanSpeed)\n          needsUpdate = true\n          break\n\n        case scope.keys.LEFT:\n          pan(scope.keyPanSpeed, 0)\n          needsUpdate = true\n          break\n\n        case scope.keys.RIGHT:\n          pan(-scope.keyPanSpeed, 0)\n          needsUpdate = true\n          break\n      }\n\n      if (needsUpdate) {\n        // prevent the browser from scrolling on cursor keys\n        event.preventDefault()\n        scope.update()\n      }\n    }\n\n    function handleTouchStartRotate() {\n      if (pointers.length == 1) {\n        rotateStart.set(pointers[0].pageX, pointers[0].pageY)\n      } else {\n        const x = 0.5 * (pointers[0].pageX + pointers[1].pageX)\n        const y = 0.5 * (pointers[0].pageY + pointers[1].pageY)\n\n        rotateStart.set(x, y)\n      }\n    }\n\n    function handleTouchStartPan() {\n      if (pointers.length == 1) {\n        panStart.set(pointers[0].pageX, pointers[0].pageY)\n      } else {\n        const x = 0.5 * (pointers[0].pageX + pointers[1].pageX)\n        const y = 0.5 * (pointers[0].pageY + pointers[1].pageY)\n\n        panStart.set(x, y)\n      }\n    }\n\n    function handleTouchStartDolly() {\n      const dx = pointers[0].pageX - pointers[1].pageX\n      const dy = pointers[0].pageY - pointers[1].pageY\n      const distance = Math.sqrt(dx * dx + dy * dy)\n\n      dollyStart.set(0, distance)\n    }\n\n    function handleTouchStartDollyPan() {\n      if (scope.enableZoom) handleTouchStartDolly()\n      if (scope.enablePan) handleTouchStartPan()\n    }\n\n    function handleTouchStartDollyRotate() {\n      if (scope.enableZoom) handleTouchStartDolly()\n      if (scope.enableRotate) handleTouchStartRotate()\n    }\n\n    function handleTouchMoveRotate(event: PointerEvent) {\n      if (pointers.length == 1) {\n        rotateEnd.set(event.pageX, event.pageY)\n      } else {\n        const position = getSecondPointerPosition(event)\n        const x = 0.5 * (event.pageX + position.x)\n        const y = 0.5 * (event.pageY + position.y)\n        rotateEnd.set(x, y)\n      }\n\n      rotateDelta.subVectors(rotateEnd, rotateStart).multiplyScalar(scope.rotateSpeed)\n\n      const element = scope.domElement\n\n      if (element) {\n        rotateLeft((2 * Math.PI * rotateDelta.x) / element.clientHeight) // yes, height\n        rotateUp((2 * Math.PI * rotateDelta.y) / element.clientHeight)\n      }\n      rotateStart.copy(rotateEnd)\n    }\n\n    function handleTouchMovePan(event: PointerEvent) {\n      if (pointers.length == 1) {\n        panEnd.set(event.pageX, event.pageY)\n      } else {\n        const position = getSecondPointerPosition(event)\n        const x = 0.5 * (event.pageX + position.x)\n        const y = 0.5 * (event.pageY + position.y)\n        panEnd.set(x, y)\n      }\n\n      panDelta.subVectors(panEnd, panStart).multiplyScalar(scope.panSpeed)\n      pan(panDelta.x, panDelta.y)\n      panStart.copy(panEnd)\n    }\n\n    function handleTouchMoveDolly(event: PointerEvent) {\n      const position = getSecondPointerPosition(event)\n      const dx = event.pageX - position.x\n      const dy = event.pageY - position.y\n      const distance = Math.sqrt(dx * dx + dy * dy)\n\n      dollyEnd.set(0, distance)\n      dollyDelta.set(0, Math.pow(dollyEnd.y / dollyStart.y, scope.zoomSpeed))\n      dollyOut(dollyDelta.y)\n      dollyStart.copy(dollyEnd)\n    }\n\n    function handleTouchMoveDollyPan(event: PointerEvent) {\n      if (scope.enableZoom) handleTouchMoveDolly(event)\n      if (scope.enablePan) handleTouchMovePan(event)\n    }\n\n    function handleTouchMoveDollyRotate(event: PointerEvent) {\n      if (scope.enableZoom) handleTouchMoveDolly(event)\n      if (scope.enableRotate) handleTouchMoveRotate(event)\n    }\n\n    //\n    // event handlers - FSM: listen for events and reset state\n    //\n\n    function onPointerDown(event: PointerEvent) {\n      if (scope.enabled === false) return\n\n      if (pointers.length === 0) {\n        scope.domElement?.ownerDocument.addEventListener('pointermove', onPointerMove)\n        scope.domElement?.ownerDocument.addEventListener('pointerup', onPointerUp)\n      }\n\n      addPointer(event)\n\n      if (event.pointerType === 'touch') {\n        onTouchStart(event)\n      } else {\n        onMouseDown(event)\n      }\n    }\n\n    function onPointerMove(event: PointerEvent) {\n      if (scope.enabled === false) return\n\n      if (event.pointerType === 'touch') {\n        onTouchMove(event)\n      } else {\n        onMouseMove(event)\n      }\n    }\n\n    function onPointerUp(event: PointerEvent) {\n      removePointer(event)\n\n      if (pointers.length === 0) {\n        scope.domElement?.releasePointerCapture(event.pointerId)\n\n        scope.domElement?.ownerDocument.removeEventListener('pointermove', onPointerMove)\n        scope.domElement?.ownerDocument.removeEventListener('pointerup', onPointerUp)\n      }\n\n      // @ts-ignore\n      scope.dispatchEvent(endEvent)\n\n      state = STATE.NONE\n    }\n\n    function onMouseDown(event: MouseEvent) {\n      let mouseAction\n\n      switch (event.button) {\n        case 0:\n          mouseAction = scope.mouseButtons.LEFT\n          break\n\n        case 1:\n          mouseAction = scope.mouseButtons.MIDDLE\n          break\n\n        case 2:\n          mouseAction = scope.mouseButtons.RIGHT\n          break\n\n        default:\n          mouseAction = -1\n      }\n\n      switch (mouseAction) {\n        case MOUSE.DOLLY:\n          if (scope.enableZoom === false) return\n          handleMouseDownDolly(event)\n          state = STATE.DOLLY\n          break\n\n        case MOUSE.ROTATE:\n          if (event.ctrlKey || event.metaKey || event.shiftKey) {\n            if (scope.enablePan === false) return\n            handleMouseDownPan(event)\n            state = STATE.PAN\n          } else {\n            if (scope.enableRotate === false) return\n            handleMouseDownRotate(event)\n            state = STATE.ROTATE\n          }\n          break\n\n        case MOUSE.PAN:\n          if (event.ctrlKey || event.metaKey || event.shiftKey) {\n            if (scope.enableRotate === false) return\n            handleMouseDownRotate(event)\n            state = STATE.ROTATE\n          } else {\n            if (scope.enablePan === false) return\n            handleMouseDownPan(event)\n            state = STATE.PAN\n          }\n          break\n\n        default:\n          state = STATE.NONE\n      }\n\n      if (state !== STATE.NONE) {\n        // @ts-ignore\n        scope.dispatchEvent(startEvent)\n      }\n    }\n\n    function onMouseMove(event: MouseEvent) {\n      if (scope.enabled === false) return\n\n      switch (state) {\n        case STATE.ROTATE:\n          if (scope.enableRotate === false) return\n          handleMouseMoveRotate(event)\n          break\n\n        case STATE.DOLLY:\n          if (scope.enableZoom === false) return\n          handleMouseMoveDolly(event)\n          break\n\n        case STATE.PAN:\n          if (scope.enablePan === false) return\n          handleMouseMovePan(event)\n          break\n      }\n    }\n\n    function onMouseWheel(event: WheelEvent) {\n      if (scope.enabled === false || scope.enableZoom === false || (state !== STATE.NONE && state !== STATE.ROTATE)) {\n        return\n      }\n\n      event.preventDefault()\n\n      // @ts-ignore\n      scope.dispatchEvent(startEvent)\n\n      handleMouseWheel(event)\n\n      // @ts-ignore\n      scope.dispatchEvent(endEvent)\n    }\n\n    function onKeyDown(event: KeyboardEvent) {\n      if (scope.enabled === false || scope.enablePan === false) return\n      handleKeyDown(event)\n    }\n\n    function onTouchStart(event: PointerEvent) {\n      trackPointer(event)\n\n      switch (pointers.length) {\n        case 1:\n          switch (scope.touches.ONE) {\n            case TOUCH.ROTATE:\n              if (scope.enableRotate === false) return\n              handleTouchStartRotate()\n              state = STATE.TOUCH_ROTATE\n              break\n\n            case TOUCH.PAN:\n              if (scope.enablePan === false) return\n              handleTouchStartPan()\n              state = STATE.TOUCH_PAN\n              break\n\n            default:\n              state = STATE.NONE\n          }\n\n          break\n\n        case 2:\n          switch (scope.touches.TWO) {\n            case TOUCH.DOLLY_PAN:\n              if (scope.enableZoom === false && scope.enablePan === false) return\n              handleTouchStartDollyPan()\n              state = STATE.TOUCH_DOLLY_PAN\n              break\n\n            case TOUCH.DOLLY_ROTATE:\n              if (scope.enableZoom === false && scope.enableRotate === false) return\n              handleTouchStartDollyRotate()\n              state = STATE.TOUCH_DOLLY_ROTATE\n              break\n\n            default:\n              state = STATE.NONE\n          }\n\n          break\n\n        default:\n          state = STATE.NONE\n      }\n\n      if (state !== STATE.NONE) {\n        // @ts-ignore\n        scope.dispatchEvent(startEvent)\n      }\n    }\n\n    function onTouchMove(event: PointerEvent) {\n      trackPointer(event)\n\n      switch (state) {\n        case STATE.TOUCH_ROTATE:\n          if (scope.enableRotate === false) return\n          handleTouchMoveRotate(event)\n          scope.update()\n          break\n\n        case STATE.TOUCH_PAN:\n          if (scope.enablePan === false) return\n          handleTouchMovePan(event)\n          scope.update()\n          break\n\n        case STATE.TOUCH_DOLLY_PAN:\n          if (scope.enableZoom === false && scope.enablePan === false) return\n          handleTouchMoveDollyPan(event)\n          scope.update()\n          break\n\n        case STATE.TOUCH_DOLLY_ROTATE:\n          if (scope.enableZoom === false && scope.enableRotate === false) return\n          handleTouchMoveDollyRotate(event)\n          scope.update()\n          break\n\n        default:\n          state = STATE.NONE\n      }\n    }\n\n    function onContextMenu(event: Event) {\n      if (scope.enabled === false) return\n      event.preventDefault()\n    }\n\n    function addPointer(event: PointerEvent) {\n      pointers.push(event)\n    }\n\n    function removePointer(event: PointerEvent) {\n      delete pointerPositions[event.pointerId]\n\n      for (let i = 0; i < pointers.length; i++) {\n        if (pointers[i].pointerId == event.pointerId) {\n          pointers.splice(i, 1)\n          return\n        }\n      }\n    }\n\n    function trackPointer(event: PointerEvent) {\n      let position = pointerPositions[event.pointerId]\n\n      if (position === undefined) {\n        position = new Vector2()\n        pointerPositions[event.pointerId] = position\n      }\n\n      position.set(event.pageX, event.pageY)\n    }\n\n    function getSecondPointerPosition(event: PointerEvent) {\n      const pointer = event.pointerId === pointers[0].pointerId ? pointers[1] : pointers[0]\n      return pointerPositions[pointer.pointerId]\n    }\n\n    // connect events\n    if (domElement !== undefined) this.connect(domElement)\n    // force an update at start\n    this.update()\n  }\n}\n\n// This set of controls performs orbiting, dollying (zooming), and panning.\n// Unlike TrackballControls, it maintains the \"up\" direction object.up (+Y by default).\n// This is very similar to OrbitControls, another set of touch behavior\n//\n//    Orbit - right mouse, or left mouse + ctrl/meta/shiftKey / touch: two-finger rotate\n//    Zoom - middle mouse, or mousewheel / touch: two-finger spread or squish\n//    Pan - left mouse, or arrow keys / touch: one-finger move\n\nclass MapControls extends OrbitControls {\n  constructor(object: PerspectiveCamera | OrthographicCamera, domElement?: HTMLElement) {\n    super(object, domElement)\n\n    this.screenSpacePanning = false // pan orthogonal to world-space direction camera.up\n\n    this.mouseButtons.LEFT = MOUSE.PAN\n    this.mouseButtons.RIGHT = MOUSE.ROTATE\n\n    this.touches.ONE = TOUCH.PAN\n    this.touches.TWO = TOUCH.DOLLY_ROTATE\n  }\n}\n\nexport { OrbitControls, MapControls }\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}