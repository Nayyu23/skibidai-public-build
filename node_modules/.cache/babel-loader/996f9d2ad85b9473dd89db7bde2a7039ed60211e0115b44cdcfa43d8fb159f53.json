{"ast":null,"code":"import _objectWithoutProperties from \"C:/Users/Nayyu/Desktop/skibidai-public-build/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nvar _excluded = [\"args\", \"cellColor\", \"sectionColor\", \"cellSize\", \"sectionSize\", \"followCamera\", \"infiniteGrid\", \"fadeDistance\", \"fadeStrength\", \"fadeFrom\", \"cellThickness\", \"sectionThickness\", \"side\"];\nimport _extends from '@babel/runtime/helpers/esm/extends';\nimport * as React from 'react';\nimport * as THREE from 'three';\nimport { extend, useFrame } from '@react-three/fiber';\nimport { shaderMaterial } from './shaderMaterial.js';\nimport { version } from '../helpers/constants.js';\nvar GridMaterial = /* @__PURE__ */shaderMaterial({\n  cellSize: 0.5,\n  sectionSize: 1,\n  fadeDistance: 100,\n  fadeStrength: 1,\n  fadeFrom: 1,\n  cellThickness: 0.5,\n  sectionThickness: 1,\n  cellColor: /* @__PURE__ */new THREE.Color(),\n  sectionColor: /* @__PURE__ */new THREE.Color(),\n  infiniteGrid: false,\n  followCamera: false,\n  worldCamProjPosition: /* @__PURE__ */new THREE.Vector3(),\n  worldPlanePosition: /* @__PURE__ */new THREE.Vector3()\n}, /* glsl */\"\\n    varying vec3 localPosition;\\n    varying vec4 worldPosition;\\n\\n    uniform vec3 worldCamProjPosition;\\n    uniform vec3 worldPlanePosition;\\n    uniform float fadeDistance;\\n    uniform bool infiniteGrid;\\n    uniform bool followCamera;\\n\\n    void main() {\\n      localPosition = position.xzy;\\n      if (infiniteGrid) localPosition *= 1.0 + fadeDistance;\\n      \\n      worldPosition = modelMatrix * vec4(localPosition, 1.0);\\n      if (followCamera) {\\n        worldPosition.xyz += (worldCamProjPosition - worldPlanePosition);\\n        localPosition = (inverse(modelMatrix) * worldPosition).xyz;\\n      }\\n\\n      gl_Position = projectionMatrix * viewMatrix * worldPosition;\\n    }\\n  \", /* glsl */\"\\n    varying vec3 localPosition;\\n    varying vec4 worldPosition;\\n\\n    uniform vec3 worldCamProjPosition;\\n    uniform float cellSize;\\n    uniform float sectionSize;\\n    uniform vec3 cellColor;\\n    uniform vec3 sectionColor;\\n    uniform float fadeDistance;\\n    uniform float fadeStrength;\\n    uniform float fadeFrom;\\n    uniform float cellThickness;\\n    uniform float sectionThickness;\\n\\n    float getGrid(float size, float thickness) {\\n      vec2 r = localPosition.xz / size;\\n      vec2 grid = abs(fract(r - 0.5) - 0.5) / fwidth(r);\\n      float line = min(grid.x, grid.y) + 1.0 - thickness;\\n      return 1.0 - min(line, 1.0);\\n    }\\n\\n    void main() {\\n      float g1 = getGrid(cellSize, cellThickness);\\n      float g2 = getGrid(sectionSize, sectionThickness);\\n\\n      vec3 from = worldCamProjPosition*vec3(fadeFrom);\\n      float dist = distance(from, worldPosition.xyz);\\n      float d = 1.0 - min(dist / fadeDistance, 1.0);\\n      vec3 color = mix(cellColor, sectionColor, min(1.0, sectionThickness * g2));\\n\\n      gl_FragColor = vec4(color, (g1 + g2) * pow(d, fadeStrength));\\n      gl_FragColor.a = mix(0.75 * gl_FragColor.a, gl_FragColor.a, g2);\\n      if (gl_FragColor.a <= 0.0) discard;\\n\\n      #include <tonemapping_fragment>\\n      #include <\".concat(version >= 154 ? 'colorspace_fragment' : 'encodings_fragment', \">\\n    }\\n  \"));\nvar Grid = /* @__PURE__ */React.forwardRef(function (_ref, fRef) {\n  var args = _ref.args,\n    _ref$cellColor = _ref.cellColor,\n    cellColor = _ref$cellColor === void 0 ? '#000000' : _ref$cellColor,\n    _ref$sectionColor = _ref.sectionColor,\n    sectionColor = _ref$sectionColor === void 0 ? '#2080ff' : _ref$sectionColor,\n    _ref$cellSize = _ref.cellSize,\n    cellSize = _ref$cellSize === void 0 ? 0.5 : _ref$cellSize,\n    _ref$sectionSize = _ref.sectionSize,\n    sectionSize = _ref$sectionSize === void 0 ? 1 : _ref$sectionSize,\n    _ref$followCamera = _ref.followCamera,\n    followCamera = _ref$followCamera === void 0 ? false : _ref$followCamera,\n    _ref$infiniteGrid = _ref.infiniteGrid,\n    infiniteGrid = _ref$infiniteGrid === void 0 ? false : _ref$infiniteGrid,\n    _ref$fadeDistance = _ref.fadeDistance,\n    fadeDistance = _ref$fadeDistance === void 0 ? 100 : _ref$fadeDistance,\n    _ref$fadeStrength = _ref.fadeStrength,\n    fadeStrength = _ref$fadeStrength === void 0 ? 1 : _ref$fadeStrength,\n    _ref$fadeFrom = _ref.fadeFrom,\n    fadeFrom = _ref$fadeFrom === void 0 ? 1 : _ref$fadeFrom,\n    _ref$cellThickness = _ref.cellThickness,\n    cellThickness = _ref$cellThickness === void 0 ? 0.5 : _ref$cellThickness,\n    _ref$sectionThickness = _ref.sectionThickness,\n    sectionThickness = _ref$sectionThickness === void 0 ? 1 : _ref$sectionThickness,\n    _ref$side = _ref.side,\n    side = _ref$side === void 0 ? THREE.BackSide : _ref$side,\n    props = _objectWithoutProperties(_ref, _excluded);\n  extend({\n    GridMaterial: GridMaterial\n  });\n  var ref = React.useRef(null);\n  React.useImperativeHandle(fRef, function () {\n    return ref.current;\n  }, []);\n  var plane = new THREE.Plane();\n  var upVector = new THREE.Vector3(0, 1, 0);\n  var zeroVector = new THREE.Vector3(0, 0, 0);\n  useFrame(function (state) {\n    plane.setFromNormalAndCoplanarPoint(upVector, zeroVector).applyMatrix4(ref.current.matrixWorld);\n    var gridMaterial = ref.current.material;\n    var worldCamProjPosition = gridMaterial.uniforms.worldCamProjPosition;\n    var worldPlanePosition = gridMaterial.uniforms.worldPlanePosition;\n    plane.projectPoint(state.camera.position, worldCamProjPosition.value);\n    worldPlanePosition.value.set(0, 0, 0).applyMatrix4(ref.current.matrixWorld);\n  });\n  var uniforms1 = {\n    cellSize: cellSize,\n    sectionSize: sectionSize,\n    cellColor: cellColor,\n    sectionColor: sectionColor,\n    cellThickness: cellThickness,\n    sectionThickness: sectionThickness\n  };\n  var uniforms2 = {\n    fadeDistance: fadeDistance,\n    fadeStrength: fadeStrength,\n    fadeFrom: fadeFrom,\n    infiniteGrid: infiniteGrid,\n    followCamera: followCamera\n  };\n  return /*#__PURE__*/React.createElement(\"mesh\", _extends({\n    ref: ref,\n    frustumCulled: false\n  }, props), /*#__PURE__*/React.createElement(\"gridMaterial\", _extends({\n    transparent: true,\n    \"extensions-derivatives\": true,\n    side: side\n  }, uniforms1, uniforms2)), /*#__PURE__*/React.createElement(\"planeGeometry\", {\n    args: args\n  }));\n});\nexport { Grid };","map":{"version":3,"names":["_extends","React","THREE","extend","useFrame","shaderMaterial","version","GridMaterial","cellSize","sectionSize","fadeDistance","fadeStrength","fadeFrom","cellThickness","sectionThickness","cellColor","Color","sectionColor","infiniteGrid","followCamera","worldCamProjPosition","Vector3","worldPlanePosition","concat","Grid","forwardRef","_ref","fRef","args","_ref$cellColor","_ref$sectionColor","_ref$cellSize","_ref$sectionSize","_ref$followCamera","_ref$infiniteGrid","_ref$fadeDistance","_ref$fadeStrength","_ref$fadeFrom","_ref$cellThickness","_ref$sectionThickness","_ref$side","side","BackSide","props","_objectWithoutProperties","_excluded","ref","useRef","useImperativeHandle","current","plane","Plane","upVector","zeroVector","state","setFromNormalAndCoplanarPoint","applyMatrix4","matrixWorld","gridMaterial","material","uniforms","projectPoint","camera","position","value","set","uniforms1","uniforms2","createElement","frustumCulled","transparent"],"sources":["C:/Users/Nayyu/Desktop/skibidai-public-build/node_modules/@react-three/drei/core/Grid.js"],"sourcesContent":["import _extends from '@babel/runtime/helpers/esm/extends';\nimport * as React from 'react';\nimport * as THREE from 'three';\nimport { extend, useFrame } from '@react-three/fiber';\nimport { shaderMaterial } from './shaderMaterial.js';\nimport { version } from '../helpers/constants.js';\n\nconst GridMaterial = /* @__PURE__ */shaderMaterial({\n  cellSize: 0.5,\n  sectionSize: 1,\n  fadeDistance: 100,\n  fadeStrength: 1,\n  fadeFrom: 1,\n  cellThickness: 0.5,\n  sectionThickness: 1,\n  cellColor: /* @__PURE__ */new THREE.Color(),\n  sectionColor: /* @__PURE__ */new THREE.Color(),\n  infiniteGrid: false,\n  followCamera: false,\n  worldCamProjPosition: /* @__PURE__ */new THREE.Vector3(),\n  worldPlanePosition: /* @__PURE__ */new THREE.Vector3()\n}, /* glsl */`\n    varying vec3 localPosition;\n    varying vec4 worldPosition;\n\n    uniform vec3 worldCamProjPosition;\n    uniform vec3 worldPlanePosition;\n    uniform float fadeDistance;\n    uniform bool infiniteGrid;\n    uniform bool followCamera;\n\n    void main() {\n      localPosition = position.xzy;\n      if (infiniteGrid) localPosition *= 1.0 + fadeDistance;\n      \n      worldPosition = modelMatrix * vec4(localPosition, 1.0);\n      if (followCamera) {\n        worldPosition.xyz += (worldCamProjPosition - worldPlanePosition);\n        localPosition = (inverse(modelMatrix) * worldPosition).xyz;\n      }\n\n      gl_Position = projectionMatrix * viewMatrix * worldPosition;\n    }\n  `, /* glsl */`\n    varying vec3 localPosition;\n    varying vec4 worldPosition;\n\n    uniform vec3 worldCamProjPosition;\n    uniform float cellSize;\n    uniform float sectionSize;\n    uniform vec3 cellColor;\n    uniform vec3 sectionColor;\n    uniform float fadeDistance;\n    uniform float fadeStrength;\n    uniform float fadeFrom;\n    uniform float cellThickness;\n    uniform float sectionThickness;\n\n    float getGrid(float size, float thickness) {\n      vec2 r = localPosition.xz / size;\n      vec2 grid = abs(fract(r - 0.5) - 0.5) / fwidth(r);\n      float line = min(grid.x, grid.y) + 1.0 - thickness;\n      return 1.0 - min(line, 1.0);\n    }\n\n    void main() {\n      float g1 = getGrid(cellSize, cellThickness);\n      float g2 = getGrid(sectionSize, sectionThickness);\n\n      vec3 from = worldCamProjPosition*vec3(fadeFrom);\n      float dist = distance(from, worldPosition.xyz);\n      float d = 1.0 - min(dist / fadeDistance, 1.0);\n      vec3 color = mix(cellColor, sectionColor, min(1.0, sectionThickness * g2));\n\n      gl_FragColor = vec4(color, (g1 + g2) * pow(d, fadeStrength));\n      gl_FragColor.a = mix(0.75 * gl_FragColor.a, gl_FragColor.a, g2);\n      if (gl_FragColor.a <= 0.0) discard;\n\n      #include <tonemapping_fragment>\n      #include <${version >= 154 ? 'colorspace_fragment' : 'encodings_fragment'}>\n    }\n  `);\nconst Grid = /* @__PURE__ */React.forwardRef(({\n  args,\n  cellColor = '#000000',\n  sectionColor = '#2080ff',\n  cellSize = 0.5,\n  sectionSize = 1,\n  followCamera = false,\n  infiniteGrid = false,\n  fadeDistance = 100,\n  fadeStrength = 1,\n  fadeFrom = 1,\n  cellThickness = 0.5,\n  sectionThickness = 1,\n  side = THREE.BackSide,\n  ...props\n}, fRef) => {\n  extend({\n    GridMaterial\n  });\n  const ref = React.useRef(null);\n  React.useImperativeHandle(fRef, () => ref.current, []);\n  const plane = new THREE.Plane();\n  const upVector = new THREE.Vector3(0, 1, 0);\n  const zeroVector = new THREE.Vector3(0, 0, 0);\n  useFrame(state => {\n    plane.setFromNormalAndCoplanarPoint(upVector, zeroVector).applyMatrix4(ref.current.matrixWorld);\n    const gridMaterial = ref.current.material;\n    const worldCamProjPosition = gridMaterial.uniforms.worldCamProjPosition;\n    const worldPlanePosition = gridMaterial.uniforms.worldPlanePosition;\n    plane.projectPoint(state.camera.position, worldCamProjPosition.value);\n    worldPlanePosition.value.set(0, 0, 0).applyMatrix4(ref.current.matrixWorld);\n  });\n  const uniforms1 = {\n    cellSize,\n    sectionSize,\n    cellColor,\n    sectionColor,\n    cellThickness,\n    sectionThickness\n  };\n  const uniforms2 = {\n    fadeDistance,\n    fadeStrength,\n    fadeFrom,\n    infiniteGrid,\n    followCamera\n  };\n  return /*#__PURE__*/React.createElement(\"mesh\", _extends({\n    ref: ref,\n    frustumCulled: false\n  }, props), /*#__PURE__*/React.createElement(\"gridMaterial\", _extends({\n    transparent: true,\n    \"extensions-derivatives\": true,\n    side: side\n  }, uniforms1, uniforms2)), /*#__PURE__*/React.createElement(\"planeGeometry\", {\n    args: args\n  }));\n});\n\nexport { Grid };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}