{"ast":null,"code":"import _classCallCheck from \"C:/Users/Nayyu/Desktop/skibidai-public-build/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Nayyu/Desktop/skibidai-public-build/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"C:/Users/Nayyu/Desktop/skibidai-public-build/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"C:/Users/Nayyu/Desktop/skibidai-public-build/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/Nayyu/Desktop/skibidai-public-build/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nvar __defProp = Object.defineProperty;\nvar __defNormalProp = function __defNormalProp(obj, key, value) {\n  return key in obj ? __defProp(obj, key, {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: value\n  }) : obj[key] = value;\n};\nvar __publicField = function __publicField(obj, key, value) {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nimport { UniformsUtils, WebGLRenderTarget, LinearFilter, NearestFilter, RGBAFormat, ShaderMaterial, MeshBasicMaterial } from \"three\";\nimport { Pass, FullScreenQuad } from \"./Pass.js\";\nimport { AfterimageShader } from \"../shaders/AfterimageShader.js\";\nvar AfterimagePass = /*#__PURE__*/function (_Pass) {\n  _inherits(AfterimagePass, _Pass);\n  var _super = _createSuper(AfterimagePass);\n  function AfterimagePass() {\n    var _this;\n    var damp = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0.96;\n    var shader = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : AfterimageShader;\n    _classCallCheck(this, AfterimagePass);\n    _this = _super.call(this);\n    __publicField(_assertThisInitialized(_this), \"shader\");\n    __publicField(_assertThisInitialized(_this), \"uniforms\");\n    __publicField(_assertThisInitialized(_this), \"textureComp\");\n    __publicField(_assertThisInitialized(_this), \"textureOld\");\n    __publicField(_assertThisInitialized(_this), \"shaderMaterial\");\n    __publicField(_assertThisInitialized(_this), \"compFsQuad\");\n    __publicField(_assertThisInitialized(_this), \"copyFsQuad\");\n    _this.shader = shader;\n    _this.uniforms = UniformsUtils.clone(shader.uniforms);\n    _this.uniforms[\"damp\"].value = damp;\n    _this.textureComp = new WebGLRenderTarget(window.innerWidth, window.innerHeight, {\n      minFilter: LinearFilter,\n      magFilter: NearestFilter,\n      format: RGBAFormat\n    });\n    _this.textureOld = new WebGLRenderTarget(window.innerWidth, window.innerHeight, {\n      minFilter: LinearFilter,\n      magFilter: NearestFilter,\n      format: RGBAFormat\n    });\n    _this.shaderMaterial = new ShaderMaterial({\n      uniforms: _this.uniforms,\n      vertexShader: _this.shader.vertexShader,\n      fragmentShader: _this.shader.fragmentShader\n    });\n    _this.compFsQuad = new FullScreenQuad(_this.shaderMaterial);\n    var material = new MeshBasicMaterial();\n    _this.copyFsQuad = new FullScreenQuad(material);\n    return _this;\n  }\n  _createClass(AfterimagePass, [{\n    key: \"render\",\n    value: function render(renderer, writeBuffer, readBuffer) {\n      this.uniforms[\"tOld\"].value = this.textureOld.texture;\n      this.uniforms[\"tNew\"].value = readBuffer.texture;\n      renderer.setRenderTarget(this.textureComp);\n      this.compFsQuad.render(renderer);\n      this.copyFsQuad.material.map = this.textureComp.texture;\n      if (this.renderToScreen) {\n        renderer.setRenderTarget(null);\n        this.copyFsQuad.render(renderer);\n      } else {\n        renderer.setRenderTarget(writeBuffer);\n        if (this.clear) renderer.clear();\n        this.copyFsQuad.render(renderer);\n      }\n      var temp = this.textureOld;\n      this.textureOld = this.textureComp;\n      this.textureComp = temp;\n    }\n  }, {\n    key: \"setSize\",\n    value: function setSize(width, height) {\n      this.textureComp.setSize(width, height);\n      this.textureOld.setSize(width, height);\n    }\n  }]);\n  return AfterimagePass;\n}(Pass);\nexport { AfterimagePass };","map":{"version":3,"names":["AfterimagePass","_Pass","_inherits","_super","_createSuper","_this","damp","arguments","length","undefined","shader","AfterimageShader","_classCallCheck","call","__publicField","_assertThisInitialized","uniforms","UniformsUtils","clone","value","textureComp","WebGLRenderTarget","window","innerWidth","innerHeight","minFilter","LinearFilter","magFilter","NearestFilter","format","RGBAFormat","textureOld","shaderMaterial","ShaderMaterial","vertexShader","fragmentShader","compFsQuad","FullScreenQuad","material","MeshBasicMaterial","copyFsQuad","_createClass","key","render","renderer","writeBuffer","readBuffer","texture","setRenderTarget","map","renderToScreen","clear","temp","setSize","width","height","Pass"],"sources":["C:\\Users\\Nayyu\\Desktop\\skibidai-public-build\\node_modules\\src\\postprocessing\\AfterimagePass.ts"],"sourcesContent":["import {\n  LinearFilter,\n  MeshBasicMaterial,\n  NearestFilter,\n  RGBAFormat,\n  WebGLRenderer,\n  ShaderMaterial,\n  UniformsUtils,\n  WebGLRenderTarget,\n} from 'three'\nimport { Pass, FullScreenQuad } from './Pass'\nimport { AfterimageShader } from '../shaders/AfterimageShader'\n\nclass AfterimagePass extends Pass {\n  public shader\n  public uniforms\n  public textureComp: WebGLRenderTarget\n  public textureOld: WebGLRenderTarget\n  public shaderMaterial: ShaderMaterial\n  public compFsQuad: FullScreenQuad<ShaderMaterial>\n  public copyFsQuad: FullScreenQuad<MeshBasicMaterial>\n\n  constructor(damp = 0.96, shader = AfterimageShader) {\n    super()\n\n    this.shader = shader\n    this.uniforms = UniformsUtils.clone(shader.uniforms)\n    this.uniforms['damp'].value = damp\n\n    this.textureComp = new WebGLRenderTarget(window.innerWidth, window.innerHeight, {\n      minFilter: LinearFilter,\n      magFilter: NearestFilter,\n      format: RGBAFormat,\n    })\n\n    this.textureOld = new WebGLRenderTarget(window.innerWidth, window.innerHeight, {\n      minFilter: LinearFilter,\n      magFilter: NearestFilter,\n      format: RGBAFormat,\n    })\n\n    this.shaderMaterial = new ShaderMaterial({\n      uniforms: this.uniforms,\n      vertexShader: this.shader.vertexShader,\n      fragmentShader: this.shader.fragmentShader,\n    })\n\n    this.compFsQuad = new FullScreenQuad(this.shaderMaterial)\n\n    let material = new MeshBasicMaterial()\n    this.copyFsQuad = new FullScreenQuad(material)\n  }\n\n  public render(renderer: WebGLRenderer, writeBuffer: WebGLRenderTarget, readBuffer: WebGLRenderTarget): void {\n    this.uniforms['tOld'].value = this.textureOld.texture\n    this.uniforms['tNew'].value = readBuffer.texture\n\n    renderer.setRenderTarget(this.textureComp)\n    this.compFsQuad.render(renderer)\n\n    this.copyFsQuad.material.map = this.textureComp.texture\n\n    if (this.renderToScreen) {\n      renderer.setRenderTarget(null)\n      this.copyFsQuad.render(renderer)\n    } else {\n      renderer.setRenderTarget(writeBuffer)\n\n      if (this.clear) renderer.clear()\n\n      this.copyFsQuad.render(renderer)\n    }\n\n    // Swap buffers.\n    let temp = this.textureOld\n    this.textureOld = this.textureComp\n    this.textureComp = temp\n    // Now textureOld contains the latest image, ready for the next frame.\n  }\n\n  public setSize(width: number, height: number): void {\n    this.textureComp.setSize(width, height)\n    this.textureOld.setSize(width, height)\n  }\n}\n\nexport { AfterimagePass }\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}