{"ast":null,"code":"import _classCallCheck from \"C:/Users/Nayyu/Desktop/skibidai-public-build/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Nayyu/Desktop/skibidai-public-build/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"C:/Users/Nayyu/Desktop/skibidai-public-build/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/Nayyu/Desktop/skibidai-public-build/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { Loader, FileLoader, TextureLoader, Group, Color, Matrix4, BufferGeometry, Float32BufferAttribute, Mesh, MeshPhongMaterial, BufferAttribute, MeshStandardMaterial, RepeatWrapping, ClampToEdgeWrapping, MirroredRepeatWrapping, LinearFilter, LinearMipmapLinearFilter, NearestFilter } from \"three\";\nimport { unzipSync } from \"fflate\";\nimport { decodeText } from \"../_polyfill/LoaderUtils.js\";\nvar ThreeMFLoader = /*#__PURE__*/function (_Loader) {\n  _inherits(ThreeMFLoader, _Loader);\n  var _super = _createSuper(ThreeMFLoader);\n  function ThreeMFLoader(manager) {\n    var _this;\n    _classCallCheck(this, ThreeMFLoader);\n    _this = _super.call(this, manager);\n    _this.availableExtensions = [];\n    return _this;\n  }\n  _createClass(ThreeMFLoader, [{\n    key: \"load\",\n    value: function load(url, onLoad, onProgress, onError) {\n      var scope = this;\n      var loader = new FileLoader(scope.manager);\n      loader.setPath(scope.path);\n      loader.setResponseType(\"arraybuffer\");\n      loader.setRequestHeader(scope.requestHeader);\n      loader.setWithCredentials(scope.withCredentials);\n      loader.load(url, function (buffer) {\n        try {\n          onLoad(scope.parse(buffer));\n        } catch (e) {\n          if (onError) {\n            onError(e);\n          } else {\n            console.error(e);\n          }\n          scope.manager.itemError(url);\n        }\n      }, onProgress, onError);\n    }\n  }, {\n    key: \"parse\",\n    value: function parse(data) {\n      var scope = this;\n      var textureLoader = new TextureLoader(this.manager);\n      function loadDocument(data2) {\n        var zip = null;\n        var file = null;\n        var relsName;\n        var modelRelsName;\n        var modelPartNames = [];\n        var texturesPartNames = [];\n        var modelRels;\n        var modelParts = {};\n        var printTicketParts = {};\n        var texturesParts = {};\n        var otherParts = {};\n        try {\n          zip = unzipSync(new Uint8Array(data2));\n        } catch (e) {\n          if (e instanceof ReferenceError) {\n            console.error(\"THREE.3MFLoader: fflate missing and file is compressed.\");\n            return null;\n          }\n        }\n        for (file in zip) {\n          if (file.match(/\\_rels\\/.rels$/)) {\n            relsName = file;\n          } else if (file.match(/3D\\/_rels\\/.*\\.model\\.rels$/)) {\n            modelRelsName = file;\n          } else if (file.match(/^3D\\/.*\\.model$/)) {\n            modelPartNames.push(file);\n          } else if (file.match(/^3D\\/Metadata\\/.*\\.xml$/)) ;else if (file.match(/^3D\\/Textures?\\/.*/)) {\n            texturesPartNames.push(file);\n          } else if (file.match(/^3D\\/Other\\/.*/)) ;\n        }\n        var relsView = zip[relsName];\n        var relsFileText = decodeText(relsView);\n        var rels = parseRelsXml(relsFileText);\n        if (modelRelsName) {\n          var relsView2 = zip[modelRelsName];\n          var relsFileText2 = decodeText(relsView2);\n          modelRels = parseRelsXml(relsFileText2);\n        }\n        for (var i = 0; i < modelPartNames.length; i++) {\n          var modelPart = modelPartNames[i];\n          var view = zip[modelPart];\n          var fileText = decodeText(view);\n          var xmlData = new DOMParser().parseFromString(fileText, \"application/xml\");\n          if (xmlData.documentElement.nodeName.toLowerCase() !== \"model\") {\n            console.error(\"THREE.3MFLoader: Error loading 3MF - no 3MF document found: \", modelPart);\n          }\n          var modelNode = xmlData.querySelector(\"model\");\n          var extensions = {};\n          for (var i2 = 0; i2 < modelNode.attributes.length; i2++) {\n            var attr = modelNode.attributes[i2];\n            if (attr.name.match(/^xmlns:(.+)$/)) {\n              extensions[attr.value] = RegExp.$1;\n            }\n          }\n          var modelData = parseModelNode(modelNode);\n          modelData[\"xml\"] = modelNode;\n          if (0 < Object.keys(extensions).length) {\n            modelData[\"extensions\"] = extensions;\n          }\n          modelParts[modelPart] = modelData;\n        }\n        for (var _i = 0; _i < texturesPartNames.length; _i++) {\n          var texturesPartName = texturesPartNames[_i];\n          texturesParts[texturesPartName] = zip[texturesPartName].buffer;\n        }\n        return {\n          rels: rels,\n          modelRels: modelRels,\n          model: modelParts,\n          printTicket: printTicketParts,\n          texture: texturesParts,\n          other: otherParts\n        };\n      }\n      function parseRelsXml(relsFileText) {\n        var relationships = [];\n        var relsXmlData = new DOMParser().parseFromString(relsFileText, \"application/xml\");\n        var relsNodes = relsXmlData.querySelectorAll(\"Relationship\");\n        for (var i = 0; i < relsNodes.length; i++) {\n          var relsNode = relsNodes[i];\n          var relationship = {\n            target: relsNode.getAttribute(\"Target\"),\n            //required\n            id: relsNode.getAttribute(\"Id\"),\n            //required\n            type: relsNode.getAttribute(\"Type\")\n            //required\n          };\n\n          relationships.push(relationship);\n        }\n        return relationships;\n      }\n      function parseMetadataNodes(metadataNodes) {\n        var metadataData = {};\n        for (var i = 0; i < metadataNodes.length; i++) {\n          var metadataNode = metadataNodes[i];\n          var name = metadataNode.getAttribute(\"name\");\n          var validNames = [\"Title\", \"Designer\", \"Description\", \"Copyright\", \"LicenseTerms\", \"Rating\", \"CreationDate\", \"ModificationDate\"];\n          if (0 <= validNames.indexOf(name)) {\n            metadataData[name] = metadataNode.textContent;\n          }\n        }\n        return metadataData;\n      }\n      function parseBasematerialsNode(basematerialsNode) {\n        var basematerialsData = {\n          id: basematerialsNode.getAttribute(\"id\"),\n          // required\n          basematerials: []\n        };\n        var basematerialNodes = basematerialsNode.querySelectorAll(\"base\");\n        for (var i = 0; i < basematerialNodes.length; i++) {\n          var basematerialNode = basematerialNodes[i];\n          var basematerialData = parseBasematerialNode(basematerialNode);\n          basematerialData.index = i;\n          basematerialsData.basematerials.push(basematerialData);\n        }\n        return basematerialsData;\n      }\n      function parseTexture2DNode(texture2DNode) {\n        var texture2dData = {\n          id: texture2DNode.getAttribute(\"id\"),\n          // required\n          path: texture2DNode.getAttribute(\"path\"),\n          // required\n          contenttype: texture2DNode.getAttribute(\"contenttype\"),\n          // required\n          tilestyleu: texture2DNode.getAttribute(\"tilestyleu\"),\n          tilestylev: texture2DNode.getAttribute(\"tilestylev\"),\n          filter: texture2DNode.getAttribute(\"filter\")\n        };\n        return texture2dData;\n      }\n      function parseTextures2DGroupNode(texture2DGroupNode) {\n        var texture2DGroupData = {\n          id: texture2DGroupNode.getAttribute(\"id\"),\n          // required\n          texid: texture2DGroupNode.getAttribute(\"texid\"),\n          // required\n          displaypropertiesid: texture2DGroupNode.getAttribute(\"displaypropertiesid\")\n        };\n        var tex2coordNodes = texture2DGroupNode.querySelectorAll(\"tex2coord\");\n        var uvs = [];\n        for (var i = 0; i < tex2coordNodes.length; i++) {\n          var tex2coordNode = tex2coordNodes[i];\n          var u = tex2coordNode.getAttribute(\"u\");\n          var v = tex2coordNode.getAttribute(\"v\");\n          uvs.push(parseFloat(u), parseFloat(v));\n        }\n        texture2DGroupData[\"uvs\"] = new Float32Array(uvs);\n        return texture2DGroupData;\n      }\n      function parseColorGroupNode(colorGroupNode) {\n        var colorGroupData = {\n          id: colorGroupNode.getAttribute(\"id\"),\n          // required\n          displaypropertiesid: colorGroupNode.getAttribute(\"displaypropertiesid\")\n        };\n        var colorNodes = colorGroupNode.querySelectorAll(\"color\");\n        var colors = [];\n        var colorObject = new Color();\n        for (var i = 0; i < colorNodes.length; i++) {\n          var colorNode = colorNodes[i];\n          var color = colorNode.getAttribute(\"color\");\n          colorObject.setStyle(color.substring(0, 7));\n          colorObject.convertSRGBToLinear();\n          colors.push(colorObject.r, colorObject.g, colorObject.b);\n        }\n        colorGroupData[\"colors\"] = new Float32Array(colors);\n        return colorGroupData;\n      }\n      function parseMetallicDisplaypropertiesNode(metallicDisplaypropetiesNode) {\n        var metallicDisplaypropertiesData = {\n          id: metallicDisplaypropetiesNode.getAttribute(\"id\")\n          // required\n        };\n\n        var metallicNodes = metallicDisplaypropetiesNode.querySelectorAll(\"pbmetallic\");\n        var metallicData = [];\n        for (var i = 0; i < metallicNodes.length; i++) {\n          var metallicNode = metallicNodes[i];\n          metallicData.push({\n            name: metallicNode.getAttribute(\"name\"),\n            // required\n            metallicness: parseFloat(metallicNode.getAttribute(\"metallicness\")),\n            // required\n            roughness: parseFloat(metallicNode.getAttribute(\"roughness\"))\n            // required\n          });\n        }\n\n        metallicDisplaypropertiesData.data = metallicData;\n        return metallicDisplaypropertiesData;\n      }\n      function parseBasematerialNode(basematerialNode) {\n        var basematerialData = {};\n        basematerialData[\"name\"] = basematerialNode.getAttribute(\"name\");\n        basematerialData[\"displaycolor\"] = basematerialNode.getAttribute(\"displaycolor\");\n        basematerialData[\"displaypropertiesid\"] = basematerialNode.getAttribute(\"displaypropertiesid\");\n        return basematerialData;\n      }\n      function parseMeshNode(meshNode) {\n        var meshData = {};\n        var vertices = [];\n        var vertexNodes = meshNode.querySelectorAll(\"vertices vertex\");\n        for (var i = 0; i < vertexNodes.length; i++) {\n          var vertexNode = vertexNodes[i];\n          var x = vertexNode.getAttribute(\"x\");\n          var y = vertexNode.getAttribute(\"y\");\n          var z = vertexNode.getAttribute(\"z\");\n          vertices.push(parseFloat(x), parseFloat(y), parseFloat(z));\n        }\n        meshData[\"vertices\"] = new Float32Array(vertices);\n        var triangleProperties = [];\n        var triangles = [];\n        var triangleNodes = meshNode.querySelectorAll(\"triangles triangle\");\n        for (var _i2 = 0; _i2 < triangleNodes.length; _i2++) {\n          var triangleNode = triangleNodes[_i2];\n          var v1 = triangleNode.getAttribute(\"v1\");\n          var v2 = triangleNode.getAttribute(\"v2\");\n          var v3 = triangleNode.getAttribute(\"v3\");\n          var p1 = triangleNode.getAttribute(\"p1\");\n          var p2 = triangleNode.getAttribute(\"p2\");\n          var p3 = triangleNode.getAttribute(\"p3\");\n          var pid = triangleNode.getAttribute(\"pid\");\n          var triangleProperty = {};\n          triangleProperty[\"v1\"] = parseInt(v1, 10);\n          triangleProperty[\"v2\"] = parseInt(v2, 10);\n          triangleProperty[\"v3\"] = parseInt(v3, 10);\n          triangles.push(triangleProperty[\"v1\"], triangleProperty[\"v2\"], triangleProperty[\"v3\"]);\n          if (p1) {\n            triangleProperty[\"p1\"] = parseInt(p1, 10);\n          }\n          if (p2) {\n            triangleProperty[\"p2\"] = parseInt(p2, 10);\n          }\n          if (p3) {\n            triangleProperty[\"p3\"] = parseInt(p3, 10);\n          }\n          if (pid) {\n            triangleProperty[\"pid\"] = pid;\n          }\n          if (0 < Object.keys(triangleProperty).length) {\n            triangleProperties.push(triangleProperty);\n          }\n        }\n        meshData[\"triangleProperties\"] = triangleProperties;\n        meshData[\"triangles\"] = new Uint32Array(triangles);\n        return meshData;\n      }\n      function parseComponentsNode(componentsNode) {\n        var components = [];\n        var componentNodes = componentsNode.querySelectorAll(\"component\");\n        for (var i = 0; i < componentNodes.length; i++) {\n          var componentNode = componentNodes[i];\n          var componentData = parseComponentNode(componentNode);\n          components.push(componentData);\n        }\n        return components;\n      }\n      function parseComponentNode(componentNode) {\n        var componentData = {};\n        componentData[\"objectId\"] = componentNode.getAttribute(\"objectid\");\n        var transform = componentNode.getAttribute(\"transform\");\n        if (transform) {\n          componentData[\"transform\"] = parseTransform(transform);\n        }\n        return componentData;\n      }\n      function parseTransform(transform) {\n        var t = [];\n        transform.split(\" \").forEach(function (s) {\n          t.push(parseFloat(s));\n        });\n        var matrix = new Matrix4();\n        matrix.set(t[0], t[3], t[6], t[9], t[1], t[4], t[7], t[10], t[2], t[5], t[8], t[11], 0, 0, 0, 1);\n        return matrix;\n      }\n      function parseObjectNode(objectNode) {\n        var objectData = {\n          type: objectNode.getAttribute(\"type\")\n        };\n        var id = objectNode.getAttribute(\"id\");\n        if (id) {\n          objectData[\"id\"] = id;\n        }\n        var pid = objectNode.getAttribute(\"pid\");\n        if (pid) {\n          objectData[\"pid\"] = pid;\n        }\n        var pindex = objectNode.getAttribute(\"pindex\");\n        if (pindex) {\n          objectData[\"pindex\"] = pindex;\n        }\n        var thumbnail = objectNode.getAttribute(\"thumbnail\");\n        if (thumbnail) {\n          objectData[\"thumbnail\"] = thumbnail;\n        }\n        var partnumber = objectNode.getAttribute(\"partnumber\");\n        if (partnumber) {\n          objectData[\"partnumber\"] = partnumber;\n        }\n        var name = objectNode.getAttribute(\"name\");\n        if (name) {\n          objectData[\"name\"] = name;\n        }\n        var meshNode = objectNode.querySelector(\"mesh\");\n        if (meshNode) {\n          objectData[\"mesh\"] = parseMeshNode(meshNode);\n        }\n        var componentsNode = objectNode.querySelector(\"components\");\n        if (componentsNode) {\n          objectData[\"components\"] = parseComponentsNode(componentsNode);\n        }\n        return objectData;\n      }\n      function parseResourcesNode(resourcesNode) {\n        var resourcesData = {};\n        resourcesData[\"basematerials\"] = {};\n        var basematerialsNodes = resourcesNode.querySelectorAll(\"basematerials\");\n        for (var i = 0; i < basematerialsNodes.length; i++) {\n          var basematerialsNode = basematerialsNodes[i];\n          var basematerialsData = parseBasematerialsNode(basematerialsNode);\n          resourcesData[\"basematerials\"][basematerialsData[\"id\"]] = basematerialsData;\n        }\n        resourcesData[\"texture2d\"] = {};\n        var textures2DNodes = resourcesNode.querySelectorAll(\"texture2d\");\n        for (var _i3 = 0; _i3 < textures2DNodes.length; _i3++) {\n          var textures2DNode = textures2DNodes[_i3];\n          var texture2DData = parseTexture2DNode(textures2DNode);\n          resourcesData[\"texture2d\"][texture2DData[\"id\"]] = texture2DData;\n        }\n        resourcesData[\"colorgroup\"] = {};\n        var colorGroupNodes = resourcesNode.querySelectorAll(\"colorgroup\");\n        for (var _i4 = 0; _i4 < colorGroupNodes.length; _i4++) {\n          var colorGroupNode = colorGroupNodes[_i4];\n          var colorGroupData = parseColorGroupNode(colorGroupNode);\n          resourcesData[\"colorgroup\"][colorGroupData[\"id\"]] = colorGroupData;\n        }\n        resourcesData[\"pbmetallicdisplayproperties\"] = {};\n        var pbmetallicdisplaypropertiesNodes = resourcesNode.querySelectorAll(\"pbmetallicdisplayproperties\");\n        for (var _i5 = 0; _i5 < pbmetallicdisplaypropertiesNodes.length; _i5++) {\n          var pbmetallicdisplaypropertiesNode = pbmetallicdisplaypropertiesNodes[_i5];\n          var pbmetallicdisplaypropertiesData = parseMetallicDisplaypropertiesNode(pbmetallicdisplaypropertiesNode);\n          resourcesData[\"pbmetallicdisplayproperties\"][pbmetallicdisplaypropertiesData[\"id\"]] = pbmetallicdisplaypropertiesData;\n        }\n        resourcesData[\"texture2dgroup\"] = {};\n        var textures2DGroupNodes = resourcesNode.querySelectorAll(\"texture2dgroup\");\n        for (var _i6 = 0; _i6 < textures2DGroupNodes.length; _i6++) {\n          var textures2DGroupNode = textures2DGroupNodes[_i6];\n          var textures2DGroupData = parseTextures2DGroupNode(textures2DGroupNode);\n          resourcesData[\"texture2dgroup\"][textures2DGroupData[\"id\"]] = textures2DGroupData;\n        }\n        resourcesData[\"object\"] = {};\n        var objectNodes = resourcesNode.querySelectorAll(\"object\");\n        for (var _i7 = 0; _i7 < objectNodes.length; _i7++) {\n          var objectNode = objectNodes[_i7];\n          var objectData = parseObjectNode(objectNode);\n          resourcesData[\"object\"][objectData[\"id\"]] = objectData;\n        }\n        return resourcesData;\n      }\n      function parseBuildNode(buildNode) {\n        var buildData = [];\n        var itemNodes = buildNode.querySelectorAll(\"item\");\n        for (var i = 0; i < itemNodes.length; i++) {\n          var itemNode = itemNodes[i];\n          var buildItem = {\n            objectId: itemNode.getAttribute(\"objectid\")\n          };\n          var transform = itemNode.getAttribute(\"transform\");\n          if (transform) {\n            buildItem[\"transform\"] = parseTransform(transform);\n          }\n          buildData.push(buildItem);\n        }\n        return buildData;\n      }\n      function parseModelNode(modelNode) {\n        var modelData = {\n          unit: modelNode.getAttribute(\"unit\") || \"millimeter\"\n        };\n        var metadataNodes = modelNode.querySelectorAll(\"metadata\");\n        if (metadataNodes) {\n          modelData[\"metadata\"] = parseMetadataNodes(metadataNodes);\n        }\n        var resourcesNode = modelNode.querySelector(\"resources\");\n        if (resourcesNode) {\n          modelData[\"resources\"] = parseResourcesNode(resourcesNode);\n        }\n        var buildNode = modelNode.querySelector(\"build\");\n        if (buildNode) {\n          modelData[\"build\"] = parseBuildNode(buildNode);\n        }\n        return modelData;\n      }\n      function buildTexture(texture2dgroup, objects2, modelData, textureData) {\n        var texid = texture2dgroup.texid;\n        var texture2ds = modelData.resources.texture2d;\n        var texture2d = texture2ds[texid];\n        if (texture2d) {\n          var data2 = textureData[texture2d.path];\n          var type = texture2d.contenttype;\n          var blob = new Blob([data2], {\n            type: type\n          });\n          var sourceURI = URL.createObjectURL(blob);\n          var texture = textureLoader.load(sourceURI, function () {\n            URL.revokeObjectURL(sourceURI);\n          });\n          if (\"colorSpace\" in texture) texture.colorSpace = \"srgb\";else texture.encoding = 3001;\n          switch (texture2d.tilestyleu) {\n            case \"wrap\":\n              texture.wrapS = RepeatWrapping;\n              break;\n            case \"mirror\":\n              texture.wrapS = MirroredRepeatWrapping;\n              break;\n            case \"none\":\n            case \"clamp\":\n              texture.wrapS = ClampToEdgeWrapping;\n              break;\n            default:\n              texture.wrapS = RepeatWrapping;\n          }\n          switch (texture2d.tilestylev) {\n            case \"wrap\":\n              texture.wrapT = RepeatWrapping;\n              break;\n            case \"mirror\":\n              texture.wrapT = MirroredRepeatWrapping;\n              break;\n            case \"none\":\n            case \"clamp\":\n              texture.wrapT = ClampToEdgeWrapping;\n              break;\n            default:\n              texture.wrapT = RepeatWrapping;\n          }\n          switch (texture2d.filter) {\n            case \"auto\":\n              texture.magFilter = LinearFilter;\n              texture.minFilter = LinearMipmapLinearFilter;\n              break;\n            case \"linear\":\n              texture.magFilter = LinearFilter;\n              texture.minFilter = LinearFilter;\n              break;\n            case \"nearest\":\n              texture.magFilter = NearestFilter;\n              texture.minFilter = NearestFilter;\n              break;\n            default:\n              texture.magFilter = LinearFilter;\n              texture.minFilter = LinearMipmapLinearFilter;\n          }\n          return texture;\n        } else {\n          return null;\n        }\n      }\n      function buildBasematerialsMeshes(basematerials, triangleProperties, meshData, objects2, modelData, textureData, objectData) {\n        var objectPindex = objectData.pindex;\n        var materialMap = {};\n        for (var i = 0, l = triangleProperties.length; i < l; i++) {\n          var triangleProperty = triangleProperties[i];\n          var pindex = triangleProperty.p1 !== void 0 ? triangleProperty.p1 : objectPindex;\n          if (materialMap[pindex] === void 0) materialMap[pindex] = [];\n          materialMap[pindex].push(triangleProperty);\n        }\n        var keys = Object.keys(materialMap);\n        var meshes = [];\n        for (var _i8 = 0, _l = keys.length; _i8 < _l; _i8++) {\n          var materialIndex = keys[_i8];\n          var trianglePropertiesProps = materialMap[materialIndex];\n          var basematerialData = basematerials.basematerials[materialIndex];\n          var material = getBuild(basematerialData, objects2, modelData, textureData, objectData, buildBasematerial);\n          var geometry = new BufferGeometry();\n          var positionData = [];\n          var vertices = meshData.vertices;\n          for (var j = 0, jl = trianglePropertiesProps.length; j < jl; j++) {\n            var _triangleProperty = trianglePropertiesProps[j];\n            positionData.push(vertices[_triangleProperty.v1 * 3 + 0]);\n            positionData.push(vertices[_triangleProperty.v1 * 3 + 1]);\n            positionData.push(vertices[_triangleProperty.v1 * 3 + 2]);\n            positionData.push(vertices[_triangleProperty.v2 * 3 + 0]);\n            positionData.push(vertices[_triangleProperty.v2 * 3 + 1]);\n            positionData.push(vertices[_triangleProperty.v2 * 3 + 2]);\n            positionData.push(vertices[_triangleProperty.v3 * 3 + 0]);\n            positionData.push(vertices[_triangleProperty.v3 * 3 + 1]);\n            positionData.push(vertices[_triangleProperty.v3 * 3 + 2]);\n          }\n          geometry.setAttribute(\"position\", new Float32BufferAttribute(positionData, 3));\n          var mesh = new Mesh(geometry, material);\n          meshes.push(mesh);\n        }\n        return meshes;\n      }\n      function buildTexturedMesh(texture2dgroup, triangleProperties, meshData, objects2, modelData, textureData, objectData) {\n        var geometry = new BufferGeometry();\n        var positionData = [];\n        var uvData = [];\n        var vertices = meshData.vertices;\n        var uvs = texture2dgroup.uvs;\n        for (var i = 0, l = triangleProperties.length; i < l; i++) {\n          var triangleProperty = triangleProperties[i];\n          positionData.push(vertices[triangleProperty.v1 * 3 + 0]);\n          positionData.push(vertices[triangleProperty.v1 * 3 + 1]);\n          positionData.push(vertices[triangleProperty.v1 * 3 + 2]);\n          positionData.push(vertices[triangleProperty.v2 * 3 + 0]);\n          positionData.push(vertices[triangleProperty.v2 * 3 + 1]);\n          positionData.push(vertices[triangleProperty.v2 * 3 + 2]);\n          positionData.push(vertices[triangleProperty.v3 * 3 + 0]);\n          positionData.push(vertices[triangleProperty.v3 * 3 + 1]);\n          positionData.push(vertices[triangleProperty.v3 * 3 + 2]);\n          uvData.push(uvs[triangleProperty.p1 * 2 + 0]);\n          uvData.push(uvs[triangleProperty.p1 * 2 + 1]);\n          uvData.push(uvs[triangleProperty.p2 * 2 + 0]);\n          uvData.push(uvs[triangleProperty.p2 * 2 + 1]);\n          uvData.push(uvs[triangleProperty.p3 * 2 + 0]);\n          uvData.push(uvs[triangleProperty.p3 * 2 + 1]);\n        }\n        geometry.setAttribute(\"position\", new Float32BufferAttribute(positionData, 3));\n        geometry.setAttribute(\"uv\", new Float32BufferAttribute(uvData, 2));\n        var texture = getBuild(texture2dgroup, objects2, modelData, textureData, objectData, buildTexture);\n        var material = new MeshPhongMaterial({\n          map: texture,\n          flatShading: true\n        });\n        var mesh = new Mesh(geometry, material);\n        return mesh;\n      }\n      function buildVertexColorMesh(colorgroup, triangleProperties, meshData, objects2, modelData, objectData) {\n        var geometry = new BufferGeometry();\n        var positionData = [];\n        var colorData = [];\n        var vertices = meshData.vertices;\n        var colors = colorgroup.colors;\n        for (var i = 0, l = triangleProperties.length; i < l; i++) {\n          var triangleProperty = triangleProperties[i];\n          var v1 = triangleProperty.v1;\n          var v2 = triangleProperty.v2;\n          var v3 = triangleProperty.v3;\n          positionData.push(vertices[v1 * 3 + 0]);\n          positionData.push(vertices[v1 * 3 + 1]);\n          positionData.push(vertices[v1 * 3 + 2]);\n          positionData.push(vertices[v2 * 3 + 0]);\n          positionData.push(vertices[v2 * 3 + 1]);\n          positionData.push(vertices[v2 * 3 + 2]);\n          positionData.push(vertices[v3 * 3 + 0]);\n          positionData.push(vertices[v3 * 3 + 1]);\n          positionData.push(vertices[v3 * 3 + 2]);\n          var p1 = triangleProperty.p1 !== void 0 ? triangleProperty.p1 : objectData.pindex;\n          var p2 = triangleProperty.p2 !== void 0 ? triangleProperty.p2 : p1;\n          var p3 = triangleProperty.p3 !== void 0 ? triangleProperty.p3 : p1;\n          colorData.push(colors[p1 * 3 + 0]);\n          colorData.push(colors[p1 * 3 + 1]);\n          colorData.push(colors[p1 * 3 + 2]);\n          colorData.push(colors[p2 * 3 + 0]);\n          colorData.push(colors[p2 * 3 + 1]);\n          colorData.push(colors[p2 * 3 + 2]);\n          colorData.push(colors[p3 * 3 + 0]);\n          colorData.push(colors[p3 * 3 + 1]);\n          colorData.push(colors[p3 * 3 + 2]);\n        }\n        geometry.setAttribute(\"position\", new Float32BufferAttribute(positionData, 3));\n        geometry.setAttribute(\"color\", new Float32BufferAttribute(colorData, 3));\n        var material = new MeshPhongMaterial({\n          vertexColors: true,\n          flatShading: true\n        });\n        var mesh = new Mesh(geometry, material);\n        return mesh;\n      }\n      function buildDefaultMesh(meshData) {\n        var geometry = new BufferGeometry();\n        geometry.setIndex(new BufferAttribute(meshData[\"triangles\"], 1));\n        geometry.setAttribute(\"position\", new BufferAttribute(meshData[\"vertices\"], 3));\n        var material = new MeshPhongMaterial({\n          color: 11184895,\n          flatShading: true\n        });\n        var mesh = new Mesh(geometry, material);\n        return mesh;\n      }\n      function buildMeshes(resourceMap, meshData, objects2, modelData, textureData, objectData) {\n        var keys = Object.keys(resourceMap);\n        var meshes = [];\n        for (var i = 0, il = keys.length; i < il; i++) {\n          var resourceId = keys[i];\n          var triangleProperties = resourceMap[resourceId];\n          var resourceType = getResourceType(resourceId, modelData);\n          switch (resourceType) {\n            case \"material\":\n              var basematerials = modelData.resources.basematerials[resourceId];\n              var newMeshes = buildBasematerialsMeshes(basematerials, triangleProperties, meshData, objects2, modelData, textureData, objectData);\n              for (var j = 0, jl = newMeshes.length; j < jl; j++) {\n                meshes.push(newMeshes[j]);\n              }\n              break;\n            case \"texture\":\n              var texture2dgroup = modelData.resources.texture2dgroup[resourceId];\n              meshes.push(buildTexturedMesh(texture2dgroup, triangleProperties, meshData, objects2, modelData, textureData, objectData));\n              break;\n            case \"vertexColors\":\n              var colorgroup = modelData.resources.colorgroup[resourceId];\n              meshes.push(buildVertexColorMesh(colorgroup, triangleProperties, meshData, objects2, modelData, objectData));\n              break;\n            case \"default\":\n              meshes.push(buildDefaultMesh(meshData));\n              break;\n            default:\n              console.error(\"THREE.3MFLoader: Unsupported resource type.\");\n          }\n        }\n        return meshes;\n      }\n      function getResourceType(pid, modelData) {\n        if (modelData.resources.texture2dgroup[pid] !== void 0) {\n          return \"texture\";\n        } else if (modelData.resources.basematerials[pid] !== void 0) {\n          return \"material\";\n        } else if (modelData.resources.colorgroup[pid] !== void 0) {\n          return \"vertexColors\";\n        } else if (pid === \"default\") {\n          return \"default\";\n        } else {\n          return void 0;\n        }\n      }\n      function analyzeObject(modelData, meshData, objectData) {\n        var resourceMap = {};\n        var triangleProperties = meshData[\"triangleProperties\"];\n        var objectPid = objectData.pid;\n        for (var i = 0, l = triangleProperties.length; i < l; i++) {\n          var triangleProperty = triangleProperties[i];\n          var pid = triangleProperty.pid !== void 0 ? triangleProperty.pid : objectPid;\n          if (pid === void 0) pid = \"default\";\n          if (resourceMap[pid] === void 0) resourceMap[pid] = [];\n          resourceMap[pid].push(triangleProperty);\n        }\n        return resourceMap;\n      }\n      function buildGroup(meshData, objects2, modelData, textureData, objectData) {\n        var group = new Group();\n        var resourceMap = analyzeObject(modelData, meshData, objectData);\n        var meshes = buildMeshes(resourceMap, meshData, objects2, modelData, textureData, objectData);\n        for (var i = 0, l = meshes.length; i < l; i++) {\n          group.add(meshes[i]);\n        }\n        return group;\n      }\n      function applyExtensions(extensions, meshData, modelXml) {\n        if (!extensions) {\n          return;\n        }\n        var availableExtensions = [];\n        var keys = Object.keys(extensions);\n        for (var i = 0; i < keys.length; i++) {\n          var ns = keys[i];\n          for (var j = 0; j < scope.availableExtensions.length; j++) {\n            var extension = scope.availableExtensions[j];\n            if (extension.ns === ns) {\n              availableExtensions.push(extension);\n            }\n          }\n        }\n        for (var _i9 = 0; _i9 < availableExtensions.length; _i9++) {\n          var _extension = availableExtensions[_i9];\n          _extension.apply(modelXml, extensions[_extension[\"ns\"]], meshData);\n        }\n      }\n      function getBuild(data2, objects2, modelData, textureData, objectData, builder) {\n        if (data2.build !== void 0) return data2.build;\n        data2.build = builder(data2, objects2, modelData, textureData, objectData);\n        return data2.build;\n      }\n      function buildBasematerial(materialData, objects2, modelData) {\n        var material;\n        var displaypropertiesid = materialData.displaypropertiesid;\n        var pbmetallicdisplayproperties = modelData.resources.pbmetallicdisplayproperties;\n        if (displaypropertiesid !== null && pbmetallicdisplayproperties[displaypropertiesid] !== void 0) {\n          var pbmetallicdisplayproperty = pbmetallicdisplayproperties[displaypropertiesid];\n          var metallicData = pbmetallicdisplayproperty.data[materialData.index];\n          material = new MeshStandardMaterial({\n            flatShading: true,\n            roughness: metallicData.roughness,\n            metalness: metallicData.metallicness\n          });\n        } else {\n          material = new MeshPhongMaterial({\n            flatShading: true\n          });\n        }\n        material.name = materialData.name;\n        var displaycolor = materialData.displaycolor;\n        var color = displaycolor.substring(0, 7);\n        material.color.setStyle(color);\n        material.color.convertSRGBToLinear();\n        if (displaycolor.length === 9) {\n          material.opacity = parseInt(displaycolor.charAt(7) + displaycolor.charAt(8), 16) / 255;\n        }\n        return material;\n      }\n      function buildComposite(compositeData, objects2, modelData, textureData) {\n        var composite = new Group();\n        for (var j = 0; j < compositeData.length; j++) {\n          var component = compositeData[j];\n          var build2 = objects2[component.objectId];\n          if (build2 === void 0) {\n            buildObject(component.objectId, objects2, modelData, textureData);\n            build2 = objects2[component.objectId];\n          }\n          var object3D = build2.clone();\n          var transform = component.transform;\n          if (transform) {\n            object3D.applyMatrix4(transform);\n          }\n          composite.add(object3D);\n        }\n        return composite;\n      }\n      function buildObject(objectId, objects2, modelData, textureData) {\n        var objectData = modelData[\"resources\"][\"object\"][objectId];\n        if (objectData[\"mesh\"]) {\n          var meshData = objectData[\"mesh\"];\n          var extensions = modelData[\"extensions\"];\n          var modelXml = modelData[\"xml\"];\n          applyExtensions(extensions, meshData, modelXml);\n          objects2[objectData.id] = getBuild(meshData, objects2, modelData, textureData, objectData, buildGroup);\n        } else {\n          var compositeData = objectData[\"components\"];\n          objects2[objectData.id] = getBuild(compositeData, objects2, modelData, textureData, objectData, buildComposite);\n        }\n      }\n      function buildObjects(data3mf2) {\n        var modelsData = data3mf2.model;\n        var modelRels = data3mf2.modelRels;\n        var objects2 = {};\n        var modelsKeys = Object.keys(modelsData);\n        var textureData = {};\n        if (modelRels) {\n          for (var i = 0, l = modelRels.length; i < l; i++) {\n            var modelRel = modelRels[i];\n            var textureKey = modelRel.target.substring(1);\n            if (data3mf2.texture[textureKey]) {\n              textureData[modelRel.target] = data3mf2.texture[textureKey];\n            }\n          }\n        }\n        for (var _i10 = 0; _i10 < modelsKeys.length; _i10++) {\n          var modelsKey = modelsKeys[_i10];\n          var modelData = modelsData[modelsKey];\n          var objectIds = Object.keys(modelData[\"resources\"][\"object\"]);\n          for (var j = 0; j < objectIds.length; j++) {\n            var objectId = objectIds[j];\n            buildObject(objectId, objects2, modelData, textureData);\n          }\n        }\n        return objects2;\n      }\n      function fetch3DModelPart(rels) {\n        for (var i = 0; i < rels.length; i++) {\n          var rel = rels[i];\n          var extension = rel.target.split(\".\").pop();\n          if (extension.toLowerCase() === \"model\") return rel;\n        }\n      }\n      function build(objects2, data3mf2) {\n        var group = new Group();\n        var relationship = fetch3DModelPart(data3mf2[\"rels\"]);\n        var buildData = data3mf2.model[relationship[\"target\"].substring(1)][\"build\"];\n        for (var i = 0; i < buildData.length; i++) {\n          var buildItem = buildData[i];\n          var object3D = objects2[buildItem[\"objectId\"]];\n          var transform = buildItem[\"transform\"];\n          if (transform) {\n            object3D.applyMatrix4(transform);\n          }\n          group.add(object3D);\n        }\n        return group;\n      }\n      var data3mf = loadDocument(data);\n      var objects = buildObjects(data3mf);\n      return build(objects, data3mf);\n    }\n  }, {\n    key: \"addExtension\",\n    value: function addExtension(extension) {\n      this.availableExtensions.push(extension);\n    }\n  }]);\n  return ThreeMFLoader;\n}(Loader);\nexport { ThreeMFLoader };","map":{"version":3,"names":["ThreeMFLoader","_Loader","_inherits","_super","_createSuper","manager","_this","_classCallCheck","call","availableExtensions","_createClass","key","value","load","url","onLoad","onProgress","onError","scope","loader","FileLoader","setPath","path","setResponseType","setRequestHeader","requestHeader","setWithCredentials","withCredentials","buffer","parse","e","console","error","itemError","data","textureLoader","TextureLoader","loadDocument","data2","zip","file","relsName","modelRelsName","modelPartNames","texturesPartNames","modelRels","modelParts","printTicketParts","texturesParts","otherParts","unzipSync","Uint8Array","ReferenceError","match","push","relsView","relsFileText","decodeText","rels","parseRelsXml","relsView2","relsFileText2","i","length","modelPart","view","fileText","xmlData","DOMParser","parseFromString","documentElement","nodeName","toLowerCase","modelNode","querySelector","extensions","i2","attributes","attr","name","RegExp","$1","modelData","parseModelNode","Object","keys","texturesPartName","model","printTicket","texture","other","relationships","relsXmlData","relsNodes","querySelectorAll","relsNode","relationship","target","getAttribute","id","type","parseMetadataNodes","metadataNodes","metadataData","metadataNode","validNames","indexOf","textContent","parseBasematerialsNode","basematerialsNode","basematerialsData","basematerials","basematerialNodes","basematerialNode","basematerialData","parseBasematerialNode","index","parseTexture2DNode","texture2DNode","texture2dData","contenttype","tilestyleu","tilestylev","filter","parseTextures2DGroupNode","texture2DGroupNode","texture2DGroupData","texid","displaypropertiesid","tex2coordNodes","uvs","tex2coordNode","u","v","parseFloat","Float32Array","parseColorGroupNode","colorGroupNode","colorGroupData","colorNodes","colors","colorObject","Color","colorNode","color","setStyle","substring","convertSRGBToLinear","r","g","b","parseMetallicDisplaypropertiesNode","metallicDisplaypropetiesNode","metallicDisplaypropertiesData","metallicNodes","metallicData","metallicNode","metallicness","roughness","parseMeshNode","meshNode","meshData","vertices","vertexNodes","vertexNode","x","y","z","triangleProperties","triangles","triangleNodes","triangleNode","v1","v2","v3","p1","p2","p3","pid","triangleProperty","parseInt","Uint32Array","parseComponentsNode","componentsNode","components","componentNodes","componentNode","componentData","parseComponentNode","transform","parseTransform","t","split","forEach","s","matrix","Matrix4","set","parseObjectNode","objectNode","objectData","pindex","thumbnail","partnumber","parseResourcesNode","resourcesNode","resourcesData","basematerialsNodes","textures2DNodes","textures2DNode","texture2DData","colorGroupNodes","pbmetallicdisplaypropertiesNodes","pbmetallicdisplaypropertiesNode","pbmetallicdisplaypropertiesData","textures2DGroupNodes","textures2DGroupNode","textures2DGroupData","objectNodes","parseBuildNode","buildNode","buildData","itemNodes","itemNode","buildItem","objectId","unit","buildTexture","texture2dgroup","objects2","textureData","texture2ds","resources","texture2d","blob","Blob","sourceURI","URL","createObjectURL","revokeObjectURL","colorSpace","encoding","wrapS","RepeatWrapping","MirroredRepeatWrapping","ClampToEdgeWrapping","wrapT","magFilter","LinearFilter","minFilter","LinearMipmapLinearFilter","NearestFilter","buildBasematerialsMeshes","objectPindex","materialMap","l","meshes","materialIndex","trianglePropertiesProps","material","getBuild","buildBasematerial","geometry","BufferGeometry","positionData","j","jl","setAttribute","Float32BufferAttribute","mesh","Mesh","buildTexturedMesh","uvData","MeshPhongMaterial","map","flatShading","buildVertexColorMesh","colorgroup","colorData","vertexColors","buildDefaultMesh","setIndex","BufferAttribute","buildMeshes","resourceMap","il","resourceId","resourceType","getResourceType","newMeshes","analyzeObject","objectPid","buildGroup","group","Group","add","applyExtensions","modelXml","ns","extension","apply","builder","build","materialData","pbmetallicdisplayproperties","pbmetallicdisplayproperty","MeshStandardMaterial","metalness","displaycolor","opacity","charAt","buildComposite","compositeData","composite","component","build2","buildObject","object3D","clone","applyMatrix4","buildObjects","data3mf2","modelsData","modelsKeys","modelRel","textureKey","modelsKey","objectIds","fetch3DModelPart","rel","pop","data3mf","objects","addExtension","Loader"],"sources":["C:\\Users\\Nayyu\\Desktop\\skibidai-public-build\\node_modules\\src\\loaders\\3MFLoader.js"],"sourcesContent":["import {\n  BufferAttribute,\n  BufferGeometry,\n  ClampToEdgeWrapping,\n  Color,\n  FileLoader,\n  Float32BufferAttribute,\n  Group,\n  LinearFilter,\n  LinearMipmapLinearFilter,\n  Loader,\n  LoaderUtils,\n  Matrix4,\n  Mesh,\n  MeshPhongMaterial,\n  MeshStandardMaterial,\n  MirroredRepeatWrapping,\n  NearestFilter,\n  RepeatWrapping,\n  TextureLoader,\n} from 'three'\nimport { unzipSync } from 'fflate'\nimport { decodeText } from '../_polyfill/LoaderUtils'\n\n/**\n *\n * 3D Manufacturing Format (3MF) specification: https://3mf.io/specification/\n *\n * The following features from the core specification are supported:\n *\n * - 3D Models\n * - Object Resources (Meshes and Components)\n * - Material Resources (Base Materials)\n *\n * 3MF Materials and Properties Extension are only partially supported.\n *\n * - Texture 2D\n * - Texture 2D Groups\n * - Color Groups (Vertex Colors)\n * - Metallic Display Properties (PBR)\n */\n\nclass ThreeMFLoader extends Loader {\n  constructor(manager) {\n    super(manager)\n    this.availableExtensions = []\n  }\n\n  load(url, onLoad, onProgress, onError) {\n    const scope = this\n    const loader = new FileLoader(scope.manager)\n    loader.setPath(scope.path)\n    loader.setResponseType('arraybuffer')\n    loader.setRequestHeader(scope.requestHeader)\n    loader.setWithCredentials(scope.withCredentials)\n    loader.load(\n      url,\n      function (buffer) {\n        try {\n          onLoad(scope.parse(buffer))\n        } catch (e) {\n          if (onError) {\n            onError(e)\n          } else {\n            console.error(e)\n          }\n\n          scope.manager.itemError(url)\n        }\n      },\n      onProgress,\n      onError,\n    )\n  }\n\n  parse(data) {\n    const scope = this\n    const textureLoader = new TextureLoader(this.manager)\n\n    function loadDocument(data) {\n      let zip = null\n      let file = null\n\n      let relsName\n      let modelRelsName\n      const modelPartNames = []\n      const printTicketPartNames = []\n      const texturesPartNames = []\n      const otherPartNames = []\n\n      let modelRels\n      const modelParts = {}\n      const printTicketParts = {}\n      const texturesParts = {}\n      const otherParts = {}\n\n      try {\n        zip = unzipSync(new Uint8Array(data))\n      } catch (e) {\n        if (e instanceof ReferenceError) {\n          console.error('THREE.3MFLoader: fflate missing and file is compressed.')\n          return null\n        }\n      }\n\n      for (file in zip) {\n        if (file.match(/\\_rels\\/.rels$/)) {\n          relsName = file\n        } else if (file.match(/3D\\/_rels\\/.*\\.model\\.rels$/)) {\n          modelRelsName = file\n        } else if (file.match(/^3D\\/.*\\.model$/)) {\n          modelPartNames.push(file)\n        } else if (file.match(/^3D\\/Metadata\\/.*\\.xml$/)) {\n          printTicketPartNames.push(file)\n        } else if (file.match(/^3D\\/Textures?\\/.*/)) {\n          texturesPartNames.push(file)\n        } else if (file.match(/^3D\\/Other\\/.*/)) {\n          otherPartNames.push(file)\n        }\n      }\n\n      //\n\n      const relsView = zip[relsName]\n      const relsFileText = decodeText(relsView)\n      const rels = parseRelsXml(relsFileText)\n\n      //\n\n      if (modelRelsName) {\n        const relsView = zip[modelRelsName]\n        const relsFileText = decodeText(relsView)\n        modelRels = parseRelsXml(relsFileText)\n      }\n\n      //\n\n      for (let i = 0; i < modelPartNames.length; i++) {\n        const modelPart = modelPartNames[i]\n        const view = zip[modelPart]\n\n        const fileText = decodeText(view)\n        const xmlData = new DOMParser().parseFromString(fileText, 'application/xml')\n\n        if (xmlData.documentElement.nodeName.toLowerCase() !== 'model') {\n          console.error('THREE.3MFLoader: Error loading 3MF - no 3MF document found: ', modelPart)\n        }\n\n        const modelNode = xmlData.querySelector('model')\n        const extensions = {}\n\n        for (let i = 0; i < modelNode.attributes.length; i++) {\n          const attr = modelNode.attributes[i]\n          if (attr.name.match(/^xmlns:(.+)$/)) {\n            extensions[attr.value] = RegExp.$1\n          }\n        }\n\n        const modelData = parseModelNode(modelNode)\n        modelData['xml'] = modelNode\n\n        if (0 < Object.keys(extensions).length) {\n          modelData['extensions'] = extensions\n        }\n\n        modelParts[modelPart] = modelData\n      }\n\n      //\n\n      for (let i = 0; i < texturesPartNames.length; i++) {\n        const texturesPartName = texturesPartNames[i]\n        texturesParts[texturesPartName] = zip[texturesPartName].buffer\n      }\n\n      return {\n        rels: rels,\n        modelRels: modelRels,\n        model: modelParts,\n        printTicket: printTicketParts,\n        texture: texturesParts,\n        other: otherParts,\n      }\n    }\n\n    function parseRelsXml(relsFileText) {\n      const relationships = []\n\n      const relsXmlData = new DOMParser().parseFromString(relsFileText, 'application/xml')\n\n      const relsNodes = relsXmlData.querySelectorAll('Relationship')\n\n      for (let i = 0; i < relsNodes.length; i++) {\n        const relsNode = relsNodes[i]\n\n        const relationship = {\n          target: relsNode.getAttribute('Target'), //required\n          id: relsNode.getAttribute('Id'), //required\n          type: relsNode.getAttribute('Type'), //required\n        }\n\n        relationships.push(relationship)\n      }\n\n      return relationships\n    }\n\n    function parseMetadataNodes(metadataNodes) {\n      const metadataData = {}\n\n      for (let i = 0; i < metadataNodes.length; i++) {\n        const metadataNode = metadataNodes[i]\n        const name = metadataNode.getAttribute('name')\n        const validNames = [\n          'Title',\n          'Designer',\n          'Description',\n          'Copyright',\n          'LicenseTerms',\n          'Rating',\n          'CreationDate',\n          'ModificationDate',\n        ]\n\n        if (0 <= validNames.indexOf(name)) {\n          metadataData[name] = metadataNode.textContent\n        }\n      }\n\n      return metadataData\n    }\n\n    function parseBasematerialsNode(basematerialsNode) {\n      const basematerialsData = {\n        id: basematerialsNode.getAttribute('id'), // required\n        basematerials: [],\n      }\n\n      const basematerialNodes = basematerialsNode.querySelectorAll('base')\n\n      for (let i = 0; i < basematerialNodes.length; i++) {\n        const basematerialNode = basematerialNodes[i]\n        const basematerialData = parseBasematerialNode(basematerialNode)\n        basematerialData.index = i // the order and count of the material nodes form an implicit 0-based index\n        basematerialsData.basematerials.push(basematerialData)\n      }\n\n      return basematerialsData\n    }\n\n    function parseTexture2DNode(texture2DNode) {\n      const texture2dData = {\n        id: texture2DNode.getAttribute('id'), // required\n        path: texture2DNode.getAttribute('path'), // required\n        contenttype: texture2DNode.getAttribute('contenttype'), // required\n        tilestyleu: texture2DNode.getAttribute('tilestyleu'),\n        tilestylev: texture2DNode.getAttribute('tilestylev'),\n        filter: texture2DNode.getAttribute('filter'),\n      }\n\n      return texture2dData\n    }\n\n    function parseTextures2DGroupNode(texture2DGroupNode) {\n      const texture2DGroupData = {\n        id: texture2DGroupNode.getAttribute('id'), // required\n        texid: texture2DGroupNode.getAttribute('texid'), // required\n        displaypropertiesid: texture2DGroupNode.getAttribute('displaypropertiesid'),\n      }\n\n      const tex2coordNodes = texture2DGroupNode.querySelectorAll('tex2coord')\n\n      const uvs = []\n\n      for (let i = 0; i < tex2coordNodes.length; i++) {\n        const tex2coordNode = tex2coordNodes[i]\n        const u = tex2coordNode.getAttribute('u')\n        const v = tex2coordNode.getAttribute('v')\n\n        uvs.push(parseFloat(u), parseFloat(v))\n      }\n\n      texture2DGroupData['uvs'] = new Float32Array(uvs)\n\n      return texture2DGroupData\n    }\n\n    function parseColorGroupNode(colorGroupNode) {\n      const colorGroupData = {\n        id: colorGroupNode.getAttribute('id'), // required\n        displaypropertiesid: colorGroupNode.getAttribute('displaypropertiesid'),\n      }\n\n      const colorNodes = colorGroupNode.querySelectorAll('color')\n\n      const colors = []\n      const colorObject = new Color()\n\n      for (let i = 0; i < colorNodes.length; i++) {\n        const colorNode = colorNodes[i]\n        const color = colorNode.getAttribute('color')\n\n        colorObject.setStyle(color.substring(0, 7))\n        colorObject.convertSRGBToLinear() // color is in sRGB\n\n        colors.push(colorObject.r, colorObject.g, colorObject.b)\n      }\n\n      colorGroupData['colors'] = new Float32Array(colors)\n\n      return colorGroupData\n    }\n\n    function parseMetallicDisplaypropertiesNode(metallicDisplaypropetiesNode) {\n      const metallicDisplaypropertiesData = {\n        id: metallicDisplaypropetiesNode.getAttribute('id'), // required\n      }\n\n      const metallicNodes = metallicDisplaypropetiesNode.querySelectorAll('pbmetallic')\n\n      const metallicData = []\n\n      for (let i = 0; i < metallicNodes.length; i++) {\n        const metallicNode = metallicNodes[i]\n\n        metallicData.push({\n          name: metallicNode.getAttribute('name'), // required\n          metallicness: parseFloat(metallicNode.getAttribute('metallicness')), // required\n          roughness: parseFloat(metallicNode.getAttribute('roughness')), // required\n        })\n      }\n\n      metallicDisplaypropertiesData.data = metallicData\n\n      return metallicDisplaypropertiesData\n    }\n\n    function parseBasematerialNode(basematerialNode) {\n      const basematerialData = {}\n\n      basematerialData['name'] = basematerialNode.getAttribute('name') // required\n      basematerialData['displaycolor'] = basematerialNode.getAttribute('displaycolor') // required\n      basematerialData['displaypropertiesid'] = basematerialNode.getAttribute('displaypropertiesid')\n\n      return basematerialData\n    }\n\n    function parseMeshNode(meshNode) {\n      const meshData = {}\n\n      const vertices = []\n      const vertexNodes = meshNode.querySelectorAll('vertices vertex')\n\n      for (let i = 0; i < vertexNodes.length; i++) {\n        const vertexNode = vertexNodes[i]\n        const x = vertexNode.getAttribute('x')\n        const y = vertexNode.getAttribute('y')\n        const z = vertexNode.getAttribute('z')\n\n        vertices.push(parseFloat(x), parseFloat(y), parseFloat(z))\n      }\n\n      meshData['vertices'] = new Float32Array(vertices)\n\n      const triangleProperties = []\n      const triangles = []\n      const triangleNodes = meshNode.querySelectorAll('triangles triangle')\n\n      for (let i = 0; i < triangleNodes.length; i++) {\n        const triangleNode = triangleNodes[i]\n        const v1 = triangleNode.getAttribute('v1')\n        const v2 = triangleNode.getAttribute('v2')\n        const v3 = triangleNode.getAttribute('v3')\n        const p1 = triangleNode.getAttribute('p1')\n        const p2 = triangleNode.getAttribute('p2')\n        const p3 = triangleNode.getAttribute('p3')\n        const pid = triangleNode.getAttribute('pid')\n\n        const triangleProperty = {}\n\n        triangleProperty['v1'] = parseInt(v1, 10)\n        triangleProperty['v2'] = parseInt(v2, 10)\n        triangleProperty['v3'] = parseInt(v3, 10)\n\n        triangles.push(triangleProperty['v1'], triangleProperty['v2'], triangleProperty['v3'])\n\n        // optional\n\n        if (p1) {\n          triangleProperty['p1'] = parseInt(p1, 10)\n        }\n\n        if (p2) {\n          triangleProperty['p2'] = parseInt(p2, 10)\n        }\n\n        if (p3) {\n          triangleProperty['p3'] = parseInt(p3, 10)\n        }\n\n        if (pid) {\n          triangleProperty['pid'] = pid\n        }\n\n        if (0 < Object.keys(triangleProperty).length) {\n          triangleProperties.push(triangleProperty)\n        }\n      }\n\n      meshData['triangleProperties'] = triangleProperties\n      meshData['triangles'] = new Uint32Array(triangles)\n\n      return meshData\n    }\n\n    function parseComponentsNode(componentsNode) {\n      const components = []\n\n      const componentNodes = componentsNode.querySelectorAll('component')\n\n      for (let i = 0; i < componentNodes.length; i++) {\n        const componentNode = componentNodes[i]\n        const componentData = parseComponentNode(componentNode)\n        components.push(componentData)\n      }\n\n      return components\n    }\n\n    function parseComponentNode(componentNode) {\n      const componentData = {}\n\n      componentData['objectId'] = componentNode.getAttribute('objectid') // required\n\n      const transform = componentNode.getAttribute('transform')\n\n      if (transform) {\n        componentData['transform'] = parseTransform(transform)\n      }\n\n      return componentData\n    }\n\n    function parseTransform(transform) {\n      const t = []\n      transform.split(' ').forEach(function (s) {\n        t.push(parseFloat(s))\n      })\n\n      const matrix = new Matrix4()\n      matrix.set(t[0], t[3], t[6], t[9], t[1], t[4], t[7], t[10], t[2], t[5], t[8], t[11], 0.0, 0.0, 0.0, 1.0)\n\n      return matrix\n    }\n\n    function parseObjectNode(objectNode) {\n      const objectData = {\n        type: objectNode.getAttribute('type'),\n      }\n\n      const id = objectNode.getAttribute('id')\n\n      if (id) {\n        objectData['id'] = id\n      }\n\n      const pid = objectNode.getAttribute('pid')\n\n      if (pid) {\n        objectData['pid'] = pid\n      }\n\n      const pindex = objectNode.getAttribute('pindex')\n\n      if (pindex) {\n        objectData['pindex'] = pindex\n      }\n\n      const thumbnail = objectNode.getAttribute('thumbnail')\n\n      if (thumbnail) {\n        objectData['thumbnail'] = thumbnail\n      }\n\n      const partnumber = objectNode.getAttribute('partnumber')\n\n      if (partnumber) {\n        objectData['partnumber'] = partnumber\n      }\n\n      const name = objectNode.getAttribute('name')\n\n      if (name) {\n        objectData['name'] = name\n      }\n\n      const meshNode = objectNode.querySelector('mesh')\n\n      if (meshNode) {\n        objectData['mesh'] = parseMeshNode(meshNode)\n      }\n\n      const componentsNode = objectNode.querySelector('components')\n\n      if (componentsNode) {\n        objectData['components'] = parseComponentsNode(componentsNode)\n      }\n\n      return objectData\n    }\n\n    function parseResourcesNode(resourcesNode) {\n      const resourcesData = {}\n\n      resourcesData['basematerials'] = {}\n      const basematerialsNodes = resourcesNode.querySelectorAll('basematerials')\n\n      for (let i = 0; i < basematerialsNodes.length; i++) {\n        const basematerialsNode = basematerialsNodes[i]\n        const basematerialsData = parseBasematerialsNode(basematerialsNode)\n        resourcesData['basematerials'][basematerialsData['id']] = basematerialsData\n      }\n\n      //\n\n      resourcesData['texture2d'] = {}\n      const textures2DNodes = resourcesNode.querySelectorAll('texture2d')\n\n      for (let i = 0; i < textures2DNodes.length; i++) {\n        const textures2DNode = textures2DNodes[i]\n        const texture2DData = parseTexture2DNode(textures2DNode)\n        resourcesData['texture2d'][texture2DData['id']] = texture2DData\n      }\n\n      //\n\n      resourcesData['colorgroup'] = {}\n      const colorGroupNodes = resourcesNode.querySelectorAll('colorgroup')\n\n      for (let i = 0; i < colorGroupNodes.length; i++) {\n        const colorGroupNode = colorGroupNodes[i]\n        const colorGroupData = parseColorGroupNode(colorGroupNode)\n        resourcesData['colorgroup'][colorGroupData['id']] = colorGroupData\n      }\n\n      //\n\n      resourcesData['pbmetallicdisplayproperties'] = {}\n      const pbmetallicdisplaypropertiesNodes = resourcesNode.querySelectorAll('pbmetallicdisplayproperties')\n\n      for (let i = 0; i < pbmetallicdisplaypropertiesNodes.length; i++) {\n        const pbmetallicdisplaypropertiesNode = pbmetallicdisplaypropertiesNodes[i]\n        const pbmetallicdisplaypropertiesData = parseMetallicDisplaypropertiesNode(pbmetallicdisplaypropertiesNode)\n        resourcesData['pbmetallicdisplayproperties'][\n          pbmetallicdisplaypropertiesData['id']\n        ] = pbmetallicdisplaypropertiesData\n      }\n\n      //\n\n      resourcesData['texture2dgroup'] = {}\n      const textures2DGroupNodes = resourcesNode.querySelectorAll('texture2dgroup')\n\n      for (let i = 0; i < textures2DGroupNodes.length; i++) {\n        const textures2DGroupNode = textures2DGroupNodes[i]\n        const textures2DGroupData = parseTextures2DGroupNode(textures2DGroupNode)\n        resourcesData['texture2dgroup'][textures2DGroupData['id']] = textures2DGroupData\n      }\n\n      //\n\n      resourcesData['object'] = {}\n      const objectNodes = resourcesNode.querySelectorAll('object')\n\n      for (let i = 0; i < objectNodes.length; i++) {\n        const objectNode = objectNodes[i]\n        const objectData = parseObjectNode(objectNode)\n        resourcesData['object'][objectData['id']] = objectData\n      }\n\n      return resourcesData\n    }\n\n    function parseBuildNode(buildNode) {\n      const buildData = []\n      const itemNodes = buildNode.querySelectorAll('item')\n\n      for (let i = 0; i < itemNodes.length; i++) {\n        const itemNode = itemNodes[i]\n        const buildItem = {\n          objectId: itemNode.getAttribute('objectid'),\n        }\n        const transform = itemNode.getAttribute('transform')\n\n        if (transform) {\n          buildItem['transform'] = parseTransform(transform)\n        }\n\n        buildData.push(buildItem)\n      }\n\n      return buildData\n    }\n\n    function parseModelNode(modelNode) {\n      const modelData = { unit: modelNode.getAttribute('unit') || 'millimeter' }\n      const metadataNodes = modelNode.querySelectorAll('metadata')\n\n      if (metadataNodes) {\n        modelData['metadata'] = parseMetadataNodes(metadataNodes)\n      }\n\n      const resourcesNode = modelNode.querySelector('resources')\n\n      if (resourcesNode) {\n        modelData['resources'] = parseResourcesNode(resourcesNode)\n      }\n\n      const buildNode = modelNode.querySelector('build')\n\n      if (buildNode) {\n        modelData['build'] = parseBuildNode(buildNode)\n      }\n\n      return modelData\n    }\n\n    function buildTexture(texture2dgroup, objects, modelData, textureData) {\n      const texid = texture2dgroup.texid\n      const texture2ds = modelData.resources.texture2d\n      const texture2d = texture2ds[texid]\n\n      if (texture2d) {\n        const data = textureData[texture2d.path]\n        const type = texture2d.contenttype\n\n        const blob = new Blob([data], { type: type })\n        const sourceURI = URL.createObjectURL(blob)\n\n        const texture = textureLoader.load(sourceURI, function () {\n          URL.revokeObjectURL(sourceURI)\n        })\n\n        if ('colorSpace' in texture) texture.colorSpace = 'srgb'\n        else texture.encoding = 3001 // sRGBEncoding\n\n        // texture parameters\n\n        switch (texture2d.tilestyleu) {\n          case 'wrap':\n            texture.wrapS = RepeatWrapping\n            break\n\n          case 'mirror':\n            texture.wrapS = MirroredRepeatWrapping\n            break\n\n          case 'none':\n          case 'clamp':\n            texture.wrapS = ClampToEdgeWrapping\n            break\n\n          default:\n            texture.wrapS = RepeatWrapping\n        }\n\n        switch (texture2d.tilestylev) {\n          case 'wrap':\n            texture.wrapT = RepeatWrapping\n            break\n\n          case 'mirror':\n            texture.wrapT = MirroredRepeatWrapping\n            break\n\n          case 'none':\n          case 'clamp':\n            texture.wrapT = ClampToEdgeWrapping\n            break\n\n          default:\n            texture.wrapT = RepeatWrapping\n        }\n\n        switch (texture2d.filter) {\n          case 'auto':\n            texture.magFilter = LinearFilter\n            texture.minFilter = LinearMipmapLinearFilter\n            break\n\n          case 'linear':\n            texture.magFilter = LinearFilter\n            texture.minFilter = LinearFilter\n            break\n\n          case 'nearest':\n            texture.magFilter = NearestFilter\n            texture.minFilter = NearestFilter\n            break\n\n          default:\n            texture.magFilter = LinearFilter\n            texture.minFilter = LinearMipmapLinearFilter\n        }\n\n        return texture\n      } else {\n        return null\n      }\n    }\n\n    function buildBasematerialsMeshes(\n      basematerials,\n      triangleProperties,\n      meshData,\n      objects,\n      modelData,\n      textureData,\n      objectData,\n    ) {\n      const objectPindex = objectData.pindex\n\n      const materialMap = {}\n\n      for (let i = 0, l = triangleProperties.length; i < l; i++) {\n        const triangleProperty = triangleProperties[i]\n        const pindex = triangleProperty.p1 !== undefined ? triangleProperty.p1 : objectPindex\n\n        if (materialMap[pindex] === undefined) materialMap[pindex] = []\n\n        materialMap[pindex].push(triangleProperty)\n      }\n\n      //\n\n      const keys = Object.keys(materialMap)\n      const meshes = []\n\n      for (let i = 0, l = keys.length; i < l; i++) {\n        const materialIndex = keys[i]\n        const trianglePropertiesProps = materialMap[materialIndex]\n        const basematerialData = basematerials.basematerials[materialIndex]\n        const material = getBuild(basematerialData, objects, modelData, textureData, objectData, buildBasematerial)\n\n        //\n\n        const geometry = new BufferGeometry()\n\n        const positionData = []\n\n        const vertices = meshData.vertices\n\n        for (let j = 0, jl = trianglePropertiesProps.length; j < jl; j++) {\n          const triangleProperty = trianglePropertiesProps[j]\n\n          positionData.push(vertices[triangleProperty.v1 * 3 + 0])\n          positionData.push(vertices[triangleProperty.v1 * 3 + 1])\n          positionData.push(vertices[triangleProperty.v1 * 3 + 2])\n\n          positionData.push(vertices[triangleProperty.v2 * 3 + 0])\n          positionData.push(vertices[triangleProperty.v2 * 3 + 1])\n          positionData.push(vertices[triangleProperty.v2 * 3 + 2])\n\n          positionData.push(vertices[triangleProperty.v3 * 3 + 0])\n          positionData.push(vertices[triangleProperty.v3 * 3 + 1])\n          positionData.push(vertices[triangleProperty.v3 * 3 + 2])\n        }\n\n        geometry.setAttribute('position', new Float32BufferAttribute(positionData, 3))\n\n        //\n\n        const mesh = new Mesh(geometry, material)\n        meshes.push(mesh)\n      }\n\n      return meshes\n    }\n\n    function buildTexturedMesh(\n      texture2dgroup,\n      triangleProperties,\n      meshData,\n      objects,\n      modelData,\n      textureData,\n      objectData,\n    ) {\n      // geometry\n\n      const geometry = new BufferGeometry()\n\n      const positionData = []\n      const uvData = []\n\n      const vertices = meshData.vertices\n      const uvs = texture2dgroup.uvs\n\n      for (let i = 0, l = triangleProperties.length; i < l; i++) {\n        const triangleProperty = triangleProperties[i]\n\n        positionData.push(vertices[triangleProperty.v1 * 3 + 0])\n        positionData.push(vertices[triangleProperty.v1 * 3 + 1])\n        positionData.push(vertices[triangleProperty.v1 * 3 + 2])\n\n        positionData.push(vertices[triangleProperty.v2 * 3 + 0])\n        positionData.push(vertices[triangleProperty.v2 * 3 + 1])\n        positionData.push(vertices[triangleProperty.v2 * 3 + 2])\n\n        positionData.push(vertices[triangleProperty.v3 * 3 + 0])\n        positionData.push(vertices[triangleProperty.v3 * 3 + 1])\n        positionData.push(vertices[triangleProperty.v3 * 3 + 2])\n\n        //\n\n        uvData.push(uvs[triangleProperty.p1 * 2 + 0])\n        uvData.push(uvs[triangleProperty.p1 * 2 + 1])\n\n        uvData.push(uvs[triangleProperty.p2 * 2 + 0])\n        uvData.push(uvs[triangleProperty.p2 * 2 + 1])\n\n        uvData.push(uvs[triangleProperty.p3 * 2 + 0])\n        uvData.push(uvs[triangleProperty.p3 * 2 + 1])\n      }\n\n      geometry.setAttribute('position', new Float32BufferAttribute(positionData, 3))\n      geometry.setAttribute('uv', new Float32BufferAttribute(uvData, 2))\n\n      // material\n\n      const texture = getBuild(texture2dgroup, objects, modelData, textureData, objectData, buildTexture)\n\n      const material = new MeshPhongMaterial({ map: texture, flatShading: true })\n\n      // mesh\n\n      const mesh = new Mesh(geometry, material)\n\n      return mesh\n    }\n\n    function buildVertexColorMesh(colorgroup, triangleProperties, meshData, objects, modelData, objectData) {\n      // geometry\n\n      const geometry = new BufferGeometry()\n\n      const positionData = []\n      const colorData = []\n\n      const vertices = meshData.vertices\n      const colors = colorgroup.colors\n\n      for (let i = 0, l = triangleProperties.length; i < l; i++) {\n        const triangleProperty = triangleProperties[i]\n\n        const v1 = triangleProperty.v1\n        const v2 = triangleProperty.v2\n        const v3 = triangleProperty.v3\n\n        positionData.push(vertices[v1 * 3 + 0])\n        positionData.push(vertices[v1 * 3 + 1])\n        positionData.push(vertices[v1 * 3 + 2])\n\n        positionData.push(vertices[v2 * 3 + 0])\n        positionData.push(vertices[v2 * 3 + 1])\n        positionData.push(vertices[v2 * 3 + 2])\n\n        positionData.push(vertices[v3 * 3 + 0])\n        positionData.push(vertices[v3 * 3 + 1])\n        positionData.push(vertices[v3 * 3 + 2])\n\n        //\n\n        const p1 = triangleProperty.p1 !== undefined ? triangleProperty.p1 : objectData.pindex\n        const p2 = triangleProperty.p2 !== undefined ? triangleProperty.p2 : p1\n        const p3 = triangleProperty.p3 !== undefined ? triangleProperty.p3 : p1\n\n        colorData.push(colors[p1 * 3 + 0])\n        colorData.push(colors[p1 * 3 + 1])\n        colorData.push(colors[p1 * 3 + 2])\n\n        colorData.push(colors[p2 * 3 + 0])\n        colorData.push(colors[p2 * 3 + 1])\n        colorData.push(colors[p2 * 3 + 2])\n\n        colorData.push(colors[p3 * 3 + 0])\n        colorData.push(colors[p3 * 3 + 1])\n        colorData.push(colors[p3 * 3 + 2])\n      }\n\n      geometry.setAttribute('position', new Float32BufferAttribute(positionData, 3))\n      geometry.setAttribute('color', new Float32BufferAttribute(colorData, 3))\n\n      // material\n\n      const material = new MeshPhongMaterial({ vertexColors: true, flatShading: true })\n\n      // mesh\n\n      const mesh = new Mesh(geometry, material)\n\n      return mesh\n    }\n\n    function buildDefaultMesh(meshData) {\n      const geometry = new BufferGeometry()\n      geometry.setIndex(new BufferAttribute(meshData['triangles'], 1))\n      geometry.setAttribute('position', new BufferAttribute(meshData['vertices'], 3))\n\n      const material = new MeshPhongMaterial({ color: 0xaaaaff, flatShading: true })\n\n      const mesh = new Mesh(geometry, material)\n\n      return mesh\n    }\n\n    function buildMeshes(resourceMap, meshData, objects, modelData, textureData, objectData) {\n      const keys = Object.keys(resourceMap)\n      const meshes = []\n\n      for (let i = 0, il = keys.length; i < il; i++) {\n        const resourceId = keys[i]\n        const triangleProperties = resourceMap[resourceId]\n        const resourceType = getResourceType(resourceId, modelData)\n\n        switch (resourceType) {\n          case 'material':\n            const basematerials = modelData.resources.basematerials[resourceId]\n            const newMeshes = buildBasematerialsMeshes(\n              basematerials,\n              triangleProperties,\n              meshData,\n              objects,\n              modelData,\n              textureData,\n              objectData,\n            )\n\n            for (let j = 0, jl = newMeshes.length; j < jl; j++) {\n              meshes.push(newMeshes[j])\n            }\n\n            break\n\n          case 'texture':\n            const texture2dgroup = modelData.resources.texture2dgroup[resourceId]\n            meshes.push(\n              buildTexturedMesh(\n                texture2dgroup,\n                triangleProperties,\n                meshData,\n                objects,\n                modelData,\n                textureData,\n                objectData,\n              ),\n            )\n            break\n\n          case 'vertexColors':\n            const colorgroup = modelData.resources.colorgroup[resourceId]\n            meshes.push(buildVertexColorMesh(colorgroup, triangleProperties, meshData, objects, modelData, objectData))\n            break\n\n          case 'default':\n            meshes.push(buildDefaultMesh(meshData))\n            break\n\n          default:\n            console.error('THREE.3MFLoader: Unsupported resource type.')\n        }\n      }\n\n      return meshes\n    }\n\n    function getResourceType(pid, modelData) {\n      if (modelData.resources.texture2dgroup[pid] !== undefined) {\n        return 'texture'\n      } else if (modelData.resources.basematerials[pid] !== undefined) {\n        return 'material'\n      } else if (modelData.resources.colorgroup[pid] !== undefined) {\n        return 'vertexColors'\n      } else if (pid === 'default') {\n        return 'default'\n      } else {\n        return undefined\n      }\n    }\n\n    function analyzeObject(modelData, meshData, objectData) {\n      const resourceMap = {}\n\n      const triangleProperties = meshData['triangleProperties']\n\n      const objectPid = objectData.pid\n\n      for (let i = 0, l = triangleProperties.length; i < l; i++) {\n        const triangleProperty = triangleProperties[i]\n        let pid = triangleProperty.pid !== undefined ? triangleProperty.pid : objectPid\n\n        if (pid === undefined) pid = 'default'\n\n        if (resourceMap[pid] === undefined) resourceMap[pid] = []\n\n        resourceMap[pid].push(triangleProperty)\n      }\n\n      return resourceMap\n    }\n\n    function buildGroup(meshData, objects, modelData, textureData, objectData) {\n      const group = new Group()\n\n      const resourceMap = analyzeObject(modelData, meshData, objectData)\n      const meshes = buildMeshes(resourceMap, meshData, objects, modelData, textureData, objectData)\n\n      for (let i = 0, l = meshes.length; i < l; i++) {\n        group.add(meshes[i])\n      }\n\n      return group\n    }\n\n    function applyExtensions(extensions, meshData, modelXml) {\n      if (!extensions) {\n        return\n      }\n\n      const availableExtensions = []\n      const keys = Object.keys(extensions)\n\n      for (let i = 0; i < keys.length; i++) {\n        const ns = keys[i]\n\n        for (let j = 0; j < scope.availableExtensions.length; j++) {\n          const extension = scope.availableExtensions[j]\n\n          if (extension.ns === ns) {\n            availableExtensions.push(extension)\n          }\n        }\n      }\n\n      for (let i = 0; i < availableExtensions.length; i++) {\n        const extension = availableExtensions[i]\n        extension.apply(modelXml, extensions[extension['ns']], meshData)\n      }\n    }\n\n    function getBuild(data, objects, modelData, textureData, objectData, builder) {\n      if (data.build !== undefined) return data.build\n\n      data.build = builder(data, objects, modelData, textureData, objectData)\n\n      return data.build\n    }\n\n    function buildBasematerial(materialData, objects, modelData) {\n      let material\n\n      const displaypropertiesid = materialData.displaypropertiesid\n      const pbmetallicdisplayproperties = modelData.resources.pbmetallicdisplayproperties\n\n      if (displaypropertiesid !== null && pbmetallicdisplayproperties[displaypropertiesid] !== undefined) {\n        // metallic display property, use StandardMaterial\n\n        const pbmetallicdisplayproperty = pbmetallicdisplayproperties[displaypropertiesid]\n        const metallicData = pbmetallicdisplayproperty.data[materialData.index]\n\n        material = new MeshStandardMaterial({\n          flatShading: true,\n          roughness: metallicData.roughness,\n          metalness: metallicData.metallicness,\n        })\n      } else {\n        // otherwise use PhongMaterial\n\n        material = new MeshPhongMaterial({ flatShading: true })\n      }\n\n      material.name = materialData.name\n\n      // displaycolor MUST be specified with a value of a 6 or 8 digit hexadecimal number, e.g. \"#RRGGBB\" or \"#RRGGBBAA\"\n\n      const displaycolor = materialData.displaycolor\n\n      const color = displaycolor.substring(0, 7)\n      material.color.setStyle(color)\n      material.color.convertSRGBToLinear() // displaycolor is in sRGB\n\n      // process alpha if set\n\n      if (displaycolor.length === 9) {\n        material.opacity = parseInt(displaycolor.charAt(7) + displaycolor.charAt(8), 16) / 255\n      }\n\n      return material\n    }\n\n    function buildComposite(compositeData, objects, modelData, textureData) {\n      const composite = new Group()\n\n      for (let j = 0; j < compositeData.length; j++) {\n        const component = compositeData[j]\n        let build = objects[component.objectId]\n\n        if (build === undefined) {\n          buildObject(component.objectId, objects, modelData, textureData)\n          build = objects[component.objectId]\n        }\n\n        const object3D = build.clone()\n\n        // apply component transform\n\n        const transform = component.transform\n\n        if (transform) {\n          object3D.applyMatrix4(transform)\n        }\n\n        composite.add(object3D)\n      }\n\n      return composite\n    }\n\n    function buildObject(objectId, objects, modelData, textureData) {\n      const objectData = modelData['resources']['object'][objectId]\n\n      if (objectData['mesh']) {\n        const meshData = objectData['mesh']\n\n        const extensions = modelData['extensions']\n        const modelXml = modelData['xml']\n\n        applyExtensions(extensions, meshData, modelXml)\n\n        objects[objectData.id] = getBuild(meshData, objects, modelData, textureData, objectData, buildGroup)\n      } else {\n        const compositeData = objectData['components']\n\n        objects[objectData.id] = getBuild(compositeData, objects, modelData, textureData, objectData, buildComposite)\n      }\n    }\n\n    function buildObjects(data3mf) {\n      const modelsData = data3mf.model\n      const modelRels = data3mf.modelRels\n      const objects = {}\n      const modelsKeys = Object.keys(modelsData)\n      const textureData = {}\n\n      // evaluate model relationships to textures\n\n      if (modelRels) {\n        for (let i = 0, l = modelRels.length; i < l; i++) {\n          const modelRel = modelRels[i]\n          const textureKey = modelRel.target.substring(1)\n\n          if (data3mf.texture[textureKey]) {\n            textureData[modelRel.target] = data3mf.texture[textureKey]\n          }\n        }\n      }\n\n      // start build\n\n      for (let i = 0; i < modelsKeys.length; i++) {\n        const modelsKey = modelsKeys[i]\n        const modelData = modelsData[modelsKey]\n\n        const objectIds = Object.keys(modelData['resources']['object'])\n\n        for (let j = 0; j < objectIds.length; j++) {\n          const objectId = objectIds[j]\n\n          buildObject(objectId, objects, modelData, textureData)\n        }\n      }\n\n      return objects\n    }\n\n    function fetch3DModelPart(rels) {\n      for (let i = 0; i < rels.length; i++) {\n        const rel = rels[i]\n        const extension = rel.target.split('.').pop()\n\n        if (extension.toLowerCase() === 'model') return rel\n      }\n    }\n\n    function build(objects, data3mf) {\n      const group = new Group()\n\n      const relationship = fetch3DModelPart(data3mf['rels'])\n      const buildData = data3mf.model[relationship['target'].substring(1)]['build']\n\n      for (let i = 0; i < buildData.length; i++) {\n        const buildItem = buildData[i]\n        const object3D = objects[buildItem['objectId']]\n\n        // apply transform\n\n        const transform = buildItem['transform']\n\n        if (transform) {\n          object3D.applyMatrix4(transform)\n        }\n\n        group.add(object3D)\n      }\n\n      return group\n    }\n\n    const data3mf = loadDocument(data)\n    const objects = buildObjects(data3mf)\n\n    return build(objects, data3mf)\n  }\n\n  addExtension(extension) {\n    this.availableExtensions.push(extension)\n  }\n}\n\nexport { ThreeMFLoader }\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}