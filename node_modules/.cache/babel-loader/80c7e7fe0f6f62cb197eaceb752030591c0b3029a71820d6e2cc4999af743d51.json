{"ast":null,"code":"import _classCallCheck from \"C:/Users/Nayyu/Desktop/skibidai-public-build/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Nayyu/Desktop/skibidai-public-build/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nvar LWO2Parser = /*#__PURE__*/function () {\n  function LWO2Parser(IFFParser) {\n    _classCallCheck(this, LWO2Parser);\n    this.IFF = IFFParser;\n  }\n  _createClass(LWO2Parser, [{\n    key: \"parseBlock\",\n    value: function parseBlock() {\n      this.IFF.debugger.offset = this.IFF.reader.offset;\n      this.IFF.debugger.closeForms();\n      var blockID = this.IFF.reader.getIDTag();\n      var length = this.IFF.reader.getUint32();\n      if (length > this.IFF.reader.dv.byteLength - this.IFF.reader.offset) {\n        this.IFF.reader.offset -= 4;\n        length = this.IFF.reader.getUint16();\n      }\n      this.IFF.debugger.dataOffset = this.IFF.reader.offset;\n      this.IFF.debugger.length = length;\n      switch (blockID) {\n        case \"FORM\":\n          this.IFF.parseForm(length);\n          break;\n        case \"ICON\":\n        case \"VMPA\":\n        case \"BBOX\":\n        case \"NORM\":\n        case \"PRE \":\n        case \"POST\":\n        case \"KEY \":\n        case \"SPAN\":\n        case \"TIME\":\n        case \"CLRS\":\n        case \"CLRA\":\n        case \"FILT\":\n        case \"DITH\":\n        case \"CONT\":\n        case \"BRIT\":\n        case \"SATR\":\n        case \"HUE \":\n        case \"GAMM\":\n        case \"NEGA\":\n        case \"IFLT\":\n        case \"PFLT\":\n        case \"PROJ\":\n        case \"AXIS\":\n        case \"AAST\":\n        case \"PIXB\":\n        case \"AUVO\":\n        case \"STCK\":\n        case \"PROC\":\n        case \"VALU\":\n        case \"FUNC\":\n        case \"PNAM\":\n        case \"INAM\":\n        case \"GRST\":\n        case \"GREN\":\n        case \"GRPT\":\n        case \"FKEY\":\n        case \"IKEY\":\n        case \"CSYS\":\n        case \"OPAQ\":\n        case \"CMAP\":\n        case \"NLOC\":\n        case \"NZOM\":\n        case \"NVER\":\n        case \"NSRV\":\n        case \"NVSK\":\n        case \"NCRD\":\n        case \"WRPW\":\n        case \"WRPH\":\n        case \"NMOD\":\n        case \"NSEL\":\n        case \"NPRW\":\n        case \"NPLA\":\n        case \"NODS\":\n        case \"VERS\":\n        case \"ENUM\":\n        case \"TAG \":\n        case \"OPAC\":\n        case \"CGMD\":\n        case \"CGTY\":\n        case \"CGST\":\n        case \"CGEN\":\n        case \"CGTS\":\n        case \"CGTE\":\n        case \"OSMP\":\n        case \"OMDE\":\n        case \"OUTR\":\n        case \"FLAG\":\n        case \"TRNL\":\n        case \"GLOW\":\n        case \"GVAL\":\n        case \"SHRP\":\n        case \"RFOP\":\n        case \"RSAN\":\n        case \"TROP\":\n        case \"RBLR\":\n        case \"TBLR\":\n        case \"CLRH\":\n        case \"CLRF\":\n        case \"ADTR\":\n        case \"LINE\":\n        case \"ALPH\":\n        case \"VCOL\":\n        case \"ENAB\":\n          this.IFF.debugger.skipped = true;\n          this.IFF.reader.skip(length);\n          break;\n        case \"SURF\":\n          this.IFF.parseSurfaceLwo2(length);\n          break;\n        case \"CLIP\":\n          this.IFF.parseClipLwo2(length);\n          break;\n        case \"IPIX\":\n        case \"IMIP\":\n        case \"IMOD\":\n        case \"AMOD\":\n        case \"IINV\":\n        case \"INCR\":\n        case \"IAXS\":\n        case \"IFOT\":\n        case \"ITIM\":\n        case \"IWRL\":\n        case \"IUTI\":\n        case \"IINX\":\n        case \"IINY\":\n        case \"IINZ\":\n        case \"IREF\":\n          if (length === 4) this.IFF.currentNode[blockID] = this.IFF.reader.getInt32();else this.IFF.reader.skip(length);\n          break;\n        case \"OTAG\":\n          this.IFF.parseObjectTag();\n          break;\n        case \"LAYR\":\n          this.IFF.parseLayer(length);\n          break;\n        case \"PNTS\":\n          this.IFF.parsePoints(length);\n          break;\n        case \"VMAP\":\n          this.IFF.parseVertexMapping(length);\n          break;\n        case \"AUVU\":\n        case \"AUVN\":\n          this.IFF.reader.skip(length - 1);\n          this.IFF.reader.getVariableLengthIndex();\n          break;\n        case \"POLS\":\n          this.IFF.parsePolygonList(length);\n          break;\n        case \"TAGS\":\n          this.IFF.parseTagStrings(length);\n          break;\n        case \"PTAG\":\n          this.IFF.parsePolygonTagMapping(length);\n          break;\n        case \"VMAD\":\n          this.IFF.parseVertexMapping(length, true);\n          break;\n        case \"DESC\":\n          this.IFF.currentForm.description = this.IFF.reader.getString();\n          break;\n        case \"TEXT\":\n        case \"CMNT\":\n        case \"NCOM\":\n          this.IFF.currentForm.comment = this.IFF.reader.getString();\n          break;\n        case \"NAME\":\n          this.IFF.currentForm.channelName = this.IFF.reader.getString();\n          break;\n        case \"WRAP\":\n          this.IFF.currentForm.wrap = {\n            w: this.IFF.reader.getUint16(),\n            h: this.IFF.reader.getUint16()\n          };\n          break;\n        case \"IMAG\":\n          var index = this.IFF.reader.getVariableLengthIndex();\n          this.IFF.currentForm.imageIndex = index;\n          break;\n        case \"OREF\":\n          this.IFF.currentForm.referenceObject = this.IFF.reader.getString();\n          break;\n        case \"ROID\":\n          this.IFF.currentForm.referenceObjectID = this.IFF.reader.getUint32();\n          break;\n        case \"SSHN\":\n          this.IFF.currentSurface.surfaceShaderName = this.IFF.reader.getString();\n          break;\n        case \"AOVN\":\n          this.IFF.currentSurface.surfaceCustomAOVName = this.IFF.reader.getString();\n          break;\n        case \"NSTA\":\n          this.IFF.currentForm.disabled = this.IFF.reader.getUint16();\n          break;\n        case \"NRNM\":\n          this.IFF.currentForm.realName = this.IFF.reader.getString();\n          break;\n        case \"NNME\":\n          this.IFF.currentForm.refName = this.IFF.reader.getString();\n          this.IFF.currentSurface.nodes[this.IFF.currentForm.refName] = this.IFF.currentForm;\n          break;\n        case \"INME\":\n          if (!this.IFF.currentForm.nodeName) this.IFF.currentForm.nodeName = [];\n          this.IFF.currentForm.nodeName.push(this.IFF.reader.getString());\n          break;\n        case \"IINN\":\n          if (!this.IFF.currentForm.inputNodeName) this.IFF.currentForm.inputNodeName = [];\n          this.IFF.currentForm.inputNodeName.push(this.IFF.reader.getString());\n          break;\n        case \"IINM\":\n          if (!this.IFF.currentForm.inputName) this.IFF.currentForm.inputName = [];\n          this.IFF.currentForm.inputName.push(this.IFF.reader.getString());\n          break;\n        case \"IONM\":\n          if (!this.IFF.currentForm.inputOutputName) this.IFF.currentForm.inputOutputName = [];\n          this.IFF.currentForm.inputOutputName.push(this.IFF.reader.getString());\n          break;\n        case \"FNAM\":\n          this.IFF.currentForm.fileName = this.IFF.reader.getString();\n          break;\n        case \"CHAN\":\n          if (length === 4) this.IFF.currentForm.textureChannel = this.IFF.reader.getIDTag();else this.IFF.reader.skip(length);\n          break;\n        case \"SMAN\":\n          var maxSmoothingAngle = this.IFF.reader.getFloat32();\n          this.IFF.currentSurface.attributes.smooth = maxSmoothingAngle < 0 ? false : true;\n          break;\n        case \"COLR\":\n          this.IFF.currentSurface.attributes.Color = {\n            value: this.IFF.reader.getFloat32Array(3)\n          };\n          this.IFF.reader.skip(2);\n          break;\n        case \"LUMI\":\n          this.IFF.currentSurface.attributes.Luminosity = {\n            value: this.IFF.reader.getFloat32()\n          };\n          this.IFF.reader.skip(2);\n          break;\n        case \"SPEC\":\n          this.IFF.currentSurface.attributes.Specular = {\n            value: this.IFF.reader.getFloat32()\n          };\n          this.IFF.reader.skip(2);\n          break;\n        case \"DIFF\":\n          this.IFF.currentSurface.attributes.Diffuse = {\n            value: this.IFF.reader.getFloat32()\n          };\n          this.IFF.reader.skip(2);\n          break;\n        case \"REFL\":\n          this.IFF.currentSurface.attributes.Reflection = {\n            value: this.IFF.reader.getFloat32()\n          };\n          this.IFF.reader.skip(2);\n          break;\n        case \"GLOS\":\n          this.IFF.currentSurface.attributes.Glossiness = {\n            value: this.IFF.reader.getFloat32()\n          };\n          this.IFF.reader.skip(2);\n          break;\n        case \"TRAN\":\n          this.IFF.currentSurface.attributes.opacity = this.IFF.reader.getFloat32();\n          this.IFF.reader.skip(2);\n          break;\n        case \"BUMP\":\n          this.IFF.currentSurface.attributes.bumpStrength = this.IFF.reader.getFloat32();\n          this.IFF.reader.skip(2);\n          break;\n        case \"SIDE\":\n          this.IFF.currentSurface.attributes.side = this.IFF.reader.getUint16();\n          break;\n        case \"RIMG\":\n          this.IFF.currentSurface.attributes.reflectionMap = this.IFF.reader.getVariableLengthIndex();\n          break;\n        case \"RIND\":\n          this.IFF.currentSurface.attributes.refractiveIndex = this.IFF.reader.getFloat32();\n          this.IFF.reader.skip(2);\n          break;\n        case \"TIMG\":\n          this.IFF.currentSurface.attributes.refractionMap = this.IFF.reader.getVariableLengthIndex();\n          break;\n        case \"IMAP\":\n          this.IFF.reader.skip(2);\n          break;\n        case \"TMAP\":\n          this.IFF.debugger.skipped = true;\n          this.IFF.reader.skip(length);\n          break;\n        case \"IUVI\":\n          this.IFF.currentNode.UVChannel = this.IFF.reader.getString(length);\n          break;\n        case \"IUTL\":\n          this.IFF.currentNode.widthWrappingMode = this.IFF.reader.getUint32();\n          break;\n        case \"IVTL\":\n          this.IFF.currentNode.heightWrappingMode = this.IFF.reader.getUint32();\n          break;\n        case \"BLOK\":\n          break;\n        default:\n          this.IFF.parseUnknownCHUNK(blockID, length);\n      }\n      if (blockID != \"FORM\") {\n        this.IFF.debugger.node = 1;\n        this.IFF.debugger.nodeID = blockID;\n        this.IFF.debugger.log();\n      }\n      if (this.IFF.reader.offset >= this.IFF.currentFormEnd) {\n        this.IFF.currentForm = this.IFF.parentForm;\n      }\n    }\n  }]);\n  return LWO2Parser;\n}();\nexport { LWO2Parser };","map":{"version":3,"names":["LWO2Parser","IFFParser","_classCallCheck","IFF","_createClass","key","value","parseBlock","debugger","offset","reader","closeForms","blockID","getIDTag","length","getUint32","dv","byteLength","getUint16","dataOffset","parseForm","skipped","skip","parseSurfaceLwo2","parseClipLwo2","currentNode","getInt32","parseObjectTag","parseLayer","parsePoints","parseVertexMapping","getVariableLengthIndex","parsePolygonList","parseTagStrings","parsePolygonTagMapping","currentForm","description","getString","comment","channelName","wrap","w","h","index","imageIndex","referenceObject","referenceObjectID","currentSurface","surfaceShaderName","surfaceCustomAOVName","disabled","realName","refName","nodes","nodeName","push","inputNodeName","inputName","inputOutputName","fileName","textureChannel","maxSmoothingAngle","getFloat32","attributes","smooth","Color","getFloat32Array","Luminosity","Specular","Diffuse","Reflection","Glossiness","opacity","bumpStrength","side","reflectionMap","refractiveIndex","refractionMap","UVChannel","widthWrappingMode","heightWrappingMode","parseUnknownCHUNK","node","nodeID","log","currentFormEnd","parentForm"],"sources":["C:\\Users\\Nayyu\\Desktop\\skibidai-public-build\\node_modules\\src\\loaders\\lwo\\LWO2Parser.js"],"sourcesContent":["class LWO2Parser {\n  constructor(IFFParser) {\n    this.IFF = IFFParser\n  }\n\n  parseBlock() {\n    this.IFF.debugger.offset = this.IFF.reader.offset\n    this.IFF.debugger.closeForms()\n\n    const blockID = this.IFF.reader.getIDTag()\n    let length = this.IFF.reader.getUint32() // size of data in bytes\n    if (length > this.IFF.reader.dv.byteLength - this.IFF.reader.offset) {\n      this.IFF.reader.offset -= 4\n      length = this.IFF.reader.getUint16()\n    }\n\n    this.IFF.debugger.dataOffset = this.IFF.reader.offset\n    this.IFF.debugger.length = length\n\n    // Data types may be found in either LWO2 OR LWO3 spec\n    switch (blockID) {\n      case 'FORM': // form blocks may consist of sub -chunks or sub-forms\n        this.IFF.parseForm(length)\n        break\n\n      // SKIPPED CHUNKS\n      // if break; is called directly, the position in the lwoTree is not created\n      // any sub chunks and forms are added to the parent form instead\n      // MISC skipped\n      case 'ICON': // Thumbnail Icon Image\n      case 'VMPA': // Vertex Map Parameter\n      case 'BBOX': // bounding box\n      // case 'VMMD':\n      // case 'VTYP':\n\n      // normal maps can be specified, normally on models imported from other applications. Currently ignored\n      case 'NORM':\n\n      // ENVL FORM skipped\n      case 'PRE ':\n      case 'POST':\n      case 'KEY ':\n      case 'SPAN':\n\n      // CLIP FORM skipped\n      case 'TIME':\n      case 'CLRS':\n      case 'CLRA':\n      case 'FILT':\n      case 'DITH':\n      case 'CONT':\n      case 'BRIT':\n      case 'SATR':\n      case 'HUE ':\n      case 'GAMM':\n      case 'NEGA':\n      case 'IFLT':\n      case 'PFLT':\n\n      // Image Map Layer skipped\n      case 'PROJ':\n      case 'AXIS':\n      case 'AAST':\n      case 'PIXB':\n      case 'AUVO':\n      case 'STCK':\n\n      // Procedural Textures skipped\n      case 'PROC':\n      case 'VALU':\n      case 'FUNC':\n\n      // Gradient Textures skipped\n      case 'PNAM':\n      case 'INAM':\n      case 'GRST':\n      case 'GREN':\n      case 'GRPT':\n      case 'FKEY':\n      case 'IKEY':\n\n      // Texture Mapping Form skipped\n      case 'CSYS':\n\n      // Surface CHUNKs skipped\n      case 'OPAQ': // top level 'opacity' checkbox\n      case 'CMAP': // clip map\n\n      // Surface node CHUNKS skipped\n      // These mainly specify the node editor setup in LW\n      case 'NLOC':\n      case 'NZOM':\n      case 'NVER':\n      case 'NSRV':\n      case 'NVSK': // unknown\n      case 'NCRD':\n      case 'WRPW': // image wrap w ( for cylindrical and spherical projections)\n      case 'WRPH': // image wrap h\n      case 'NMOD':\n      case 'NSEL':\n      case 'NPRW':\n      case 'NPLA':\n      case 'NODS':\n      case 'VERS':\n      case 'ENUM':\n      case 'TAG ':\n      case 'OPAC':\n\n      // Car Material CHUNKS\n      case 'CGMD':\n      case 'CGTY':\n      case 'CGST':\n      case 'CGEN':\n      case 'CGTS':\n      case 'CGTE':\n      case 'OSMP':\n      case 'OMDE':\n      case 'OUTR':\n      case 'FLAG':\n\n      case 'TRNL':\n      case 'GLOW':\n      case 'GVAL': // glow intensity\n      case 'SHRP':\n      case 'RFOP':\n      case 'RSAN':\n      case 'TROP':\n      case 'RBLR':\n      case 'TBLR':\n      case 'CLRH':\n      case 'CLRF':\n      case 'ADTR':\n      case 'LINE':\n      case 'ALPH':\n      case 'VCOL':\n      case 'ENAB':\n        this.IFF.debugger.skipped = true\n        this.IFF.reader.skip(length)\n        break\n\n      case 'SURF':\n        this.IFF.parseSurfaceLwo2(length)\n        break\n\n      case 'CLIP':\n        this.IFF.parseClipLwo2(length)\n        break\n\n      // Texture node chunks (not in spec)\n      case 'IPIX': // usePixelBlending\n      case 'IMIP': // useMipMaps\n      case 'IMOD': // imageBlendingMode\n      case 'AMOD': // unknown\n      case 'IINV': // imageInvertAlpha\n      case 'INCR': // imageInvertColor\n      case 'IAXS': // imageAxis ( for non-UV maps)\n      case 'IFOT': // imageFallofType\n      case 'ITIM': // timing for animated textures\n      case 'IWRL':\n      case 'IUTI':\n      case 'IINX':\n      case 'IINY':\n      case 'IINZ':\n      case 'IREF': // possibly a VX for reused texture nodes\n        if (length === 4) this.IFF.currentNode[blockID] = this.IFF.reader.getInt32()\n        else this.IFF.reader.skip(length)\n        break\n\n      case 'OTAG':\n        this.IFF.parseObjectTag()\n        break\n\n      case 'LAYR':\n        this.IFF.parseLayer(length)\n        break\n\n      case 'PNTS':\n        this.IFF.parsePoints(length)\n        break\n\n      case 'VMAP':\n        this.IFF.parseVertexMapping(length)\n        break\n\n      case 'AUVU':\n      case 'AUVN':\n        this.IFF.reader.skip(length - 1)\n        this.IFF.reader.getVariableLengthIndex() // VX\n        break\n\n      case 'POLS':\n        this.IFF.parsePolygonList(length)\n        break\n\n      case 'TAGS':\n        this.IFF.parseTagStrings(length)\n        break\n\n      case 'PTAG':\n        this.IFF.parsePolygonTagMapping(length)\n        break\n\n      case 'VMAD':\n        this.IFF.parseVertexMapping(length, true)\n        break\n\n      // Misc CHUNKS\n      case 'DESC': // Description Line\n        this.IFF.currentForm.description = this.IFF.reader.getString()\n        break\n\n      case 'TEXT':\n      case 'CMNT':\n      case 'NCOM':\n        this.IFF.currentForm.comment = this.IFF.reader.getString()\n        break\n\n      // Envelope Form\n      case 'NAME':\n        this.IFF.currentForm.channelName = this.IFF.reader.getString()\n        break\n\n      // Image Map Layer\n      case 'WRAP':\n        this.IFF.currentForm.wrap = { w: this.IFF.reader.getUint16(), h: this.IFF.reader.getUint16() }\n        break\n\n      case 'IMAG':\n        const index = this.IFF.reader.getVariableLengthIndex()\n        this.IFF.currentForm.imageIndex = index\n        break\n\n      // Texture Mapping Form\n      case 'OREF':\n        this.IFF.currentForm.referenceObject = this.IFF.reader.getString()\n        break\n\n      case 'ROID':\n        this.IFF.currentForm.referenceObjectID = this.IFF.reader.getUint32()\n        break\n\n      // Surface Blocks\n      case 'SSHN':\n        this.IFF.currentSurface.surfaceShaderName = this.IFF.reader.getString()\n        break\n\n      case 'AOVN':\n        this.IFF.currentSurface.surfaceCustomAOVName = this.IFF.reader.getString()\n        break\n\n      // Nodal Blocks\n      case 'NSTA':\n        this.IFF.currentForm.disabled = this.IFF.reader.getUint16()\n        break\n\n      case 'NRNM':\n        this.IFF.currentForm.realName = this.IFF.reader.getString()\n        break\n\n      case 'NNME':\n        this.IFF.currentForm.refName = this.IFF.reader.getString()\n        this.IFF.currentSurface.nodes[this.IFF.currentForm.refName] = this.IFF.currentForm\n        break\n\n      // Nodal Blocks : connections\n      case 'INME':\n        if (!this.IFF.currentForm.nodeName) this.IFF.currentForm.nodeName = []\n        this.IFF.currentForm.nodeName.push(this.IFF.reader.getString())\n        break\n\n      case 'IINN':\n        if (!this.IFF.currentForm.inputNodeName) this.IFF.currentForm.inputNodeName = []\n        this.IFF.currentForm.inputNodeName.push(this.IFF.reader.getString())\n        break\n\n      case 'IINM':\n        if (!this.IFF.currentForm.inputName) this.IFF.currentForm.inputName = []\n        this.IFF.currentForm.inputName.push(this.IFF.reader.getString())\n        break\n\n      case 'IONM':\n        if (!this.IFF.currentForm.inputOutputName) this.IFF.currentForm.inputOutputName = []\n        this.IFF.currentForm.inputOutputName.push(this.IFF.reader.getString())\n        break\n\n      case 'FNAM':\n        this.IFF.currentForm.fileName = this.IFF.reader.getString()\n        break\n\n      case 'CHAN': // NOTE: ENVL Forms may also have CHAN chunk, however ENVL is currently ignored\n        if (length === 4) this.IFF.currentForm.textureChannel = this.IFF.reader.getIDTag()\n        else this.IFF.reader.skip(length)\n        break\n\n      // LWO2 Spec chunks: these are needed since the SURF FORMs are often in LWO2 format\n      case 'SMAN':\n        const maxSmoothingAngle = this.IFF.reader.getFloat32()\n        this.IFF.currentSurface.attributes.smooth = maxSmoothingAngle < 0 ? false : true\n        break\n\n      // LWO2: Basic Surface Parameters\n      case 'COLR':\n        this.IFF.currentSurface.attributes.Color = { value: this.IFF.reader.getFloat32Array(3) }\n        this.IFF.reader.skip(2) // VX: envelope\n        break\n\n      case 'LUMI':\n        this.IFF.currentSurface.attributes.Luminosity = { value: this.IFF.reader.getFloat32() }\n        this.IFF.reader.skip(2)\n        break\n\n      case 'SPEC':\n        this.IFF.currentSurface.attributes.Specular = { value: this.IFF.reader.getFloat32() }\n        this.IFF.reader.skip(2)\n        break\n\n      case 'DIFF':\n        this.IFF.currentSurface.attributes.Diffuse = { value: this.IFF.reader.getFloat32() }\n        this.IFF.reader.skip(2)\n        break\n\n      case 'REFL':\n        this.IFF.currentSurface.attributes.Reflection = { value: this.IFF.reader.getFloat32() }\n        this.IFF.reader.skip(2)\n        break\n\n      case 'GLOS':\n        this.IFF.currentSurface.attributes.Glossiness = { value: this.IFF.reader.getFloat32() }\n        this.IFF.reader.skip(2)\n        break\n\n      case 'TRAN':\n        this.IFF.currentSurface.attributes.opacity = this.IFF.reader.getFloat32()\n        this.IFF.reader.skip(2)\n        break\n\n      case 'BUMP':\n        this.IFF.currentSurface.attributes.bumpStrength = this.IFF.reader.getFloat32()\n        this.IFF.reader.skip(2)\n        break\n\n      case 'SIDE':\n        this.IFF.currentSurface.attributes.side = this.IFF.reader.getUint16()\n        break\n\n      case 'RIMG':\n        this.IFF.currentSurface.attributes.reflectionMap = this.IFF.reader.getVariableLengthIndex()\n        break\n\n      case 'RIND':\n        this.IFF.currentSurface.attributes.refractiveIndex = this.IFF.reader.getFloat32()\n        this.IFF.reader.skip(2)\n        break\n\n      case 'TIMG':\n        this.IFF.currentSurface.attributes.refractionMap = this.IFF.reader.getVariableLengthIndex()\n        break\n\n      case 'IMAP':\n        this.IFF.reader.skip(2)\n        break\n\n      case 'TMAP':\n        this.IFF.debugger.skipped = true\n        this.IFF.reader.skip(length) // needs implementing\n        break\n\n      case 'IUVI': // uv channel name\n        this.IFF.currentNode.UVChannel = this.IFF.reader.getString(length)\n        break\n\n      case 'IUTL': // widthWrappingMode: 0 = Reset, 1 = Repeat, 2 = Mirror, 3 = Edge\n        this.IFF.currentNode.widthWrappingMode = this.IFF.reader.getUint32()\n        break\n      case 'IVTL': // heightWrappingMode\n        this.IFF.currentNode.heightWrappingMode = this.IFF.reader.getUint32()\n        break\n\n      // LWO2 USE\n      case 'BLOK':\n        // skip\n        break\n\n      default:\n        this.IFF.parseUnknownCHUNK(blockID, length)\n    }\n\n    if (blockID != 'FORM') {\n      this.IFF.debugger.node = 1\n      this.IFF.debugger.nodeID = blockID\n      this.IFF.debugger.log()\n    }\n\n    if (this.IFF.reader.offset >= this.IFF.currentFormEnd) {\n      this.IFF.currentForm = this.IFF.parentForm\n    }\n  }\n}\n\nexport { LWO2Parser }\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}