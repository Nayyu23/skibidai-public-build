{"ast":null,"code":"import _createClass from \"C:/Users/Nayyu/Desktop/skibidai-public-build/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"C:/Users/Nayyu/Desktop/skibidai-public-build/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nvar __defProp = Object.defineProperty;\nvar __defNormalProp = function __defNormalProp(obj, key, value) {\n  return key in obj ? __defProp(obj, key, {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: value\n  }) : obj[key] = value;\n};\nvar __publicField = function __publicField(obj, key, value) {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nvar SimplexNoise = /*#__PURE__*/_createClass(\n/**\n * You can pass in a random number generator object if you like.\n * It is assumed to have a random() method.\n */\nfunction SimplexNoise() {\n  var _this = this;\n  var r = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Math;\n  _classCallCheck(this, SimplexNoise);\n  __publicField(this, \"grad3\", [[1, 1, 0], [-1, 1, 0], [1, -1, 0], [-1, -1, 0], [1, 0, 1], [-1, 0, 1], [1, 0, -1], [-1, 0, -1], [0, 1, 1], [0, -1, 1], [0, 1, -1], [0, -1, -1]]);\n  __publicField(this, \"grad4\", [[0, 1, 1, 1], [0, 1, 1, -1], [0, 1, -1, 1], [0, 1, -1, -1], [0, -1, 1, 1], [0, -1, 1, -1], [0, -1, -1, 1], [0, -1, -1, -1], [1, 0, 1, 1], [1, 0, 1, -1], [1, 0, -1, 1], [1, 0, -1, -1], [-1, 0, 1, 1], [-1, 0, 1, -1], [-1, 0, -1, 1], [-1, 0, -1, -1], [1, 1, 0, 1], [1, 1, 0, -1], [1, -1, 0, 1], [1, -1, 0, -1], [-1, 1, 0, 1], [-1, 1, 0, -1], [-1, -1, 0, 1], [-1, -1, 0, -1], [1, 1, 1, 0], [1, 1, -1, 0], [1, -1, 1, 0], [1, -1, -1, 0], [-1, 1, 1, 0], [-1, 1, -1, 0], [-1, -1, 1, 0], [-1, -1, -1, 0]]);\n  __publicField(this, \"p\", []);\n  // To remove the need for index wrapping, double the permutation table length\n  __publicField(this, \"perm\", []);\n  // A lookup table to traverse the simplex around a given point in 4D.\n  // Details can be found where this table is used, in the 4D noise method.\n  __publicField(this, \"simplex\", [[0, 1, 2, 3], [0, 1, 3, 2], [0, 0, 0, 0], [0, 2, 3, 1], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [1, 2, 3, 0], [0, 2, 1, 3], [0, 0, 0, 0], [0, 3, 1, 2], [0, 3, 2, 1], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [1, 3, 2, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [1, 2, 0, 3], [0, 0, 0, 0], [1, 3, 0, 2], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [2, 3, 0, 1], [2, 3, 1, 0], [1, 0, 2, 3], [1, 0, 3, 2], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [2, 0, 3, 1], [0, 0, 0, 0], [2, 1, 3, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [2, 0, 1, 3], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [3, 0, 1, 2], [3, 0, 2, 1], [0, 0, 0, 0], [3, 1, 2, 0], [2, 1, 0, 3], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [3, 1, 0, 2], [0, 0, 0, 0], [3, 2, 0, 1], [3, 2, 1, 0]]);\n  __publicField(this, \"dot\", function (g, x, y) {\n    return g[0] * x + g[1] * y;\n  });\n  __publicField(this, \"dot3\", function (g, x, y, z) {\n    return g[0] * x + g[1] * y + g[2] * z;\n  });\n  __publicField(this, \"dot4\", function (g, x, y, z, w) {\n    return g[0] * x + g[1] * y + g[2] * z + g[3] * w;\n  });\n  __publicField(this, \"noise\", function (xin, yin) {\n    var n0;\n    var n1;\n    var n2;\n    var F2 = 0.5 * (Math.sqrt(3) - 1);\n    var s = (xin + yin) * F2;\n    var i = Math.floor(xin + s);\n    var j = Math.floor(yin + s);\n    var G2 = (3 - Math.sqrt(3)) / 6;\n    var t = (i + j) * G2;\n    var X0 = i - t;\n    var Y0 = j - t;\n    var x0 = xin - X0;\n    var y0 = yin - Y0;\n    var i1 = 0;\n    var j1 = 1;\n    if (x0 > y0) {\n      i1 = 1;\n      j1 = 0;\n    }\n    var x1 = x0 - i1 + G2;\n    var y1 = y0 - j1 + G2;\n    var x2 = x0 - 1 + 2 * G2;\n    var y2 = y0 - 1 + 2 * G2;\n    var ii = i & 255;\n    var jj = j & 255;\n    var gi0 = _this.perm[ii + _this.perm[jj]] % 12;\n    var gi1 = _this.perm[ii + i1 + _this.perm[jj + j1]] % 12;\n    var gi2 = _this.perm[ii + 1 + _this.perm[jj + 1]] % 12;\n    var t0 = 0.5 - x0 * x0 - y0 * y0;\n    if (t0 < 0) {\n      n0 = 0;\n    } else {\n      t0 *= t0;\n      n0 = t0 * t0 * _this.dot(_this.grad3[gi0], x0, y0);\n    }\n    var t1 = 0.5 - x1 * x1 - y1 * y1;\n    if (t1 < 0) {\n      n1 = 0;\n    } else {\n      t1 *= t1;\n      n1 = t1 * t1 * _this.dot(_this.grad3[gi1], x1, y1);\n    }\n    var t2 = 0.5 - x2 * x2 - y2 * y2;\n    if (t2 < 0) {\n      n2 = 0;\n    } else {\n      t2 *= t2;\n      n2 = t2 * t2 * _this.dot(_this.grad3[gi2], x2, y2);\n    }\n    return 70 * (n0 + n1 + n2);\n  });\n  // 3D simplex noise\n  __publicField(this, \"noise3d\", function (xin, yin, zin) {\n    var n0;\n    var n1;\n    var n2;\n    var n3;\n    var F3 = 1 / 3;\n    var s = (xin + yin + zin) * F3;\n    var i = Math.floor(xin + s);\n    var j = Math.floor(yin + s);\n    var k = Math.floor(zin + s);\n    var G3 = 1 / 6;\n    var t = (i + j + k) * G3;\n    var X0 = i - t;\n    var Y0 = j - t;\n    var Z0 = k - t;\n    var x0 = xin - X0;\n    var y0 = yin - Y0;\n    var z0 = zin - Z0;\n    var i1;\n    var j1;\n    var k1;\n    var i2;\n    var j2;\n    var k2;\n    if (x0 >= y0) {\n      if (y0 >= z0) {\n        i1 = 1;\n        j1 = 0;\n        k1 = 0;\n        i2 = 1;\n        j2 = 1;\n        k2 = 0;\n      } else if (x0 >= z0) {\n        i1 = 1;\n        j1 = 0;\n        k1 = 0;\n        i2 = 1;\n        j2 = 0;\n        k2 = 1;\n      } else {\n        i1 = 0;\n        j1 = 0;\n        k1 = 1;\n        i2 = 1;\n        j2 = 0;\n        k2 = 1;\n      }\n    } else {\n      if (y0 < z0) {\n        i1 = 0;\n        j1 = 0;\n        k1 = 1;\n        i2 = 0;\n        j2 = 1;\n        k2 = 1;\n      } else if (x0 < z0) {\n        i1 = 0;\n        j1 = 1;\n        k1 = 0;\n        i2 = 0;\n        j2 = 1;\n        k2 = 1;\n      } else {\n        i1 = 0;\n        j1 = 1;\n        k1 = 0;\n        i2 = 1;\n        j2 = 1;\n        k2 = 0;\n      }\n    }\n    var x1 = x0 - i1 + G3;\n    var y1 = y0 - j1 + G3;\n    var z1 = z0 - k1 + G3;\n    var x2 = x0 - i2 + 2 * G3;\n    var y2 = y0 - j2 + 2 * G3;\n    var z2 = z0 - k2 + 2 * G3;\n    var x3 = x0 - 1 + 3 * G3;\n    var y3 = y0 - 1 + 3 * G3;\n    var z3 = z0 - 1 + 3 * G3;\n    var ii = i & 255;\n    var jj = j & 255;\n    var kk = k & 255;\n    var gi0 = _this.perm[ii + _this.perm[jj + _this.perm[kk]]] % 12;\n    var gi1 = _this.perm[ii + i1 + _this.perm[jj + j1 + _this.perm[kk + k1]]] % 12;\n    var gi2 = _this.perm[ii + i2 + _this.perm[jj + j2 + _this.perm[kk + k2]]] % 12;\n    var gi3 = _this.perm[ii + 1 + _this.perm[jj + 1 + _this.perm[kk + 1]]] % 12;\n    var t0 = 0.6 - x0 * x0 - y0 * y0 - z0 * z0;\n    if (t0 < 0) {\n      n0 = 0;\n    } else {\n      t0 *= t0;\n      n0 = t0 * t0 * _this.dot3(_this.grad3[gi0], x0, y0, z0);\n    }\n    var t1 = 0.6 - x1 * x1 - y1 * y1 - z1 * z1;\n    if (t1 < 0) {\n      n1 = 0;\n    } else {\n      t1 *= t1;\n      n1 = t1 * t1 * _this.dot3(_this.grad3[gi1], x1, y1, z1);\n    }\n    var t2 = 0.6 - x2 * x2 - y2 * y2 - z2 * z2;\n    if (t2 < 0) {\n      n2 = 0;\n    } else {\n      t2 *= t2;\n      n2 = t2 * t2 * _this.dot3(_this.grad3[gi2], x2, y2, z2);\n    }\n    var t3 = 0.6 - x3 * x3 - y3 * y3 - z3 * z3;\n    if (t3 < 0) {\n      n3 = 0;\n    } else {\n      t3 *= t3;\n      n3 = t3 * t3 * _this.dot3(_this.grad3[gi3], x3, y3, z3);\n    }\n    return 32 * (n0 + n1 + n2 + n3);\n  });\n  // 4D simplex noise\n  __publicField(this, \"noise4d\", function (x, y, z, w) {\n    var grad4 = _this.grad4;\n    var simplex = _this.simplex;\n    var perm = _this.perm;\n    var F4 = (Math.sqrt(5) - 1) / 4;\n    var G4 = (5 - Math.sqrt(5)) / 20;\n    var n0;\n    var n1;\n    var n2;\n    var n3;\n    var n4;\n    var s = (x + y + z + w) * F4;\n    var i = Math.floor(x + s);\n    var j = Math.floor(y + s);\n    var k = Math.floor(z + s);\n    var l = Math.floor(w + s);\n    var t = (i + j + k + l) * G4;\n    var X0 = i - t;\n    var Y0 = j - t;\n    var Z0 = k - t;\n    var W0 = l - t;\n    var x0 = x - X0;\n    var y0 = y - Y0;\n    var z0 = z - Z0;\n    var w0 = w - W0;\n    var c1 = x0 > y0 ? 32 : 0;\n    var c2 = x0 > z0 ? 16 : 0;\n    var c3 = y0 > z0 ? 8 : 0;\n    var c4 = x0 > w0 ? 4 : 0;\n    var c5 = y0 > w0 ? 2 : 0;\n    var c6 = z0 > w0 ? 1 : 0;\n    var c = c1 + c2 + c3 + c4 + c5 + c6;\n    var i1;\n    var j1;\n    var k1;\n    var l1;\n    var i2;\n    var j2;\n    var k2;\n    var l2;\n    var i3;\n    var j3;\n    var k3;\n    var l3;\n    i1 = simplex[c][0] >= 3 ? 1 : 0;\n    j1 = simplex[c][1] >= 3 ? 1 : 0;\n    k1 = simplex[c][2] >= 3 ? 1 : 0;\n    l1 = simplex[c][3] >= 3 ? 1 : 0;\n    i2 = simplex[c][0] >= 2 ? 1 : 0;\n    j2 = simplex[c][1] >= 2 ? 1 : 0;\n    k2 = simplex[c][2] >= 2 ? 1 : 0;\n    l2 = simplex[c][3] >= 2 ? 1 : 0;\n    i3 = simplex[c][0] >= 1 ? 1 : 0;\n    j3 = simplex[c][1] >= 1 ? 1 : 0;\n    k3 = simplex[c][2] >= 1 ? 1 : 0;\n    l3 = simplex[c][3] >= 1 ? 1 : 0;\n    var x1 = x0 - i1 + G4;\n    var y1 = y0 - j1 + G4;\n    var z1 = z0 - k1 + G4;\n    var w1 = w0 - l1 + G4;\n    var x2 = x0 - i2 + 2 * G4;\n    var y2 = y0 - j2 + 2 * G4;\n    var z2 = z0 - k2 + 2 * G4;\n    var w2 = w0 - l2 + 2 * G4;\n    var x3 = x0 - i3 + 3 * G4;\n    var y3 = y0 - j3 + 3 * G4;\n    var z3 = z0 - k3 + 3 * G4;\n    var w3 = w0 - l3 + 3 * G4;\n    var x4 = x0 - 1 + 4 * G4;\n    var y4 = y0 - 1 + 4 * G4;\n    var z4 = z0 - 1 + 4 * G4;\n    var w4 = w0 - 1 + 4 * G4;\n    var ii = i & 255;\n    var jj = j & 255;\n    var kk = k & 255;\n    var ll = l & 255;\n    var gi0 = perm[ii + perm[jj + perm[kk + perm[ll]]]] % 32;\n    var gi1 = perm[ii + i1 + perm[jj + j1 + perm[kk + k1 + perm[ll + l1]]]] % 32;\n    var gi2 = perm[ii + i2 + perm[jj + j2 + perm[kk + k2 + perm[ll + l2]]]] % 32;\n    var gi3 = perm[ii + i3 + perm[jj + j3 + perm[kk + k3 + perm[ll + l3]]]] % 32;\n    var gi4 = perm[ii + 1 + perm[jj + 1 + perm[kk + 1 + perm[ll + 1]]]] % 32;\n    var t0 = 0.6 - x0 * x0 - y0 * y0 - z0 * z0 - w0 * w0;\n    if (t0 < 0) {\n      n0 = 0;\n    } else {\n      t0 *= t0;\n      n0 = t0 * t0 * _this.dot4(grad4[gi0], x0, y0, z0, w0);\n    }\n    var t1 = 0.6 - x1 * x1 - y1 * y1 - z1 * z1 - w1 * w1;\n    if (t1 < 0) {\n      n1 = 0;\n    } else {\n      t1 *= t1;\n      n1 = t1 * t1 * _this.dot4(grad4[gi1], x1, y1, z1, w1);\n    }\n    var t2 = 0.6 - x2 * x2 - y2 * y2 - z2 * z2 - w2 * w2;\n    if (t2 < 0) {\n      n2 = 0;\n    } else {\n      t2 *= t2;\n      n2 = t2 * t2 * _this.dot4(grad4[gi2], x2, y2, z2, w2);\n    }\n    var t3 = 0.6 - x3 * x3 - y3 * y3 - z3 * z3 - w3 * w3;\n    if (t3 < 0) {\n      n3 = 0;\n    } else {\n      t3 *= t3;\n      n3 = t3 * t3 * _this.dot4(grad4[gi3], x3, y3, z3, w3);\n    }\n    var t4 = 0.6 - x4 * x4 - y4 * y4 - z4 * z4 - w4 * w4;\n    if (t4 < 0) {\n      n4 = 0;\n    } else {\n      t4 *= t4;\n      n4 = t4 * t4 * _this.dot4(grad4[gi4], x4, y4, z4, w4);\n    }\n    return 27 * (n0 + n1 + n2 + n3 + n4);\n  });\n  for (var i = 0; i < 256; i++) {\n    this.p[i] = Math.floor(r.random() * 256);\n  }\n  for (var _i = 0; _i < 512; _i++) {\n    this.perm[_i] = this.p[_i & 255];\n  }\n});\nexport { SimplexNoise };","map":{"version":3,"names":["SimplexNoise","_createClass","_this","r","arguments","length","undefined","Math","_classCallCheck","__publicField","g","x","y","z","w","xin","yin","n0","n1","n2","F2","sqrt","s","i","floor","j","G2","t","X0","Y0","x0","y0","i1","j1","x1","y1","x2","y2","ii","jj","gi0","perm","gi1","gi2","t0","dot","grad3","t1","t2","zin","n3","F3","k","G3","Z0","z0","k1","i2","j2","k2","z1","z2","x3","y3","z3","kk","gi3","dot3","t3","grad4","simplex","F4","G4","n4","l","W0","w0","c1","c2","c3","c4","c5","c6","c","l1","l2","i3","j3","k3","l3","w1","w2","w3","x4","y4","z4","w4","ll","gi4","dot4","t4","p","random"],"sources":["C:\\Users\\Nayyu\\Desktop\\skibidai-public-build\\node_modules\\src\\math\\SimplexNoise.ts"],"sourcesContent":["// Ported from Stefan Gustavson's java implementation\n// http://staffwww.itn.liu.se/~stegu/simplexnoise/simplexnoise.pdf\n// Read Stefan's excellent paper for details on how this code works.\n//\n// Sean McCullough banksean@gmail.com\n//\n\nexport interface NumberGenerator {\n  random: () => number\n}\n\n// Added 4D noise\nexport class SimplexNoise {\n  private grad3 = [\n    [1, 1, 0],\n    [-1, 1, 0],\n    [1, -1, 0],\n    [-1, -1, 0],\n    [1, 0, 1],\n    [-1, 0, 1],\n    [1, 0, -1],\n    [-1, 0, -1],\n    [0, 1, 1],\n    [0, -1, 1],\n    [0, 1, -1],\n    [0, -1, -1],\n  ]\n\n  private grad4 = [\n    [0, 1, 1, 1],\n    [0, 1, 1, -1],\n    [0, 1, -1, 1],\n    [0, 1, -1, -1],\n    [0, -1, 1, 1],\n    [0, -1, 1, -1],\n    [0, -1, -1, 1],\n    [0, -1, -1, -1],\n    [1, 0, 1, 1],\n    [1, 0, 1, -1],\n    [1, 0, -1, 1],\n    [1, 0, -1, -1],\n    [-1, 0, 1, 1],\n    [-1, 0, 1, -1],\n    [-1, 0, -1, 1],\n    [-1, 0, -1, -1],\n    [1, 1, 0, 1],\n    [1, 1, 0, -1],\n    [1, -1, 0, 1],\n    [1, -1, 0, -1],\n    [-1, 1, 0, 1],\n    [-1, 1, 0, -1],\n    [-1, -1, 0, 1],\n    [-1, -1, 0, -1],\n    [1, 1, 1, 0],\n    [1, 1, -1, 0],\n    [1, -1, 1, 0],\n    [1, -1, -1, 0],\n    [-1, 1, 1, 0],\n    [-1, 1, -1, 0],\n    [-1, -1, 1, 0],\n    [-1, -1, -1, 0],\n  ]\n\n  private p: number[] = []\n\n  // To remove the need for index wrapping, double the permutation table length\n  private perm: number[] = []\n\n  // A lookup table to traverse the simplex around a given point in 4D.\n  // Details can be found where this table is used, in the 4D noise method.\n  private simplex = [\n    [0, 1, 2, 3],\n    [0, 1, 3, 2],\n    [0, 0, 0, 0],\n    [0, 2, 3, 1],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [1, 2, 3, 0],\n    [0, 2, 1, 3],\n    [0, 0, 0, 0],\n    [0, 3, 1, 2],\n    [0, 3, 2, 1],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [1, 3, 2, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [1, 2, 0, 3],\n    [0, 0, 0, 0],\n    [1, 3, 0, 2],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [2, 3, 0, 1],\n    [2, 3, 1, 0],\n    [1, 0, 2, 3],\n    [1, 0, 3, 2],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [2, 0, 3, 1],\n    [0, 0, 0, 0],\n    [2, 1, 3, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [2, 0, 1, 3],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [3, 0, 1, 2],\n    [3, 0, 2, 1],\n    [0, 0, 0, 0],\n    [3, 1, 2, 0],\n    [2, 1, 0, 3],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [3, 1, 0, 2],\n    [0, 0, 0, 0],\n    [3, 2, 0, 1],\n    [3, 2, 1, 0],\n  ]\n\n  /**\n   * You can pass in a random number generator object if you like.\n   * It is assumed to have a random() method.\n   */\n  constructor(r: NumberGenerator = Math) {\n    for (let i = 0; i < 256; i++) {\n      this.p[i] = Math.floor(r.random() * 256)\n    }\n\n    for (let i = 0; i < 512; i++) {\n      this.perm[i] = this.p[i & 255]\n    }\n  }\n\n  public dot = (g: number[], x: number, y: number): number => {\n    return g[0] * x + g[1] * y\n  }\n\n  public dot3 = (g: number[], x: number, y: number, z: number): number => {\n    return g[0] * x + g[1] * y + g[2] * z\n  }\n\n  public dot4 = (g: number[], x: number, y: number, z: number, w: number): number => {\n    return g[0] * x + g[1] * y + g[2] * z + g[3] * w\n  }\n\n  public noise = (xin: number, yin: number): number => {\n    let n0\n    let n1\n    let n2 // Noise contributions from the three corners\n    // Skew the input space to determine which simplex cell we're in\n    const F2 = 0.5 * (Math.sqrt(3.0) - 1.0)\n    const s = (xin + yin) * F2 // Hairy factor for 2D\n    const i = Math.floor(xin + s)\n    const j = Math.floor(yin + s)\n    const G2 = (3.0 - Math.sqrt(3.0)) / 6.0\n    const t = (i + j) * G2\n    const X0 = i - t // Unskew the cell origin back to (x,y) space\n    const Y0 = j - t\n    const x0 = xin - X0 // The x,y distances from the cell origin\n    const y0 = yin - Y0\n    // For the 2D case, the simplex shape is an equilateral triangle.\n    // Determine which simplex we are in.\n    // upper triangle, YX order: (0,0)->(0,1)->(1,1)\n    let i1 = 0\n    // Offsets for second (middle) corner of simplex in (i,j) coords\n    let j1 = 1\n    if (x0 > y0) {\n      i1 = 1\n      j1 = 0\n    }\n\n    // A step of (1,0) in (i,j) means a step of (1-c,-c) in (x,y), and\n    // a step of (0,1) in (i,j) means a step of (-c,1-c) in (x,y), where\n    // c = (3-sqrt(3))/6\n    const x1 = x0 - i1 + G2 // Offsets for middle corner in (x,y) unskewed coords\n    const y1 = y0 - j1 + G2\n    const x2 = x0 - 1.0 + 2.0 * G2 // Offsets for last corner in (x,y) unskewed coords\n    const y2 = y0 - 1.0 + 2.0 * G2\n    // Work out the hashed gradient indices of the three simplex corners\n    const ii = i & 255\n    const jj = j & 255\n    const gi0 = this.perm[ii + this.perm[jj]] % 12\n    const gi1 = this.perm[ii + i1 + this.perm[jj + j1]] % 12\n    const gi2 = this.perm[ii + 1 + this.perm[jj + 1]] % 12\n    // Calculate the contribution from the three corners\n    let t0 = 0.5 - x0 * x0 - y0 * y0\n    if (t0 < 0) {\n      n0 = 0.0\n    } else {\n      t0 *= t0\n      n0 = t0 * t0 * this.dot(this.grad3[gi0], x0, y0) // (x,y) of grad3 used for 2D gradient\n    }\n\n    let t1 = 0.5 - x1 * x1 - y1 * y1\n    if (t1 < 0) {\n      n1 = 0.0\n    } else {\n      t1 *= t1\n      n1 = t1 * t1 * this.dot(this.grad3[gi1], x1, y1)\n    }\n\n    let t2 = 0.5 - x2 * x2 - y2 * y2\n    if (t2 < 0) {\n      n2 = 0.0\n    } else {\n      t2 *= t2\n      n2 = t2 * t2 * this.dot(this.grad3[gi2], x2, y2)\n    }\n\n    // Add contributions from each corner to get the final noise value.\n    // The result is scaled to return values in the interval [-1,1].\n    return 70.0 * (n0 + n1 + n2)\n  }\n\n  // 3D simplex noise\n  private noise3d = (xin: number, yin: number, zin: number): number => {\n    // Noise contributions from the four corners\n    let n0\n    let n1\n    let n2\n    let n3\n    // Skew the input space to determine which simplex cell we're in\n    const F3 = 1.0 / 3.0\n    const s = (xin + yin + zin) * F3 // Very nice and simple skew factor for 3D\n    const i = Math.floor(xin + s)\n    const j = Math.floor(yin + s)\n    const k = Math.floor(zin + s)\n    const G3 = 1.0 / 6.0 // Very nice and simple unskew factor, too\n    const t = (i + j + k) * G3\n    const X0 = i - t // Unskew the cell origin back to (x,y,z) space\n    const Y0 = j - t\n    const Z0 = k - t\n    const x0 = xin - X0 // The x,y,z distances from the cell origin\n    const y0 = yin - Y0\n    const z0 = zin - Z0\n    // For the 3D case, the simplex shape is a slightly irregular tetrahedron.\n    // Determine which simplex we are in.\n    let i1\n    let j1\n    let k1 // Offsets for second corner of simplex in (i,j,k) coords\n    let i2\n    let j2\n    let k2 // Offsets for third corner of simplex in (i,j,k) coords\n    if (x0 >= y0) {\n      if (y0 >= z0) {\n        i1 = 1\n        j1 = 0\n        k1 = 0\n        i2 = 1\n        j2 = 1\n        k2 = 0\n\n        // X Y Z order\n      } else if (x0 >= z0) {\n        i1 = 1\n        j1 = 0\n        k1 = 0\n        i2 = 1\n        j2 = 0\n        k2 = 1\n\n        // X Z Y order\n      } else {\n        i1 = 0\n        j1 = 0\n        k1 = 1\n        i2 = 1\n        j2 = 0\n        k2 = 1\n      } // Z X Y order\n    } else {\n      // x0<y0\n\n      if (y0 < z0) {\n        i1 = 0\n        j1 = 0\n        k1 = 1\n        i2 = 0\n        j2 = 1\n        k2 = 1\n\n        // Z Y X order\n      } else if (x0 < z0) {\n        i1 = 0\n        j1 = 1\n        k1 = 0\n        i2 = 0\n        j2 = 1\n        k2 = 1\n\n        // Y Z X order\n      } else {\n        i1 = 0\n        j1 = 1\n        k1 = 0\n        i2 = 1\n        j2 = 1\n        k2 = 0\n      } // Y X Z order\n    }\n\n    // A step of (1,0,0) in (i,j,k) means a step of (1-c,-c,-c) in (x,y,z),\n    // a step of (0,1,0) in (i,j,k) means a step of (-c,1-c,-c) in (x,y,z), and\n    // a step of (0,0,1) in (i,j,k) means a step of (-c,-c,1-c) in (x,y,z), where\n    // c = 1/6.\n    const x1 = x0 - i1 + G3 // Offsets for second corner in (x,y,z) coords\n    const y1 = y0 - j1 + G3\n    const z1 = z0 - k1 + G3\n    const x2 = x0 - i2 + 2.0 * G3 // Offsets for third corner in (x,y,z) coords\n    const y2 = y0 - j2 + 2.0 * G3\n    const z2 = z0 - k2 + 2.0 * G3\n    const x3 = x0 - 1.0 + 3.0 * G3 // Offsets for last corner in (x,y,z) coords\n    const y3 = y0 - 1.0 + 3.0 * G3\n    const z3 = z0 - 1.0 + 3.0 * G3\n    // Work out the hashed gradient indices of the four simplex corners\n    const ii = i & 255\n    const jj = j & 255\n    const kk = k & 255\n    const gi0 = this.perm[ii + this.perm[jj + this.perm[kk]]] % 12\n    const gi1 = this.perm[ii + i1 + this.perm[jj + j1 + this.perm[kk + k1]]] % 12\n    const gi2 = this.perm[ii + i2 + this.perm[jj + j2 + this.perm[kk + k2]]] % 12\n    const gi3 = this.perm[ii + 1 + this.perm[jj + 1 + this.perm[kk + 1]]] % 12\n    // Calculate the contribution from the four corners\n    let t0 = 0.6 - x0 * x0 - y0 * y0 - z0 * z0\n    if (t0 < 0) {\n      n0 = 0.0\n    } else {\n      t0 *= t0\n      n0 = t0 * t0 * this.dot3(this.grad3[gi0], x0, y0, z0)\n    }\n\n    let t1 = 0.6 - x1 * x1 - y1 * y1 - z1 * z1\n    if (t1 < 0) {\n      n1 = 0.0\n    } else {\n      t1 *= t1\n      n1 = t1 * t1 * this.dot3(this.grad3[gi1], x1, y1, z1)\n    }\n\n    let t2 = 0.6 - x2 * x2 - y2 * y2 - z2 * z2\n    if (t2 < 0) {\n      n2 = 0.0\n    } else {\n      t2 *= t2\n      n2 = t2 * t2 * this.dot3(this.grad3[gi2], x2, y2, z2)\n    }\n\n    let t3 = 0.6 - x3 * x3 - y3 * y3 - z3 * z3\n    if (t3 < 0) {\n      n3 = 0.0\n    } else {\n      t3 *= t3\n      n3 = t3 * t3 * this.dot3(this.grad3[gi3], x3, y3, z3)\n    }\n\n    // Add contributions from each corner to get the final noise value.\n    // The result is scaled to stay just inside [-1,1]\n    return 32.0 * (n0 + n1 + n2 + n3)\n  }\n\n  // 4D simplex noise\n  public noise4d = (x: number, y: number, z: number, w: number): number => {\n    // For faster and easier lookups\n    const grad4 = this.grad4\n    const simplex = this.simplex\n    const perm = this.perm\n\n    // The skewing and unskewing factors are hairy again for the 4D case\n    const F4 = (Math.sqrt(5.0) - 1.0) / 4.0\n    const G4 = (5.0 - Math.sqrt(5.0)) / 20.0\n    let n0\n    let n1\n    let n2\n    let n3\n    let n4 // Noise contributions from the five corners\n    // Skew the (x,y,z,w) space to determine which cell of 24 simplices we're in\n    const s = (x + y + z + w) * F4 // Factor for 4D skewing\n    const i = Math.floor(x + s)\n    const j = Math.floor(y + s)\n    const k = Math.floor(z + s)\n    const l = Math.floor(w + s)\n    const t = (i + j + k + l) * G4 // Factor for 4D unskewing\n    const X0 = i - t // Unskew the cell origin back to (x,y,z,w) space\n    const Y0 = j - t\n    const Z0 = k - t\n    const W0 = l - t\n    const x0 = x - X0 // The x,y,z,w distances from the cell origin\n    const y0 = y - Y0\n    const z0 = z - Z0\n    const w0 = w - W0\n\n    // For the 4D case, the simplex is a 4D shape I won't even try to describe.\n    // To find out which of the 24 possible simplices we're in, we need to\n    // determine the magnitude ordering of x0, y0, z0 and w0.\n    // The method below is a good way of finding the ordering of x,y,z,w and\n    // then find the correct traversal order for the simplex we’re in.\n    // First, six pair-wise comparisons are performed between each possible pair\n    // of the four coordinates, and the results are used to add up binary bits\n    // for an integer index.\n    const c1 = x0 > y0 ? 32 : 0\n    const c2 = x0 > z0 ? 16 : 0\n    const c3 = y0 > z0 ? 8 : 0\n    const c4 = x0 > w0 ? 4 : 0\n    const c5 = y0 > w0 ? 2 : 0\n    const c6 = z0 > w0 ? 1 : 0\n    const c = c1 + c2 + c3 + c4 + c5 + c6\n    // The integer offsets for the second simplex corner\n    let i1\n    let j1\n    let k1\n    let l1\n\n    // The integer offsets for the third simplex corner\n    let i2\n    let j2\n    let k2\n    let l2\n\n    // The integer offsets for the fourth simplex corner\n    let i3\n    let j3\n    let k3\n    let l3\n    // simplex[c] is a 4-vector with the numbers 0, 1, 2 and 3 in some order.\n    // Many values of c will never occur, since e.g. x>y>z>w makes x<z, y<w and x<w\n    // impossible. Only the 24 indices which have non-zero entries make any sense.\n    // We use a thresholding to set the coordinates in turn from the largest magnitude.\n    // The number 3 in the \"simplex\" array is at the position of the largest coordinate.\n    i1 = simplex[c][0] >= 3 ? 1 : 0\n    j1 = simplex[c][1] >= 3 ? 1 : 0\n    k1 = simplex[c][2] >= 3 ? 1 : 0\n    l1 = simplex[c][3] >= 3 ? 1 : 0\n    // The number 2 in the \"simplex\" array is at the second largest coordinate.\n    i2 = simplex[c][0] >= 2 ? 1 : 0\n    j2 = simplex[c][1] >= 2 ? 1 : 0\n    k2 = simplex[c][2] >= 2 ? 1 : 0\n    l2 = simplex[c][3] >= 2 ? 1 : 0\n    // The number 1 in the \"simplex\" array is at the second smallest coordinate.\n    i3 = simplex[c][0] >= 1 ? 1 : 0\n    j3 = simplex[c][1] >= 1 ? 1 : 0\n    k3 = simplex[c][2] >= 1 ? 1 : 0\n    l3 = simplex[c][3] >= 1 ? 1 : 0\n    // The fifth corner has all coordinate offsets = 1, so no need to look that up.\n    const x1 = x0 - i1 + G4 // Offsets for second corner in (x,y,z,w) coords\n    const y1 = y0 - j1 + G4\n    const z1 = z0 - k1 + G4\n    const w1 = w0 - l1 + G4\n    const x2 = x0 - i2 + 2.0 * G4 // Offsets for third corner in (x,y,z,w) coords\n    const y2 = y0 - j2 + 2.0 * G4\n    const z2 = z0 - k2 + 2.0 * G4\n    const w2 = w0 - l2 + 2.0 * G4\n    const x3 = x0 - i3 + 3.0 * G4 // Offsets for fourth corner in (x,y,z,w) coords\n    const y3 = y0 - j3 + 3.0 * G4\n    const z3 = z0 - k3 + 3.0 * G4\n    const w3 = w0 - l3 + 3.0 * G4\n    const x4 = x0 - 1.0 + 4.0 * G4 // Offsets for last corner in (x,y,z,w) coords\n    const y4 = y0 - 1.0 + 4.0 * G4\n    const z4 = z0 - 1.0 + 4.0 * G4\n    const w4 = w0 - 1.0 + 4.0 * G4\n    // Work out the hashed gradient indices of the five simplex corners\n    const ii = i & 255\n    const jj = j & 255\n    const kk = k & 255\n    const ll = l & 255\n    const gi0 = perm[ii + perm[jj + perm[kk + perm[ll]]]] % 32\n    const gi1 = perm[ii + i1 + perm[jj + j1 + perm[kk + k1 + perm[ll + l1]]]] % 32\n    const gi2 = perm[ii + i2 + perm[jj + j2 + perm[kk + k2 + perm[ll + l2]]]] % 32\n    const gi3 = perm[ii + i3 + perm[jj + j3 + perm[kk + k3 + perm[ll + l3]]]] % 32\n    const gi4 = perm[ii + 1 + perm[jj + 1 + perm[kk + 1 + perm[ll + 1]]]] % 32\n    // Calculate the contribution from the five corners\n    let t0 = 0.6 - x0 * x0 - y0 * y0 - z0 * z0 - w0 * w0\n    if (t0 < 0) {\n      n0 = 0.0\n    } else {\n      t0 *= t0\n      n0 = t0 * t0 * this.dot4(grad4[gi0], x0, y0, z0, w0)\n    }\n\n    let t1 = 0.6 - x1 * x1 - y1 * y1 - z1 * z1 - w1 * w1\n    if (t1 < 0) {\n      n1 = 0.0\n    } else {\n      t1 *= t1\n      n1 = t1 * t1 * this.dot4(grad4[gi1], x1, y1, z1, w1)\n    }\n\n    let t2 = 0.6 - x2 * x2 - y2 * y2 - z2 * z2 - w2 * w2\n    if (t2 < 0) {\n      n2 = 0.0\n    } else {\n      t2 *= t2\n      n2 = t2 * t2 * this.dot4(grad4[gi2], x2, y2, z2, w2)\n    }\n\n    let t3 = 0.6 - x3 * x3 - y3 * y3 - z3 * z3 - w3 * w3\n    if (t3 < 0) {\n      n3 = 0.0\n    } else {\n      t3 *= t3\n      n3 = t3 * t3 * this.dot4(grad4[gi3], x3, y3, z3, w3)\n    }\n\n    let t4 = 0.6 - x4 * x4 - y4 * y4 - z4 * z4 - w4 * w4\n    if (t4 < 0) {\n      n4 = 0.0\n    } else {\n      t4 *= t4\n      n4 = t4 * t4 * this.dot4(grad4[gi4], x4, y4, z4, w4)\n    }\n\n    // Sum up and scale the result to cover the range [-1,1]\n    return 27.0 * (n0 + n1 + n2 + n3 + n4)\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}