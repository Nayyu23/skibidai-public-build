{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/Nayyu/Desktop/skibidai-public-build/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"C:/Users/Nayyu/Desktop/skibidai-public-build/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"C:/Users/Nayyu/Desktop/skibidai-public-build/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Nayyu/Desktop/skibidai-public-build/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nvar __defProp = Object.defineProperty;\nvar __defNormalProp = function __defNormalProp(obj, key, value) {\n  return key in obj ? __defProp(obj, key, {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: value\n  }) : obj[key] = value;\n};\nvar __publicField = function __publicField(obj, key, value) {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nimport { strToU8, zipSync } from \"fflate\";\nimport { Mesh, MeshPhysicalMaterial } from \"three\";\nvar USDZExporter = /*#__PURE__*/function () {\n  function USDZExporter() {\n    _classCallCheck(this, USDZExporter);\n    __publicField(this, \"PRECISION\", 7);\n    __publicField(this, \"materials\");\n    __publicField(this, \"textures\");\n    __publicField(this, \"files\");\n    this.materials = {};\n    this.textures = {};\n    this.files = {};\n  }\n  _createClass(USDZExporter, [{\n    key: \"parse\",\n    value: function () {\n      var _parse = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(scene) {\n        var _this = this;\n        var modelFileName, output, _loop, id, offset, filename, file, headerSize, offsetMod64, padLength, padding;\n        return _regeneratorRuntime().wrap(function _callee$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              modelFileName = \"model.usda\";\n              this.files[modelFileName] = null;\n              output = this.buildHeader();\n              scene.traverseVisible(function (object) {\n                if (object instanceof Mesh && object.isMesh && object.material.isMeshStandardMaterial) {\n                  var geometry = object.geometry;\n                  var material = object.material;\n                  var geometryFileName = \"geometries/Geometry_\" + geometry.id + \".usd\";\n                  if (!(geometryFileName in _this.files)) {\n                    var meshObject = _this.buildMeshObject(geometry);\n                    _this.files[geometryFileName] = _this.buildUSDFileAsString(meshObject);\n                  }\n                  if (!(material.uuid in _this.materials)) {\n                    _this.materials[material.uuid] = material;\n                  }\n                  output += _this.buildXform(object, geometry, material);\n                }\n              });\n              output += this.buildMaterials(this.materials);\n              this.files[modelFileName] = strToU8(output);\n              output = null;\n              _loop = /*#__PURE__*/_regeneratorRuntime().mark(function _loop() {\n                var texture, color, isRGBA, canvas, blob;\n                return _regeneratorRuntime().wrap(function _loop$(_context) {\n                  while (1) switch (_context.prev = _context.next) {\n                    case 0:\n                      texture = _this.textures[id];\n                      color = id.split(\"_\")[1];\n                      isRGBA = texture.format === 1023;\n                      canvas = _this.imageToCanvas(texture.image, color);\n                      _context.next = 6;\n                      return new Promise(function (resolve) {\n                        return canvas == null ? void 0 : canvas.toBlob(resolve, isRGBA ? \"image/png\" : \"image/jpeg\", 1);\n                      });\n                    case 6:\n                      blob = _context.sent;\n                      if (!blob) {\n                        _context.next = 13;\n                        break;\n                      }\n                      _context.t0 = Uint8Array;\n                      _context.next = 11;\n                      return blob.arrayBuffer();\n                    case 11:\n                      _context.t1 = _context.sent;\n                      _this.files[\"textures/Texture_\".concat(id, \".\").concat(isRGBA ? \"png\" : \"jpg\")] = new _context.t0(_context.t1);\n                    case 13:\n                    case \"end\":\n                      return _context.stop();\n                  }\n                }, _loop);\n              });\n              _context2.t0 = _regeneratorRuntime().keys(this.textures);\n            case 9:\n              if ((_context2.t1 = _context2.t0()).done) {\n                _context2.next = 14;\n                break;\n              }\n              id = _context2.t1.value;\n              return _context2.delegateYield(_loop(), \"t2\", 12);\n            case 12:\n              _context2.next = 9;\n              break;\n            case 14:\n              offset = 0;\n              for (filename in this.files) {\n                file = this.files[filename];\n                headerSize = 34 + filename.length;\n                offset += headerSize;\n                offsetMod64 = offset & 63;\n                if (offsetMod64 !== 4 && file !== null && file instanceof Uint8Array) {\n                  padLength = 64 - offsetMod64;\n                  padding = new Uint8Array(padLength);\n                  this.files[filename] = [file, {\n                    extra: {\n                      12345: padding\n                    }\n                  }];\n                }\n                if (file && typeof file.length === \"number\") {\n                  offset = file.length;\n                }\n              }\n              return _context2.abrupt(\"return\", zipSync(this.files, {\n                level: 0\n              }));\n            case 17:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee, this);\n      }));\n      function parse(_x) {\n        return _parse.apply(this, arguments);\n      }\n      return parse;\n    }()\n  }, {\n    key: \"imageToCanvas\",\n    value: function imageToCanvas(image, color) {\n      if (typeof HTMLImageElement !== \"undefined\" && image instanceof HTMLImageElement || typeof HTMLCanvasElement !== \"undefined\" && image instanceof HTMLCanvasElement || typeof OffscreenCanvas !== \"undefined\" && image instanceof OffscreenCanvas || typeof ImageBitmap !== \"undefined\" && image instanceof ImageBitmap) {\n        var scale = 1024 / Math.max(image.width, image.height);\n        var canvas = document.createElement(\"canvas\");\n        canvas.width = image.width * Math.min(1, scale);\n        canvas.height = image.height * Math.min(1, scale);\n        var context = canvas.getContext(\"2d\");\n        context == null ? void 0 : context.drawImage(image, 0, 0, canvas.width, canvas.height);\n        if (color !== void 0) {\n          var hex = parseInt(color, 16);\n          var r = (hex >> 16 & 255) / 255;\n          var g = (hex >> 8 & 255) / 255;\n          var b = (hex & 255) / 255;\n          var imagedata = context == null ? void 0 : context.getImageData(0, 0, canvas.width, canvas.height);\n          if (imagedata) {\n            var data = imagedata == null ? void 0 : imagedata.data;\n            for (var i = 0; i < data.length; i += 4) {\n              data[i + 0] = data[i + 0] * r;\n              data[i + 1] = data[i + 1] * g;\n              data[i + 2] = data[i + 2] * b;\n            }\n            context == null ? void 0 : context.putImageData(imagedata, 0, 0);\n          }\n        }\n        return canvas;\n      }\n    }\n  }, {\n    key: \"buildHeader\",\n    value: function buildHeader() {\n      return \"#usda 1.0\\n(\\n    customLayerData = {\\n        string creator = \\\"Three.js USDZExporter\\\"\\n    }\\n    metersPerUnit = 1\\n    upAxis = \\\"Y\\\"\\n)\\n\";\n    }\n  }, {\n    key: \"buildUSDFileAsString\",\n    value: function buildUSDFileAsString(dataToInsert) {\n      var output = this.buildHeader();\n      output += dataToInsert;\n      return strToU8(output);\n    }\n    // Xform\n  }, {\n    key: \"buildXform\",\n    value: function buildXform(object, geometry, material) {\n      var name = \"Object_\" + object.id;\n      var transform = this.buildMatrix(object.matrixWorld);\n      if (object.matrixWorld.determinant() < 0) {\n        console.warn(\"THREE.USDZExporter: USDZ does not support negative scales\", object);\n      }\n      return \"def Xform \\\"\".concat(name, \"\\\" (\\n    prepend references = @./geometries/Geometry_\").concat(geometry.id, \".usd@</Geometry>\\n)\\n{\\n    matrix4d xformOp:transform = \").concat(transform, \"\\n    uniform token[] xformOpOrder = [\\\"xformOp:transform\\\"]\\n    rel material:binding = </Materials/Material_\").concat(material.id, \">\\n}\\n\");\n    }\n  }, {\n    key: \"buildMatrix\",\n    value: function buildMatrix(matrix) {\n      var array = matrix.elements;\n      return \"( \".concat(this.buildMatrixRow(array, 0), \", \").concat(this.buildMatrixRow(array, 4), \", \").concat(this.buildMatrixRow(array, 8), \", \").concat(this.buildMatrixRow(array, 12), \" )\");\n    }\n  }, {\n    key: \"buildMatrixRow\",\n    value: function buildMatrixRow(array, offset) {\n      return \"(\".concat(array[offset + 0], \", \").concat(array[offset + 1], \", \").concat(array[offset + 2], \", \").concat(array[offset + 3], \")\");\n    }\n    // Mesh\n  }, {\n    key: \"buildMeshObject\",\n    value: function buildMeshObject(geometry) {\n      var mesh = this.buildMesh(geometry);\n      return \"\\ndef \\\"Geometry\\\"\\n{\\n  \".concat(mesh, \"\\n}\\n\");\n    }\n  }, {\n    key: \"buildMesh\",\n    value: function buildMesh(geometry) {\n      var name = \"Geometry\";\n      var attributes = geometry.attributes;\n      var count = attributes.position.count;\n      return \"\\n    def Mesh \\\"\".concat(name, \"\\\"\\n    {\\n        int[] faceVertexCounts = [\").concat(this.buildMeshVertexCount(geometry), \"]\\n        int[] faceVertexIndices = [\").concat(this.buildMeshVertexIndices(geometry), \"]\\n        normal3f[] normals = [\").concat(this.buildVector3Array(attributes.normal, count), \"] (\\n            interpolation = \\\"vertex\\\"\\n        )\\n        point3f[] points = [\").concat(this.buildVector3Array(attributes.position, count), \"]\\n        float2[] primvars:st = [\").concat(this.buildVector2Array(attributes.uv, count), \"] (\\n            interpolation = \\\"vertex\\\"\\n        )\\n        uniform token subdivisionScheme = \\\"none\\\"\\n    }\\n\");\n    }\n  }, {\n    key: \"buildMeshVertexCount\",\n    value: function buildMeshVertexCount(geometry) {\n      var count = geometry.index !== null ? geometry.index.array.length : geometry.attributes.position.count;\n      return Array(count / 3).fill(3).join(\", \");\n    }\n  }, {\n    key: \"buildMeshVertexIndices\",\n    value: function buildMeshVertexIndices(geometry) {\n      if (geometry.index !== null) {\n        return geometry.index.array.join(\", \");\n      }\n      var array = [];\n      var length = geometry.attributes.position.count;\n      for (var i = 0; i < length; i++) {\n        array.push(i);\n      }\n      return array.join(\", \");\n    }\n  }, {\n    key: \"buildVector3Array\",\n    value: function buildVector3Array(attribute, count) {\n      if (attribute === void 0) {\n        console.warn(\"USDZExporter: Normals missing.\");\n        return Array(count).fill(\"(0, 0, 0)\").join(\", \");\n      }\n      var array = [];\n      var data = attribute.array;\n      for (var i = 0; i < data.length; i += 3) {\n        array.push(\"(\".concat(data[i + 0].toPrecision(this.PRECISION), \", \").concat(data[i + 1].toPrecision(this.PRECISION), \", \").concat(data[i + 2].toPrecision(this.PRECISION), \")\"));\n      }\n      return array.join(\", \");\n    }\n  }, {\n    key: \"buildVector2Array\",\n    value: function buildVector2Array(attribute, count) {\n      if (attribute === void 0) {\n        console.warn(\"USDZExporter: UVs missing.\");\n        return Array(count).fill(\"(0, 0)\").join(\", \");\n      }\n      var array = [];\n      var data = attribute.array;\n      for (var i = 0; i < data.length; i += 2) {\n        array.push(\"(\".concat(data[i + 0].toPrecision(this.PRECISION), \", \").concat(1 - data[i + 1].toPrecision(this.PRECISION), \")\"));\n      }\n      return array.join(\", \");\n    }\n    // Materials\n  }, {\n    key: \"buildMaterials\",\n    value: function buildMaterials(materials) {\n      var array = [];\n      for (var uuid in materials) {\n        var material = materials[uuid];\n        array.push(this.buildMaterial(material));\n      }\n      return \"def \\\"Materials\\\"\\n{\\n\".concat(array.join(\"\"), \"\\n}\\n\");\n    }\n  }, {\n    key: \"buildMaterial\",\n    value: function buildMaterial(material) {\n      var pad = \"            \";\n      var inputs = [];\n      var samplers = [];\n      if (material.map !== null) {\n        inputs.push(\"\".concat(pad, \"color3f inputs:diffuseColor.connect = </Materials/Material_\").concat(material.id, \"/Texture_\").concat(material.map.id, \"_diffuse.outputs:rgb>\"));\n        if (material.transparent || material.alphaTest > 0) {\n          inputs.push(\"\".concat(pad, \"float inputs:opacity.connect = </Materials/Material_\").concat(material.id, \"/Texture_\").concat(material.map.id, \"_diffuse.outputs:a>\"));\n        }\n        if (material.alphaTest > 0.01) {\n          inputs.push(\"\".concat(pad, \"float inputs:opacityThreshold = \").concat(material.alphaTest));\n        } else if (material.transparent || material.alphaTest > 0) {\n          inputs.push(\"\".concat(pad, \"float inputs:opacityThreshold = 0.01\"));\n        }\n        samplers.push(this.buildTexture(material, material.map, \"diffuse\", material.color));\n      } else {\n        inputs.push(\"\".concat(pad, \"color3f inputs:diffuseColor = \").concat(this.buildColor(material.color)));\n      }\n      if (material.emissiveMap !== null) {\n        inputs.push(\"\".concat(pad, \"color3f inputs:emissiveColor.connect = </Materials/Material_\").concat(material.id, \"/Texture_\").concat(material.emissiveMap.id, \"_emissive.outputs:rgb>\"));\n        samplers.push(this.buildTexture(material, material.emissiveMap, \"emissive\"));\n      } else if (material.emissive.getHex() > 0) {\n        inputs.push(\"\".concat(pad, \"color3f inputs:emissiveColor = \").concat(this.buildColor(material.emissive)));\n      }\n      if (material.normalMap !== null) {\n        inputs.push(\"\".concat(pad, \"normal3f inputs:normal.connect = </Materials/Material_\").concat(material.id, \"/Texture_\").concat(material.normalMap.id, \"_normal.outputs:rgb>\"));\n        samplers.push(this.buildTexture(material, material.normalMap, \"normal\"));\n      }\n      if (material.aoMap !== null) {\n        inputs.push(\"\".concat(pad, \"float inputs:occlusion.connect = </Materials/Material_\").concat(material.id, \"/Texture_\").concat(material.aoMap.id, \"_occlusion.outputs:r>\"));\n        samplers.push(this.buildTexture(material, material.aoMap, \"occlusion\"));\n      }\n      if (material.roughnessMap !== null && material.roughness === 1) {\n        inputs.push(\"\".concat(pad, \"float inputs:roughness.connect = </Materials/Material_\").concat(material.id, \"/Texture_\").concat(material.roughnessMap.id, \"_roughness.outputs:g>\"));\n        samplers.push(this.buildTexture(material, material.roughnessMap, \"roughness\"));\n      } else {\n        inputs.push(\"\".concat(pad, \"float inputs:roughness = \").concat(material.roughness));\n      }\n      if (material.metalnessMap !== null && material.metalness === 1) {\n        inputs.push(\"\".concat(pad, \"float inputs:metallic.connect = </Materials/Material_\").concat(material.id, \"/Texture_\").concat(material.metalnessMap.id, \"_metallic.outputs:b>\"));\n        samplers.push(this.buildTexture(material, material.metalnessMap, \"metallic\"));\n      } else {\n        inputs.push(\"\".concat(pad, \"float inputs:metallic = \").concat(material.metalness));\n      }\n      inputs.push(\"\".concat(pad, \"float inputs:opacity = \").concat(material.opacity));\n      if (material instanceof MeshPhysicalMaterial) {\n        inputs.push(\"\".concat(pad, \"float inputs:clearcoat = \").concat(material.clearcoat));\n        inputs.push(\"\".concat(pad, \"float inputs:clearcoatRoughness = \").concat(material.clearcoatRoughness));\n        inputs.push(\"\".concat(pad, \"float inputs:ior = \").concat(material.ior));\n      }\n      return \"\\n    def Material \\\"Material_\".concat(material.id, \"\\\"\\n    {\\n        def Shader \\\"PreviewSurface\\\"\\n        {\\n            uniform token info:id = \\\"UsdPreviewSurface\\\"\\n\").concat(inputs.join(\"\\n\"), \"\\n            int inputs:useSpecularWorkflow = 0\\n            token outputs:surface\\n        }\\n        token outputs:surface.connect = </Materials/Material_\").concat(material.id, \"/PreviewSurface.outputs:surface>\\n        token inputs:frame:stPrimvarName = \\\"st\\\"\\n        def Shader \\\"uvReader_st\\\"\\n        {\\n            uniform token info:id = \\\"UsdPrimvarReader_float2\\\"\\n            token inputs:varname.connect = </Materials/Material_\").concat(material.id, \".inputs:frame:stPrimvarName>\\n            float2 inputs:fallback = (0.0, 0.0)\\n            float2 outputs:result\\n        }\\n\").concat(samplers.join(\"\\n\"), \"\\n    }\\n\");\n    }\n  }, {\n    key: \"buildTexture\",\n    value: function buildTexture(material, texture, mapType, color) {\n      var id = texture.id + (color ? \"_\" + color.getHexString() : \"\");\n      var isRGBA = texture.format === 1023;\n      this.textures[id] = texture;\n      return \"\\n      def Shader \\\"Transform2d_\".concat(mapType, \"\\\" (\\n          sdrMetadata = {\\n              string role = \\\"math\\\"\\n          }\\n      )\\n      {\\n          uniform token info:id = \\\"UsdTransform2d\\\"\\n          float2 inputs:in.connect = </Materials/Material_\").concat(material.id, \"/uvReader_st.outputs:result>\\n          float2 inputs:scale = \").concat(this.buildVector2(texture.repeat), \"\\n          float2 inputs:translation = \").concat(this.buildVector2(texture.offset), \"\\n          float2 outputs:result\\n      }\\n      def Shader \\\"Texture_\").concat(texture.id, \"_\").concat(mapType, \"\\\"\\n      {\\n          uniform token info:id = \\\"UsdUVTexture\\\"\\n          asset inputs:file = @textures/Texture_\").concat(id, \".\").concat(isRGBA ? \"png\" : \"jpg\", \"@\\n          float2 inputs:st.connect = </Materials/Material_\").concat(material.id, \"/Transform2d_\").concat(mapType, \".outputs:result>\\n          token inputs:wrapS = \\\"repeat\\\"\\n          token inputs:wrapT = \\\"repeat\\\"\\n          float outputs:r\\n          float outputs:g\\n          float outputs:b\\n          float3 outputs:rgb\\n          \").concat(material.transparent || material.alphaTest > 0 ? \"float outputs:a\" : \"\", \"\\n      }\");\n    }\n  }, {\n    key: \"buildColor\",\n    value: function buildColor(color) {\n      return \"(\".concat(color.r, \", \").concat(color.g, \", \").concat(color.b, \")\");\n    }\n  }, {\n    key: \"buildVector2\",\n    value: function buildVector2(vector) {\n      return \"(\".concat(vector.x, \", \").concat(vector.y, \")\");\n    }\n  }]);\n  return USDZExporter;\n}();\nexport { USDZExporter };","map":{"version":3,"names":["USDZExporter","_classCallCheck","__publicField","materials","textures","files","_createClass","key","value","_parse","_asyncToGenerator","_regeneratorRuntime","mark","_callee","scene","_this","modelFileName","output","_loop","id","offset","filename","file","headerSize","offsetMod64","padLength","padding","wrap","_callee$","_context2","prev","next","buildHeader","traverseVisible","object","Mesh","isMesh","material","isMeshStandardMaterial","geometry","geometryFileName","meshObject","buildMeshObject","buildUSDFileAsString","uuid","buildXform","buildMaterials","strToU8","texture","color","isRGBA","canvas","blob","_loop$","_context","split","format","imageToCanvas","image","Promise","resolve","toBlob","sent","t0","Uint8Array","arrayBuffer","t1","concat","stop","keys","done","delegateYield","length","extra","abrupt","zipSync","level","parse","_x","apply","arguments","HTMLImageElement","HTMLCanvasElement","OffscreenCanvas","ImageBitmap","scale","Math","max","width","height","document","createElement","min","context","getContext","drawImage","hex","parseInt","r","g","b","imagedata","getImageData","data","i","putImageData","dataToInsert","name","transform","buildMatrix","matrixWorld","determinant","console","warn","matrix","array","elements","buildMatrixRow","mesh","buildMesh","attributes","count","position","buildMeshVertexCount","buildMeshVertexIndices","buildVector3Array","normal","buildVector2Array","uv","index","Array","fill","join","push","attribute","toPrecision","PRECISION","buildMaterial","pad","inputs","samplers","map","transparent","alphaTest","buildTexture","buildColor","emissiveMap","emissive","getHex","normalMap","aoMap","roughnessMap","roughness","metalnessMap","metalness","opacity","MeshPhysicalMaterial","clearcoat","clearcoatRoughness","ior","mapType","getHexString","buildVector2","repeat","vector","x","y"],"sources":["C:\\Users\\Nayyu\\Desktop\\skibidai-public-build\\node_modules\\src\\exporters\\USDZExporter.ts"],"sourcesContent":["import { zipSync, strToU8, Zippable } from 'fflate'\nimport {\n  BufferGeometry,\n  Color,\n  Matrix4,\n  Mesh,\n  MeshPhysicalMaterial,\n  MeshStandardMaterial,\n  Object3D,\n  Texture,\n  Vector2,\n} from 'three'\nimport { Nullable } from '../types/utils'\n\ntype MaterialRepresentaion = MeshStandardMaterial | MeshPhysicalMaterial\n\nclass USDZExporter {\n  private readonly PRECISION = 7\n\n  private materials: { [key: string]: MaterialRepresentaion }\n  private textures: { [key: string]: Texture }\n\n  private files: Nullable<Zippable>\n\n  constructor() {\n    this.materials = {}\n    this.textures = {}\n\n    this.files = {}\n  }\n\n  public async parse(scene: Object3D): Promise<Uint8Array> {\n    const modelFileName = 'model.usda'\n\n    // model file should be first in USDZ archive so we init it here\n    this.files[modelFileName] = null\n\n    let output: string | null = this.buildHeader()\n\n    scene.traverseVisible((object) => {\n      if (object instanceof Mesh && object.isMesh && object.material.isMeshStandardMaterial) {\n        const geometry: BufferGeometry = object.geometry\n        const material: MaterialRepresentaion = object.material\n\n        const geometryFileName = 'geometries/Geometry_' + geometry.id + '.usd'\n\n        if (!(geometryFileName in this.files)) {\n          const meshObject = this.buildMeshObject(geometry)\n          this.files[geometryFileName] = this.buildUSDFileAsString(meshObject)\n        }\n\n        if (!(material.uuid in this.materials)) {\n          this.materials[material.uuid] = material\n        }\n\n        output += this.buildXform(object, geometry, material)\n      }\n    })\n\n    output += this.buildMaterials(this.materials)\n\n    this.files[modelFileName] = strToU8(output)\n    output = null\n\n    for (const id in this.textures) {\n      const texture = this.textures[id]\n      const color = id.split('_')[1]\n      const isRGBA = texture.format === 1023\n\n      const canvas = this.imageToCanvas(texture.image, color)\n      const blob = await new Promise<Blob | null>((resolve) =>\n        canvas?.toBlob(resolve, isRGBA ? 'image/png' : 'image/jpeg', 1),\n      )\n\n      if (blob) {\n        this.files[`textures/Texture_${id}.${isRGBA ? 'png' : 'jpg'}`] = new Uint8Array(await blob.arrayBuffer())\n      }\n    }\n\n    // 64 byte alignment\n    // https://github.com/101arrowz/fflate/issues/39#issuecomment-777263109\n\n    let offset = 0\n\n    for (const filename in this.files) {\n      const file = this.files[filename]\n      const headerSize = 34 + filename.length\n\n      offset += headerSize\n\n      const offsetMod64 = offset & 63\n\n      if (offsetMod64 !== 4 && file !== null && file instanceof Uint8Array) {\n        const padLength = 64 - offsetMod64\n        const padding = new Uint8Array(padLength)\n\n        this.files[filename] = [file, { extra: { 12345: padding } }]\n      }\n\n      if (file && typeof file.length === 'number') {\n        offset = file.length\n      }\n    }\n\n    return zipSync(this.files as Zippable, { level: 0 })\n  }\n\n  private imageToCanvas(\n    image: HTMLImageElement | HTMLCanvasElement | OffscreenCanvas | ImageBitmap,\n    color: string,\n  ): HTMLCanvasElement | undefined {\n    if (\n      (typeof HTMLImageElement !== 'undefined' && image instanceof HTMLImageElement) ||\n      (typeof HTMLCanvasElement !== 'undefined' && image instanceof HTMLCanvasElement) ||\n      (typeof OffscreenCanvas !== 'undefined' && image instanceof OffscreenCanvas) ||\n      (typeof ImageBitmap !== 'undefined' && image instanceof ImageBitmap)\n    ) {\n      const scale = 1024 / Math.max(image.width, image.height)\n\n      const canvas = document.createElement('canvas')\n      canvas.width = image.width * Math.min(1, scale)\n      canvas.height = image.height * Math.min(1, scale)\n\n      const context = canvas.getContext('2d')\n      context?.drawImage(image, 0, 0, canvas.width, canvas.height)\n\n      if (color !== undefined) {\n        const hex = parseInt(color, 16)\n\n        const r = ((hex >> 16) & 255) / 255\n        const g = ((hex >> 8) & 255) / 255\n        const b = (hex & 255) / 255\n\n        const imagedata = context?.getImageData(0, 0, canvas.width, canvas.height)\n        if (imagedata) {\n          const data = imagedata?.data\n\n          for (let i = 0; i < data.length; i += 4) {\n            data[i + 0] = data[i + 0] * r\n            data[i + 1] = data[i + 1] * g\n            data[i + 2] = data[i + 2] * b\n          }\n\n          context?.putImageData(imagedata, 0, 0)\n        }\n      }\n\n      return canvas\n    }\n  }\n\n  private buildHeader(): string {\n    return `#usda 1.0\n(\n    customLayerData = {\n        string creator = \"Three.js USDZExporter\"\n    }\n    metersPerUnit = 1\n    upAxis = \"Y\"\n)\n`\n  }\n\n  private buildUSDFileAsString(dataToInsert: string): Uint8Array {\n    let output = this.buildHeader()\n    output += dataToInsert\n    return strToU8(output)\n  }\n\n  // Xform\n  private buildXform(object: Object3D, geometry: BufferGeometry, material: MaterialRepresentaion): string {\n    const name = 'Object_' + object.id\n    const transform = this.buildMatrix(object.matrixWorld)\n\n    if (object.matrixWorld.determinant() < 0) {\n      console.warn('THREE.USDZExporter: USDZ does not support negative scales', object)\n    }\n\n    return `def Xform \"${name}\" (\n    prepend references = @./geometries/Geometry_${geometry.id}.usd@</Geometry>\n)\n{\n    matrix4d xformOp:transform = ${transform}\n    uniform token[] xformOpOrder = [\"xformOp:transform\"]\n    rel material:binding = </Materials/Material_${material.id}>\n}\n`\n  }\n\n  private buildMatrix(matrix: Matrix4): string {\n    const array = matrix.elements\n\n    return `( ${this.buildMatrixRow(array, 0)}, ${this.buildMatrixRow(array, 4)}, ${this.buildMatrixRow(\n      array,\n      8,\n    )}, ${this.buildMatrixRow(array, 12)} )`\n  }\n\n  private buildMatrixRow(array: number[], offset: number): string {\n    return `(${array[offset + 0]}, ${array[offset + 1]}, ${array[offset + 2]}, ${array[offset + 3]})`\n  }\n\n  // Mesh\n  private buildMeshObject(geometry: BufferGeometry): string {\n    const mesh = this.buildMesh(geometry)\n    return `\ndef \"Geometry\"\n{\n  ${mesh}\n}\n`\n  }\n\n  private buildMesh(geometry: BufferGeometry): string {\n    const name = 'Geometry'\n    const attributes = geometry.attributes\n    const count = attributes.position.count\n\n    return `\n    def Mesh \"${name}\"\n    {\n        int[] faceVertexCounts = [${this.buildMeshVertexCount(geometry)}]\n        int[] faceVertexIndices = [${this.buildMeshVertexIndices(geometry)}]\n        normal3f[] normals = [${this.buildVector3Array(attributes.normal, count)}] (\n            interpolation = \"vertex\"\n        )\n        point3f[] points = [${this.buildVector3Array(attributes.position, count)}]\n        float2[] primvars:st = [${this.buildVector2Array(attributes.uv, count)}] (\n            interpolation = \"vertex\"\n        )\n        uniform token subdivisionScheme = \"none\"\n    }\n`\n  }\n\n  private buildMeshVertexCount(geometry: BufferGeometry): string {\n    const count = geometry.index !== null ? geometry.index.array.length : geometry.attributes.position.count\n\n    return Array(count / 3)\n      .fill(3)\n      .join(', ')\n  }\n\n  private buildMeshVertexIndices(geometry: BufferGeometry): string {\n    if (geometry.index !== null) {\n      // @ts-ignore\n      return geometry.index.array.join(', ')\n    }\n\n    const array: number[] = []\n    const length = geometry.attributes.position.count\n\n    for (let i = 0; i < length; i++) {\n      array.push(i)\n    }\n\n    return array.join(', ')\n  }\n\n  private buildVector3Array(attribute: BufferGeometry['attributes'][number], count: number): string {\n    if (attribute === undefined) {\n      console.warn('USDZExporter: Normals missing.')\n      return Array(count).fill('(0, 0, 0)').join(', ')\n    }\n\n    const array: string[] = []\n    const data = attribute.array\n\n    for (let i = 0; i < data.length; i += 3) {\n      array.push(\n        `(${data[i + 0].toPrecision(this.PRECISION)}, ${data[i + 1].toPrecision(this.PRECISION)}, ${data[\n          i + 2\n        ].toPrecision(this.PRECISION)})`,\n      )\n    }\n\n    return array.join(', ')\n  }\n\n  private buildVector2Array(attribute: BufferGeometry['attributes'][number], count: number): string {\n    if (attribute === undefined) {\n      console.warn('USDZExporter: UVs missing.')\n      return Array(count).fill('(0, 0)').join(', ')\n    }\n\n    const array: string[] = []\n    const data = attribute.array\n\n    for (let i = 0; i < data.length; i += 2) {\n      // @ts-ignore\n      array.push(`(${data[i + 0].toPrecision(this.PRECISION)}, ${1 - data[i + 1].toPrecision(this.PRECISION)})`)\n    }\n\n    return array.join(', ')\n  }\n\n  // Materials\n  private buildMaterials(materials: USDZExporter['materials']): string {\n    const array: string[] = []\n\n    for (const uuid in materials) {\n      const material = materials[uuid]\n\n      array.push(this.buildMaterial(material))\n    }\n\n    return `def \"Materials\"\n{\n${array.join('')}\n}\n`\n  }\n\n  private buildMaterial(material: MaterialRepresentaion): string {\n    // https://graphics.pixar.com/usd/docs/UsdPreviewSurface-Proposal.html\n\n    const pad = '            '\n    const inputs = []\n    const samplers = []\n\n    if (material.map !== null) {\n      inputs.push(\n        `${pad}color3f inputs:diffuseColor.connect = </Materials/Material_${material.id}/Texture_${material.map.id}_diffuse.outputs:rgb>`,\n      )\n\n      // Include alpha input\n      if (material.transparent || material.alphaTest > 0.0) {\n        inputs.push(`${pad}float inputs:opacity.connect = </Materials/Material_${material.id}/Texture_${material.map.id}_diffuse.outputs:a>`);\n      }\n\n      // Check if alpha test is bigger than minimum of 0.01, if not and it is transparent still apply a 0.01 alpha clip in order to remove white blur in transparent place.\n      if (material.alphaTest > 0.01) {\n        inputs.push(`${pad}float inputs:opacityThreshold = ${material.alphaTest}`);\n      }\n      else if(material.transparent || material.alphaTest > 0.0) {\n        inputs.push(`${pad}float inputs:opacityThreshold = 0.01`);\n      }\n      \n      samplers.push(this.buildTexture(material, material.map, 'diffuse', material.color))\n    } else {\n      inputs.push(`${pad}color3f inputs:diffuseColor = ${this.buildColor(material.color)}`)\n    }\n\n    if (material.emissiveMap !== null) {\n      inputs.push(\n        `${pad}color3f inputs:emissiveColor.connect = </Materials/Material_${material.id}/Texture_${material.emissiveMap.id}_emissive.outputs:rgb>`,\n      )\n\n      samplers.push(this.buildTexture(material, material.emissiveMap, 'emissive'))\n    } else if (material.emissive.getHex() > 0) {\n      inputs.push(`${pad}color3f inputs:emissiveColor = ${this.buildColor(material.emissive)}`)\n    }\n\n    if (material.normalMap !== null) {\n      inputs.push(\n        `${pad}normal3f inputs:normal.connect = </Materials/Material_${material.id}/Texture_${material.normalMap.id}_normal.outputs:rgb>`,\n      )\n\n      samplers.push(this.buildTexture(material, material.normalMap, 'normal'))\n    }\n\n    if (material.aoMap !== null) {\n      inputs.push(\n        `${pad}float inputs:occlusion.connect = </Materials/Material_${material.id}/Texture_${material.aoMap.id}_occlusion.outputs:r>`,\n      )\n\n      samplers.push(this.buildTexture(material, material.aoMap, 'occlusion'))\n    }\n\n    if (material.roughnessMap !== null && material.roughness === 1) {\n      inputs.push(\n        `${pad}float inputs:roughness.connect = </Materials/Material_${material.id}/Texture_${material.roughnessMap.id}_roughness.outputs:g>`,\n      )\n\n      samplers.push(this.buildTexture(material, material.roughnessMap, 'roughness'))\n    } else {\n      inputs.push(`${pad}float inputs:roughness = ${material.roughness}`)\n    }\n\n    if (material.metalnessMap !== null && material.metalness === 1) {\n      inputs.push(\n        `${pad}float inputs:metallic.connect = </Materials/Material_${material.id}/Texture_${material.metalnessMap.id}_metallic.outputs:b>`,\n      )\n\n      samplers.push(this.buildTexture(material, material.metalnessMap, 'metallic'))\n    } else {\n      inputs.push(`${pad}float inputs:metallic = ${material.metalness}`)\n    }\n\n    inputs.push(`${pad}float inputs:opacity = ${material.opacity}`)\n\n    if (material instanceof MeshPhysicalMaterial) {\n      inputs.push(`${pad}float inputs:clearcoat = ${material.clearcoat}`)\n      inputs.push(`${pad}float inputs:clearcoatRoughness = ${material.clearcoatRoughness}`)\n      inputs.push(`${pad}float inputs:ior = ${material.ior}`)\n    }\n\n    return `\n    def Material \"Material_${material.id}\"\n    {\n        def Shader \"PreviewSurface\"\n        {\n            uniform token info:id = \"UsdPreviewSurface\"\n${inputs.join('\\n')}\n            int inputs:useSpecularWorkflow = 0\n            token outputs:surface\n        }\n        token outputs:surface.connect = </Materials/Material_${material.id}/PreviewSurface.outputs:surface>\n        token inputs:frame:stPrimvarName = \"st\"\n        def Shader \"uvReader_st\"\n        {\n            uniform token info:id = \"UsdPrimvarReader_float2\"\n            token inputs:varname.connect = </Materials/Material_${material.id}.inputs:frame:stPrimvarName>\n            float2 inputs:fallback = (0.0, 0.0)\n            float2 outputs:result\n        }\n${samplers.join('\\n')}\n    }\n`\n  }\n\n  private buildTexture(material: MaterialRepresentaion, texture: Texture, mapType: string, color?: Color): string {\n    const id = texture.id + (color ? '_' + color.getHexString() : '')\n    const isRGBA = texture.format === 1023\n\n    this.textures[id] = texture\n\n    // Add the alpha output for when transparency is set or the alpha test is above 0\n    return `\n      def Shader \"Transform2d_${mapType}\" (\n          sdrMetadata = {\n              string role = \"math\"\n          }\n      )\n      {\n          uniform token info:id = \"UsdTransform2d\"\n          float2 inputs:in.connect = </Materials/Material_${material.id}/uvReader_st.outputs:result>\n          float2 inputs:scale = ${this.buildVector2(texture.repeat)}\n          float2 inputs:translation = ${this.buildVector2(texture.offset)}\n          float2 outputs:result\n      }\n      def Shader \"Texture_${texture.id}_${mapType}\"\n      {\n          uniform token info:id = \"UsdUVTexture\"\n          asset inputs:file = @textures/Texture_${id}.${isRGBA ? 'png' : 'jpg'}@\n          float2 inputs:st.connect = </Materials/Material_${material.id}/Transform2d_${mapType}.outputs:result>\n          token inputs:wrapS = \"repeat\"\n          token inputs:wrapT = \"repeat\"\n          float outputs:r\n          float outputs:g\n          float outputs:b\n          float3 outputs:rgb\n          ${material.transparent || material.alphaTest > 0.0 ? 'float outputs:a' : ''}\n      }`\n  }\n\n  private buildColor(color: Color): string {\n    return `(${color.r}, ${color.g}, ${color.b})`\n  }\n\n  private buildVector2(vector: Vector2): string {\n    return `(${vector.x}, ${vector.y})`\n  }\n}\n\nexport { USDZExporter }\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}