{"ast":null,"code":"import _classCallCheck from \"C:/Users/Nayyu/Desktop/skibidai-public-build/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Nayyu/Desktop/skibidai-public-build/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"C:/Users/Nayyu/Desktop/skibidai-public-build/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/Nayyu/Desktop/skibidai-public-build/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { Box3, Vector3, InstancedBufferGeometry, Float32BufferAttribute, InstancedInterleavedBuffer, InterleavedBufferAttribute, WireframeGeometry, Sphere } from \"three\";\nvar _box = new Box3();\nvar _vector = new Vector3();\nvar LineSegmentsGeometry = /*#__PURE__*/function (_InstancedBufferGeome) {\n  _inherits(LineSegmentsGeometry, _InstancedBufferGeome);\n  var _super = _createSuper(LineSegmentsGeometry);\n  function LineSegmentsGeometry() {\n    var _this;\n    _classCallCheck(this, LineSegmentsGeometry);\n    _this = _super.call(this);\n    _this.isLineSegmentsGeometry = true;\n    _this.type = \"LineSegmentsGeometry\";\n    var positions = [-1, 2, 0, 1, 2, 0, -1, 1, 0, 1, 1, 0, -1, 0, 0, 1, 0, 0, -1, -1, 0, 1, -1, 0];\n    var uvs = [-1, 2, 1, 2, -1, 1, 1, 1, -1, -1, 1, -1, -1, -2, 1, -2];\n    var index = [0, 2, 1, 2, 3, 1, 2, 4, 3, 4, 5, 3, 4, 6, 5, 6, 7, 5];\n    _this.setIndex(index);\n    _this.setAttribute(\"position\", new Float32BufferAttribute(positions, 3));\n    _this.setAttribute(\"uv\", new Float32BufferAttribute(uvs, 2));\n    return _this;\n  }\n  _createClass(LineSegmentsGeometry, [{\n    key: \"applyMatrix4\",\n    value: function applyMatrix4(matrix) {\n      var start = this.attributes.instanceStart;\n      var end = this.attributes.instanceEnd;\n      if (start !== void 0) {\n        start.applyMatrix4(matrix);\n        end.applyMatrix4(matrix);\n        start.needsUpdate = true;\n      }\n      if (this.boundingBox !== null) {\n        this.computeBoundingBox();\n      }\n      if (this.boundingSphere !== null) {\n        this.computeBoundingSphere();\n      }\n      return this;\n    }\n  }, {\n    key: \"setPositions\",\n    value: function setPositions(array) {\n      var lineSegments;\n      if (array instanceof Float32Array) {\n        lineSegments = array;\n      } else if (Array.isArray(array)) {\n        lineSegments = new Float32Array(array);\n      }\n      var instanceBuffer = new InstancedInterleavedBuffer(lineSegments, 6, 1);\n      this.setAttribute(\"instanceStart\", new InterleavedBufferAttribute(instanceBuffer, 3, 0));\n      this.setAttribute(\"instanceEnd\", new InterleavedBufferAttribute(instanceBuffer, 3, 3));\n      this.computeBoundingBox();\n      this.computeBoundingSphere();\n      return this;\n    }\n  }, {\n    key: \"setColors\",\n    value: function setColors(array) {\n      var itemSize = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 3;\n      var colors;\n      if (array instanceof Float32Array) {\n        colors = array;\n      } else if (Array.isArray(array)) {\n        colors = new Float32Array(array);\n      }\n      var instanceColorBuffer = new InstancedInterleavedBuffer(colors, itemSize * 2, 1);\n      this.setAttribute(\"instanceColorStart\", new InterleavedBufferAttribute(instanceColorBuffer, itemSize, 0));\n      this.setAttribute(\"instanceColorEnd\", new InterleavedBufferAttribute(instanceColorBuffer, itemSize, itemSize));\n      return this;\n    }\n  }, {\n    key: \"fromWireframeGeometry\",\n    value: function fromWireframeGeometry(geometry) {\n      this.setPositions(geometry.attributes.position.array);\n      return this;\n    }\n  }, {\n    key: \"fromEdgesGeometry\",\n    value: function fromEdgesGeometry(geometry) {\n      this.setPositions(geometry.attributes.position.array);\n      return this;\n    }\n  }, {\n    key: \"fromMesh\",\n    value: function fromMesh(mesh) {\n      this.fromWireframeGeometry(new WireframeGeometry(mesh.geometry));\n      return this;\n    }\n  }, {\n    key: \"fromLineSegments\",\n    value: function fromLineSegments(lineSegments) {\n      var geometry = lineSegments.geometry;\n      this.setPositions(geometry.attributes.position.array);\n      return this;\n    }\n  }, {\n    key: \"computeBoundingBox\",\n    value: function computeBoundingBox() {\n      if (this.boundingBox === null) {\n        this.boundingBox = new Box3();\n      }\n      var start = this.attributes.instanceStart;\n      var end = this.attributes.instanceEnd;\n      if (start !== void 0 && end !== void 0) {\n        this.boundingBox.setFromBufferAttribute(start);\n        _box.setFromBufferAttribute(end);\n        this.boundingBox.union(_box);\n      }\n    }\n  }, {\n    key: \"computeBoundingSphere\",\n    value: function computeBoundingSphere() {\n      if (this.boundingSphere === null) {\n        this.boundingSphere = new Sphere();\n      }\n      if (this.boundingBox === null) {\n        this.computeBoundingBox();\n      }\n      var start = this.attributes.instanceStart;\n      var end = this.attributes.instanceEnd;\n      if (start !== void 0 && end !== void 0) {\n        var center = this.boundingSphere.center;\n        this.boundingBox.getCenter(center);\n        var maxRadiusSq = 0;\n        for (var i = 0, il = start.count; i < il; i++) {\n          _vector.fromBufferAttribute(start, i);\n          maxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(_vector));\n          _vector.fromBufferAttribute(end, i);\n          maxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(_vector));\n        }\n        this.boundingSphere.radius = Math.sqrt(maxRadiusSq);\n        if (isNaN(this.boundingSphere.radius)) {\n          console.error(\"THREE.LineSegmentsGeometry.computeBoundingSphere(): Computed radius is NaN. The instanced position data is likely to have NaN values.\", this);\n        }\n      }\n    }\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {}\n  }, {\n    key: \"applyMatrix\",\n    value: function applyMatrix(matrix) {\n      console.warn(\"THREE.LineSegmentsGeometry: applyMatrix() has been renamed to applyMatrix4().\");\n      return this.applyMatrix4(matrix);\n    }\n  }]);\n  return LineSegmentsGeometry;\n}(InstancedBufferGeometry);\nexport { LineSegmentsGeometry };","map":{"version":3,"names":["_box","Box3","_vector","Vector3","LineSegmentsGeometry","_InstancedBufferGeome","_inherits","_super","_createSuper","_this","_classCallCheck","call","isLineSegmentsGeometry","type","positions","uvs","index","setIndex","setAttribute","Float32BufferAttribute","_createClass","key","value","applyMatrix4","matrix","start","attributes","instanceStart","end","instanceEnd","needsUpdate","boundingBox","computeBoundingBox","boundingSphere","computeBoundingSphere","setPositions","array","lineSegments","Float32Array","Array","isArray","instanceBuffer","InstancedInterleavedBuffer","InterleavedBufferAttribute","setColors","itemSize","arguments","length","undefined","colors","instanceColorBuffer","fromWireframeGeometry","geometry","position","fromEdgesGeometry","fromMesh","mesh","WireframeGeometry","fromLineSegments","setFromBufferAttribute","union","Sphere","center","getCenter","maxRadiusSq","i","il","count","fromBufferAttribute","Math","max","distanceToSquared","radius","sqrt","isNaN","console","error","toJSON","applyMatrix","warn","InstancedBufferGeometry"],"sources":["C:\\Users\\Nayyu\\Desktop\\skibidai-public-build\\node_modules\\src\\lines\\LineSegmentsGeometry.js"],"sourcesContent":["import {\n  Box3,\n  Float32BufferAttribute,\n  InstancedBufferGeometry,\n  InstancedInterleavedBuffer,\n  InterleavedBufferAttribute,\n  Sphere,\n  Vector3,\n  WireframeGeometry,\n} from 'three'\n\nconst _box = new Box3()\nconst _vector = new Vector3()\n\nclass LineSegmentsGeometry extends InstancedBufferGeometry {\n  constructor() {\n    super()\n\n    this.isLineSegmentsGeometry = true\n\n    this.type = 'LineSegmentsGeometry'\n\n    const positions = [-1, 2, 0, 1, 2, 0, -1, 1, 0, 1, 1, 0, -1, 0, 0, 1, 0, 0, -1, -1, 0, 1, -1, 0]\n    const uvs = [-1, 2, 1, 2, -1, 1, 1, 1, -1, -1, 1, -1, -1, -2, 1, -2]\n    const index = [0, 2, 1, 2, 3, 1, 2, 4, 3, 4, 5, 3, 4, 6, 5, 6, 7, 5]\n\n    this.setIndex(index)\n    this.setAttribute('position', new Float32BufferAttribute(positions, 3))\n    this.setAttribute('uv', new Float32BufferAttribute(uvs, 2))\n  }\n\n  applyMatrix4(matrix) {\n    const start = this.attributes.instanceStart\n    const end = this.attributes.instanceEnd\n\n    if (start !== undefined) {\n      start.applyMatrix4(matrix)\n\n      end.applyMatrix4(matrix)\n\n      start.needsUpdate = true\n    }\n\n    if (this.boundingBox !== null) {\n      this.computeBoundingBox()\n    }\n\n    if (this.boundingSphere !== null) {\n      this.computeBoundingSphere()\n    }\n\n    return this\n  }\n\n  setPositions(array) {\n    let lineSegments\n\n    if (array instanceof Float32Array) {\n      lineSegments = array\n    } else if (Array.isArray(array)) {\n      lineSegments = new Float32Array(array)\n    }\n\n    const instanceBuffer = new InstancedInterleavedBuffer(lineSegments, 6, 1) // xyz, xyz\n\n    this.setAttribute('instanceStart', new InterleavedBufferAttribute(instanceBuffer, 3, 0)) // xyz\n    this.setAttribute('instanceEnd', new InterleavedBufferAttribute(instanceBuffer, 3, 3)) // xyz\n\n    //\n\n    this.computeBoundingBox()\n    this.computeBoundingSphere()\n\n    return this\n  }\n\n  setColors(array, itemSize = 3) {\n    let colors\n\n    if (array instanceof Float32Array) {\n      colors = array\n    } else if (Array.isArray(array)) {\n      colors = new Float32Array(array)\n    }\n\n    const instanceColorBuffer = new InstancedInterleavedBuffer(colors, itemSize * 2, 1) // rgb(a), rgb(a)\n\n    this.setAttribute('instanceColorStart', new InterleavedBufferAttribute(instanceColorBuffer, itemSize, 0)) // rgb(a)\n    this.setAttribute('instanceColorEnd', new InterleavedBufferAttribute(instanceColorBuffer, itemSize, itemSize)) // rgb(a)\n\n    return this\n  }\n\n  fromWireframeGeometry(geometry) {\n    this.setPositions(geometry.attributes.position.array)\n\n    return this\n  }\n\n  fromEdgesGeometry(geometry) {\n    this.setPositions(geometry.attributes.position.array)\n\n    return this\n  }\n\n  fromMesh(mesh) {\n    this.fromWireframeGeometry(new WireframeGeometry(mesh.geometry))\n\n    // set colors, maybe\n\n    return this\n  }\n\n  fromLineSegments(lineSegments) {\n    const geometry = lineSegments.geometry\n\n    this.setPositions(geometry.attributes.position.array) // assumes non-indexed\n\n    // set colors, maybe\n\n    return this\n  }\n\n  computeBoundingBox() {\n    if (this.boundingBox === null) {\n      this.boundingBox = new Box3()\n    }\n\n    const start = this.attributes.instanceStart\n    const end = this.attributes.instanceEnd\n\n    if (start !== undefined && end !== undefined) {\n      this.boundingBox.setFromBufferAttribute(start)\n\n      _box.setFromBufferAttribute(end)\n\n      this.boundingBox.union(_box)\n    }\n  }\n\n  computeBoundingSphere() {\n    if (this.boundingSphere === null) {\n      this.boundingSphere = new Sphere()\n    }\n\n    if (this.boundingBox === null) {\n      this.computeBoundingBox()\n    }\n\n    const start = this.attributes.instanceStart\n    const end = this.attributes.instanceEnd\n\n    if (start !== undefined && end !== undefined) {\n      const center = this.boundingSphere.center\n\n      this.boundingBox.getCenter(center)\n\n      let maxRadiusSq = 0\n\n      for (let i = 0, il = start.count; i < il; i++) {\n        _vector.fromBufferAttribute(start, i)\n        maxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(_vector))\n\n        _vector.fromBufferAttribute(end, i)\n        maxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(_vector))\n      }\n\n      this.boundingSphere.radius = Math.sqrt(maxRadiusSq)\n\n      if (isNaN(this.boundingSphere.radius)) {\n        console.error(\n          'THREE.LineSegmentsGeometry.computeBoundingSphere(): Computed radius is NaN. The instanced position data is likely to have NaN values.',\n          this,\n        )\n      }\n    }\n  }\n\n  toJSON() {\n    // todo\n  }\n\n  applyMatrix(matrix) {\n    console.warn('THREE.LineSegmentsGeometry: applyMatrix() has been renamed to applyMatrix4().')\n\n    return this.applyMatrix4(matrix)\n  }\n}\n\nexport { LineSegmentsGeometry }\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}