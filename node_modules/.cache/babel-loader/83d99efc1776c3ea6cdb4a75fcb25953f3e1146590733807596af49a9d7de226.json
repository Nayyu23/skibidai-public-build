{"ast":null,"code":"import _classCallCheck from \"C:/Users/Nayyu/Desktop/skibidai-public-build/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Nayyu/Desktop/skibidai-public-build/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nvar WorkerPool = /*#__PURE__*/function () {\n  function WorkerPool() {\n    var pool = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 4;\n    _classCallCheck(this, WorkerPool);\n    this.pool = pool;\n    this.queue = [];\n    this.workers = [];\n    this.workersResolve = [];\n    this.workerStatus = 0;\n  }\n  _createClass(WorkerPool, [{\n    key: \"_initWorker\",\n    value: function _initWorker(workerId) {\n      if (!this.workers[workerId]) {\n        var worker = this.workerCreator();\n        worker.addEventListener(\"message\", this._onMessage.bind(this, workerId));\n        this.workers[workerId] = worker;\n      }\n    }\n  }, {\n    key: \"_getIdleWorker\",\n    value: function _getIdleWorker() {\n      for (var i = 0; i < this.pool; i++) if (!(this.workerStatus & 1 << i)) return i;\n      return -1;\n    }\n  }, {\n    key: \"_onMessage\",\n    value: function _onMessage(workerId, msg) {\n      var resolve = this.workersResolve[workerId];\n      resolve && resolve(msg);\n      if (this.queue.length) {\n        var _this$queue$shift = this.queue.shift(),\n          resolve2 = _this$queue$shift.resolve,\n          msg2 = _this$queue$shift.msg,\n          transfer = _this$queue$shift.transfer;\n        this.workersResolve[workerId] = resolve2;\n        this.workers[workerId].postMessage(msg2, transfer);\n      } else {\n        this.workerStatus ^= 1 << workerId;\n      }\n    }\n  }, {\n    key: \"setWorkerCreator\",\n    value: function setWorkerCreator(workerCreator) {\n      this.workerCreator = workerCreator;\n    }\n  }, {\n    key: \"setWorkerLimit\",\n    value: function setWorkerLimit(pool) {\n      this.pool = pool;\n    }\n  }, {\n    key: \"postMessage\",\n    value: function postMessage(msg, transfer) {\n      var _this = this;\n      return new Promise(function (resolve) {\n        var workerId = _this._getIdleWorker();\n        if (workerId !== -1) {\n          _this._initWorker(workerId);\n          _this.workerStatus |= 1 << workerId;\n          _this.workersResolve[workerId] = resolve;\n          _this.workers[workerId].postMessage(msg, transfer);\n        } else {\n          _this.queue.push({\n            resolve: resolve,\n            msg: msg,\n            transfer: transfer\n          });\n        }\n      });\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      this.workers.forEach(function (worker) {\n        return worker.terminate();\n      });\n      this.workersResolve.length = 0;\n      this.workers.length = 0;\n      this.queue.length = 0;\n      this.workerStatus = 0;\n    }\n  }]);\n  return WorkerPool;\n}();\nexport { WorkerPool };","map":{"version":3,"names":["WorkerPool","pool","arguments","length","undefined","_classCallCheck","queue","workers","workersResolve","workerStatus","_createClass","key","value","_initWorker","workerId","worker","workerCreator","addEventListener","_onMessage","bind","_getIdleWorker","i","msg","resolve","_this$queue$shift","shift","resolve2","msg2","transfer","postMessage","setWorkerCreator","setWorkerLimit","_this","Promise","push","dispose","forEach","terminate"],"sources":["C:\\Users\\Nayyu\\Desktop\\skibidai-public-build\\node_modules\\src\\utils\\WorkerPool.js"],"sourcesContent":["/**\n * @author Deepkolos / https://github.com/deepkolos\n */\n\nexport class WorkerPool {\n  constructor(pool = 4) {\n    this.pool = pool\n    this.queue = []\n    this.workers = []\n    this.workersResolve = []\n    this.workerStatus = 0\n  }\n\n  _initWorker(workerId) {\n    if (!this.workers[workerId]) {\n      const worker = this.workerCreator()\n      worker.addEventListener('message', this._onMessage.bind(this, workerId))\n      this.workers[workerId] = worker\n    }\n  }\n\n  _getIdleWorker() {\n    for (let i = 0; i < this.pool; i++) if (!(this.workerStatus & (1 << i))) return i\n\n    return -1\n  }\n\n  _onMessage(workerId, msg) {\n    const resolve = this.workersResolve[workerId]\n    resolve && resolve(msg)\n\n    if (this.queue.length) {\n      const { resolve, msg, transfer } = this.queue.shift()\n      this.workersResolve[workerId] = resolve\n      this.workers[workerId].postMessage(msg, transfer)\n    } else {\n      this.workerStatus ^= 1 << workerId\n    }\n  }\n\n  setWorkerCreator(workerCreator) {\n    this.workerCreator = workerCreator\n  }\n\n  setWorkerLimit(pool) {\n    this.pool = pool\n  }\n\n  postMessage(msg, transfer) {\n    return new Promise((resolve) => {\n      const workerId = this._getIdleWorker()\n\n      if (workerId !== -1) {\n        this._initWorker(workerId)\n        this.workerStatus |= 1 << workerId\n        this.workersResolve[workerId] = resolve\n        this.workers[workerId].postMessage(msg, transfer)\n      } else {\n        this.queue.push({ resolve, msg, transfer })\n      }\n    })\n  }\n\n  dispose() {\n    this.workers.forEach((worker) => worker.terminate())\n    this.workersResolve.length = 0\n    this.workers.length = 0\n    this.queue.length = 0\n    this.workerStatus = 0\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}