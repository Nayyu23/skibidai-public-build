{"ast":null,"code":"import _slicedToArray from \"C:/Users/Nayyu/Desktop/skibidai-public-build/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _objectWithoutProperties from \"C:/Users/Nayyu/Desktop/skibidai-public-build/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nvar _excluded = [\"renderPriority\", \"zoom\", \"segments\", \"children\", \"resolution\"];\nimport _extends from '@babel/runtime/helpers/esm/extends';\nimport * as THREE from 'three';\nimport * as React from 'react';\nimport { useThree, useFrame } from '@react-three/fiber';\nimport { RenderCubeTexture } from './RenderCubeTexture.js';\nfunction Fisheye(_ref) {\n  var _ref$renderPriority = _ref.renderPriority,\n    renderPriority = _ref$renderPriority === void 0 ? 1 : _ref$renderPriority,\n    _ref$zoom = _ref.zoom,\n    zoom = _ref$zoom === void 0 ? 0 : _ref$zoom,\n    _ref$segments = _ref.segments,\n    segments = _ref$segments === void 0 ? 64 : _ref$segments,\n    children = _ref.children,\n    _ref$resolution = _ref.resolution,\n    resolution = _ref$resolution === void 0 ? 896 : _ref$resolution,\n    props = _objectWithoutProperties(_ref, _excluded);\n  var sphere = React.useRef(null);\n  var cubeApi = React.useRef(null);\n\n  // This isn't more than a simple sphere and a fixed orthographc camera\n  // pointing at it. A virtual scene is portalled into the environment map\n  // of its material. The cube-camera filming that scene is being synced to\n  // the portals default camera with the <UpdateCubeCamera> component.\n\n  var _useThree = useThree(function (state) {\n      return state.size;\n    }),\n    width = _useThree.width,\n    height = _useThree.height;\n  var _React$useState = React.useState(function () {\n      return new THREE.OrthographicCamera();\n    }),\n    _React$useState2 = _slicedToArray(_React$useState, 1),\n    orthoC = _React$useState2[0];\n  React.useLayoutEffect(function () {\n    orthoC.position.set(0, 0, 100);\n    orthoC.zoom = 100;\n    orthoC.left = width / -2;\n    orthoC.right = width / 2;\n    orthoC.top = height / 2;\n    orthoC.bottom = height / -2;\n    orthoC.updateProjectionMatrix();\n  }, [width, height]);\n  var radius = Math.sqrt(width * width + height * height) / 100 * (0.5 + zoom / 2);\n  var normal = new THREE.Vector3();\n  var sph = new THREE.Sphere(new THREE.Vector3(), radius);\n  var normalMatrix = new THREE.Matrix3();\n  var compute = React.useCallback(function (event, state, prev) {\n    // Raycast from the render camera to the sphere and get the surface normal\n    // of the point hit in world space of the sphere scene\n    // We have to set the raycaster using the orthocam and pointer\n    // to perform sphere interscetions.\n    state.pointer.set(event.offsetX / state.size.width * 2 - 1, -(event.offsetY / state.size.height) * 2 + 1);\n    state.raycaster.setFromCamera(state.pointer, orthoC);\n    if (!state.raycaster.ray.intersectSphere(sph, normal)) return;else normal.normalize();\n    // Get the matrix for transforming normals into world space\n    normalMatrix.getNormalMatrix(cubeApi.current.camera.matrixWorld);\n    // Get the ray\n    cubeApi.current.camera.getWorldPosition(state.raycaster.ray.origin);\n    state.raycaster.ray.direction.set(0, 0, 1).reflect(normal);\n    state.raycaster.ray.direction.x *= -1; // flip across X to accommodate the \"flip\" of the env map\n    state.raycaster.ray.direction.applyNormalMatrix(normalMatrix).multiplyScalar(-1);\n    return undefined;\n  }, []);\n  useFrame(function (state) {\n    // Take over rendering\n    if (renderPriority) state.gl.render(sphere.current, orthoC);\n  }, renderPriority);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"mesh\", _extends({\n    ref: sphere\n  }, props, {\n    scale: radius\n  }), /*#__PURE__*/React.createElement(\"sphereGeometry\", {\n    args: [1, segments, segments]\n  }), /*#__PURE__*/React.createElement(\"meshBasicMaterial\", null, /*#__PURE__*/React.createElement(RenderCubeTexture, {\n    compute: compute,\n    attach: \"envMap\",\n    flip: true,\n    resolution: resolution,\n    ref: cubeApi\n  }, children, /*#__PURE__*/React.createElement(UpdateCubeCamera, {\n    api: cubeApi\n  })))));\n}\nfunction UpdateCubeCamera(_ref2) {\n  var api = _ref2.api;\n  var t = new THREE.Vector3();\n  var r = new THREE.Quaternion();\n  var s = new THREE.Vector3();\n  var e = new THREE.Euler(0, Math.PI, 0);\n  useFrame(function (state) {\n    // Read out the cameras whereabouts, state.camera is the one *within* the portal\n    state.camera.matrixWorld.decompose(t, r, s);\n    // Apply its position and rotation, flip the Y axis\n    api.current.camera.position.copy(t);\n    api.current.camera.quaternion.setFromEuler(e).premultiply(r);\n  });\n  return null;\n}\nexport { Fisheye };","map":{"version":3,"names":["_extends","THREE","React","useThree","useFrame","RenderCubeTexture","Fisheye","_ref","_ref$renderPriority","renderPriority","_ref$zoom","zoom","_ref$segments","segments","children","_ref$resolution","resolution","props","_objectWithoutProperties","_excluded","sphere","useRef","cubeApi","_useThree","state","size","width","height","_React$useState","useState","OrthographicCamera","_React$useState2","_slicedToArray","orthoC","useLayoutEffect","position","set","left","right","top","bottom","updateProjectionMatrix","radius","Math","sqrt","normal","Vector3","sph","Sphere","normalMatrix","Matrix3","compute","useCallback","event","prev","pointer","offsetX","offsetY","raycaster","setFromCamera","ray","intersectSphere","normalize","getNormalMatrix","current","camera","matrixWorld","getWorldPosition","origin","direction","reflect","x","applyNormalMatrix","multiplyScalar","undefined","gl","render","createElement","Fragment","ref","scale","args","attach","flip","UpdateCubeCamera","api","_ref2","t","r","Quaternion","s","e","Euler","PI","decompose","copy","quaternion","setFromEuler","premultiply"],"sources":["C:/Users/Nayyu/Desktop/skibidai-public-build/node_modules/@react-three/drei/core/Fisheye.js"],"sourcesContent":["import _extends from '@babel/runtime/helpers/esm/extends';\nimport * as THREE from 'three';\nimport * as React from 'react';\nimport { useThree, useFrame } from '@react-three/fiber';\nimport { RenderCubeTexture } from './RenderCubeTexture.js';\n\nfunction Fisheye({\n  renderPriority = 1,\n  zoom = 0,\n  segments = 64,\n  children,\n  resolution = 896,\n  ...props\n}) {\n  const sphere = React.useRef(null);\n  const cubeApi = React.useRef(null);\n\n  // This isn't more than a simple sphere and a fixed orthographc camera\n  // pointing at it. A virtual scene is portalled into the environment map\n  // of its material. The cube-camera filming that scene is being synced to\n  // the portals default camera with the <UpdateCubeCamera> component.\n\n  const {\n    width,\n    height\n  } = useThree(state => state.size);\n  const [orthoC] = React.useState(() => new THREE.OrthographicCamera());\n  React.useLayoutEffect(() => {\n    orthoC.position.set(0, 0, 100);\n    orthoC.zoom = 100;\n    orthoC.left = width / -2;\n    orthoC.right = width / 2;\n    orthoC.top = height / 2;\n    orthoC.bottom = height / -2;\n    orthoC.updateProjectionMatrix();\n  }, [width, height]);\n  const radius = Math.sqrt(width * width + height * height) / 100 * (0.5 + zoom / 2);\n  const normal = new THREE.Vector3();\n  const sph = new THREE.Sphere(new THREE.Vector3(), radius);\n  const normalMatrix = new THREE.Matrix3();\n  const compute = React.useCallback((event, state, prev) => {\n    // Raycast from the render camera to the sphere and get the surface normal\n    // of the point hit in world space of the sphere scene\n    // We have to set the raycaster using the orthocam and pointer\n    // to perform sphere interscetions.\n    state.pointer.set(event.offsetX / state.size.width * 2 - 1, -(event.offsetY / state.size.height) * 2 + 1);\n    state.raycaster.setFromCamera(state.pointer, orthoC);\n    if (!state.raycaster.ray.intersectSphere(sph, normal)) return;else normal.normalize();\n    // Get the matrix for transforming normals into world space\n    normalMatrix.getNormalMatrix(cubeApi.current.camera.matrixWorld);\n    // Get the ray\n    cubeApi.current.camera.getWorldPosition(state.raycaster.ray.origin);\n    state.raycaster.ray.direction.set(0, 0, 1).reflect(normal);\n    state.raycaster.ray.direction.x *= -1; // flip across X to accommodate the \"flip\" of the env map\n    state.raycaster.ray.direction.applyNormalMatrix(normalMatrix).multiplyScalar(-1);\n    return undefined;\n  }, []);\n  useFrame(state => {\n    // Take over rendering\n    if (renderPriority) state.gl.render(sphere.current, orthoC);\n  }, renderPriority);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"mesh\", _extends({\n    ref: sphere\n  }, props, {\n    scale: radius\n  }), /*#__PURE__*/React.createElement(\"sphereGeometry\", {\n    args: [1, segments, segments]\n  }), /*#__PURE__*/React.createElement(\"meshBasicMaterial\", null, /*#__PURE__*/React.createElement(RenderCubeTexture, {\n    compute: compute,\n    attach: \"envMap\",\n    flip: true,\n    resolution: resolution,\n    ref: cubeApi\n  }, children, /*#__PURE__*/React.createElement(UpdateCubeCamera, {\n    api: cubeApi\n  })))));\n}\nfunction UpdateCubeCamera({\n  api\n}) {\n  const t = new THREE.Vector3();\n  const r = new THREE.Quaternion();\n  const s = new THREE.Vector3();\n  const e = new THREE.Euler(0, Math.PI, 0);\n  useFrame(state => {\n    // Read out the cameras whereabouts, state.camera is the one *within* the portal\n    state.camera.matrixWorld.decompose(t, r, s);\n    // Apply its position and rotation, flip the Y axis\n    api.current.camera.position.copy(t);\n    api.current.camera.quaternion.setFromEuler(e).premultiply(r);\n  });\n  return null;\n}\n\nexport { Fisheye };\n"],"mappings":";;;AAAA,OAAOA,QAAQ,MAAM,oCAAoC;AACzD,OAAO,KAAKC,KAAK,MAAM,OAAO;AAC9B,OAAO,KAAKC,KAAK,MAAM,OAAO;AAC9B,SAASC,QAAQ,EAAEC,QAAQ,QAAQ,oBAAoB;AACvD,SAASC,iBAAiB,QAAQ,wBAAwB;AAE1D,SAASC,OAAOA,CAAAC,IAAA,EAOb;EAAA,IAAAC,mBAAA,GAAAD,IAAA,CANDE,cAAc;IAAdA,cAAc,GAAAD,mBAAA,cAAG,CAAC,GAAAA,mBAAA;IAAAE,SAAA,GAAAH,IAAA,CAClBI,IAAI;IAAJA,IAAI,GAAAD,SAAA,cAAG,CAAC,GAAAA,SAAA;IAAAE,aAAA,GAAAL,IAAA,CACRM,QAAQ;IAARA,QAAQ,GAAAD,aAAA,cAAG,EAAE,GAAAA,aAAA;IACbE,QAAQ,GAAAP,IAAA,CAARO,QAAQ;IAAAC,eAAA,GAAAR,IAAA,CACRS,UAAU;IAAVA,UAAU,GAAAD,eAAA,cAAG,GAAG,GAAAA,eAAA;IACbE,KAAK,GAAAC,wBAAA,CAAAX,IAAA,EAAAY,SAAA;EAER,IAAMC,MAAM,GAAGlB,KAAK,CAACmB,MAAM,CAAC,IAAI,CAAC;EACjC,IAAMC,OAAO,GAAGpB,KAAK,CAACmB,MAAM,CAAC,IAAI,CAAC;;EAElC;EACA;EACA;EACA;;EAEA,IAAAE,SAAA,GAGIpB,QAAQ,CAAC,UAAAqB,KAAK;MAAA,OAAIA,KAAK,CAACC,IAAI;IAAA,EAAC;IAF/BC,KAAK,GAAAH,SAAA,CAALG,KAAK;IACLC,MAAM,GAAAJ,SAAA,CAANI,MAAM;EAER,IAAAC,eAAA,GAAiB1B,KAAK,CAAC2B,QAAQ,CAAC;MAAA,OAAM,IAAI5B,KAAK,CAAC6B,kBAAkB,CAAC,CAAC;IAAA,EAAC;IAAAC,gBAAA,GAAAC,cAAA,CAAAJ,eAAA;IAA9DK,MAAM,GAAAF,gBAAA;EACb7B,KAAK,CAACgC,eAAe,CAAC,YAAM;IAC1BD,MAAM,CAACE,QAAQ,CAACC,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,GAAG,CAAC;IAC9BH,MAAM,CAACtB,IAAI,GAAG,GAAG;IACjBsB,MAAM,CAACI,IAAI,GAAGX,KAAK,GAAG,CAAC,CAAC;IACxBO,MAAM,CAACK,KAAK,GAAGZ,KAAK,GAAG,CAAC;IACxBO,MAAM,CAACM,GAAG,GAAGZ,MAAM,GAAG,CAAC;IACvBM,MAAM,CAACO,MAAM,GAAGb,MAAM,GAAG,CAAC,CAAC;IAC3BM,MAAM,CAACQ,sBAAsB,CAAC,CAAC;EACjC,CAAC,EAAE,CAACf,KAAK,EAAEC,MAAM,CAAC,CAAC;EACnB,IAAMe,MAAM,GAAGC,IAAI,CAACC,IAAI,CAAClB,KAAK,GAAGA,KAAK,GAAGC,MAAM,GAAGA,MAAM,CAAC,GAAG,GAAG,IAAI,GAAG,GAAGhB,IAAI,GAAG,CAAC,CAAC;EAClF,IAAMkC,MAAM,GAAG,IAAI5C,KAAK,CAAC6C,OAAO,CAAC,CAAC;EAClC,IAAMC,GAAG,GAAG,IAAI9C,KAAK,CAAC+C,MAAM,CAAC,IAAI/C,KAAK,CAAC6C,OAAO,CAAC,CAAC,EAAEJ,MAAM,CAAC;EACzD,IAAMO,YAAY,GAAG,IAAIhD,KAAK,CAACiD,OAAO,CAAC,CAAC;EACxC,IAAMC,OAAO,GAAGjD,KAAK,CAACkD,WAAW,CAAC,UAACC,KAAK,EAAE7B,KAAK,EAAE8B,IAAI,EAAK;IACxD;IACA;IACA;IACA;IACA9B,KAAK,CAAC+B,OAAO,CAACnB,GAAG,CAACiB,KAAK,CAACG,OAAO,GAAGhC,KAAK,CAACC,IAAI,CAACC,KAAK,GAAG,CAAC,GAAG,CAAC,EAAE,EAAE2B,KAAK,CAACI,OAAO,GAAGjC,KAAK,CAACC,IAAI,CAACE,MAAM,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;IACzGH,KAAK,CAACkC,SAAS,CAACC,aAAa,CAACnC,KAAK,CAAC+B,OAAO,EAAEtB,MAAM,CAAC;IACpD,IAAI,CAACT,KAAK,CAACkC,SAAS,CAACE,GAAG,CAACC,eAAe,CAACd,GAAG,EAAEF,MAAM,CAAC,EAAE,OAAO,KAAKA,MAAM,CAACiB,SAAS,CAAC,CAAC;IACrF;IACAb,YAAY,CAACc,eAAe,CAACzC,OAAO,CAAC0C,OAAO,CAACC,MAAM,CAACC,WAAW,CAAC;IAChE;IACA5C,OAAO,CAAC0C,OAAO,CAACC,MAAM,CAACE,gBAAgB,CAAC3C,KAAK,CAACkC,SAAS,CAACE,GAAG,CAACQ,MAAM,CAAC;IACnE5C,KAAK,CAACkC,SAAS,CAACE,GAAG,CAACS,SAAS,CAACjC,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAACkC,OAAO,CAACzB,MAAM,CAAC;IAC1DrB,KAAK,CAACkC,SAAS,CAACE,GAAG,CAACS,SAAS,CAACE,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;IACvC/C,KAAK,CAACkC,SAAS,CAACE,GAAG,CAACS,SAAS,CAACG,iBAAiB,CAACvB,YAAY,CAAC,CAACwB,cAAc,CAAC,CAAC,CAAC,CAAC;IAChF,OAAOC,SAAS;EAClB,CAAC,EAAE,EAAE,CAAC;EACNtE,QAAQ,CAAC,UAAAoB,KAAK,EAAI;IAChB;IACA,IAAIf,cAAc,EAAEe,KAAK,CAACmD,EAAE,CAACC,MAAM,CAACxD,MAAM,CAAC4C,OAAO,EAAE/B,MAAM,CAAC;EAC7D,CAAC,EAAExB,cAAc,CAAC;EAClB,OAAO,aAAaP,KAAK,CAAC2E,aAAa,CAAC3E,KAAK,CAAC4E,QAAQ,EAAE,IAAI,EAAE,aAAa5E,KAAK,CAAC2E,aAAa,CAAC,MAAM,EAAE7E,QAAQ,CAAC;IAC9G+E,GAAG,EAAE3D;EACP,CAAC,EAAEH,KAAK,EAAE;IACR+D,KAAK,EAAEtC;EACT,CAAC,CAAC,EAAE,aAAaxC,KAAK,CAAC2E,aAAa,CAAC,gBAAgB,EAAE;IACrDI,IAAI,EAAE,CAAC,CAAC,EAAEpE,QAAQ,EAAEA,QAAQ;EAC9B,CAAC,CAAC,EAAE,aAAaX,KAAK,CAAC2E,aAAa,CAAC,mBAAmB,EAAE,IAAI,EAAE,aAAa3E,KAAK,CAAC2E,aAAa,CAACxE,iBAAiB,EAAE;IAClH8C,OAAO,EAAEA,OAAO;IAChB+B,MAAM,EAAE,QAAQ;IAChBC,IAAI,EAAE,IAAI;IACVnE,UAAU,EAAEA,UAAU;IACtB+D,GAAG,EAAEzD;EACP,CAAC,EAAER,QAAQ,EAAE,aAAaZ,KAAK,CAAC2E,aAAa,CAACO,gBAAgB,EAAE;IAC9DC,GAAG,EAAE/D;EACP,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACR;AACA,SAAS8D,gBAAgBA,CAAAE,KAAA,EAEtB;EAAA,IADDD,GAAG,GAAAC,KAAA,CAAHD,GAAG;EAEH,IAAME,CAAC,GAAG,IAAItF,KAAK,CAAC6C,OAAO,CAAC,CAAC;EAC7B,IAAM0C,CAAC,GAAG,IAAIvF,KAAK,CAACwF,UAAU,CAAC,CAAC;EAChC,IAAMC,CAAC,GAAG,IAAIzF,KAAK,CAAC6C,OAAO,CAAC,CAAC;EAC7B,IAAM6C,CAAC,GAAG,IAAI1F,KAAK,CAAC2F,KAAK,CAAC,CAAC,EAAEjD,IAAI,CAACkD,EAAE,EAAE,CAAC,CAAC;EACxCzF,QAAQ,CAAC,UAAAoB,KAAK,EAAI;IAChB;IACAA,KAAK,CAACyC,MAAM,CAACC,WAAW,CAAC4B,SAAS,CAACP,CAAC,EAAEC,CAAC,EAAEE,CAAC,CAAC;IAC3C;IACAL,GAAG,CAACrB,OAAO,CAACC,MAAM,CAAC9B,QAAQ,CAAC4D,IAAI,CAACR,CAAC,CAAC;IACnCF,GAAG,CAACrB,OAAO,CAACC,MAAM,CAAC+B,UAAU,CAACC,YAAY,CAACN,CAAC,CAAC,CAACO,WAAW,CAACV,CAAC,CAAC;EAC9D,CAAC,CAAC;EACF,OAAO,IAAI;AACb;AAEA,SAASlF,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}