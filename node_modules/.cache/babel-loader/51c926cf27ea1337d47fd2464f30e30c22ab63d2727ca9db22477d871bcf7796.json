{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/Nayyu/Desktop/skibidai-public-build/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _objectSpread from \"C:/Users/Nayyu/Desktop/skibidai-public-build/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _asyncToGenerator from \"C:/Users/Nayyu/Desktop/skibidai-public-build/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"C:/Users/Nayyu/Desktop/skibidai-public-build/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Nayyu/Desktop/skibidai-public-build/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nvar __defProp = Object.defineProperty;\nvar __defNormalProp = function __defNormalProp(obj, key, value) {\n  return key in obj ? __defProp(obj, key, {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: value\n  }) : obj[key] = value;\n};\nvar __publicField = function __publicField(obj, key, value) {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nvar _VRButton = /*#__PURE__*/function () {\n  function _VRButton() {\n    _classCallCheck(this, _VRButton);\n  }\n  _createClass(_VRButton, null, [{\n    key: \"createButton\",\n    value: function createButton(renderer) {\n      var sessionInit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var button = document.createElement(\"button\");\n      function showEnterVR() {\n        var currentSession = null;\n        function onSessionStarted(_x) {\n          return _onSessionStarted.apply(this, arguments);\n        }\n        function _onSessionStarted() {\n          _onSessionStarted = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(session) {\n            return _regeneratorRuntime().wrap(function _callee$(_context) {\n              while (1) switch (_context.prev = _context.next) {\n                case 0:\n                  session.addEventListener(\"end\", onSessionEnded);\n                  _context.next = 3;\n                  return renderer.xr.setSession(session);\n                case 3:\n                  button.textContent = \"EXIT VR\";\n                  currentSession = session;\n                case 5:\n                case \"end\":\n                  return _context.stop();\n              }\n            }, _callee);\n          }));\n          return _onSessionStarted.apply(this, arguments);\n        }\n        function onSessionEnded() {\n          currentSession.removeEventListener(\"end\", onSessionEnded);\n          button.textContent = \"ENTER VR\";\n          currentSession = null;\n        }\n        button.style.display = \"\";\n        button.style.cursor = \"pointer\";\n        button.style.left = \"calc(50% - 50px)\";\n        button.style.width = \"100px\";\n        button.textContent = \"ENTER VR\";\n        button.onmouseenter = function () {\n          button.style.opacity = \"1.0\";\n        };\n        button.onmouseleave = function () {\n          button.style.opacity = \"0.5\";\n        };\n        button.onclick = function () {\n          var _a;\n          if (currentSession === null) {\n            var optionalFeatures = [sessionInit.optionalFeatures, \"local-floor\", \"bounded-floor\", \"hand-tracking\"].flat().filter(Boolean);\n            (_a = navigator.xr) == null ? void 0 : _a.requestSession(\"immersive-vr\", _objectSpread(_objectSpread({}, sessionInit), {}, {\n              optionalFeatures: optionalFeatures\n            })).then(onSessionStarted);\n          } else {\n            currentSession.end();\n          }\n        };\n      }\n      function disableButton() {\n        button.style.display = \"\";\n        button.style.cursor = \"auto\";\n        button.style.left = \"calc(50% - 75px)\";\n        button.style.width = \"150px\";\n        button.onmouseenter = null;\n        button.onmouseleave = null;\n        button.onclick = null;\n      }\n      function showWebXRNotFound() {\n        disableButton();\n        button.textContent = \"VR NOT SUPPORTED\";\n      }\n      function stylizeElement(element) {\n        element.style.position = \"absolute\";\n        element.style.bottom = \"20px\";\n        element.style.padding = \"12px 6px\";\n        element.style.border = \"1px solid #fff\";\n        element.style.borderRadius = \"4px\";\n        element.style.background = \"rgba(0,0,0,0.1)\";\n        element.style.color = \"#fff\";\n        element.style.font = \"normal 13px sans-serif\";\n        element.style.textAlign = \"center\";\n        element.style.opacity = \"0.5\";\n        element.style.outline = \"none\";\n        element.style.zIndex = \"999\";\n      }\n      if (\"xr\" in navigator) {\n        stylizeElement(button);\n        button.id = \"VRButton\";\n        button.style.display = \"none\";\n        navigator.xr.isSessionSupported(\"immersive-vr\").then(function (supported) {\n          supported ? showEnterVR() : showWebXRNotFound();\n          if (supported && _VRButton.xrSessionIsGranted) {\n            button.click();\n          }\n        });\n        return button;\n      } else {\n        var message = document.createElement(\"a\");\n        if (window.isSecureContext === false) {\n          message.href = document.location.href.replace(/^http:/, \"https:\");\n          message.innerHTML = \"WEBXR NEEDS HTTPS\";\n        } else {\n          message.href = \"https://immersiveweb.dev/\";\n          message.innerHTML = \"WEBXR NOT AVAILABLE\";\n        }\n        message.style.left = \"calc(50% - 90px)\";\n        message.style.width = \"180px\";\n        message.style.textDecoration = \"none\";\n        stylizeElement(message);\n        return message;\n      }\n    }\n  }, {\n    key: \"registerSessionGrantedListener\",\n    value: function registerSessionGrantedListener() {\n      if (typeof navigator !== \"undefined\" && \"xr\" in navigator) {\n        navigator.xr.addEventListener(\"sessiongranted\", function () {\n          _VRButton.xrSessionIsGranted = true;\n        });\n      }\n    }\n  }]);\n  return _VRButton;\n}();\nvar VRButton = _VRButton;\n__publicField(VRButton, \"xrSessionIsGranted\", false);\nVRButton.registerSessionGrantedListener();\nexport { VRButton };","map":{"version":3,"names":["_VRButton","_classCallCheck","_createClass","key","value","createButton","renderer","sessionInit","arguments","length","undefined","button","document","createElement","showEnterVR","currentSession","onSessionStarted","_x","_onSessionStarted","apply","_asyncToGenerator","_regeneratorRuntime","mark","_callee","session","wrap","_callee$","_context","prev","next","addEventListener","onSessionEnded","xr","setSession","textContent","stop","removeEventListener","style","display","cursor","left","width","onmouseenter","opacity","onmouseleave","onclick","_a","optionalFeatures","flat","filter","Boolean","navigator","requestSession","_objectSpread","then","end","disableButton","showWebXRNotFound","stylizeElement","element","position","bottom","padding","border","borderRadius","background","color","font","textAlign","outline","zIndex","id","isSessionSupported","supported","xrSessionIsGranted","click","message","window","isSecureContext","href","location","replace","innerHTML","textDecoration","registerSessionGrantedListener","VRButton","__publicField"],"sources":["C:\\Users\\Nayyu\\Desktop\\skibidai-public-build\\node_modules\\src\\webxr\\VRButton.ts"],"sourcesContent":["import { WebGLRenderer } from 'three'\n\nclass VRButton {\n  static createButton(renderer: WebGLRenderer, sessionInit: XRSessionInit = {}): HTMLButtonElement | HTMLAnchorElement {\n    const button = document.createElement('button')\n\n    function showEnterVR(/*device*/): void {\n      let currentSession: XRSession | null = null\n\n      async function onSessionStarted(session: XRSession): Promise<void> {\n        session.addEventListener('end', onSessionEnded)\n\n        await renderer.xr.setSession(session as any)\n        button.textContent = 'EXIT VR'\n\n        currentSession = session\n      }\n\n      function onSessionEnded(/*event*/): void {\n        currentSession!.removeEventListener('end', onSessionEnded)\n\n        button.textContent = 'ENTER VR'\n\n        currentSession = null\n      }\n\n      //\n\n      button.style.display = ''\n\n      button.style.cursor = 'pointer'\n      button.style.left = 'calc(50% - 50px)'\n      button.style.width = '100px'\n\n      button.textContent = 'ENTER VR'\n\n      button.onmouseenter = (): void => {\n        button.style.opacity = '1.0'\n      }\n\n      button.onmouseleave = (): void => {\n        button.style.opacity = '0.5'\n      }\n\n      button.onclick = (): void => {\n        if (currentSession === null) {\n          // WebXR's requestReferenceSpace only works if the corresponding feature\n          // was requested at session creation time. For simplicity, just ask for\n          // the interesting ones as optional features, but be aware that the\n          // requestReferenceSpace call will fail if it turns out to be unavailable.\n          // ('local' is always available for immersive sessions and doesn't need to\n          // be requested separately.)\n\n          const optionalFeatures = [sessionInit.optionalFeatures, 'local-floor', 'bounded-floor', 'hand-tracking']\n            .flat()\n            .filter(Boolean) as string[]\n\n          ;(navigator as Navigator).xr\n            ?.requestSession('immersive-vr', { ...sessionInit, optionalFeatures })\n            .then(onSessionStarted)\n        } else {\n          currentSession.end()\n        }\n      }\n    }\n\n    function disableButton(): void {\n      button.style.display = ''\n\n      button.style.cursor = 'auto'\n      button.style.left = 'calc(50% - 75px)'\n      button.style.width = '150px'\n\n      button.onmouseenter = null\n      button.onmouseleave = null\n\n      button.onclick = null\n    }\n\n    function showWebXRNotFound(): void {\n      disableButton()\n\n      button.textContent = 'VR NOT SUPPORTED'\n    }\n\n    function stylizeElement(element: HTMLElement): void {\n      element.style.position = 'absolute'\n      element.style.bottom = '20px'\n      element.style.padding = '12px 6px'\n      element.style.border = '1px solid #fff'\n      element.style.borderRadius = '4px'\n      element.style.background = 'rgba(0,0,0,0.1)'\n      element.style.color = '#fff'\n      element.style.font = 'normal 13px sans-serif'\n      element.style.textAlign = 'center'\n      element.style.opacity = '0.5'\n      element.style.outline = 'none'\n      element.style.zIndex = '999'\n    }\n\n    if ('xr' in navigator) {\n      stylizeElement(button)\n      button.id = 'VRButton'\n      button.style.display = 'none'\n\n      // Query for session mode\n      navigator.xr!.isSessionSupported('immersive-vr').then((supported) => {\n        supported ? showEnterVR() : showWebXRNotFound()\n\n        if (supported && VRButton.xrSessionIsGranted) {\n          button.click()\n        }\n      })\n\n      return button\n    } else {\n      const message = document.createElement('a')\n\n      if (window.isSecureContext === false) {\n        message.href = document.location.href.replace(/^http:/, 'https:')\n        message.innerHTML = 'WEBXR NEEDS HTTPS' // TODO Improve message\n      } else {\n        message.href = 'https://immersiveweb.dev/'\n        message.innerHTML = 'WEBXR NOT AVAILABLE'\n      }\n\n      message.style.left = 'calc(50% - 90px)'\n      message.style.width = '180px'\n      message.style.textDecoration = 'none'\n\n      stylizeElement(message)\n\n      return message\n    }\n  }\n\n  static xrSessionIsGranted = false\n\n  static registerSessionGrantedListener(): void {\n    if (typeof navigator !== 'undefined' && 'xr' in navigator) {\n      ;(navigator as Navigator).xr!.addEventListener('sessiongranted', () => {\n        VRButton.xrSessionIsGranted = true\n      })\n    }\n  }\n}\n\nVRButton.registerSessionGrantedListener()\n\nexport { VRButton }\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}