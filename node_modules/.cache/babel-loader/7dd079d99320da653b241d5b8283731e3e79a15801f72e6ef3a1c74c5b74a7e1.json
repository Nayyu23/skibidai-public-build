{"ast":null,"code":"import _classCallCheck from \"C:/Users/Nayyu/Desktop/skibidai-public-build/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Nayyu/Desktop/skibidai-public-build/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"C:/Users/Nayyu/Desktop/skibidai-public-build/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/Nayyu/Desktop/skibidai-public-build/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { Mesh, ShaderMaterial, SphereGeometry } from \"three\";\nvar LightProbeHelper = /*#__PURE__*/function (_Mesh) {\n  _inherits(LightProbeHelper, _Mesh);\n  var _super = _createSuper(LightProbeHelper);\n  function LightProbeHelper(lightProbe, size) {\n    var _this;\n    _classCallCheck(this, LightProbeHelper);\n    var material = new ShaderMaterial({\n      type: \"LightProbeHelperMaterial\",\n      uniforms: {\n        sh: {\n          value: lightProbe.sh.coefficients\n        },\n        // by reference\n        intensity: {\n          value: lightProbe.intensity\n        }\n      },\n      vertexShader: [\"varying vec3 vNormal;\", \"void main() {\", \"\tvNormal = normalize( normalMatrix * normal );\", \"\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\", \"}\"].join(\"\\n\"),\n      fragmentShader: [\"#define RECIPROCAL_PI 0.318309886\", \"vec3 inverseTransformDirection( in vec3 normal, in mat4 matrix ) {\", \"\t// matrix is assumed to be orthogonal\", \"\treturn normalize( ( vec4( normal, 0.0 ) * matrix ).xyz );\", \"}\", \"// source: https://graphics.stanford.edu/papers/envmap/envmap.pdf\", \"vec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {\", \"\t// normal is assumed to have unit length\", \"\tfloat x = normal.x, y = normal.y, z = normal.z;\", \"\t// band 0\", \"\tvec3 result = shCoefficients[ 0 ] * 0.886227;\", \"\t// band 1\", \"\tresult += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;\", \"\tresult += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;\", \"\tresult += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;\", \"\t// band 2\", \"\tresult += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;\", \"\tresult += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;\", \"\tresult += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );\", \"\tresult += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;\", \"\tresult += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );\", \"\treturn result;\", \"}\", \"uniform vec3 sh[ 9 ]; // sh coefficients\", \"uniform float intensity; // light probe intensity\", \"varying vec3 vNormal;\", \"void main() {\", \"\tvec3 normal = normalize( vNormal );\", \"\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\", \"\tvec3 irradiance = shGetIrradianceAt( worldNormal, sh );\", \"\tvec3 outgoingLight = RECIPROCAL_PI * irradiance * intensity;\", \"\tgl_FragColor = linearToOutputTexel( vec4( outgoingLight, 1.0 ) );\", \"}\"].join(\"\\n\")\n    });\n    var geometry = new SphereGeometry(1, 32, 16);\n    _this = _super.call(this, geometry, material);\n    _this.lightProbe = lightProbe;\n    _this.size = size;\n    _this.type = \"LightProbeHelper\";\n    _this.onBeforeRender();\n    return _this;\n  }\n  _createClass(LightProbeHelper, [{\n    key: \"dispose\",\n    value: function dispose() {\n      this.geometry.dispose();\n      this.material.dispose();\n    }\n  }, {\n    key: \"onBeforeRender\",\n    value: function onBeforeRender() {\n      this.position.copy(this.lightProbe.position);\n      this.scale.set(1, 1, 1).multiplyScalar(this.size);\n      this.material.uniforms.intensity.value = this.lightProbe.intensity;\n    }\n  }]);\n  return LightProbeHelper;\n}(Mesh);\nexport { LightProbeHelper };","map":{"version":3,"names":["LightProbeHelper","_Mesh","_inherits","_super","_createSuper","lightProbe","size","_this","_classCallCheck","material","ShaderMaterial","type","uniforms","sh","value","coefficients","intensity","vertexShader","join","fragmentShader","geometry","SphereGeometry","call","onBeforeRender","_createClass","key","dispose","position","copy","scale","set","multiplyScalar","Mesh"],"sources":["C:\\Users\\Nayyu\\Desktop\\skibidai-public-build\\node_modules\\src\\helpers\\LightProbeHelper.js"],"sourcesContent":["import { Mesh, ShaderMaterial, SphereGeometry } from 'three'\n\nclass LightProbeHelper extends Mesh {\n  constructor(lightProbe, size) {\n    const material = new ShaderMaterial({\n      type: 'LightProbeHelperMaterial',\n\n      uniforms: {\n        sh: { value: lightProbe.sh.coefficients }, // by reference\n\n        intensity: { value: lightProbe.intensity },\n      },\n\n      vertexShader: [\n        'varying vec3 vNormal;',\n\n        'void main() {',\n\n        '\tvNormal = normalize( normalMatrix * normal );',\n\n        '\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',\n\n        '}',\n      ].join('\\n'),\n\n      fragmentShader: [\n        '#define RECIPROCAL_PI 0.318309886',\n\n        'vec3 inverseTransformDirection( in vec3 normal, in mat4 matrix ) {',\n\n        '\t// matrix is assumed to be orthogonal',\n\n        '\treturn normalize( ( vec4( normal, 0.0 ) * matrix ).xyz );',\n\n        '}',\n\n        '// source: https://graphics.stanford.edu/papers/envmap/envmap.pdf',\n        'vec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {',\n\n        '\t// normal is assumed to have unit length',\n\n        '\tfloat x = normal.x, y = normal.y, z = normal.z;',\n\n        '\t// band 0',\n        '\tvec3 result = shCoefficients[ 0 ] * 0.886227;',\n\n        '\t// band 1',\n        '\tresult += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;',\n        '\tresult += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;',\n        '\tresult += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;',\n\n        '\t// band 2',\n        '\tresult += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;',\n        '\tresult += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;',\n        '\tresult += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );',\n        '\tresult += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;',\n        '\tresult += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );',\n\n        '\treturn result;',\n\n        '}',\n\n        'uniform vec3 sh[ 9 ]; // sh coefficients',\n\n        'uniform float intensity; // light probe intensity',\n\n        'varying vec3 vNormal;',\n\n        'void main() {',\n\n        '\tvec3 normal = normalize( vNormal );',\n\n        '\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );',\n\n        '\tvec3 irradiance = shGetIrradianceAt( worldNormal, sh );',\n\n        '\tvec3 outgoingLight = RECIPROCAL_PI * irradiance * intensity;',\n\n        '\tgl_FragColor = linearToOutputTexel( vec4( outgoingLight, 1.0 ) );',\n\n        '}',\n      ].join('\\n'),\n    })\n\n    const geometry = new SphereGeometry(1, 32, 16)\n\n    super(geometry, material)\n\n    this.lightProbe = lightProbe\n    this.size = size\n    this.type = 'LightProbeHelper'\n\n    this.onBeforeRender()\n  }\n\n  dispose() {\n    this.geometry.dispose()\n    this.material.dispose()\n  }\n\n  onBeforeRender() {\n    this.position.copy(this.lightProbe.position)\n\n    this.scale.set(1, 1, 1).multiplyScalar(this.size)\n\n    this.material.uniforms.intensity.value = this.lightProbe.intensity\n  }\n}\n\nexport { LightProbeHelper }\n"],"mappings":";;;;;IAEMA,gBAAA,0BAAAC,KAAA;EAAAC,SAAA,CAAAF,gBAAA,EAAAC,KAAA;EAAA,IAAAE,MAAA,GAAAC,YAAA,CAAAJ,gBAAA;EACJ,SAAAA,iBAAYK,UAAA,EAAYC,IAAA,EAAM;IAAA,IAAAC,KAAA;IAAAC,eAAA,OAAAR,gBAAA;IAC5B,IAAMS,QAAA,GAAW,IAAIC,cAAA,CAAe;MAClCC,IAAA,EAAM;MAENC,QAAA,EAAU;QACRC,EAAA,EAAI;UAAEC,KAAA,EAAOT,UAAA,CAAWQ,EAAA,CAAGE;QAAc;QAAA;QAEzCC,SAAA,EAAW;UAAEF,KAAA,EAAOT,UAAA,CAAWW;QAAW;MAC3C;MAEDC,YAAA,EAAc,CACZ,yBAEA,iBAEA,kDAEA,8EAEA,IACR,CAAQC,IAAA,CAAK,IAAI;MAEXC,cAAA,EAAgB,CACd,qCAEA,sEAEA,0CAEA,8DAEA,KAEA,qEACA,2EAEA,6CAEA,oDAEA,cACA,kDAEA,cACA,wDACA,wDACA,wDAEA,cACA,4DACA,4DACA,qEACA,4DACA,kEAEA,mBAEA,KAEA,4CAEA,qDAEA,yBAEA,iBAEA,wCAEA,wEAEA,4DAEA,iEAEA,sEAEA,IACR,CAAQD,IAAA,CAAK,IAAI;IACjB,CAAK;IAED,IAAME,QAAA,GAAW,IAAIC,cAAA,CAAe,GAAG,IAAI,EAAE;IAE7Cd,KAAA,GAAAJ,MAAA,CAAAmB,IAAA,OAAMF,QAAA,EAAUX,QAAQ;IAExBF,KAAA,CAAKF,UAAA,GAAaA,UAAA;IAClBE,KAAA,CAAKD,IAAA,GAAOA,IAAA;IACZC,KAAA,CAAKI,IAAA,GAAO;IAEZJ,KAAA,CAAKgB,cAAA,CAAgB;IAAA,OAAAhB,KAAA;EACtB;EAAAiB,YAAA,CAAAxB,gBAAA;IAAAyB,GAAA;IAAAX,KAAA,EAED,SAAAY,QAAA,EAAU;MACR,KAAKN,QAAA,CAASM,OAAA,CAAS;MACvB,KAAKjB,QAAA,CAASiB,OAAA,CAAS;IACxB;EAAA;IAAAD,GAAA;IAAAX,KAAA,EAED,SAAAS,eAAA,EAAiB;MACf,KAAKI,QAAA,CAASC,IAAA,CAAK,KAAKvB,UAAA,CAAWsB,QAAQ;MAE3C,KAAKE,KAAA,CAAMC,GAAA,CAAI,GAAG,GAAG,CAAC,EAAEC,cAAA,CAAe,KAAKzB,IAAI;MAEhD,KAAKG,QAAA,CAASG,QAAA,CAASI,SAAA,CAAUF,KAAA,GAAQ,KAAKT,UAAA,CAAWW,SAAA;IAC1D;EAAA;EAAA,OAAAhB,gBAAA;AAAA,EAxG4BgC,IAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}