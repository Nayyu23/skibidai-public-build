{"ast":null,"code":"import _classCallCheck from \"C:/Users/Nayyu/Desktop/skibidai-public-build/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Nayyu/Desktop/skibidai-public-build/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"C:/Users/Nayyu/Desktop/skibidai-public-build/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/Nayyu/Desktop/skibidai-public-build/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { Vector3, Vector4, Mesh, InstancedInterleavedBuffer, InterleavedBufferAttribute } from \"three\";\nimport { LineSegmentsGeometry } from \"./LineSegmentsGeometry.js\";\nimport { LineMaterial } from \"./LineMaterial.js\";\nvar _start = new Vector3();\nvar _end = new Vector3();\nvar _viewport = new Vector4();\nvar Wireframe = /*#__PURE__*/function (_Mesh) {\n  _inherits(Wireframe, _Mesh);\n  var _super = _createSuper(Wireframe);\n  function Wireframe() {\n    var _this;\n    var geometry = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new LineSegmentsGeometry();\n    var material = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new LineMaterial({\n      color: Math.random() * 16777215\n    });\n    _classCallCheck(this, Wireframe);\n    _this = _super.call(this, geometry, material);\n    _this.isWireframe = true;\n    _this.type = \"Wireframe\";\n    return _this;\n  }\n  // for backwards-compatibility, but could be a method of LineSegmentsGeometry...\n  _createClass(Wireframe, [{\n    key: \"computeLineDistances\",\n    value: function computeLineDistances() {\n      var geometry = this.geometry;\n      var instanceStart = geometry.attributes.instanceStart;\n      var instanceEnd = geometry.attributes.instanceEnd;\n      var lineDistances = new Float32Array(2 * instanceStart.count);\n      for (var i = 0, j = 0, l = instanceStart.count; i < l; i++, j += 2) {\n        _start.fromBufferAttribute(instanceStart, i);\n        _end.fromBufferAttribute(instanceEnd, i);\n        lineDistances[j] = j === 0 ? 0 : lineDistances[j - 1];\n        lineDistances[j + 1] = lineDistances[j] + _start.distanceTo(_end);\n      }\n      var instanceDistanceBuffer = new InstancedInterleavedBuffer(lineDistances, 2, 1);\n      geometry.setAttribute(\"instanceDistanceStart\", new InterleavedBufferAttribute(instanceDistanceBuffer, 1, 0));\n      geometry.setAttribute(\"instanceDistanceEnd\", new InterleavedBufferAttribute(instanceDistanceBuffer, 1, 1));\n      return this;\n    }\n  }, {\n    key: \"onBeforeRender\",\n    value: function onBeforeRender(renderer) {\n      var uniforms = this.material.uniforms;\n      if (uniforms && uniforms.resolution) {\n        renderer.getViewport(_viewport);\n        this.material.uniforms.resolution.value.set(_viewport.z, _viewport.w);\n      }\n    }\n  }]);\n  return Wireframe;\n}(Mesh);\nexport { Wireframe };","map":{"version":3,"names":["_start","Vector3","_end","_viewport","Vector4","Wireframe","_Mesh","_inherits","_super","_createSuper","_this","geometry","arguments","length","undefined","LineSegmentsGeometry","material","LineMaterial","color","Math","random","_classCallCheck","call","isWireframe","type","_createClass","key","value","computeLineDistances","instanceStart","attributes","instanceEnd","lineDistances","Float32Array","count","i","j","l","fromBufferAttribute","distanceTo","instanceDistanceBuffer","InstancedInterleavedBuffer","setAttribute","InterleavedBufferAttribute","onBeforeRender","renderer","uniforms","resolution","getViewport","set","z","w","Mesh"],"sources":["C:\\Users\\Nayyu\\Desktop\\skibidai-public-build\\node_modules\\src\\lines\\Wireframe.js"],"sourcesContent":["import { InstancedInterleavedBuffer, InterleavedBufferAttribute, Mesh, Vector3, Vector4 } from 'three'\nimport { LineSegmentsGeometry } from '../lines/LineSegmentsGeometry'\nimport { LineMaterial } from '../lines/LineMaterial'\n\nconst _start = new Vector3()\nconst _end = new Vector3()\nconst _viewport = new Vector4();\n\nclass Wireframe extends Mesh {\n  constructor(geometry = new LineSegmentsGeometry(), material = new LineMaterial({ color: Math.random() * 0xffffff })) {\n    super(geometry, material)\n\n    this.isWireframe = true\n\n    this.type = 'Wireframe'\n  }\n\n  // for backwards-compatibility, but could be a method of LineSegmentsGeometry...\n\n  computeLineDistances() {\n    const geometry = this.geometry\n\n    const instanceStart = geometry.attributes.instanceStart\n    const instanceEnd = geometry.attributes.instanceEnd\n    const lineDistances = new Float32Array(2 * instanceStart.count)\n\n    for (let i = 0, j = 0, l = instanceStart.count; i < l; i++, j += 2) {\n      _start.fromBufferAttribute(instanceStart, i)\n      _end.fromBufferAttribute(instanceEnd, i)\n\n      lineDistances[j] = j === 0 ? 0 : lineDistances[j - 1]\n      lineDistances[j + 1] = lineDistances[j] + _start.distanceTo(_end)\n    }\n\n    const instanceDistanceBuffer = new InstancedInterleavedBuffer(lineDistances, 2, 1) // d0, d1\n\n    geometry.setAttribute('instanceDistanceStart', new InterleavedBufferAttribute(instanceDistanceBuffer, 1, 0)) // d0\n    geometry.setAttribute('instanceDistanceEnd', new InterleavedBufferAttribute(instanceDistanceBuffer, 1, 1)) // d1\n\n    return this\n  }\n\n  onBeforeRender(renderer) {\n\n    const uniforms = this.material.uniforms;\n\n    if (uniforms && uniforms.resolution) {\n\n      renderer.getViewport(_viewport);\n      this.material.uniforms.resolution.value.set(_viewport.z, _viewport.w);\n\n    }\n\n  }\n}\n\nexport { Wireframe }\n"],"mappings":";;;;;;;AAIA,IAAMA,MAAA,GAAS,IAAIC,OAAA,CAAS;AAC5B,IAAMC,IAAA,GAAO,IAAID,OAAA,CAAS;AAC1B,IAAME,SAAA,GAAY,IAAIC,OAAA;AAAA,IAEhBC,SAAA,0BAAAC,KAAA;EAAAC,SAAA,CAAAF,SAAA,EAAAC,KAAA;EAAA,IAAAE,MAAA,GAAAC,YAAA,CAAAJ,SAAA;EACJ,SAAAA,UAAA,EAAqH;IAAA,IAAAK,KAAA;IAAA,IAAzGC,QAAA,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAW,IAAIG,oBAAA,CAAsB;IAAA,IAAEC,QAAA,GAAAJ,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAW,IAAIK,YAAA,CAAa;MAAEC,KAAA,EAAOC,IAAA,CAAKC,MAAA,KAAW;IAAU;IAAAC,eAAA,OAAAhB,SAAA;IAChHK,KAAA,GAAAF,MAAA,CAAAc,IAAA,OAAMX,QAAA,EAAUK,QAAQ;IAExBN,KAAA,CAAKa,WAAA,GAAc;IAEnBb,KAAA,CAAKc,IAAA,GAAO;IAAA,OAAAd,KAAA;EACb;EAAA;EAAAe,YAAA,CAAApB,SAAA;IAAAqB,GAAA;IAAAC,KAAA,EAID,SAAAC,qBAAA,EAAuB;MACrB,IAAMjB,QAAA,GAAW,KAAKA,QAAA;MAEtB,IAAMkB,aAAA,GAAgBlB,QAAA,CAASmB,UAAA,CAAWD,aAAA;MAC1C,IAAME,WAAA,GAAcpB,QAAA,CAASmB,UAAA,CAAWC,WAAA;MACxC,IAAMC,aAAA,GAAgB,IAAIC,YAAA,CAAa,IAAIJ,aAAA,CAAcK,KAAK;MAE9D,SAASC,CAAA,GAAI,GAAGC,CAAA,GAAI,GAAGC,CAAA,GAAIR,aAAA,CAAcK,KAAA,EAAOC,CAAA,GAAIE,CAAA,EAAGF,CAAA,IAAKC,CAAA,IAAK,GAAG;QAClEpC,MAAA,CAAOsC,mBAAA,CAAoBT,aAAA,EAAeM,CAAC;QAC3CjC,IAAA,CAAKoC,mBAAA,CAAoBP,WAAA,EAAaI,CAAC;QAEvCH,aAAA,CAAcI,CAAC,IAAIA,CAAA,KAAM,IAAI,IAAIJ,aAAA,CAAcI,CAAA,GAAI,CAAC;QACpDJ,aAAA,CAAcI,CAAA,GAAI,CAAC,IAAIJ,aAAA,CAAcI,CAAC,IAAIpC,MAAA,CAAOuC,UAAA,CAAWrC,IAAI;MACjE;MAED,IAAMsC,sBAAA,GAAyB,IAAIC,0BAAA,CAA2BT,aAAA,EAAe,GAAG,CAAC;MAEjFrB,QAAA,CAAS+B,YAAA,CAAa,yBAAyB,IAAIC,0BAAA,CAA2BH,sBAAA,EAAwB,GAAG,CAAC,CAAC;MAC3G7B,QAAA,CAAS+B,YAAA,CAAa,uBAAuB,IAAIC,0BAAA,CAA2BH,sBAAA,EAAwB,GAAG,CAAC,CAAC;MAEzG,OAAO;IACR;EAAA;IAAAd,GAAA;IAAAC,KAAA,EAED,SAAAiB,eAAeC,QAAA,EAAU;MAEvB,IAAMC,QAAA,GAAW,KAAK9B,QAAA,CAAS8B,QAAA;MAE/B,IAAIA,QAAA,IAAYA,QAAA,CAASC,UAAA,EAAY;QAEnCF,QAAA,CAASG,WAAA,CAAY7C,SAAS;QAC9B,KAAKa,QAAA,CAAS8B,QAAA,CAASC,UAAA,CAAWpB,KAAA,CAAMsB,GAAA,CAAI9C,SAAA,CAAU+C,CAAA,EAAG/C,SAAA,CAAUgD,CAAC;MAErE;IAEF;EAAA;EAAA,OAAA9C,SAAA;AAAA,EA7CqB+C,IAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}